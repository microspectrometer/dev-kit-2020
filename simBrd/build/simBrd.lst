
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000006e8  0000077c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080015c  0080015c  000007d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ed6  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f0  00000000  00000000  00004a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001799  00000000  00000000  00005c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a7c  00000000  00000000  00007418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014a0  00000000  00000000  00007e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ff7  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  0000b32b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 36       	cpi	r26, 0x63	; 99
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <main>
  9e:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

inline void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
}

inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  bc:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <ToggleBit>:
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	40 81       	ld	r20, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <ToggleBit+0xc>
  de:	22 0f       	add	r18, r18
  e0:	6a 95       	dec	r22
  e2:	ea f7       	brpl	.-6      	; 0xde <ToggleBit+0xa>
  e4:	24 27       	eor	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <BitIsSet+0xe>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <BitIsSet+0xa>
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	28 23       	and	r18, r24
 100:	39 23       	and	r19, r25
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	23 2b       	or	r18, r19
 106:	09 f4       	brne	.+2      	; 0x10a <BitIsSet+0x20>
 108:	80 e0       	ldi	r24, 0x00	; 0
}
 10a:	08 95       	ret

0000010c <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <BitIsClear+0xc>
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <BitIsClear+0x8>
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	99 27       	eor	r25, r25
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	8f 27       	eor	r24, r31
}
 124:	81 70       	andi	r24, 0x01	; 1
 126:	08 95       	ret

00000128 <DebugLedTurnOn_Implementation>:
}
void (*DebugLedTurnOn)(void) = DebugLedTurnOn_Implementation;

void DebugLedTurnOff(void)
{
    ClearBit(ddr_register_, debug_led_);
 128:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__data_end>
 12c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ddr_register_>
 130:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <ddr_register_+0x1>
 134:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000138 <DebugLedTurnRed>:
 138:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__data_end>
 13c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <port_register_>
 140:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <port_register_+0x1>
 144:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000148 <DebugLedTurnGreen_Implementation>:
 148:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__data_end>
 14c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <port_register_>
 150:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <port_register_+0x1>
 154:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000158 <DebugLedInit>:
 158:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <ddr_register_+0x1>
 15c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ddr_register_>
 160:	70 93 60 01 	sts	0x0160, r23	; 0x800160 <port_register_+0x1>
 164:	60 93 5f 01 	sts	0x015F, r22	; 0x80015f <port_register_>
 168:	50 93 5e 01 	sts	0x015E, r21	; 0x80015e <pin_register_+0x1>
 16c:	40 93 5d 01 	sts	0x015D, r20	; 0x80015d <pin_register_>
 170:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <__data_end>
 174:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 178:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 17c:	09 95       	icall
 17e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 182:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 186:	09 94       	ijmp

00000188 <DebugLedToggleColor>:
}
void (*DebugLedTurnRedToShowError)(void) = DebugLedTurnRed;

void DebugLedToggleColor(void)
{
    ToggleBit(port_register_, debug_led_);
 188:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <__data_end>
 18c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <port_register_>
 190:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <port_register_+0x1>
 194:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <ToggleBit>

00000198 <FtSendCommand_Implementation>:
bool (*FtIsBusOk)(void) = FtIsBusOk_Implementation;
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
 19c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtActivateInterface>
 1a0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtActivateInterface+0x1>
 1a4:	09 95       	icall
 1a6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1aa:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1ae:	09 95       	icall
 1b0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 1b4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 1b8:	09 95       	icall
 1ba:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtOutputByte>
 1be:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtOutputByte+0x1>
 1c2:	8c 2f       	mov	r24, r28
 1c4:	09 95       	icall
 1c6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1ca:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1ce:	cf 91       	pop	r28
 1d0:	09 94       	ijmp

000001d2 <FtBusTurnaround_Implementation>:
 1d2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetSlaveDriveBus>
 1d6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetSlaveDriveBus+0x1>
 1da:	09 95       	icall
 1dc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1e0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1e4:	09 95       	icall
 1e6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1ea:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1ee:	09 95       	icall
 1f0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 1f4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 1f8:	09 94       	ijmp

000001fa <FtWrite_Implementation>:
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
 200:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 204:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 208:	09 95       	icall
 20a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 20e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 212:	09 95       	icall
 214:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 218:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 21c:	88 81       	ld	r24, Y
 21e:	09 95       	icall
 220:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 224:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 228:	09 95       	icall
 22a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 22e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	09 94       	ijmp

00000238 <FtLetMasterDriveBus_Implementation>:
 238:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <FtMiosio_ddr>
 23c:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <FtMiosio_ddr+0x1>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <FtLetSlaveDriveBus_Implementation>:
 246:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <FtMiosio_ddr>
 24a:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <FtMiosio_ddr+0x1>
 24e:	10 82       	st	Z, r1
 250:	08 95       	ret

00000252 <FtReadData_Implementation>:
 252:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <FtMiosio_pin>
 256:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <FtMiosio_pin+0x1>
 25a:	80 81       	ld	r24, Z
 25c:	08 95       	ret

0000025e <FtWriteData_Implementation>:
 25e:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <FtMiosio_port>
 262:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <FtMiosio_port+0x1>
 266:	80 83       	st	Z, r24
 268:	08 95       	ret

0000026a <FtActivateInterface_Implementation>:
 26a:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <Ft1248_Ss>
 26e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Ft1248_port>
 272:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Ft1248_port+0x1>
 276:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

0000027a <FtPullData_Implementation>:
 27a:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <Ft1248_Sck>
 27e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Ft1248_port>
 282:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Ft1248_port+0x1>
 286:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

0000028a <FtDeactivateInterface_Implementation>:
 28a:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <Ft1248_Ss>
 28e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Ft1248_port>
 292:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Ft1248_port+0x1>
 296:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000029a <FtPushData_Implementation>:
 29a:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <Ft1248_Sck>
 29e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Ft1248_port>
 2a2:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Ft1248_port+0x1>
 2a6:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000002aa <FtIsBusOk_Implementation>:
 2aa:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <Ft1248_Miso>
 2ae:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Ft1248_pin>
 2b2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Ft1248_pin+0x1>
 2b6:	0c 94 86 00 	jmp	0x10c	; 0x10c <BitIsClear>

000002ba <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 2c2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 2c6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 2ca:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 2cc:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 2d0:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 2d4:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 2d6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 2da:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 2de:	09 95       	icall
 2e0:	c8 2f       	mov	r28, r24
 2e2:	88 23       	and	r24, r24
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 2e6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 2ea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 2ee:	09 95       	icall
 2f0:	f8 01       	movw	r30, r16
 2f2:	80 83       	st	Z, r24
    return true;
}
 2f4:	8c 2f       	mov	r24, r28
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <FtOutputByte_Implementation>:
 2fe:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <FtMiosio_port>
 302:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <FtMiosio_port+0x1>
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 314:	10 91 4c 01 	lds	r17, 0x014C	; 0x80014c <Ft1248_Miso>
 318:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <Ft1248_ddr>
 31c:	d0 91 5a 01 	lds	r29, 0x015A	; 0x80015a <Ft1248_ddr+0x1>
 320:	61 2f       	mov	r22, r17
 322:	ce 01       	movw	r24, r28
 324:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 328:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Ft1248_port>
 32c:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Ft1248_port+0x1>
 330:	61 2f       	mov	r22, r17
 332:	8c 01       	movw	r16, r24
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 338:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <FtMiosio_ddr>
 33c:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <FtMiosio_ddr+0x1>
 340:	10 82       	st	Z, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 342:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <FtMiosio_port>
 346:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <FtMiosio_port+0x1>
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	80 83       	st	Z, r24
}
void FtSckLow(void)
{
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 34e:	f0 90 4d 01 	lds	r15, 0x014D	; 0x80014d <Ft1248_Sck>
 352:	6f 2d       	mov	r22, r15
 354:	c8 01       	movw	r24, r16
 356:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 35a:	6f 2d       	mov	r22, r15
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 362:	f0 90 4e 01 	lds	r15, 0x014E	; 0x80014e <Ft1248_Ss>
 366:	6f 2d       	mov	r22, r15
 368:	c8 01       	movw	r24, r16
 36a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 36e:	6f 2d       	mov	r22, r15
 370:	ce 01       	movw	r24, r28
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 37c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000380 <UsbInit>:
#include "Ft1248.h"
#include "DebugLed.h"

void UsbInit(void)
{
    FtInit();
 380:	0c 94 85 01 	jmp	0x30a	; 0x30a <FtInit>

00000384 <UsbRead>:
}
uint16_t UsbRead(uint8_t *read_buffer)
{
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	8c 01       	movw	r16, r24
    uint16_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 38e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 392:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 396:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <FtCmd_Read>
 39a:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 39c:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 3a0:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 3a4:	09 95       	icall
    if (!has_data_to_read)
 3a6:	88 23       	and	r24, r24
 3a8:	c9 f0       	breq	.+50     	; 0x3dc <UsbRead+0x58>
 3aa:	c0 e0       	ldi	r28, 0x00	; 0
 3ac:	d0 e0       	ldi	r29, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <UsbRead+0x2e>
        FtDeactivateInterface();
        return num_bytes_read;
    }
    while (FtRead(read_buffer++))
    {
        num_bytes_read++;
 3b0:	21 96       	adiw	r28, 0x01	; 1
        // sad path
        DebugLedTurnRedToShowError();
        FtDeactivateInterface();
        return num_bytes_read;
    }
    while (FtRead(read_buffer++))
 3b2:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtRead>
 3b6:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtRead+0x1>
 3ba:	c8 01       	movw	r24, r16
 3bc:	8c 0f       	add	r24, r28
 3be:	9d 1f       	adc	r25, r29
 3c0:	09 95       	icall
 3c2:	81 11       	cpse	r24, r1
 3c4:	f5 cf       	rjmp	.-22     	; 0x3b0 <UsbRead+0x2c>
    {
        num_bytes_read++;
    }

    FtDeactivateInterface();
 3c6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 3ca:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 3ce:	09 95       	icall
    return num_bytes_read;
}
 3d0:	ce 01       	movw	r24, r28
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	08 95       	ret
    FtSendCommand(FtCmd_Read);
    bool has_data_to_read = FtBusTurnaround();
    if (!has_data_to_read)
    {
        // sad path
        DebugLedTurnRedToShowError();
 3dc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3e0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3e4:	09 95       	icall
        FtDeactivateInterface();
 3e6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 3ea:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 3ee:	09 95       	icall
        return num_bytes_read;
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	d0 e0       	ldi	r29, 0x00	; 0
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
 3f4:	ce 01       	movw	r24, r28
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	8c 01       	movw	r16, r24
 40e:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 410:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 414:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 418:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <FtCmd_Write>
 41c:	09 95       	icall
    if (!FtBusTurnaround())
 41e:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 422:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 426:	09 95       	icall
 428:	88 23       	and	r24, r24
 42a:	f1 f0       	breq	.+60     	; 0x468 <UsbWrite+0x68>
 42c:	c0 e0       	ldi	r28, 0x00	; 0
 42e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 430:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtWrite>
 434:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtWrite+0x1>
 438:	c8 01       	movw	r24, r16
 43a:	8c 0f       	add	r24, r28
 43c:	9d 1f       	adc	r25, r29
 43e:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 440:	81 11       	cpse	r24, r1
 442:	0d c0       	rjmp	.+26     	; 0x45e <UsbWrite+0x5e>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 444:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 448:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 44c:	09 95       	icall
    return num_bytes_sent;
}
 44e:	ce 01       	movw	r24, r28
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 45e:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 460:	ce 15       	cp	r28, r14
 462:	df 05       	cpc	r29, r15
 464:	28 f3       	brcs	.-54     	; 0x430 <UsbWrite+0x30>
 466:	ee cf       	rjmp	.-36     	; 0x444 <UsbWrite+0x44>
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        DebugLedTurnRedToShowError();
 468:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 46c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 470:	09 95       	icall
        FtDeactivateInterface();
 472:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 476:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 47a:	09 95       	icall
        return num_bytes_sent;
 47c:	c0 e0       	ldi	r28, 0x00	; 0
 47e:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 480:	ce 01       	movw	r24, r28
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	08 95       	ret

00000490 <UsbHasDataToRead>:
bool UsbHasDataToRead(void) { return FtHasDataToRead(); }
 490:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtHasDataToRead>
 494:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtHasDataToRead+0x1>
 498:	09 94       	ijmp

0000049a <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
 49a:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <ReadSpiStatusRegister>
 49e:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <ReadSpiStatusRegister+0x1>
 4a2:	09 95       	icall
 4a4:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 4a8:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 4ac:	09 94       	ijmp

000004ae <ReadSpiStatusRegister_Implementation>:
 4ae:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Spi_spsr>
 4b2:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <Spi_spsr+0x1>
 4b6:	80 81       	ld	r24, Z
 4b8:	08 95       	ret

000004ba <ReadSpiDataRegister_Implementation>:
 4ba:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Spi_spdr>
 4be:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Spi_spdr+0x1>
 4c2:	80 81       	ld	r24, Z
 4c4:	08 95       	ret

000004c6 <SpiMasterOpenSpi_Implementation>:
 4c6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Spi_Ss>
 4ca:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Spi_port>
 4ce:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Spi_port+0x1>
 4d2:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000004d6 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 4d6:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <Spi_Enable>
 4da:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Spi_spcr>
 4de:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <Spi_spcr+0x1>
 4e2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000004e6 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 4e6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Spi_Ss>
 4ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Spi_port>
 4ee:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Spi_port+0x1>
 4f2:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000004f6 <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 4f6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Spi_InterruptFlag>
 4fa:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Spi_spsr>
 4fe:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Spi_spsr+0x1>
 502:	0c 94 75 00 	jmp	0xea	; 0xea <BitIsSet>

00000506 <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 506:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Spi_Miso>
 50a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Spi_pin>
 50e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <Spi_pin+0x1>
 512:	0c 94 86 00 	jmp	0x10c	; 0x10c <BitIsClear>

00000516 <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
    SlaveSelectIdleHigh();
 51c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 520:	10 91 3d 01 	lds	r17, 0x013D	; 0x80013d <Spi_Miso>
 524:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <Spi_ddr>
 528:	d0 91 4b 01 	lds	r29, 0x014B	; 0x80014b <Spi_ddr+0x1>
 52c:	61 2f       	mov	r22, r17
 52e:	ce 01       	movw	r24, r28
 530:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 534:	61 2f       	mov	r22, r17
 536:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Spi_port>
 53a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Spi_port+0x1>
 53e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 542:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Spi_Ss>
 546:	ce 01       	movw	r24, r28
 548:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 54c:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Spi_Mosi>
 550:	ce 01       	movw	r24, r28
 552:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 556:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Spi_Sck>
 55a:	ce 01       	movw	r24, r28
 55c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 560:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <Spi_spcr>
 564:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <Spi_spcr+0x1>
 568:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Spi_MasterSlaveSelect>
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 572:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_ClockRateBit0>
 576:	ce 01       	movw	r24, r28
 578:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 57c:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Spi_ClockRateBit1>
 580:	ce 01       	movw	r24, r28
 582:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 586:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Spi_DoubleClockRate>
 58a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Spi_spsr>
 58e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Spi_spsr+0x1>
 592:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 596:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <EnableSpi>
 59a:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <EnableSpi+0x1>
 59e:	09 95       	icall
    ClearPendingSpiInterrupt();
 5a0:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <ClearPendingSpiInterrupt>
 5a4:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <ClearPendingSpiInterrupt+0x1>
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
    ClearPendingSpiInterrupt();
 5ae:	09 94       	ijmp

000005b0 <SpiMasterWrite>:
}
void SpiMasterWrite(uint8_t byte_to_send)
{
 5b0:	cf 93       	push	r28
 5b2:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 5b4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SpiMasterOpenSpi>
 5b8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SpiMasterOpenSpi+0x1>
 5bc:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 5be:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Spi_spdr>
 5c2:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Spi_spdr+0x1>
 5c6:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 5c8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SpiTransferIsDone>
 5cc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SpiTransferIsDone+0x1>
 5d0:	09 95       	icall
 5d2:	88 23       	and	r24, r24
 5d4:	c9 f3       	breq	.-14     	; 0x5c8 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 5d6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiMasterCloseSpi>
 5da:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiMasterCloseSpi+0x1>
}
 5de:	cf 91       	pop	r28
void SpiMasterWrite(uint8_t byte_to_send)
{
    SpiMasterOpenSpi();
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
    while (!SpiTransferIsDone()) ;
    SpiMasterCloseSpi();
 5e0:	09 94       	ijmp

000005e2 <SpiMasterRead>:
    EnableSpi();
    ClearPendingSpiInterrupt();
}
void SpiMasterWrite(uint8_t byte_to_send)
{
    SpiMasterOpenSpi();
 5e2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SpiMasterOpenSpi>
 5e6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SpiMasterOpenSpi+0x1>
 5ea:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 5ec:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Spi_spdr>
 5f0:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Spi_spdr+0x1>
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	80 83       	st	Z, r24
    while (!SpiTransferIsDone()) ;
 5f8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SpiTransferIsDone>
 5fc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SpiTransferIsDone+0x1>
 600:	09 95       	icall
 602:	88 23       	and	r24, r24
 604:	c9 f3       	breq	.-14     	; 0x5f8 <SpiMasterRead+0x16>
    SpiMasterCloseSpi();
 606:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiMasterCloseSpi>
 60a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiMasterCloseSpi+0x1>
 60e:	09 95       	icall
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
 610:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 614:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 618:	09 94       	ijmp

0000061a <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 61a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiResponseIsReady>
 61e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiResponseIsReady+0x1>
 622:	09 95       	icall
 624:	88 23       	and	r24, r24
 626:	c9 f3       	breq	.-14     	; 0x61a <SpiMasterWaitForResponse>
}
 628:	08 95       	ret

0000062a <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>:
    }
    UsbWrite(fake_data, nbytes);
    DebugLedTurnRed();
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	00 d0       	rcall	.+0      	; 0x630 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x6>
 630:	00 d0       	rcall	.+0      	; 0x632 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x8>
 632:	1f 92       	push	r1
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	ce 01       	movw	r24, r28
 63a:	05 96       	adiw	r24, 0x05	; 5
 63c:	7c 01       	movw	r14, r24
    while(1) // loop forever responding to the USB host
    {
        if (UsbHasDataToRead())
 63e:	0e 94 48 02 	call	0x490	; 0x490 <UsbHasDataToRead>
 642:	88 23       	and	r24, r24
 644:	e1 f3       	breq	.-8      	; 0x63e <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x14>
        {
            DebugLedToggleColor();
 646:	0e 94 c4 00 	call	0x188	; 0x188 <DebugLedToggleColor>
            uint8_t read_buffer[1];
            UsbRead(read_buffer);
 64a:	c7 01       	movw	r24, r14
 64c:	0e 94 c2 01 	call	0x384	; 0x384 <UsbRead>
            uint8_t cmd = read_buffer[0];
 650:	8d 81       	ldd	r24, Y+5	; 0x05
            if      (cmd == cmd_send_lis_frame) SpiMasterPassLisFrame();
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	d1 f0       	breq	.+52     	; 0x68a <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x60>
            // test commands
            else if (cmd == cmd_send_four_dummy_bytes) DoCmdSendFourDummyBytes();
 656:	82 3f       	cpi	r24, 0xF2	; 242
 658:	91 f7       	brne	.-28     	; 0x63e <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x14>
    /* =====[ Operate ]===== */
    SpiMasterPassLisFrame();
}
void DoCmdSendFourDummyBytes(void)
{
    SpiMasterWrite(cmd_send_four_dummy_bytes);
 65a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <SpiMasterWrite>
 65e:	8e 01       	movw	r16, r28
 660:	0f 5f       	subi	r16, 0xFF	; 255
 662:	1f 4f       	sbci	r17, 0xFF	; 255
    uint8_t fake_data[4]; uint8_t * pfake_data = fake_data;
    uint16_t nbytes = sizeof(fake_data);
    uint16_t byte_counter = 0;
    while (byte_counter++ < nbytes)
    {
        SpiMasterWaitForResponse(); // Slave signals when the response is ready.
 664:	0e 94 0d 03 	call	0x61a	; 0x61a <SpiMasterWaitForResponse>
        *(pfake_data++) = SpiMasterRead();
 668:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SpiMasterRead>
 66c:	f8 01       	movw	r30, r16
 66e:	81 93       	st	Z+, r24
 670:	8f 01       	movw	r16, r30
{
    SpiMasterWrite(cmd_send_four_dummy_bytes);
    uint8_t fake_data[4]; uint8_t * pfake_data = fake_data;
    uint16_t nbytes = sizeof(fake_data);
    uint16_t byte_counter = 0;
    while (byte_counter++ < nbytes)
 672:	ee 16       	cp	r14, r30
 674:	ff 06       	cpc	r15, r31
 676:	b1 f7       	brne	.-20     	; 0x664 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x3a>
    {
        SpiMasterWaitForResponse(); // Slave signals when the response is ready.
        *(pfake_data++) = SpiMasterRead();
    }
    UsbWrite(fake_data, nbytes);
 678:	64 e0       	ldi	r22, 0x04	; 4
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	ce 01       	movw	r24, r28
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	0e 94 00 02 	call	0x400	; 0x400 <UsbWrite>
    DebugLedTurnRed();
 684:	0e 94 9c 00 	call	0x138	; 0x138 <DebugLedTurnRed>
 688:	da cf       	rjmp	.-76     	; 0x63e <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x14>
    // Like SpiMasterPassAdcFrame but it sends a Lis frame, not just ADC readings.
    // Host should print raw bytes, not print unicode characters.
    // Pass each byte out as soon as you get it.
    // Return the number of bytes passed from spi-slave to USB host.
    // TODO: speed this up with macro versions
    SpiMasterWrite(cmd_send_lis_frame);
 68a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <SpiMasterWrite>
    uint16_t byte_counter = 0;
    uint8_t byte_buffer;
    SpiMasterWaitForResponse(); // Slave signals when the response is ready.
 68e:	0e 94 0d 03 	call	0x61a	; 0x61a <SpiMasterWaitForResponse>
 692:	0f e1       	ldi	r16, 0x1F	; 31
 694:	16 e0       	ldi	r17, 0x06	; 6
    while (++byte_counter < sizeof_dummy_frame)
    {
        byte_buffer = SpiMasterRead(); // read first byte
 696:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SpiMasterRead>
 69a:	89 83       	std	Y+1, r24	; 0x01
        // must look for slave response right away or you'll miss it
        SpiMasterWaitForResponse(); // Slave signals the 2nd byte is ready
 69c:	0e 94 0d 03 	call	0x61a	; 0x61a <SpiMasterWaitForResponse>
        UsbWrite(&byte_buffer, 1); // send the first byte out before reading the next
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	0e 94 00 02 	call	0x400	; 0x400 <UsbWrite>
 6ac:	01 50       	subi	r16, 0x01	; 1
 6ae:	11 09       	sbc	r17, r1
    // TODO: speed this up with macro versions
    SpiMasterWrite(cmd_send_lis_frame);
    uint16_t byte_counter = 0;
    uint8_t byte_buffer;
    SpiMasterWaitForResponse(); // Slave signals when the response is ready.
    while (++byte_counter < sizeof_dummy_frame)
 6b0:	91 f7       	brne	.-28     	; 0x696 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x6c>
        byte_buffer = SpiMasterRead(); // read first byte
        // must look for slave response right away or you'll miss it
        SpiMasterWaitForResponse(); // Slave signals the 2nd byte is ready
        UsbWrite(&byte_buffer, 1); // send the first byte out before reading the next
    }
    byte_buffer = SpiMasterRead(); // read last byte
 6b2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <SpiMasterRead>
 6b6:	89 83       	std	Y+1, r24	; 0x01
    UsbWrite(&byte_buffer, 1); // send last byte out
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	ce 01       	movw	r24, r28
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	0e 94 00 02 	call	0x400	; 0x400 <UsbWrite>
 6c4:	bc cf       	rjmp	.-136    	; 0x63e <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x14>

000006c6 <main>:
{
    EchoByte_reads_a_byte_and_writes_it_back_to_the_host(); // PASS 2018-07-28
}
void SetupDebugLed(void)
{
    DebugLedInit(
 6c6:	23 e0       	ldi	r18, 0x03	; 3
 6c8:	46 e2       	ldi	r20, 0x26	; 38
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	68 e2       	ldi	r22, 0x28	; 40
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	87 e2       	ldi	r24, 0x27	; 39
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 ac 00 	call	0x158	; 0x158 <DebugLedInit>
    /* SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_frame_of_adc_readings_and_write_to_USB_host(); */
    /* SpiMaster_get_Lis_frame_and_write_to_USB_host(); */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 6d8:	0e 94 8b 02 	call	0x516	; 0x516 <SpiMasterInit>
    UsbInit();
 6dc:	0e 94 c0 01 	call	0x380	; 0x380 <UsbInit>
    SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave();
 6e0:	0e 94 15 03 	call	0x62a	; 0x62a <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
