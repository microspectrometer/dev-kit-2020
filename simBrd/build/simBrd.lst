
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000226  00800100  00000e74  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051b  00800326  00800326  0000112e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a9a  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001083  00000000  00000000  00003fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000116d  00000000  00000000  00005041  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  000061b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001372  00000000  00000000  000069a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec4  00000000  00000000  00007d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  00008bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 34       	cpi	r26, 0x41	; 65
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 30 04 	call	0x860	; 0x860 <main>
  9e:	0c 94 38 07 	jmp	0xe70	; 0xe70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 116:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <ddr_register_>
 11a:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 128:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <port_register_>
 12c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <__data_end>
 13a:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <port_register_>
 13e:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <ddr_register_+0x1>
 14c:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <ddr_register_>
    port_register_ = port_register;
 150:	70 93 2a 03 	sts	0x032A, r23	; 0x80032a <port_register_+0x1>
 154:	60 93 29 03 	sts	0x0329, r22	; 0x800329 <port_register_>
    pin_register_ = pin_register;
 158:	50 93 28 03 	sts	0x0328, r21	; 0x800328 <pin_register_+0x1>
 15c:	40 93 27 03 	sts	0x0327, r20	; 0x800327 <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <__data_end>
    DebugLedTurnOn();
 164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtActivateInterface>
 182:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtActivateInterface+0x1>
 186:	09 95       	icall
 188:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 18c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 190:	09 95       	icall
 192:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 196:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 19a:	09 95       	icall
 19c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtOutputByte>
 1a0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtOutputByte+0x1>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	09 95       	icall
 1a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ac:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
 1b6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtLetSlaveDriveBus>
 1ba:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtLetSlaveDriveBus+0x1>
 1be:	09 95       	icall
 1c0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1c4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1c8:	09 95       	icall
 1ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ce:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 1d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 1dc:	09 95       	icall
 1de:	08 95       	ret

000001e0 <FtWrite_Implementation>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 1ea:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 1ee:	09 95       	icall
 1f0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1f4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1f8:	09 95       	icall
 1fa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1fe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 202:	88 81       	ld	r24, Y
 204:	09 95       	icall
 206:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 20a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 20e:	09 95       	icall
 210:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 214:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 218:	09 95       	icall
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <FtOutputByte_Implementation>:
 220:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <FtMiosio_port>
 224:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <FtMiosio_port+0x1>
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <FtLetMasterDriveBus_Implementation>:
 22c:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <FtMiosio_ddr>
 230:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <FtMiosio_ddr+0x1>
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <FtLetSlaveDriveBus_Implementation>:
 23a:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <FtMiosio_ddr>
 23e:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <FtMiosio_ddr+0x1>
 242:	10 82       	st	Z, r1
 244:	08 95       	ret

00000246 <FtWriteData_Implementation>:
 246:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <FtMiosio_port>
 24a:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <FtMiosio_port+0x1>
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <FtActivateInterface_Implementation>:
 252:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <Ft1248_Ss>
 256:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 25a:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 262:	08 95       	ret

00000264 <FtPullData_Implementation>:
 264:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <Ft1248_Sck>
 268:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 26c:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 274:	08 95       	ret

00000276 <FtDeactivateInterface_Implementation>:
 276:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <Ft1248_Ss>
 27a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 27e:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 286:	08 95       	ret

00000288 <FtPushData_Implementation>:
 288:	60 91 19 03 	lds	r22, 0x0319	; 0x800319 <Ft1248_Sck>
 28c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 290:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 298:	08 95       	ret

0000029a <FtIsBusOk_Implementation>:
 29a:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <Ft1248_Miso>
 29e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <Ft1248_pin>
 2a2:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <Ft1248_pin+0x1>
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 2aa:	08 95       	ret

000002ac <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2ac:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <Ft1248_Miso>
 2b0:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Ft1248_ddr>
 2b4:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <Ft1248_ddr+0x1>
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2bc:	08 95       	ret

000002be <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2be:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <Ft1248_Miso>
 2c2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 2c6:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2ce:	08 95       	ret

000002d0 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2d0:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <FtMiosio_ddr>
 2d4:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <FtMiosio_ddr+0x1>
 2d8:	10 82       	st	Z, r1
 2da:	08 95       	ret

000002dc <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2dc:	e0 91 1b 03 	lds	r30, 0x031B	; 0x80031b <FtMiosio_port>
 2e0:	f0 91 1c 03 	lds	r31, 0x031C	; 0x80031c <FtMiosio_port+0x1>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <FtSckLow>:
}
void FtSckLow(void)
{
 2ea:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ec:	c0 91 19 03 	lds	r28, 0x0319	; 0x800319 <Ft1248_Sck>
 2f0:	6c 2f       	mov	r22, r28
 2f2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 2f6:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2fe:	6c 2f       	mov	r22, r28
 300:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Ft1248_ddr>
 304:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <Ft1248_ddr+0x1>
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <FtSsHigh>:
void FtSsHigh(void)
{
 310:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 312:	c0 91 1a 03 	lds	r28, 0x031A	; 0x80031a <Ft1248_Ss>
 316:	6c 2f       	mov	r22, r28
 318:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Ft1248_port>
 31c:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <Ft1248_port+0x1>
 320:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 324:	6c 2f       	mov	r22, r28
 326:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <Ft1248_ddr>
 32a:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <Ft1248_ddr+0x1>
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 336:	0e 94 56 01 	call	0x2ac	; 0x2ac <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 33a:	0e 94 5f 01 	call	0x2be	; 0x2be <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 33e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 342:	0e 94 6e 01 	call	0x2dc	; 0x2dc <FtEnablePullupsOnMiosio>
    FtSckLow();
 346:	0e 94 75 01 	call	0x2ea	; 0x2ea <FtSckLow>
    FtSsHigh();
 34a:	0e 94 88 01 	call	0x310	; 0x310 <FtSsHigh>
 34e:	08 95       	ret

00000350 <UsbInit>:
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
 350:	0e 94 9b 01 	call	0x336	; 0x336 <FtInit>
 354:	08 95       	ret

00000356 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
 364:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 366:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtSendCommand>
 36a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtSendCommand+0x1>
 36e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <FtCmd_Write>
 372:	09 95       	icall
    if (!FtBusTurnaround())
 374:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtBusTurnaround>
 378:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtBusTurnaround+0x1>
 37c:	09 95       	icall
 37e:	81 11       	cpse	r24, r1
 380:	0d c0       	rjmp	.+26     	; 0x39c <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 382:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 386:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 38a:	09 95       	icall
        FtDeactivateInterface();
 38c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 390:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 394:	09 95       	icall
        return num_bytes_sent;
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	15 c0       	rjmp	.+42     	; 0x3c6 <UsbWrite+0x70>
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 3a0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtWrite>
 3a4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtWrite+0x1>
 3a8:	c8 01       	movw	r24, r16
 3aa:	8c 0f       	add	r24, r28
 3ac:	9d 1f       	adc	r25, r29
 3ae:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 3b0:	88 23       	and	r24, r24
 3b2:	21 f0       	breq	.+8      	; 0x3bc <UsbWrite+0x66>
 3b4:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 3b6:	ce 15       	cp	r28, r14
 3b8:	df 05       	cpc	r29, r15
 3ba:	90 f3       	brcs	.-28     	; 0x3a0 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 3bc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 3c0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 3c4:	09 95       	icall
    return num_bytes_sent;
}
 3c6:	ce 01       	movw	r24, r28
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	08 95       	ret

000003d6 <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
 3d6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <ReadSpiStatusRegister>
 3da:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <ReadSpiStatusRegister+0x1>
 3de:	09 95       	icall
 3e0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 3e4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 3e8:	09 95       	icall
 3ea:	08 95       	ret

000003ec <ReadSpiStatusRegister_Implementation>:
 3ec:	e0 91 0e 03 	lds	r30, 0x030E	; 0x80030e <Spi_spsr>
 3f0:	f0 91 0f 03 	lds	r31, 0x030F	; 0x80030f <Spi_spsr+0x1>
 3f4:	80 81       	ld	r24, Z
 3f6:	08 95       	ret

000003f8 <ReadSpiDataRegister_Implementation>:
 3f8:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <Spi_spdr>
 3fc:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <Spi_spdr+0x1>
 400:	80 81       	ld	r24, Z
 402:	08 95       	ret

00000404 <SpiMasterOpenSpi_Implementation>:
 404:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <Spi_Ss>
 408:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Spi_port>
 40c:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <Spi_port+0x1>
 410:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 414:	08 95       	ret

00000416 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 416:	60 91 04 03 	lds	r22, 0x0304	; 0x800304 <Spi_Enable>
 41a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <Spi_spcr>
 41e:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <Spi_spcr+0x1>
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 426:	08 95       	ret

00000428 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 428:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <Spi_Ss>
 42c:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Spi_port>
 430:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <Spi_port+0x1>
 434:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 438:	08 95       	ret

0000043a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 43a:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <Spi_InterruptFlag>
 43e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <Spi_spsr>
 442:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <Spi_spsr+0x1>
 446:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 44a:	08 95       	ret

0000044c <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 44c:	60 91 09 03 	lds	r22, 0x0309	; 0x800309 <Spi_Miso>
 450:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <Spi_pin>
 454:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <Spi_pin+0x1>
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 45c:	08 95       	ret

0000045e <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
    SlaveSelectIdleHigh();
 464:	0e 94 14 02 	call	0x428	; 0x428 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 468:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <Spi_Miso>
 46c:	c0 91 16 03 	lds	r28, 0x0316	; 0x800316 <Spi_ddr>
 470:	d0 91 17 03 	lds	r29, 0x0317	; 0x800317 <Spi_ddr+0x1>
 474:	61 2f       	mov	r22, r17
 476:	ce 01       	movw	r24, r28
 478:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 47c:	61 2f       	mov	r22, r17
 47e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Spi_port>
 482:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <Spi_port+0x1>
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 48a:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <Spi_Ss>
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 494:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <Spi_Mosi>
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 49e:	60 91 08 03 	lds	r22, 0x0308	; 0x800308 <Spi_Sck>
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 4a8:	c0 91 10 03 	lds	r28, 0x0310	; 0x800310 <Spi_spcr>
 4ac:	d0 91 11 03 	lds	r29, 0x0311	; 0x800311 <Spi_spcr+0x1>
 4b0:	60 91 07 03 	lds	r22, 0x0307	; 0x800307 <Spi_MasterSlaveSelect>
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 4ba:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <Spi_ClockRateBit0>
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 4c4:	60 91 05 03 	lds	r22, 0x0305	; 0x800305 <Spi_ClockRateBit1>
 4c8:	ce 01       	movw	r24, r28
 4ca:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 4ce:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <Spi_DoubleClockRate>
 4d2:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <Spi_spsr>
 4d6:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <Spi_spsr+0x1>
 4da:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 4de:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <EnableSpi>
 4e2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <EnableSpi+0x1>
 4e6:	09 95       	icall
    ClearPendingSpiInterrupt();
 4e8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <ClearPendingSpiInterrupt>
 4ec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <ClearPendingSpiInterrupt+0x1>
 4f0:	09 95       	icall
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 4fe:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <SpiMasterOpenSpi>
 502:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <SpiMasterOpenSpi+0x1>
 506:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 508:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <Spi_spdr>
 50c:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <Spi_spdr+0x1>
 510:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 512:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <SpiTransferIsDone>
 516:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <SpiTransferIsDone+0x1>
 51a:	09 95       	icall
 51c:	88 23       	and	r24, r24
 51e:	c9 f3       	breq	.-14     	; 0x512 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 520:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiMasterCloseSpi>
 524:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiMasterCloseSpi+0x1>
 528:	09 95       	icall
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <SpiMasterRead>:
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    return ReadSpiDataRegister();
 534:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 538:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 53c:	09 95       	icall
}
 53e:	08 95       	ret

00000540 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 540:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <SpiResponseIsReady>
 544:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <SpiResponseIsReady+0x1>
 548:	09 95       	icall
 54a:	88 23       	and	r24, r24
 54c:	c9 f3       	breq	.-14     	; 0x540 <SpiMasterWaitForResponse>
}
 54e:	08 95       	ret

00000550 <AddTestResultStringLengths>:
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-08 */
    /* Get_several_bytes_from_slave_and_write_bytes_to_USB_host(); // PASS 2018-08-08 */
    Get_a_frame_from_slave_and_write_frame_to_USB_host(); // PASS 2018-08-09
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	e5 e0       	ldi	r30, 0x05	; 5
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ec 0f       	add	r30, r28
 55e:	fd 1f       	adc	r31, r29
 560:	01 90       	ld	r0, Z+
 562:	00 20       	and	r0, r0
 564:	e9 f7       	brne	.-6      	; 0x560 <AddTestResultStringLengths+0x10>
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	cf 01       	movw	r24, r30
 56a:	25 e0       	ldi	r18, 0x05	; 5
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	2c 0f       	add	r18, r28
 570:	3d 1f       	adc	r19, r29
 572:	82 1b       	sub	r24, r18
 574:	93 0b       	sbc	r25, r19
 576:	de 01       	movw	r26, r28
 578:	1c 96       	adiw	r26, 0x0c	; 12
 57a:	fd 01       	movw	r30, r26
 57c:	01 90       	ld	r0, Z+
 57e:	00 20       	and	r0, r0
 580:	e9 f7       	brne	.-6      	; 0x57c <AddTestResultStringLengths+0x2c>
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	ea 1b       	sub	r30, r26
 586:	fb 0b       	sbc	r31, r27
 588:	9e 01       	movw	r18, r28
 58a:	23 5a       	subi	r18, 0xA3	; 163
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	d9 01       	movw	r26, r18
 590:	0d 90       	ld	r0, X+
 592:	00 20       	and	r0, r0
 594:	e9 f7       	brne	.-6      	; 0x590 <AddTestResultStringLengths+0x40>
 596:	11 97       	sbiw	r26, 0x01	; 1
 598:	a2 1b       	sub	r26, r18
 59a:	b3 0b       	sbc	r27, r19
 59c:	8e 0f       	add	r24, r30
 59e:	8a 0f       	add	r24, r26
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <PrintTestResultInColor>:
 5a6:	cf 92       	push	r12
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	cd 55       	subi	r28, 0x5D	; 93
 5bc:	d1 09       	sbc	r29, r1
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	cd b6       	in	r12, 0x3d	; 61
 5ca:	de b6       	in	r13, 0x3e	; 62
 5cc:	2d b7       	in	r18, 0x3d	; 61
 5ce:	3e b7       	in	r19, 0x3e	; 62
 5d0:	2d 55       	subi	r18, 0x5D	; 93
 5d2:	31 09       	sbc	r19, r1
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	3e bf       	out	0x3e, r19	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	2d bf       	out	0x3d, r18	; 61
 5de:	ad b7       	in	r26, 0x3d	; 61
 5e0:	be b7       	in	r27, 0x3e	; 62
 5e2:	11 96       	adiw	r26, 0x01	; 1
 5e4:	8d e5       	ldi	r24, 0x5D	; 93
 5e6:	fe 01       	movw	r30, r28
 5e8:	e8 59       	subi	r30, 0x98	; 152
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255
 5ec:	01 90       	ld	r0, Z+
 5ee:	0d 92       	st	X+, r0
 5f0:	8a 95       	dec	r24
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <PrintTestResultInColor+0x46>
 5f4:	0e 94 a8 02 	call	0x550	; 0x550 <AddTestResultStringLengths>
 5f8:	2d b7       	in	r18, 0x3d	; 61
 5fa:	3e b7       	in	r19, 0x3e	; 62
 5fc:	23 5a       	subi	r18, 0xA3	; 163
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	3e bf       	out	0x3e, r19	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	2d bf       	out	0x3d, r18	; 61
 60a:	08 2f       	mov	r16, r24
 60c:	10 e0       	ldi	r17, 0x00	; 0
 60e:	03 5e       	subi	r16, 0xE3	; 227
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	8d b7       	in	r24, 0x3d	; 61
 614:	9e b7       	in	r25, 0x3e	; 62
 616:	80 1b       	sub	r24, r16
 618:	91 0b       	sbc	r25, r17
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	9e bf       	out	0x3e, r25	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	8d bf       	out	0x3d, r24	; 61
 624:	2d b7       	in	r18, 0x3d	; 61
 626:	3e b7       	in	r19, 0x3e	; 62
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
 62c:	79 01       	movw	r14, r18
 62e:	8d e5       	ldi	r24, 0x5D	; 93
 630:	fe 01       	movw	r30, r28
 632:	e8 59       	subi	r30, 0x98	; 152
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	de 01       	movw	r26, r28
 638:	11 96       	adiw	r26, 0x01	; 1
 63a:	01 90       	ld	r0, Z+
 63c:	0d 92       	st	X+, r0
 63e:	8a 95       	dec	r24
 640:	e1 f7       	brne	.-8      	; 0x63a <PrintTestResultInColor+0x94>
 642:	6c e4       	ldi	r22, 0x4C	; 76
 644:	72 e0       	ldi	r23, 0x02	; 2
 646:	ce 01       	movw	r24, r28
 648:	87 5a       	subi	r24, 0xA7	; 167
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	0e 94 37 04 	call	0x86e	; 0x86e <strcmp>
 650:	89 2b       	or	r24, r25
 652:	19 f4       	brne	.+6      	; 0x65a <PrintTestResultInColor+0xb4>
 654:	80 ef       	ldi	r24, 0xF0	; 240
 656:	92 e0       	ldi	r25, 0x02	; 2
 658:	02 c0       	rjmp	.+4      	; 0x65e <PrintTestResultInColor+0xb8>
 65a:	8a ee       	ldi	r24, 0xEA	; 234
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	2c ef       	ldi	r18, 0xFC	; 252
 660:	32 e0       	ldi	r19, 0x02	; 2
 662:	3f 93       	push	r19
 664:	2f 93       	push	r18
 666:	9e 01       	movw	r18, r28
 668:	20 54       	subi	r18, 0x40	; 64
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	3f 93       	push	r19
 66e:	2f 93       	push	r18
 670:	9f 93       	push	r25
 672:	8f 93       	push	r24
 674:	ce 01       	movw	r24, r28
 676:	81 59       	subi	r24, 0x91	; 145
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	9f 93       	push	r25
 67c:	8f 93       	push	r24
 67e:	86 ef       	ldi	r24, 0xF6	; 246
 680:	92 e0       	ldi	r25, 0x02	; 2
 682:	9f 93       	push	r25
 684:	8f 93       	push	r24
 686:	88 e6       	ldi	r24, 0x68	; 104
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	8c 0f       	add	r24, r28
 68c:	9d 1f       	adc	r25, r29
 68e:	9f 93       	push	r25
 690:	8f 93       	push	r24
 692:	80 ef       	ldi	r24, 0xF0	; 240
 694:	92 e0       	ldi	r25, 0x02	; 2
 696:	9f 93       	push	r25
 698:	8f 93       	push	r24
 69a:	84 e6       	ldi	r24, 0x64	; 100
 69c:	92 e0       	ldi	r25, 0x02	; 2
 69e:	9f 93       	push	r25
 6a0:	8f 93       	push	r24
 6a2:	1f 93       	push	r17
 6a4:	0f 93       	push	r16
 6a6:	ff 92       	push	r15
 6a8:	ef 92       	push	r14
 6aa:	0e 94 40 04 	call	0x880	; 0x880 <snprintf>
 6ae:	ae 2d       	mov	r26, r14
 6b0:	bf 2d       	mov	r27, r15
 6b2:	fd 01       	movw	r30, r26
 6b4:	01 90       	ld	r0, Z+
 6b6:	00 20       	and	r0, r0
 6b8:	e9 f7       	brne	.-6      	; 0x6b4 <PrintTestResultInColor+0x10e>
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	bf 01       	movw	r22, r30
 6be:	6a 1b       	sub	r22, r26
 6c0:	7b 0b       	sbc	r23, r27
 6c2:	8e 2d       	mov	r24, r14
 6c4:	9f 2d       	mov	r25, r15
 6c6:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 6ca:	2d b7       	in	r18, 0x3d	; 61
 6cc:	3e b7       	in	r19, 0x3e	; 62
 6ce:	2c 5e       	subi	r18, 0xEC	; 236
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	3e bf       	out	0x3e, r19	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	2d bf       	out	0x3d, r18	; 61
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de be       	out	0x3e, r13	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd be       	out	0x3d, r12	; 61
 6e6:	c3 5a       	subi	r28, 0xA3	; 163
 6e8:	df 4f       	sbci	r29, 0xFF	; 255
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <PrintSizeOfSpiSlaveResponse>:
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	ee 97       	sbiw	r28, 0x3e	; 62
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	2c ef       	ldi	r18, 0xFC	; 252
 720:	32 e0       	ldi	r19, 0x02	; 2
 722:	3f 93       	push	r19
 724:	2f 93       	push	r18
 726:	9f 93       	push	r25
 728:	8f 93       	push	r24
 72a:	80 ef       	ldi	r24, 0xF0	; 240
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	9f 93       	push	r25
 730:	8f 93       	push	r24
 732:	86 ef       	ldi	r24, 0xF6	; 246
 734:	92 e0       	ldi	r25, 0x02	; 2
 736:	9f 93       	push	r25
 738:	8f 93       	push	r24
 73a:	8a e9       	ldi	r24, 0x9A	; 154
 73c:	92 e0       	ldi	r25, 0x02	; 2
 73e:	9f 93       	push	r25
 740:	8f 93       	push	r24
 742:	1f 92       	push	r1
 744:	8e e3       	ldi	r24, 0x3E	; 62
 746:	8f 93       	push	r24
 748:	8e 01       	movw	r16, r28
 74a:	0f 5f       	subi	r16, 0xFF	; 255
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	1f 93       	push	r17
 750:	0f 93       	push	r16
 752:	0e 94 40 04 	call	0x880	; 0x880 <snprintf>
 756:	f8 01       	movw	r30, r16
 758:	01 90       	ld	r0, Z+
 75a:	00 20       	and	r0, r0
 75c:	e9 f7       	brne	.-6      	; 0x758 <PrintSizeOfSpiSlaveResponse+0x52>
 75e:	31 97       	sbiw	r30, 0x01	; 1
 760:	bf 01       	movw	r22, r30
 762:	60 1b       	sub	r22, r16
 764:	71 0b       	sbc	r23, r17
 766:	c8 01       	movw	r24, r16
 768:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	ee 96       	adiw	r28, 0x3e	; 62
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	08 95       	ret

0000078c <SetupDebugLed>:
 78c:	23 e0       	ldi	r18, 0x03	; 3
 78e:	46 e2       	ldi	r20, 0x26	; 38
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	68 e2       	ldi	r22, 0x28	; 40
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	87 e2       	ldi	r24, 0x27	; 39
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 79e:	08 95       	ret

000007a0 <SpiMasterReadFakeSensorData>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
 7ae:	cd e2       	ldi	r28, 0x2D	; 45
 7b0:	d3 e0       	ldi	r29, 0x03	; 3
 7b2:	01 e4       	ldi	r16, 0x41	; 65
 7b4:	18 e0       	ldi	r17, 0x08	; 8
 7b6:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 7ba:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 7be:	89 93       	st	Y+, r24
 7c0:	c0 17       	cp	r28, r16
 7c2:	d1 07       	cpc	r29, r17
 7c4:	c1 f7       	brne	.-16     	; 0x7b6 <SpiMasterReadFakeSensorData+0x16>
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	08 95       	ret

000007d0 <Get_a_frame_from_slave_and_write_frame_to_USB_host>:
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	cd 55       	subi	r28, 0x5D	; 93
 7da:	d1 09       	sbc	r29, r1
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
 7ea:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
 7ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <SpiMasterReadFakeSensorData>
 7f2:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 7f6:	8d e5       	ldi	r24, 0x5D	; 93
 7f8:	ee ee       	ldi	r30, 0xEE	; 238
 7fa:	f1 e0       	ldi	r31, 0x01	; 1
 7fc:	de 01       	movw	r26, r28
 7fe:	11 96       	adiw	r26, 0x01	; 1
 800:	01 90       	ld	r0, Z+
 802:	0d 92       	st	X+, r0
 804:	8a 95       	dec	r24
 806:	e1 f7       	brne	.-8      	; 0x800 <Get_a_frame_from_slave_and_write_frame_to_USB_host+0x30>
 808:	8d b7       	in	r24, 0x3d	; 61
 80a:	9e b7       	in	r25, 0x3e	; 62
 80c:	8d 55       	subi	r24, 0x5D	; 93
 80e:	91 09       	sbc	r25, r1
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	f8 94       	cli
 814:	9e bf       	out	0x3e, r25	; 62
 816:	0f be       	out	0x3f, r0	; 63
 818:	8d bf       	out	0x3d, r24	; 61
 81a:	ad b7       	in	r26, 0x3d	; 61
 81c:	be b7       	in	r27, 0x3e	; 62
 81e:	11 96       	adiw	r26, 0x01	; 1
 820:	8d e5       	ldi	r24, 0x5D	; 93
 822:	fe 01       	movw	r30, r28
 824:	31 96       	adiw	r30, 0x01	; 1
 826:	01 90       	ld	r0, Z+
 828:	0d 92       	st	X+, r0
 82a:	8a 95       	dec	r24
 82c:	e1 f7       	brne	.-8      	; 0x826 <Get_a_frame_from_slave_and_write_frame_to_USB_host+0x56>
 82e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <PrintTestResultInColor>
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	f8 94       	cli
 836:	de bf       	out	0x3e, r29	; 62
 838:	0f be       	out	0x3f, r0	; 63
 83a:	cd bf       	out	0x3d, r28	; 61
 83c:	64 e1       	ldi	r22, 0x14	; 20
 83e:	75 e0       	ldi	r23, 0x05	; 5
 840:	8d e2       	ldi	r24, 0x2D	; 45
 842:	93 e0       	ldi	r25, 0x03	; 3
 844:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 848:	0e 94 83 03 	call	0x706	; 0x706 <PrintSizeOfSpiSlaveResponse>
 84c:	c3 5a       	subi	r28, 0xA3	; 163
 84e:	df 4f       	sbci	r29, 0xFF	; 255
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 860:	0e 94 c6 03 	call	0x78c	; 0x78c <SetupDebugLed>
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-08 */
    /* Get_several_bytes_from_slave_and_write_bytes_to_USB_host(); // PASS 2018-08-08 */
    Get_a_frame_from_slave_and_write_frame_to_USB_host(); // PASS 2018-08-09
 864:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Get_a_frame_from_slave_and_write_frame_to_USB_host>
    SetupDebugLed();
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    test_SpiMaster(); // All test pass 2018-08-03
}
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	08 95       	ret

0000086e <strcmp>:
 86e:	fb 01       	movw	r30, r22
 870:	dc 01       	movw	r26, r24
 872:	8d 91       	ld	r24, X+
 874:	01 90       	ld	r0, Z+
 876:	80 19       	sub	r24, r0
 878:	01 10       	cpse	r0, r1
 87a:	d9 f3       	breq	.-10     	; 0x872 <strcmp+0x4>
 87c:	99 0b       	sbc	r25, r25
 87e:	08 95       	ret

00000880 <snprintf>:
 880:	ae e0       	ldi	r26, 0x0E	; 14
 882:	b0 e0       	ldi	r27, 0x00	; 0
 884:	e6 e4       	ldi	r30, 0x46	; 70
 886:	f4 e0       	ldi	r31, 0x04	; 4
 888:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__prologue_saves__+0x1c>
 88c:	0d 89       	ldd	r16, Y+21	; 0x15
 88e:	1e 89       	ldd	r17, Y+22	; 0x16
 890:	8f 89       	ldd	r24, Y+23	; 0x17
 892:	98 8d       	ldd	r25, Y+24	; 0x18
 894:	26 e0       	ldi	r18, 0x06	; 6
 896:	2c 83       	std	Y+4, r18	; 0x04
 898:	1a 83       	std	Y+2, r17	; 0x02
 89a:	09 83       	std	Y+1, r16	; 0x01
 89c:	97 ff       	sbrs	r25, 7
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <snprintf+0x24>
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e8       	ldi	r25, 0x80	; 128
 8a4:	01 97       	sbiw	r24, 0x01	; 1
 8a6:	9e 83       	std	Y+6, r25	; 0x06
 8a8:	8d 83       	std	Y+5, r24	; 0x05
 8aa:	ae 01       	movw	r20, r28
 8ac:	45 5e       	subi	r20, 0xE5	; 229
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	69 8d       	ldd	r22, Y+25	; 0x19
 8b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
 8b4:	ce 01       	movw	r24, r28
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <vfprintf>
 8bc:	4d 81       	ldd	r20, Y+5	; 0x05
 8be:	5e 81       	ldd	r21, Y+6	; 0x06
 8c0:	57 fd       	sbrc	r21, 7
 8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <snprintf+0x58>
 8c4:	2f 81       	ldd	r18, Y+7	; 0x07
 8c6:	38 85       	ldd	r19, Y+8	; 0x08
 8c8:	42 17       	cp	r20, r18
 8ca:	53 07       	cpc	r21, r19
 8cc:	0c f4       	brge	.+2      	; 0x8d0 <snprintf+0x50>
 8ce:	9a 01       	movw	r18, r20
 8d0:	f8 01       	movw	r30, r16
 8d2:	e2 0f       	add	r30, r18
 8d4:	f3 1f       	adc	r31, r19
 8d6:	10 82       	st	Z, r1
 8d8:	2e 96       	adiw	r28, 0x0e	; 14
 8da:	e4 e0       	ldi	r30, 0x04	; 4
 8dc:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__epilogue_restores__+0x1c>

000008e0 <vfprintf>:
 8e0:	ab e0       	ldi	r26, 0x0B	; 11
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	e6 e7       	ldi	r30, 0x76	; 118
 8e6:	f4 e0       	ldi	r31, 0x04	; 4
 8e8:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__prologue_saves__>
 8ec:	6c 01       	movw	r12, r24
 8ee:	7b 01       	movw	r14, r22
 8f0:	8a 01       	movw	r16, r20
 8f2:	fc 01       	movw	r30, r24
 8f4:	17 82       	std	Z+7, r1	; 0x07
 8f6:	16 82       	std	Z+6, r1	; 0x06
 8f8:	83 81       	ldd	r24, Z+3	; 0x03
 8fa:	81 ff       	sbrs	r24, 1
 8fc:	cc c1       	rjmp	.+920    	; 0xc96 <__stack+0x397>
 8fe:	ce 01       	movw	r24, r28
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	3c 01       	movw	r6, r24
 904:	f6 01       	movw	r30, r12
 906:	93 81       	ldd	r25, Z+3	; 0x03
 908:	f7 01       	movw	r30, r14
 90a:	93 fd       	sbrc	r25, 3
 90c:	85 91       	lpm	r24, Z+
 90e:	93 ff       	sbrs	r25, 3
 910:	81 91       	ld	r24, Z+
 912:	7f 01       	movw	r14, r30
 914:	88 23       	and	r24, r24
 916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
 918:	ba c1       	rjmp	.+884    	; 0xc8e <__stack+0x38f>
 91a:	85 32       	cpi	r24, 0x25	; 37
 91c:	39 f4       	brne	.+14     	; 0x92c <__stack+0x2d>
 91e:	93 fd       	sbrc	r25, 3
 920:	85 91       	lpm	r24, Z+
 922:	93 ff       	sbrs	r25, 3
 924:	81 91       	ld	r24, Z+
 926:	7f 01       	movw	r14, r30
 928:	85 32       	cpi	r24, 0x25	; 37
 92a:	29 f4       	brne	.+10     	; 0x936 <__stack+0x37>
 92c:	b6 01       	movw	r22, r12
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 934:	e7 cf       	rjmp	.-50     	; 0x904 <__stack+0x5>
 936:	91 2c       	mov	r9, r1
 938:	21 2c       	mov	r2, r1
 93a:	31 2c       	mov	r3, r1
 93c:	ff e1       	ldi	r31, 0x1F	; 31
 93e:	f3 15       	cp	r31, r3
 940:	d8 f0       	brcs	.+54     	; 0x978 <__stack+0x79>
 942:	8b 32       	cpi	r24, 0x2B	; 43
 944:	79 f0       	breq	.+30     	; 0x964 <__stack+0x65>
 946:	38 f4       	brcc	.+14     	; 0x956 <__stack+0x57>
 948:	80 32       	cpi	r24, 0x20	; 32
 94a:	79 f0       	breq	.+30     	; 0x96a <__stack+0x6b>
 94c:	83 32       	cpi	r24, 0x23	; 35
 94e:	a1 f4       	brne	.+40     	; 0x978 <__stack+0x79>
 950:	23 2d       	mov	r18, r3
 952:	20 61       	ori	r18, 0x10	; 16
 954:	1d c0       	rjmp	.+58     	; 0x990 <__stack+0x91>
 956:	8d 32       	cpi	r24, 0x2D	; 45
 958:	61 f0       	breq	.+24     	; 0x972 <__stack+0x73>
 95a:	80 33       	cpi	r24, 0x30	; 48
 95c:	69 f4       	brne	.+26     	; 0x978 <__stack+0x79>
 95e:	23 2d       	mov	r18, r3
 960:	21 60       	ori	r18, 0x01	; 1
 962:	16 c0       	rjmp	.+44     	; 0x990 <__stack+0x91>
 964:	83 2d       	mov	r24, r3
 966:	82 60       	ori	r24, 0x02	; 2
 968:	38 2e       	mov	r3, r24
 96a:	e3 2d       	mov	r30, r3
 96c:	e4 60       	ori	r30, 0x04	; 4
 96e:	3e 2e       	mov	r3, r30
 970:	2a c0       	rjmp	.+84     	; 0x9c6 <__stack+0xc7>
 972:	f3 2d       	mov	r31, r3
 974:	f8 60       	ori	r31, 0x08	; 8
 976:	1d c0       	rjmp	.+58     	; 0x9b2 <__stack+0xb3>
 978:	37 fc       	sbrc	r3, 7
 97a:	2d c0       	rjmp	.+90     	; 0x9d6 <__stack+0xd7>
 97c:	20 ed       	ldi	r18, 0xD0	; 208
 97e:	28 0f       	add	r18, r24
 980:	2a 30       	cpi	r18, 0x0A	; 10
 982:	40 f0       	brcs	.+16     	; 0x994 <__stack+0x95>
 984:	8e 32       	cpi	r24, 0x2E	; 46
 986:	b9 f4       	brne	.+46     	; 0x9b6 <__stack+0xb7>
 988:	36 fc       	sbrc	r3, 6
 98a:	81 c1       	rjmp	.+770    	; 0xc8e <__stack+0x38f>
 98c:	23 2d       	mov	r18, r3
 98e:	20 64       	ori	r18, 0x40	; 64
 990:	32 2e       	mov	r3, r18
 992:	19 c0       	rjmp	.+50     	; 0x9c6 <__stack+0xc7>
 994:	36 fe       	sbrs	r3, 6
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <__stack+0xa5>
 998:	8a e0       	ldi	r24, 0x0A	; 10
 99a:	98 9e       	mul	r9, r24
 99c:	20 0d       	add	r18, r0
 99e:	11 24       	eor	r1, r1
 9a0:	92 2e       	mov	r9, r18
 9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__stack+0xc7>
 9a4:	ea e0       	ldi	r30, 0x0A	; 10
 9a6:	2e 9e       	mul	r2, r30
 9a8:	20 0d       	add	r18, r0
 9aa:	11 24       	eor	r1, r1
 9ac:	22 2e       	mov	r2, r18
 9ae:	f3 2d       	mov	r31, r3
 9b0:	f0 62       	ori	r31, 0x20	; 32
 9b2:	3f 2e       	mov	r3, r31
 9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__stack+0xc7>
 9b6:	8c 36       	cpi	r24, 0x6C	; 108
 9b8:	21 f4       	brne	.+8      	; 0x9c2 <__stack+0xc3>
 9ba:	83 2d       	mov	r24, r3
 9bc:	80 68       	ori	r24, 0x80	; 128
 9be:	38 2e       	mov	r3, r24
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
 9c2:	88 36       	cpi	r24, 0x68	; 104
 9c4:	41 f4       	brne	.+16     	; 0x9d6 <__stack+0xd7>
 9c6:	f7 01       	movw	r30, r14
 9c8:	93 fd       	sbrc	r25, 3
 9ca:	85 91       	lpm	r24, Z+
 9cc:	93 ff       	sbrs	r25, 3
 9ce:	81 91       	ld	r24, Z+
 9d0:	7f 01       	movw	r14, r30
 9d2:	81 11       	cpse	r24, r1
 9d4:	b3 cf       	rjmp	.-154    	; 0x93c <__stack+0x3d>
 9d6:	98 2f       	mov	r25, r24
 9d8:	9f 7d       	andi	r25, 0xDF	; 223
 9da:	95 54       	subi	r25, 0x45	; 69
 9dc:	93 30       	cpi	r25, 0x03	; 3
 9de:	28 f4       	brcc	.+10     	; 0x9ea <__stack+0xeb>
 9e0:	0c 5f       	subi	r16, 0xFC	; 252
 9e2:	1f 4f       	sbci	r17, 0xFF	; 255
 9e4:	9f e3       	ldi	r25, 0x3F	; 63
 9e6:	99 83       	std	Y+1, r25	; 0x01
 9e8:	0d c0       	rjmp	.+26     	; 0xa04 <__stack+0x105>
 9ea:	83 36       	cpi	r24, 0x63	; 99
 9ec:	31 f0       	breq	.+12     	; 0x9fa <__stack+0xfb>
 9ee:	83 37       	cpi	r24, 0x73	; 115
 9f0:	71 f0       	breq	.+28     	; 0xa0e <__stack+0x10f>
 9f2:	83 35       	cpi	r24, 0x53	; 83
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__stack+0xf9>
 9f6:	59 c0       	rjmp	.+178    	; 0xaaa <__stack+0x1ab>
 9f8:	21 c0       	rjmp	.+66     	; 0xa3c <__stack+0x13d>
 9fa:	f8 01       	movw	r30, r16
 9fc:	80 81       	ld	r24, Z
 9fe:	89 83       	std	Y+1, r24	; 0x01
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	88 24       	eor	r8, r8
 a06:	83 94       	inc	r8
 a08:	91 2c       	mov	r9, r1
 a0a:	53 01       	movw	r10, r6
 a0c:	13 c0       	rjmp	.+38     	; 0xa34 <__stack+0x135>
 a0e:	28 01       	movw	r4, r16
 a10:	f2 e0       	ldi	r31, 0x02	; 2
 a12:	4f 0e       	add	r4, r31
 a14:	51 1c       	adc	r5, r1
 a16:	f8 01       	movw	r30, r16
 a18:	a0 80       	ld	r10, Z
 a1a:	b1 80       	ldd	r11, Z+1	; 0x01
 a1c:	36 fe       	sbrs	r3, 6
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <__stack+0x127>
 a20:	69 2d       	mov	r22, r9
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__stack+0x12b>
 a26:	6f ef       	ldi	r22, 0xFF	; 255
 a28:	7f ef       	ldi	r23, 0xFF	; 255
 a2a:	c5 01       	movw	r24, r10
 a2c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <strnlen>
 a30:	4c 01       	movw	r8, r24
 a32:	82 01       	movw	r16, r4
 a34:	f3 2d       	mov	r31, r3
 a36:	ff 77       	andi	r31, 0x7F	; 127
 a38:	3f 2e       	mov	r3, r31
 a3a:	16 c0       	rjmp	.+44     	; 0xa68 <__stack+0x169>
 a3c:	28 01       	movw	r4, r16
 a3e:	22 e0       	ldi	r18, 0x02	; 2
 a40:	42 0e       	add	r4, r18
 a42:	51 1c       	adc	r5, r1
 a44:	f8 01       	movw	r30, r16
 a46:	a0 80       	ld	r10, Z
 a48:	b1 80       	ldd	r11, Z+1	; 0x01
 a4a:	36 fe       	sbrs	r3, 6
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <__stack+0x155>
 a4e:	69 2d       	mov	r22, r9
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x159>
 a54:	6f ef       	ldi	r22, 0xFF	; 255
 a56:	7f ef       	ldi	r23, 0xFF	; 255
 a58:	c5 01       	movw	r24, r10
 a5a:	0e 94 51 06 	call	0xca2	; 0xca2 <strnlen_P>
 a5e:	4c 01       	movw	r8, r24
 a60:	f3 2d       	mov	r31, r3
 a62:	f0 68       	ori	r31, 0x80	; 128
 a64:	3f 2e       	mov	r3, r31
 a66:	82 01       	movw	r16, r4
 a68:	33 fc       	sbrc	r3, 3
 a6a:	1b c0       	rjmp	.+54     	; 0xaa2 <__stack+0x1a3>
 a6c:	82 2d       	mov	r24, r2
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	88 16       	cp	r8, r24
 a72:	99 06       	cpc	r9, r25
 a74:	b0 f4       	brcc	.+44     	; 0xaa2 <__stack+0x1a3>
 a76:	b6 01       	movw	r22, r12
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 a80:	2a 94       	dec	r2
 a82:	f4 cf       	rjmp	.-24     	; 0xa6c <__stack+0x16d>
 a84:	f5 01       	movw	r30, r10
 a86:	37 fc       	sbrc	r3, 7
 a88:	85 91       	lpm	r24, Z+
 a8a:	37 fe       	sbrs	r3, 7
 a8c:	81 91       	ld	r24, Z+
 a8e:	5f 01       	movw	r10, r30
 a90:	b6 01       	movw	r22, r12
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 a98:	21 10       	cpse	r2, r1
 a9a:	2a 94       	dec	r2
 a9c:	21 e0       	ldi	r18, 0x01	; 1
 a9e:	82 1a       	sub	r8, r18
 aa0:	91 08       	sbc	r9, r1
 aa2:	81 14       	cp	r8, r1
 aa4:	91 04       	cpc	r9, r1
 aa6:	71 f7       	brne	.-36     	; 0xa84 <__stack+0x185>
 aa8:	e8 c0       	rjmp	.+464    	; 0xc7a <__stack+0x37b>
 aaa:	84 36       	cpi	r24, 0x64	; 100
 aac:	11 f0       	breq	.+4      	; 0xab2 <__stack+0x1b3>
 aae:	89 36       	cpi	r24, 0x69	; 105
 ab0:	41 f5       	brne	.+80     	; 0xb02 <__stack+0x203>
 ab2:	f8 01       	movw	r30, r16
 ab4:	37 fe       	sbrs	r3, 7
 ab6:	07 c0       	rjmp	.+14     	; 0xac6 <__stack+0x1c7>
 ab8:	60 81       	ld	r22, Z
 aba:	71 81       	ldd	r23, Z+1	; 0x01
 abc:	82 81       	ldd	r24, Z+2	; 0x02
 abe:	93 81       	ldd	r25, Z+3	; 0x03
 ac0:	0c 5f       	subi	r16, 0xFC	; 252
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	08 c0       	rjmp	.+16     	; 0xad6 <__stack+0x1d7>
 ac6:	60 81       	ld	r22, Z
 ac8:	71 81       	ldd	r23, Z+1	; 0x01
 aca:	07 2e       	mov	r0, r23
 acc:	00 0c       	add	r0, r0
 ace:	88 0b       	sbc	r24, r24
 ad0:	99 0b       	sbc	r25, r25
 ad2:	0e 5f       	subi	r16, 0xFE	; 254
 ad4:	1f 4f       	sbci	r17, 0xFF	; 255
 ad6:	f3 2d       	mov	r31, r3
 ad8:	ff 76       	andi	r31, 0x6F	; 111
 ada:	3f 2e       	mov	r3, r31
 adc:	97 ff       	sbrs	r25, 7
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__stack+0x1f3>
 ae0:	90 95       	com	r25
 ae2:	80 95       	com	r24
 ae4:	70 95       	com	r23
 ae6:	61 95       	neg	r22
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	f0 68       	ori	r31, 0x80	; 128
 af0:	3f 2e       	mov	r3, r31
 af2:	2a e0       	ldi	r18, 0x0A	; 10
 af4:	30 e0       	ldi	r19, 0x00	; 0
 af6:	a3 01       	movw	r20, r6
 af8:	0e 94 a3 06 	call	0xd46	; 0xd46 <__ultoa_invert>
 afc:	88 2e       	mov	r8, r24
 afe:	86 18       	sub	r8, r6
 b00:	45 c0       	rjmp	.+138    	; 0xb8c <__stack+0x28d>
 b02:	85 37       	cpi	r24, 0x75	; 117
 b04:	31 f4       	brne	.+12     	; 0xb12 <__stack+0x213>
 b06:	23 2d       	mov	r18, r3
 b08:	2f 7e       	andi	r18, 0xEF	; 239
 b0a:	b2 2e       	mov	r11, r18
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	25 c0       	rjmp	.+74     	; 0xb5c <__stack+0x25d>
 b12:	93 2d       	mov	r25, r3
 b14:	99 7f       	andi	r25, 0xF9	; 249
 b16:	b9 2e       	mov	r11, r25
 b18:	8f 36       	cpi	r24, 0x6F	; 111
 b1a:	c1 f0       	breq	.+48     	; 0xb4c <__stack+0x24d>
 b1c:	18 f4       	brcc	.+6      	; 0xb24 <__stack+0x225>
 b1e:	88 35       	cpi	r24, 0x58	; 88
 b20:	79 f0       	breq	.+30     	; 0xb40 <__stack+0x241>
 b22:	b5 c0       	rjmp	.+362    	; 0xc8e <__stack+0x38f>
 b24:	80 37       	cpi	r24, 0x70	; 112
 b26:	19 f0       	breq	.+6      	; 0xb2e <__stack+0x22f>
 b28:	88 37       	cpi	r24, 0x78	; 120
 b2a:	21 f0       	breq	.+8      	; 0xb34 <__stack+0x235>
 b2c:	b0 c0       	rjmp	.+352    	; 0xc8e <__stack+0x38f>
 b2e:	e9 2f       	mov	r30, r25
 b30:	e0 61       	ori	r30, 0x10	; 16
 b32:	be 2e       	mov	r11, r30
 b34:	b4 fe       	sbrs	r11, 4
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <__stack+0x253>
 b38:	fb 2d       	mov	r31, r11
 b3a:	f4 60       	ori	r31, 0x04	; 4
 b3c:	bf 2e       	mov	r11, r31
 b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__stack+0x253>
 b40:	34 fe       	sbrs	r3, 4
 b42:	0a c0       	rjmp	.+20     	; 0xb58 <__stack+0x259>
 b44:	29 2f       	mov	r18, r25
 b46:	26 60       	ori	r18, 0x06	; 6
 b48:	b2 2e       	mov	r11, r18
 b4a:	06 c0       	rjmp	.+12     	; 0xb58 <__stack+0x259>
 b4c:	28 e0       	ldi	r18, 0x08	; 8
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	05 c0       	rjmp	.+10     	; 0xb5c <__stack+0x25d>
 b52:	20 e1       	ldi	r18, 0x10	; 16
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <__stack+0x25d>
 b58:	20 e1       	ldi	r18, 0x10	; 16
 b5a:	32 e0       	ldi	r19, 0x02	; 2
 b5c:	f8 01       	movw	r30, r16
 b5e:	b7 fe       	sbrs	r11, 7
 b60:	07 c0       	rjmp	.+14     	; 0xb70 <__stack+0x271>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	0c 5f       	subi	r16, 0xFC	; 252
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	06 c0       	rjmp	.+12     	; 0xb7c <__stack+0x27d>
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	0e 5f       	subi	r16, 0xFE	; 254
 b7a:	1f 4f       	sbci	r17, 0xFF	; 255
 b7c:	a3 01       	movw	r20, r6
 b7e:	0e 94 a3 06 	call	0xd46	; 0xd46 <__ultoa_invert>
 b82:	88 2e       	mov	r8, r24
 b84:	86 18       	sub	r8, r6
 b86:	fb 2d       	mov	r31, r11
 b88:	ff 77       	andi	r31, 0x7F	; 127
 b8a:	3f 2e       	mov	r3, r31
 b8c:	36 fe       	sbrs	r3, 6
 b8e:	0d c0       	rjmp	.+26     	; 0xbaa <__stack+0x2ab>
 b90:	23 2d       	mov	r18, r3
 b92:	2e 7f       	andi	r18, 0xFE	; 254
 b94:	a2 2e       	mov	r10, r18
 b96:	89 14       	cp	r8, r9
 b98:	58 f4       	brcc	.+22     	; 0xbb0 <__stack+0x2b1>
 b9a:	34 fe       	sbrs	r3, 4
 b9c:	0b c0       	rjmp	.+22     	; 0xbb4 <__stack+0x2b5>
 b9e:	32 fc       	sbrc	r3, 2
 ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <__stack+0x2b5>
 ba2:	83 2d       	mov	r24, r3
 ba4:	8e 7e       	andi	r24, 0xEE	; 238
 ba6:	a8 2e       	mov	r10, r24
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__stack+0x2b5>
 baa:	b8 2c       	mov	r11, r8
 bac:	a3 2c       	mov	r10, r3
 bae:	03 c0       	rjmp	.+6      	; 0xbb6 <__stack+0x2b7>
 bb0:	b8 2c       	mov	r11, r8
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__stack+0x2b7>
 bb4:	b9 2c       	mov	r11, r9
 bb6:	a4 fe       	sbrs	r10, 4
 bb8:	0f c0       	rjmp	.+30     	; 0xbd8 <__stack+0x2d9>
 bba:	fe 01       	movw	r30, r28
 bbc:	e8 0d       	add	r30, r8
 bbe:	f1 1d       	adc	r31, r1
 bc0:	80 81       	ld	r24, Z
 bc2:	80 33       	cpi	r24, 0x30	; 48
 bc4:	21 f4       	brne	.+8      	; 0xbce <__stack+0x2cf>
 bc6:	9a 2d       	mov	r25, r10
 bc8:	99 7e       	andi	r25, 0xE9	; 233
 bca:	a9 2e       	mov	r10, r25
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <__stack+0x2e1>
 bce:	a2 fe       	sbrs	r10, 2
 bd0:	06 c0       	rjmp	.+12     	; 0xbde <__stack+0x2df>
 bd2:	b3 94       	inc	r11
 bd4:	b3 94       	inc	r11
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__stack+0x2e1>
 bd8:	8a 2d       	mov	r24, r10
 bda:	86 78       	andi	r24, 0x86	; 134
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <__stack+0x2e1>
 bde:	b3 94       	inc	r11
 be0:	a3 fc       	sbrc	r10, 3
 be2:	11 c0       	rjmp	.+34     	; 0xc06 <__stack+0x307>
 be4:	a0 fe       	sbrs	r10, 0
 be6:	06 c0       	rjmp	.+12     	; 0xbf4 <__stack+0x2f5>
 be8:	b2 14       	cp	r11, r2
 bea:	88 f4       	brcc	.+34     	; 0xc0e <__stack+0x30f>
 bec:	28 0c       	add	r2, r8
 bee:	92 2c       	mov	r9, r2
 bf0:	9b 18       	sub	r9, r11
 bf2:	0e c0       	rjmp	.+28     	; 0xc10 <__stack+0x311>
 bf4:	b2 14       	cp	r11, r2
 bf6:	60 f4       	brcc	.+24     	; 0xc10 <__stack+0x311>
 bf8:	b6 01       	movw	r22, r12
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 c02:	b3 94       	inc	r11
 c04:	f7 cf       	rjmp	.-18     	; 0xbf4 <__stack+0x2f5>
 c06:	b2 14       	cp	r11, r2
 c08:	18 f4       	brcc	.+6      	; 0xc10 <__stack+0x311>
 c0a:	2b 18       	sub	r2, r11
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <__stack+0x313>
 c0e:	98 2c       	mov	r9, r8
 c10:	21 2c       	mov	r2, r1
 c12:	a4 fe       	sbrs	r10, 4
 c14:	10 c0       	rjmp	.+32     	; 0xc36 <__stack+0x337>
 c16:	b6 01       	movw	r22, r12
 c18:	80 e3       	ldi	r24, 0x30	; 48
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 c20:	a2 fe       	sbrs	r10, 2
 c22:	17 c0       	rjmp	.+46     	; 0xc52 <__stack+0x353>
 c24:	a1 fc       	sbrc	r10, 1
 c26:	03 c0       	rjmp	.+6      	; 0xc2e <__stack+0x32f>
 c28:	88 e7       	ldi	r24, 0x78	; 120
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__stack+0x333>
 c2e:	88 e5       	ldi	r24, 0x58	; 88
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	b6 01       	movw	r22, r12
 c34:	0c c0       	rjmp	.+24     	; 0xc4e <__stack+0x34f>
 c36:	8a 2d       	mov	r24, r10
 c38:	86 78       	andi	r24, 0x86	; 134
 c3a:	59 f0       	breq	.+22     	; 0xc52 <__stack+0x353>
 c3c:	a1 fe       	sbrs	r10, 1
 c3e:	02 c0       	rjmp	.+4      	; 0xc44 <__stack+0x345>
 c40:	8b e2       	ldi	r24, 0x2B	; 43
 c42:	01 c0       	rjmp	.+2      	; 0xc46 <__stack+0x347>
 c44:	80 e2       	ldi	r24, 0x20	; 32
 c46:	a7 fc       	sbrc	r10, 7
 c48:	8d e2       	ldi	r24, 0x2D	; 45
 c4a:	b6 01       	movw	r22, r12
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 c52:	89 14       	cp	r8, r9
 c54:	38 f4       	brcc	.+14     	; 0xc64 <__stack+0x365>
 c56:	b6 01       	movw	r22, r12
 c58:	80 e3       	ldi	r24, 0x30	; 48
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 c60:	9a 94       	dec	r9
 c62:	f7 cf       	rjmp	.-18     	; 0xc52 <__stack+0x353>
 c64:	8a 94       	dec	r8
 c66:	f3 01       	movw	r30, r6
 c68:	e8 0d       	add	r30, r8
 c6a:	f1 1d       	adc	r31, r1
 c6c:	80 81       	ld	r24, Z
 c6e:	b6 01       	movw	r22, r12
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 c76:	81 10       	cpse	r8, r1
 c78:	f5 cf       	rjmp	.-22     	; 0xc64 <__stack+0x365>
 c7a:	22 20       	and	r2, r2
 c7c:	09 f4       	brne	.+2      	; 0xc80 <__stack+0x381>
 c7e:	42 ce       	rjmp	.-892    	; 0x904 <__stack+0x5>
 c80:	b6 01       	movw	r22, r12
 c82:	80 e2       	ldi	r24, 0x20	; 32
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 94 67 06 	call	0xcce	; 0xcce <fputc>
 c8a:	2a 94       	dec	r2
 c8c:	f6 cf       	rjmp	.-20     	; 0xc7a <__stack+0x37b>
 c8e:	f6 01       	movw	r30, r12
 c90:	86 81       	ldd	r24, Z+6	; 0x06
 c92:	97 81       	ldd	r25, Z+7	; 0x07
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <__stack+0x39b>
 c96:	8f ef       	ldi	r24, 0xFF	; 255
 c98:	9f ef       	ldi	r25, 0xFF	; 255
 c9a:	2b 96       	adiw	r28, 0x0b	; 11
 c9c:	e2 e1       	ldi	r30, 0x12	; 18
 c9e:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__epilogue_restores__>

00000ca2 <strnlen_P>:
 ca2:	fc 01       	movw	r30, r24
 ca4:	05 90       	lpm	r0, Z+
 ca6:	61 50       	subi	r22, 0x01	; 1
 ca8:	70 40       	sbci	r23, 0x00	; 0
 caa:	01 10       	cpse	r0, r1
 cac:	d8 f7       	brcc	.-10     	; 0xca4 <strnlen_P+0x2>
 cae:	80 95       	com	r24
 cb0:	90 95       	com	r25
 cb2:	8e 0f       	add	r24, r30
 cb4:	9f 1f       	adc	r25, r31
 cb6:	08 95       	ret

00000cb8 <strnlen>:
 cb8:	fc 01       	movw	r30, r24
 cba:	61 50       	subi	r22, 0x01	; 1
 cbc:	70 40       	sbci	r23, 0x00	; 0
 cbe:	01 90       	ld	r0, Z+
 cc0:	01 10       	cpse	r0, r1
 cc2:	d8 f7       	brcc	.-10     	; 0xcba <strnlen+0x2>
 cc4:	80 95       	com	r24
 cc6:	90 95       	com	r25
 cc8:	8e 0f       	add	r24, r30
 cca:	9f 1f       	adc	r25, r31
 ccc:	08 95       	ret

00000cce <fputc>:
 cce:	0f 93       	push	r16
 cd0:	1f 93       	push	r17
 cd2:	cf 93       	push	r28
 cd4:	df 93       	push	r29
 cd6:	fb 01       	movw	r30, r22
 cd8:	23 81       	ldd	r18, Z+3	; 0x03
 cda:	21 fd       	sbrc	r18, 1
 cdc:	03 c0       	rjmp	.+6      	; 0xce4 <fputc+0x16>
 cde:	8f ef       	ldi	r24, 0xFF	; 255
 ce0:	9f ef       	ldi	r25, 0xFF	; 255
 ce2:	2c c0       	rjmp	.+88     	; 0xd3c <fputc+0x6e>
 ce4:	22 ff       	sbrs	r18, 2
 ce6:	16 c0       	rjmp	.+44     	; 0xd14 <fputc+0x46>
 ce8:	46 81       	ldd	r20, Z+6	; 0x06
 cea:	57 81       	ldd	r21, Z+7	; 0x07
 cec:	24 81       	ldd	r18, Z+4	; 0x04
 cee:	35 81       	ldd	r19, Z+5	; 0x05
 cf0:	42 17       	cp	r20, r18
 cf2:	53 07       	cpc	r21, r19
 cf4:	44 f4       	brge	.+16     	; 0xd06 <fputc+0x38>
 cf6:	a0 81       	ld	r26, Z
 cf8:	b1 81       	ldd	r27, Z+1	; 0x01
 cfa:	9d 01       	movw	r18, r26
 cfc:	2f 5f       	subi	r18, 0xFF	; 255
 cfe:	3f 4f       	sbci	r19, 0xFF	; 255
 d00:	31 83       	std	Z+1, r19	; 0x01
 d02:	20 83       	st	Z, r18
 d04:	8c 93       	st	X, r24
 d06:	26 81       	ldd	r18, Z+6	; 0x06
 d08:	37 81       	ldd	r19, Z+7	; 0x07
 d0a:	2f 5f       	subi	r18, 0xFF	; 255
 d0c:	3f 4f       	sbci	r19, 0xFF	; 255
 d0e:	37 83       	std	Z+7, r19	; 0x07
 d10:	26 83       	std	Z+6, r18	; 0x06
 d12:	14 c0       	rjmp	.+40     	; 0xd3c <fputc+0x6e>
 d14:	8b 01       	movw	r16, r22
 d16:	ec 01       	movw	r28, r24
 d18:	fb 01       	movw	r30, r22
 d1a:	00 84       	ldd	r0, Z+8	; 0x08
 d1c:	f1 85       	ldd	r31, Z+9	; 0x09
 d1e:	e0 2d       	mov	r30, r0
 d20:	09 95       	icall
 d22:	89 2b       	or	r24, r25
 d24:	e1 f6       	brne	.-72     	; 0xcde <fputc+0x10>
 d26:	d8 01       	movw	r26, r16
 d28:	16 96       	adiw	r26, 0x06	; 6
 d2a:	8d 91       	ld	r24, X+
 d2c:	9c 91       	ld	r25, X
 d2e:	17 97       	sbiw	r26, 0x07	; 7
 d30:	01 96       	adiw	r24, 0x01	; 1
 d32:	17 96       	adiw	r26, 0x07	; 7
 d34:	9c 93       	st	X, r25
 d36:	8e 93       	st	-X, r24
 d38:	16 97       	sbiw	r26, 0x06	; 6
 d3a:	ce 01       	movw	r24, r28
 d3c:	df 91       	pop	r29
 d3e:	cf 91       	pop	r28
 d40:	1f 91       	pop	r17
 d42:	0f 91       	pop	r16
 d44:	08 95       	ret

00000d46 <__ultoa_invert>:
 d46:	fa 01       	movw	r30, r20
 d48:	aa 27       	eor	r26, r26
 d4a:	28 30       	cpi	r18, 0x08	; 8
 d4c:	51 f1       	breq	.+84     	; 0xda2 <__ultoa_invert+0x5c>
 d4e:	20 31       	cpi	r18, 0x10	; 16
 d50:	81 f1       	breq	.+96     	; 0xdb2 <__ultoa_invert+0x6c>
 d52:	e8 94       	clt
 d54:	6f 93       	push	r22
 d56:	6e 7f       	andi	r22, 0xFE	; 254
 d58:	6e 5f       	subi	r22, 0xFE	; 254
 d5a:	7f 4f       	sbci	r23, 0xFF	; 255
 d5c:	8f 4f       	sbci	r24, 0xFF	; 255
 d5e:	9f 4f       	sbci	r25, 0xFF	; 255
 d60:	af 4f       	sbci	r26, 0xFF	; 255
 d62:	b1 e0       	ldi	r27, 0x01	; 1
 d64:	3e d0       	rcall	.+124    	; 0xde2 <__ultoa_invert+0x9c>
 d66:	b4 e0       	ldi	r27, 0x04	; 4
 d68:	3c d0       	rcall	.+120    	; 0xde2 <__ultoa_invert+0x9c>
 d6a:	67 0f       	add	r22, r23
 d6c:	78 1f       	adc	r23, r24
 d6e:	89 1f       	adc	r24, r25
 d70:	9a 1f       	adc	r25, r26
 d72:	a1 1d       	adc	r26, r1
 d74:	68 0f       	add	r22, r24
 d76:	79 1f       	adc	r23, r25
 d78:	8a 1f       	adc	r24, r26
 d7a:	91 1d       	adc	r25, r1
 d7c:	a1 1d       	adc	r26, r1
 d7e:	6a 0f       	add	r22, r26
 d80:	71 1d       	adc	r23, r1
 d82:	81 1d       	adc	r24, r1
 d84:	91 1d       	adc	r25, r1
 d86:	a1 1d       	adc	r26, r1
 d88:	20 d0       	rcall	.+64     	; 0xdca <__ultoa_invert+0x84>
 d8a:	09 f4       	brne	.+2      	; 0xd8e <__ultoa_invert+0x48>
 d8c:	68 94       	set
 d8e:	3f 91       	pop	r19
 d90:	2a e0       	ldi	r18, 0x0A	; 10
 d92:	26 9f       	mul	r18, r22
 d94:	11 24       	eor	r1, r1
 d96:	30 19       	sub	r19, r0
 d98:	30 5d       	subi	r19, 0xD0	; 208
 d9a:	31 93       	st	Z+, r19
 d9c:	de f6       	brtc	.-74     	; 0xd54 <__ultoa_invert+0xe>
 d9e:	cf 01       	movw	r24, r30
 da0:	08 95       	ret
 da2:	46 2f       	mov	r20, r22
 da4:	47 70       	andi	r20, 0x07	; 7
 da6:	40 5d       	subi	r20, 0xD0	; 208
 da8:	41 93       	st	Z+, r20
 daa:	b3 e0       	ldi	r27, 0x03	; 3
 dac:	0f d0       	rcall	.+30     	; 0xdcc <__ultoa_invert+0x86>
 dae:	c9 f7       	brne	.-14     	; 0xda2 <__ultoa_invert+0x5c>
 db0:	f6 cf       	rjmp	.-20     	; 0xd9e <__ultoa_invert+0x58>
 db2:	46 2f       	mov	r20, r22
 db4:	4f 70       	andi	r20, 0x0F	; 15
 db6:	40 5d       	subi	r20, 0xD0	; 208
 db8:	4a 33       	cpi	r20, 0x3A	; 58
 dba:	18 f0       	brcs	.+6      	; 0xdc2 <__ultoa_invert+0x7c>
 dbc:	49 5d       	subi	r20, 0xD9	; 217
 dbe:	31 fd       	sbrc	r19, 1
 dc0:	40 52       	subi	r20, 0x20	; 32
 dc2:	41 93       	st	Z+, r20
 dc4:	02 d0       	rcall	.+4      	; 0xdca <__ultoa_invert+0x84>
 dc6:	a9 f7       	brne	.-22     	; 0xdb2 <__ultoa_invert+0x6c>
 dc8:	ea cf       	rjmp	.-44     	; 0xd9e <__ultoa_invert+0x58>
 dca:	b4 e0       	ldi	r27, 0x04	; 4
 dcc:	a6 95       	lsr	r26
 dce:	97 95       	ror	r25
 dd0:	87 95       	ror	r24
 dd2:	77 95       	ror	r23
 dd4:	67 95       	ror	r22
 dd6:	ba 95       	dec	r27
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__ultoa_invert+0x86>
 dda:	00 97       	sbiw	r24, 0x00	; 0
 ddc:	61 05       	cpc	r22, r1
 dde:	71 05       	cpc	r23, r1
 de0:	08 95       	ret
 de2:	9b 01       	movw	r18, r22
 de4:	ac 01       	movw	r20, r24
 de6:	0a 2e       	mov	r0, r26
 de8:	06 94       	lsr	r0
 dea:	57 95       	ror	r21
 dec:	47 95       	ror	r20
 dee:	37 95       	ror	r19
 df0:	27 95       	ror	r18
 df2:	ba 95       	dec	r27
 df4:	c9 f7       	brne	.-14     	; 0xde8 <__ultoa_invert+0xa2>
 df6:	62 0f       	add	r22, r18
 df8:	73 1f       	adc	r23, r19
 dfa:	84 1f       	adc	r24, r20
 dfc:	95 1f       	adc	r25, r21
 dfe:	a0 1d       	adc	r26, r0
 e00:	08 95       	ret

00000e02 <__prologue_saves__>:
 e02:	2f 92       	push	r2
 e04:	3f 92       	push	r3
 e06:	4f 92       	push	r4
 e08:	5f 92       	push	r5
 e0a:	6f 92       	push	r6
 e0c:	7f 92       	push	r7
 e0e:	8f 92       	push	r8
 e10:	9f 92       	push	r9
 e12:	af 92       	push	r10
 e14:	bf 92       	push	r11
 e16:	cf 92       	push	r12
 e18:	df 92       	push	r13
 e1a:	ef 92       	push	r14
 e1c:	ff 92       	push	r15
 e1e:	0f 93       	push	r16
 e20:	1f 93       	push	r17
 e22:	cf 93       	push	r28
 e24:	df 93       	push	r29
 e26:	cd b7       	in	r28, 0x3d	; 61
 e28:	de b7       	in	r29, 0x3e	; 62
 e2a:	ca 1b       	sub	r28, r26
 e2c:	db 0b       	sbc	r29, r27
 e2e:	0f b6       	in	r0, 0x3f	; 63
 e30:	f8 94       	cli
 e32:	de bf       	out	0x3e, r29	; 62
 e34:	0f be       	out	0x3f, r0	; 63
 e36:	cd bf       	out	0x3d, r28	; 61
 e38:	09 94       	ijmp

00000e3a <__epilogue_restores__>:
 e3a:	2a 88       	ldd	r2, Y+18	; 0x12
 e3c:	39 88       	ldd	r3, Y+17	; 0x11
 e3e:	48 88       	ldd	r4, Y+16	; 0x10
 e40:	5f 84       	ldd	r5, Y+15	; 0x0f
 e42:	6e 84       	ldd	r6, Y+14	; 0x0e
 e44:	7d 84       	ldd	r7, Y+13	; 0x0d
 e46:	8c 84       	ldd	r8, Y+12	; 0x0c
 e48:	9b 84       	ldd	r9, Y+11	; 0x0b
 e4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4c:	b9 84       	ldd	r11, Y+9	; 0x09
 e4e:	c8 84       	ldd	r12, Y+8	; 0x08
 e50:	df 80       	ldd	r13, Y+7	; 0x07
 e52:	ee 80       	ldd	r14, Y+6	; 0x06
 e54:	fd 80       	ldd	r15, Y+5	; 0x05
 e56:	0c 81       	ldd	r16, Y+4	; 0x04
 e58:	1b 81       	ldd	r17, Y+3	; 0x03
 e5a:	aa 81       	ldd	r26, Y+2	; 0x02
 e5c:	b9 81       	ldd	r27, Y+1	; 0x01
 e5e:	ce 0f       	add	r28, r30
 e60:	d1 1d       	adc	r29, r1
 e62:	0f b6       	in	r0, 0x3f	; 63
 e64:	f8 94       	cli
 e66:	de bf       	out	0x3e, r29	; 62
 e68:	0f be       	out	0x3f, r0	; 63
 e6a:	cd bf       	out	0x3d, r28	; 61
 e6c:	ed 01       	movw	r28, r26
 e6e:	08 95       	ret

00000e70 <_exit>:
 e70:	f8 94       	cli

00000e72 <__stop_program>:
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stop_program>
