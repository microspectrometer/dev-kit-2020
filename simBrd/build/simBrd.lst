
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000089c  00000930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080015e  0080015e  0000098e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033ba  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111f  00000000  00000000  00004182  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001801  00000000  00000000  000052a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c4  00000000  00000000  00006aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015ba  00000000  00000000  00007468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000178f  00000000  00000000  00008a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000a1b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3f 04 	call	0x87e	; 0x87e <main>
  9e:	0c 94 4c 04 	jmp	0x898	; 0x898 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 116:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <ddr_register_>
 11a:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 128:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <port_register_>
 12c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 13a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <port_register_>
 13e:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <ddr_register_+0x1>
 14c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ddr_register_>
    port_register_ = port_register;
 150:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <port_register_+0x1>
 154:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <port_register_>
    pin_register_ = pin_register;
 158:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <pin_register_+0x1>
 15c:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__data_end>
    DebugLedTurnOn();
 164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtActivateInterface>
 182:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtActivateInterface+0x1>
 186:	09 95       	icall
 188:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 18c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 190:	09 95       	icall
 192:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 196:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 19a:	09 95       	icall
 19c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtOutputByte>
 1a0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtOutputByte+0x1>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	09 95       	icall
 1a8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1ac:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
 1b6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetSlaveDriveBus>
 1ba:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetSlaveDriveBus+0x1>
 1be:	09 95       	icall
 1c0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1c4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1c8:	09 95       	icall
 1ca:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1ce:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 1d8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 1dc:	09 95       	icall
 1de:	08 95       	ret

000001e0 <FtRead_Implementation>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	8c 01       	movw	r16, r24
 1e8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1ec:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1f0:	09 95       	icall
 1f2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1f6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1fa:	09 95       	icall
 1fc:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 200:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 204:	09 95       	icall
 206:	c8 2f       	mov	r28, r24
 208:	88 23       	and	r24, r24
 20a:	39 f0       	breq	.+14     	; 0x21a <FtRead_Implementation+0x3a>
 20c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 210:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 214:	09 95       	icall
 216:	f8 01       	movw	r30, r16
 218:	80 83       	st	Z, r24
 21a:	8c 2f       	mov	r24, r28
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <FtWrite_Implementation>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
 22a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 22e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 232:	09 95       	icall
 234:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 238:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 23c:	09 95       	icall
 23e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 242:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 246:	88 81       	ld	r24, Y
 248:	09 95       	icall
 24a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 24e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 252:	09 95       	icall
 254:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 258:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 25c:	09 95       	icall
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <FtOutputByte_Implementation>:
 264:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_port>
 268:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_port+0x1>
 26c:	80 83       	st	Z, r24
 26e:	08 95       	ret

00000270 <FtLetMasterDriveBus_Implementation>:
 270:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_ddr>
 274:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_ddr+0x1>
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <FtLetSlaveDriveBus_Implementation>:
 27e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_ddr>
 282:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_ddr+0x1>
 286:	10 82       	st	Z, r1
 288:	08 95       	ret

0000028a <FtReadData_Implementation>:
 28a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <FtMiosio_pin>
 28e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <FtMiosio_pin+0x1>
 292:	80 81       	ld	r24, Z
 294:	08 95       	ret

00000296 <FtWriteData_Implementation>:
 296:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_port>
 29a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_port+0x1>
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <FtActivateInterface_Implementation>:
 2a2:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Ss>
 2a6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2aa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2ae:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2b2:	08 95       	ret

000002b4 <FtPullData_Implementation>:
 2b4:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <Ft1248_Sck>
 2b8:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2bc:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2c0:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2c4:	08 95       	ret

000002c6 <FtDeactivateInterface_Implementation>:
 2c6:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Ss>
 2ca:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2ce:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2d6:	08 95       	ret

000002d8 <FtPushData_Implementation>:
 2d8:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <Ft1248_Sck>
 2dc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2e0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2e8:	08 95       	ret

000002ea <FtIsBusOk_Implementation>:
 2ea:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <Ft1248_Miso>
 2ee:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Ft1248_pin>
 2f2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Ft1248_pin+0x1>
 2f6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 2fa:	08 95       	ret

000002fc <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2fc:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <Ft1248_Miso>
 300:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_ddr>
 304:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_ddr+0x1>
 308:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 30c:	08 95       	ret

0000030e <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 30e:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <Ft1248_Miso>
 312:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 316:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 31e:	08 95       	ret

00000320 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 320:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_ddr>
 324:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_ddr+0x1>
 328:	10 82       	st	Z, r1
 32a:	08 95       	ret

0000032c <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 32c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_port>
 330:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_port+0x1>
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <FtSckLow>:
}
void FtSckLow(void)
{
 33a:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 33c:	c0 91 50 01 	lds	r28, 0x0150	; 0x800150 <Ft1248_Sck>
 340:	6c 2f       	mov	r22, r28
 342:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 346:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 34a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 34e:	6c 2f       	mov	r22, r28
 350:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_ddr>
 354:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_ddr+0x1>
 358:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <FtSsHigh>:
void FtSsHigh(void)
{
 360:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 362:	c0 91 51 01 	lds	r28, 0x0151	; 0x800151 <Ft1248_Ss>
 366:	6c 2f       	mov	r22, r28
 368:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 36c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 370:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 374:	6c 2f       	mov	r22, r28
 376:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_ddr>
 37a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_ddr+0x1>
 37e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 386:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 38a:	0e 94 87 01 	call	0x30e	; 0x30e <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 38e:	0e 94 90 01 	call	0x320	; 0x320 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 392:	0e 94 96 01 	call	0x32c	; 0x32c <FtEnablePullupsOnMiosio>
    FtSckLow();
 396:	0e 94 9d 01 	call	0x33a	; 0x33a <FtSckLow>
    FtSsHigh();
 39a:	0e 94 b0 01 	call	0x360	; 0x360 <FtSsHigh>
 39e:	08 95       	ret

000003a0 <UsbInit>:
#include "Ft1248.h"
#include "DebugLed.h"

void UsbInit(void)
{
    FtInit();
 3a0:	0e 94 c3 01 	call	0x386	; 0x386 <FtInit>
 3a4:	08 95       	ret

000003a6 <UsbRead>:
}
uint16_t UsbRead(uint8_t *read_buffer)
{
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	8c 01       	movw	r16, r24
    uint16_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3b0:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 3b4:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 3b8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FtCmd_Read>
 3bc:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3be:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 3c2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 3c6:	09 95       	icall
    if (!has_data_to_read)
 3c8:	81 11       	cpse	r24, r1
 3ca:	0f c0       	rjmp	.+30     	; 0x3ea <UsbRead+0x44>
    {
        // sad path
        DebugLedTurnRedToShowError();
 3cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3d4:	09 95       	icall
        FtDeactivateInterface();
 3d6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 3da:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 3de:	09 95       	icall
        return num_bytes_read;
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    }
    while (FtRead(read_buffer++))
    {
        num_bytes_read++;
 3e6:	21 96       	adiw	r28, 0x01	; 1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <UsbRead+0x48>
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
        // sad path
        DebugLedTurnRedToShowError();
        FtDeactivateInterface();
        return num_bytes_read;
    }
    while (FtRead(read_buffer++))
 3ee:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtRead>
 3f2:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtRead+0x1>
 3f6:	c8 01       	movw	r24, r16
 3f8:	8c 0f       	add	r24, r28
 3fa:	9d 1f       	adc	r25, r29
 3fc:	09 95       	icall
 3fe:	81 11       	cpse	r24, r1
 400:	f2 cf       	rjmp	.-28     	; 0x3e6 <UsbRead+0x40>
    {
        num_bytes_read++;
    }

    FtDeactivateInterface();
 402:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 406:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 40a:	09 95       	icall
    return num_bytes_read;
}
 40c:	ce 01       	movw	r24, r28
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	8c 01       	movw	r16, r24
 426:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 428:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 42c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 430:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FtCmd_Write>
 434:	09 95       	icall
    if (!FtBusTurnaround())
 436:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 43a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 43e:	09 95       	icall
 440:	81 11       	cpse	r24, r1
 442:	0d c0       	rjmp	.+26     	; 0x45e <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 444:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 448:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 44c:	09 95       	icall
        FtDeactivateInterface();
 44e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 452:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 456:	09 95       	icall
        return num_bytes_sent;
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	15 c0       	rjmp	.+42     	; 0x488 <UsbWrite+0x70>
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 462:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtWrite>
 466:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtWrite+0x1>
 46a:	c8 01       	movw	r24, r16
 46c:	8c 0f       	add	r24, r28
 46e:	9d 1f       	adc	r25, r29
 470:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 472:	88 23       	and	r24, r24
 474:	21 f0       	breq	.+8      	; 0x47e <UsbWrite+0x66>
 476:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 478:	ce 15       	cp	r28, r14
 47a:	df 05       	cpc	r29, r15
 47c:	90 f3       	brcs	.-28     	; 0x462 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 47e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 482:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 486:	09 95       	icall
    return num_bytes_sent;
}
 488:	ce 01       	movw	r24, r28
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	08 95       	ret

00000498 <UsbHasDataToRead>:
bool UsbHasDataToRead(void) { return FtHasDataToRead(); }
 498:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtHasDataToRead>
 49c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtHasDataToRead+0x1>
 4a0:	09 95       	icall
 4a2:	08 95       	ret

000004a4 <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
 4a4:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <ReadSpiStatusRegister>
 4a8:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <ReadSpiStatusRegister+0x1>
 4ac:	09 95       	icall
 4ae:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 4b2:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 4b6:	09 95       	icall
 4b8:	08 95       	ret

000004ba <ReadSpiStatusRegister_Implementation>:
 4ba:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_spsr>
 4be:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_spsr+0x1>
 4c2:	80 81       	ld	r24, Z
 4c4:	08 95       	ret

000004c6 <ReadSpiDataRegister_Implementation>:
 4c6:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spdr>
 4ca:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spdr+0x1>
 4ce:	80 81       	ld	r24, Z
 4d0:	08 95       	ret

000004d2 <SpiMasterOpenSpi_Implementation>:
 4d2:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Ss>
 4d6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_port>
 4da:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_port+0x1>
 4de:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 4e2:	08 95       	ret

000004e4 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 4e4:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Spi_Enable>
 4e8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Spi_spcr>
 4ec:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Spi_spcr+0x1>
 4f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 4f4:	08 95       	ret

000004f6 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 4f6:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Ss>
 4fa:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_port>
 4fe:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_port+0x1>
 502:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 506:	08 95       	ret

00000508 <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 508:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Spi_InterruptFlag>
 50c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Spi_spsr>
 510:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Spi_spsr+0x1>
 514:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 518:	08 95       	ret

0000051a <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 51a:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <Spi_Miso>
 51e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Spi_pin>
 522:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Spi_pin+0x1>
 526:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 52a:	08 95       	ret

0000052c <SpiClearFlagTransferIsDone>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 52c:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spdr>
 530:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spdr+0x1>
 534:	80 81       	ld	r24, Z
 536:	08 95       	ret

00000538 <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 538:	1f 93       	push	r17
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
    SlaveSelectIdleHigh();
 53e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 542:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <Spi_Miso>
 546:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <Spi_ddr>
 54a:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <Spi_ddr+0x1>
 54e:	61 2f       	mov	r22, r17
 550:	ce 01       	movw	r24, r28
 552:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 556:	61 2f       	mov	r22, r17
 558:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_port>
 55c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_port+0x1>
 560:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 564:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Ss>
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 56e:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Spi_Mosi>
 572:	ce 01       	movw	r24, r28
 574:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 578:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Spi_Sck>
 57c:	ce 01       	movw	r24, r28
 57e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 582:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <Spi_spcr>
 586:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <Spi_spcr+0x1>
 58a:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Spi_MasterSlaveSelect>
 58e:	ce 01       	movw	r24, r28
 590:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 594:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Spi_ClockRateBit0>
 598:	ce 01       	movw	r24, r28
 59a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 59e:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Spi_ClockRateBit1>
 5a2:	ce 01       	movw	r24, r28
 5a4:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5a8:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_DoubleClockRate>
 5ac:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Spi_spsr>
 5b0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Spi_spsr+0x1>
 5b4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5b8:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <EnableSpi>
 5bc:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <EnableSpi+0x1>
 5c0:	09 95       	icall
    ClearPendingSpiInterrupt();
 5c2:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <ClearPendingSpiInterrupt>
 5c6:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <ClearPendingSpiInterrupt+0x1>
 5ca:	09 95       	icall
}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	08 95       	ret

000005d4 <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 5d8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SpiMasterOpenSpi>
 5dc:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SpiMasterOpenSpi+0x1>
 5e0:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 5e2:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spdr>
 5e6:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spdr+0x1>
 5ea:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 5ec:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SpiTransferIsDone>
 5f0:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SpiTransferIsDone+0x1>
 5f4:	09 95       	icall
 5f6:	88 23       	and	r24, r24
 5f8:	c9 f3       	breq	.-14     	; 0x5ec <SpiMasterWrite+0x18>
    // You need to now access SPDR to clear the flag!
    // I do not think the reads are destructive.
    // Add code here to clear the flag:
    SpiClearFlagTransferIsDone();  // TODO: add unit tests for this
 5fa:	0e 94 96 02 	call	0x52c	; 0x52c <SpiClearFlagTransferIsDone>
    SpiMasterCloseSpi();
 5fe:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiMasterCloseSpi>
 602:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiMasterCloseSpi+0x1>
 606:	09 95       	icall
}
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <SpiMasterRead>:
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <SpiMasterWrite>
    return ReadSpiDataRegister();
 612:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 616:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 61a:	09 95       	icall
}
 61c:	08 95       	ret

0000061e <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 61e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiResponseIsReady>
 622:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiResponseIsReady+0x1>
 626:	09 95       	icall
 628:	88 23       	and	r24, r24
 62a:	c9 f3       	breq	.-14     	; 0x61e <SpiMasterWaitForResponse>
}
 62c:	08 95       	ret

0000062e <SetupDebugLed>:
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
    UsbInit();
    /* =====[ Operate ]===== */
    SpiMasterPassLisFrame();
 62e:	23 e0       	ldi	r18, 0x03	; 3
 630:	46 e2       	ldi	r20, 0x26	; 38
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	68 e2       	ldi	r22, 0x28	; 40
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	87 e2       	ldi	r24, 0x27	; 39
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 640:	08 95       	ret

00000642 <DoCmdSendFourDummyBytes>:
 642:	ef 92       	push	r14
 644:	ff 92       	push	r15
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 d0       	rcall	.+0      	; 0x650 <DoCmdSendFourDummyBytes+0xe>
 650:	00 d0       	rcall	.+0      	; 0x652 <DoCmdSendFourDummyBytes+0x10>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	82 ef       	ldi	r24, 0xF2	; 242
 658:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <SpiMasterWrite>
 65c:	8e 01       	movw	r16, r28
 65e:	0f 5f       	subi	r16, 0xFF	; 255
 660:	1f 4f       	sbci	r17, 0xFF	; 255
 662:	7e 01       	movw	r14, r28
 664:	85 e0       	ldi	r24, 0x05	; 5
 666:	e8 0e       	add	r14, r24
 668:	f1 1c       	adc	r15, r1
 66a:	0e 94 0f 03 	call	0x61e	; 0x61e <SpiMasterWaitForResponse>
 66e:	0e 94 06 03 	call	0x60c	; 0x60c <SpiMasterRead>
 672:	f8 01       	movw	r30, r16
 674:	81 93       	st	Z+, r24
 676:	8f 01       	movw	r16, r30
 678:	ee 15       	cp	r30, r14
 67a:	ff 05       	cpc	r31, r15
 67c:	b1 f7       	brne	.-20     	; 0x66a <DoCmdSendFourDummyBytes+0x28>
 67e:	64 e0       	ldi	r22, 0x04	; 4
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	ce 01       	movw	r24, r28
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	0e 94 0c 02 	call	0x418	; 0x418 <UsbWrite>
 68a:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	08 95       	ret

000006a4 <SetExposureTime>:
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	ec 01       	movw	r28, r24
 6aa:	2a 98       	cbi	0x05, 2	; 5
 6ac:	82 e0       	ldi	r24, 0x02	; 2
 6ae:	8e bd       	out	0x2e, r24	; 46
 6b0:	0d b4       	in	r0, 0x2d	; 45
 6b2:	07 fe       	sbrs	r0, 7
 6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <SetExposureTime+0xc>
 6b6:	8e b5       	in	r24, 0x2e	; 46
 6b8:	2a 9a       	sbi	0x05, 2	; 5
 6ba:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Delay3CpuCyclesPerTick>
 6be:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick+0x1>
 6c2:	82 e3       	ldi	r24, 0x32	; 50
 6c4:	09 95       	icall
 6c6:	2a 98       	cbi	0x05, 2	; 5
 6c8:	88 81       	ld	r24, Y
 6ca:	8e bd       	out	0x2e, r24	; 46
 6cc:	0d b4       	in	r0, 0x2d	; 45
 6ce:	07 fe       	sbrs	r0, 7
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <SetExposureTime+0x28>
 6d2:	8e b5       	in	r24, 0x2e	; 46
 6d4:	2a 9a       	sbi	0x05, 2	; 5
 6d6:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Delay3CpuCyclesPerTick>
 6da:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick+0x1>
 6de:	82 e3       	ldi	r24, 0x32	; 50
 6e0:	09 95       	icall
 6e2:	2a 98       	cbi	0x05, 2	; 5
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	8e bd       	out	0x2e, r24	; 46
 6e8:	0d b4       	in	r0, 0x2d	; 45
 6ea:	07 fe       	sbrs	r0, 7
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <SetExposureTime+0x44>
 6ee:	8e b5       	in	r24, 0x2e	; 46
 6f0:	2a 9a       	sbi	0x05, 2	; 5
 6f2:	1c 9b       	sbis	0x03, 4	; 3
 6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <SetExposureTime+0x4e>
 6f6:	1c 99       	sbic	0x03, 4	; 3
 6f8:	fe cf       	rjmp	.-4      	; 0x6f6 <SetExposureTime+0x52>
 6fa:	1c 9b       	sbis	0x03, 4	; 3
 6fc:	fe cf       	rjmp	.-4      	; 0x6fa <SetExposureTime+0x56>
 6fe:	2a 98       	cbi	0x05, 2	; 5
 700:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <slave_ignore>
 704:	8e bd       	out	0x2e, r24	; 46
 706:	0d b4       	in	r0, 0x2d	; 45
 708:	07 fe       	sbrs	r0, 7
 70a:	fd cf       	rjmp	.-6      	; 0x706 <SetExposureTime+0x62>
 70c:	8e b5       	in	r24, 0x2e	; 46
 70e:	2a 9a       	sbi	0x05, 2	; 5
 710:	8e b5       	in	r24, 0x2e	; 46
 712:	88 83       	st	Y, r24
 714:	1c 9b       	sbis	0x03, 4	; 3
 716:	fe cf       	rjmp	.-4      	; 0x714 <SetExposureTime+0x70>
 718:	1c 99       	sbic	0x03, 4	; 3
 71a:	fe cf       	rjmp	.-4      	; 0x718 <SetExposureTime+0x74>
 71c:	1c 9b       	sbis	0x03, 4	; 3
 71e:	fe cf       	rjmp	.-4      	; 0x71c <SetExposureTime+0x78>
 720:	2a 98       	cbi	0x05, 2	; 5
 722:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <slave_ignore>
 726:	8e bd       	out	0x2e, r24	; 46
 728:	0d b4       	in	r0, 0x2d	; 45
 72a:	07 fe       	sbrs	r0, 7
 72c:	fd cf       	rjmp	.-6      	; 0x728 <SetExposureTime+0x84>
 72e:	8e b5       	in	r24, 0x2e	; 46
 730:	2a 9a       	sbi	0x05, 2	; 5
 732:	8e b5       	in	r24, 0x2e	; 46
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	62 e0       	ldi	r22, 0x02	; 2
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	ce 01       	movw	r24, r28
 73c:	0e 94 0c 02 	call	0x418	; 0x418 <UsbWrite>
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <SpiMasterPassLisFrame>:
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	45 98       	cbi	0x08, 5	; 8
 754:	2a 98       	cbi	0x05, 2	; 5
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	8e bd       	out	0x2e, r24	; 46
 75a:	0d b4       	in	r0, 0x2d	; 45
 75c:	07 fe       	sbrs	r0, 7
 75e:	fd cf       	rjmp	.-6      	; 0x75a <SpiMasterPassLisFrame+0x14>
 760:	8e b5       	in	r24, 0x2e	; 46
 762:	2a 9a       	sbi	0x05, 2	; 5
 764:	45 9a       	sbi	0x08, 5	; 8
 766:	1c 9b       	sbis	0x03, 4	; 3
 768:	fe cf       	rjmp	.-4      	; 0x766 <SpiMasterPassLisFrame+0x20>
 76a:	1c 99       	sbic	0x03, 4	; 3
 76c:	fe cf       	rjmp	.-4      	; 0x76a <SpiMasterPassLisFrame+0x24>
 76e:	1c 9b       	sbis	0x03, 4	; 3
 770:	fe cf       	rjmp	.-4      	; 0x76e <SpiMasterPassLisFrame+0x28>
 772:	45 98       	cbi	0x08, 5	; 8
 774:	cf e1       	ldi	r28, 0x1F	; 31
 776:	d6 e0       	ldi	r29, 0x06	; 6
 778:	e0 90 38 01 	lds	r14, 0x0138	; 0x800138 <slave_ignore>
 77c:	1f ef       	ldi	r17, 0xFF	; 255
 77e:	f0 90 36 01 	lds	r15, 0x0136	; 0x800136 <FtCmd_Write>
 782:	2a 98       	cbi	0x05, 2	; 5
 784:	ee bc       	out	0x2e, r14	; 46
 786:	0d b4       	in	r0, 0x2d	; 45
 788:	07 fe       	sbrs	r0, 7
 78a:	fd cf       	rjmp	.-6      	; 0x786 <SpiMasterPassLisFrame+0x40>
 78c:	8e b5       	in	r24, 0x2e	; 46
 78e:	2a 9a       	sbi	0x05, 2	; 5
 790:	0e b5       	in	r16, 0x2e	; 46
 792:	1c 9b       	sbis	0x03, 4	; 3
 794:	fe cf       	rjmp	.-4      	; 0x792 <SpiMasterPassLisFrame+0x4c>
 796:	1c 99       	sbic	0x03, 4	; 3
 798:	fe cf       	rjmp	.-4      	; 0x796 <SpiMasterPassLisFrame+0x50>
 79a:	1c 9b       	sbis	0x03, 4	; 3
 79c:	fe cf       	rjmp	.-4      	; 0x79a <SpiMasterPassLisFrame+0x54>
 79e:	45 9a       	sbi	0x08, 5	; 8
 7a0:	40 98       	cbi	0x08, 0	; 8
 7a2:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Delay3CpuCyclesPerTick>
 7a6:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick+0x1>
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	09 95       	icall
 7ae:	41 9a       	sbi	0x08, 1	; 8
 7b0:	1a b9       	out	0x0a, r17	; 10
 7b2:	fb b8       	out	0x0b, r15	; 11
 7b4:	41 98       	cbi	0x08, 1	; 8
 7b6:	1a b8       	out	0x0a, r1	; 10
 7b8:	41 9a       	sbi	0x08, 1	; 8
 7ba:	41 98       	cbi	0x08, 1	; 8
 7bc:	32 9b       	sbis	0x06, 2	; 6
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <SpiMasterPassLisFrame+0x7e>
 7c0:	43 9a       	sbi	0x08, 3	; 8
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <SpiMasterPassLisFrame+0x8a>
 7c4:	1a b9       	out	0x0a, r17	; 10
 7c6:	41 9a       	sbi	0x08, 1	; 8
 7c8:	0b b9       	out	0x0b, r16	; 11
 7ca:	41 98       	cbi	0x08, 1	; 8
 7cc:	32 99       	sbic	0x06, 2	; 6
 7ce:	43 9a       	sbi	0x08, 3	; 8
 7d0:	40 9a       	sbi	0x08, 0	; 8
 7d2:	21 97       	sbiw	r28, 0x01	; 1
 7d4:	b1 f6       	brne	.-84     	; 0x782 <SpiMasterPassLisFrame+0x3c>
 7d6:	2a 98       	cbi	0x05, 2	; 5
 7d8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <slave_ignore>
 7dc:	8e bd       	out	0x2e, r24	; 46
 7de:	0d b4       	in	r0, 0x2d	; 45
 7e0:	07 fe       	sbrs	r0, 7
 7e2:	fd cf       	rjmp	.-6      	; 0x7de <SpiMasterPassLisFrame+0x98>
 7e4:	8e b5       	in	r24, 0x2e	; 46
 7e6:	2a 9a       	sbi	0x05, 2	; 5
 7e8:	ce b5       	in	r28, 0x2e	; 46
 7ea:	40 98       	cbi	0x08, 0	; 8
 7ec:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Delay3CpuCyclesPerTick>
 7f0:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick+0x1>
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	09 95       	icall
 7f8:	41 9a       	sbi	0x08, 1	; 8
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	8a b9       	out	0x0a, r24	; 10
 7fe:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FtCmd_Write>
 802:	8b b9       	out	0x0b, r24	; 11
 804:	41 98       	cbi	0x08, 1	; 8
 806:	1a b8       	out	0x0a, r1	; 10
 808:	41 9a       	sbi	0x08, 1	; 8
 80a:	41 98       	cbi	0x08, 1	; 8
 80c:	32 9b       	sbis	0x06, 2	; 6
 80e:	02 c0       	rjmp	.+4      	; 0x814 <SpiMasterPassLisFrame+0xce>
 810:	43 9a       	sbi	0x08, 3	; 8
 812:	07 c0       	rjmp	.+14     	; 0x822 <SpiMasterPassLisFrame+0xdc>
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	8a b9       	out	0x0a, r24	; 10
 818:	41 9a       	sbi	0x08, 1	; 8
 81a:	cb b9       	out	0x0b, r28	; 11
 81c:	41 98       	cbi	0x08, 1	; 8
 81e:	32 99       	sbic	0x06, 2	; 6
 820:	43 9a       	sbi	0x08, 3	; 8
 822:	40 9a       	sbi	0x08, 0	; 8
 824:	80 e2       	ldi	r24, 0x20	; 32
 826:	96 e0       	ldi	r25, 0x06	; 6
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	ff 90       	pop	r15
 832:	ef 90       	pop	r14
 834:	08 95       	ret

00000836 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>:
    *(pnticks--) = *Spi_spdr;               // store lsb
    // Debug: echo the bytes back.
    UsbWrite(pnticks, 2);
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	00 d0       	rcall	.+0      	; 0x83c <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x6>
 83c:	1f 92       	push	r1
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
    while(1) // loop forever responding to the USB host
    {
        if (UsbHasDataToRead())
        {
            MacroDebugLedToggleColor();
 842:	18 e0       	ldi	r17, 0x08	; 8
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
    while(1) // loop forever responding to the USB host
    {
        if (UsbHasDataToRead())
 844:	0e 94 4c 02 	call	0x498	; 0x498 <UsbHasDataToRead>
 848:	88 23       	and	r24, r24
 84a:	e1 f3       	breq	.-8      	; 0x844 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xe>
        {
            MacroDebugLedToggleColor();
 84c:	88 b1       	in	r24, 0x08	; 8
 84e:	81 27       	eor	r24, r17
 850:	88 b9       	out	0x08, r24	; 8
            uint8_t read_buffer[3];
            UsbRead(read_buffer);
 852:	ce 01       	movw	r24, r28
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UsbRead>
            uint8_t cmd = read_buffer[0];
 85a:	89 81       	ldd	r24, Y+1	; 0x01
            uint8_t *pnticks = &read_buffer[1]; // two bytes of nticks_exposure
            if      (cmd == cmd_send_lis_frame) SpiMasterPassLisFrame();
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	19 f4       	brne	.+6      	; 0x866 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x30>
 860:	0e 94 a3 03 	call	0x746	; 0x746 <SpiMasterPassLisFrame>
 864:	ef cf       	rjmp	.-34     	; 0x844 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xe>
            else if (cmd == cmd_set_exposure_time) SetExposureTime(pnticks);
 866:	82 30       	cpi	r24, 0x02	; 2
 868:	29 f4       	brne	.+10     	; 0x874 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x3e>
 86a:	ce 01       	movw	r24, r28
 86c:	02 96       	adiw	r24, 0x02	; 2
 86e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <SetExposureTime>
 872:	e8 cf       	rjmp	.-48     	; 0x844 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xe>
            // test commands
            else if (cmd == cmd_send_four_dummy_bytes) DoCmdSendFourDummyBytes();
 874:	82 3f       	cpi	r24, 0xF2	; 242
 876:	31 f7       	brne	.-52     	; 0x844 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xe>
 878:	0e 94 21 03 	call	0x642	; 0x642 <DoCmdSendFourDummyBytes>
 87c:	e3 cf       	rjmp	.-58     	; 0x844 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xe>

0000087e <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 87e:	0e 94 17 03 	call	0x62e	; 0x62e <SetupDebugLed>
    /* SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_frame_of_adc_readings_and_write_to_USB_host(); */
    /* SpiMaster_get_Lis_frame_and_write_to_USB_host(); */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 882:	0e 94 9c 02 	call	0x538	; 0x538 <SpiMasterInit>
    UsbInit();
 886:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UsbInit>
    DebugPinInit();
 88a:	3d 9a       	sbi	0x07, 5	; 7
 88c:	45 9a       	sbi	0x08, 5	; 8
    SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave();
 88e:	0e 94 1b 04 	call	0x836	; 0x836 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>

00000892 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 892:	8a 95       	dec	r24
 894:	f1 f7       	brne	.-4      	; 0x892 <Delay3CpuCyclesPerTick_Implementation>
 896:	08 95       	ret

00000898 <_exit>:
 898:	f8 94       	cli

0000089a <__stop_program>:
 89a:	ff cf       	rjmp	.-2      	; 0x89a <__stop_program>
