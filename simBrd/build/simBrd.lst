
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000868  000008fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800154  00800154  00000950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000353b  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001238  00000000  00000000  000041fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000186a  00000000  00000000  00005433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00006ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ba  00000000  00000000  00007468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d46  00000000  00000000  00008822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 04 	call	0x80c	; 0x80c <main>
  9e:	0c 94 32 04 	jmp	0x864	; 0x864 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
    *port ^= (1<<bit);
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
}
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <BitIsClear+0xc>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <BitIsClear+0x8>
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	99 27       	eor	r25, r25
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	8f 27       	eor	r24, r31
}
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
  f0:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
  f4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ddr_register_>
  f8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ddr_register_+0x1>
  fc:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000100 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 100:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
 104:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <port_register_>
 108:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <port_register_+0x1>
 10c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000110 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 110:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
 114:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <port_register_>
 118:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <port_register_+0x1>
 11c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000120 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 120:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <ddr_register_+0x1>
 124:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ddr_register_>
    port_register_ = port_register;
 128:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <port_register_+0x1>
 12c:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <port_register_>
    pin_register_ = pin_register;
 130:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <pin_register_+0x1>
 134:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <pin_register_>
    debug_led_ = debug_led;
 138:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__data_end>
    DebugLedTurnOn();
 13c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 140:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 144:	09 95       	icall
    DebugLedTurnGreen();
 146:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 14a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 14e:	09 94       	ijmp

00000150 <FtSendCommand_Implementation>:
bool (*FtIsBusOk)(void) = FtIsBusOk_Implementation;
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtActivateInterface>
 158:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtActivateInterface+0x1>
 15c:	09 95       	icall
 15e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 162:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 166:	09 95       	icall
 168:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 16c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 170:	09 95       	icall
 172:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtOutputByte>
 176:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtOutputByte+0x1>
 17a:	8c 2f       	mov	r24, r28
 17c:	09 95       	icall
 17e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 182:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 186:	cf 91       	pop	r28
 188:	09 94       	ijmp

0000018a <FtBusTurnaround_Implementation>:
 18a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetSlaveDriveBus>
 18e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetSlaveDriveBus+0x1>
 192:	09 95       	icall
 194:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 198:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 19c:	09 95       	icall
 19e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1a2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1a6:	09 95       	icall
 1a8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1ac:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1b0:	09 94       	ijmp

000001b2 <FtWrite_Implementation>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 1bc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 1c0:	09 95       	icall
 1c2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 1c6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 1ca:	09 95       	icall
 1cc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1d0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 1d4:	88 81       	ld	r24, Y
 1d6:	09 95       	icall
 1d8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1dc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1e0:	09 95       	icall
 1e2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1e6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	09 94       	ijmp

000001f0 <FtLetMasterDriveBus_Implementation>:
 1f0:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 1f4:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <FtLetSlaveDriveBus_Implementation>:
 1fe:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 202:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 206:	10 82       	st	Z, r1
 208:	08 95       	ret

0000020a <FtReadData_Implementation>:
 20a:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_pin>
 20e:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_pin+0x1>
 212:	80 81       	ld	r24, Z
 214:	08 95       	ret

00000216 <FtWriteData_Implementation>:
 216:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 21a:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <FtActivateInterface_Implementation>:
 222:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <Ft1248_Ss>
 226:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 22a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 22e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000232 <FtPullData_Implementation>:
 232:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <Ft1248_Sck>
 236:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 23a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 23e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000242 <FtDeactivateInterface_Implementation>:
 242:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <Ft1248_Ss>
 246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 24e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000252 <FtPushData_Implementation>:
 252:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <Ft1248_Sck>
 256:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 25a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 25e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000262 <FtIsBusOk_Implementation>:
 262:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Ft1248_Miso>
 266:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Ft1248_pin>
 26a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <Ft1248_pin+0x1>
 26e:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsClear>

00000272 <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 27a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 27e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 282:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 284:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 288:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 28c:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 28e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 292:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 296:	09 95       	icall
 298:	c8 2f       	mov	r28, r24
 29a:	88 23       	and	r24, r24
 29c:	39 f0       	breq	.+14     	; 0x2ac <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 29e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 2a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 2a6:	09 95       	icall
 2a8:	f8 01       	movw	r30, r16
 2aa:	80 83       	st	Z, r24
    return true;
}
 2ac:	8c 2f       	mov	r24, r28
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <FtOutputByte_Implementation>:
 2b6:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 2ba:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2cc:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <Ft1248_Miso>
 2d0:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <Ft1248_ddr>
 2d4:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <Ft1248_ddr+0x1>
 2d8:	61 2f       	mov	r22, r17
 2da:	ce 01       	movw	r24, r28
 2dc:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2e0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 2e4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 2e8:	61 2f       	mov	r22, r17
 2ea:	8c 01       	movw	r16, r24
 2ec:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2f0:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 2f4:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 2f8:	10 82       	st	Z, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2fa:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 2fe:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 83       	st	Z, r24
}
void FtSckLow(void)
{
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 306:	f0 90 46 01 	lds	r15, 0x0146	; 0x800146 <Ft1248_Sck>
 30a:	6f 2d       	mov	r22, r15
 30c:	c8 01       	movw	r24, r16
 30e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 312:	6f 2d       	mov	r22, r15
 314:	ce 01       	movw	r24, r28
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 31a:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <Ft1248_Ss>
 31e:	6f 2d       	mov	r22, r15
 320:	c8 01       	movw	r24, r16
 322:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 326:	6f 2d       	mov	r22, r15
 328:	ce 01       	movw	r24, r28
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 334:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000338 <CmdLedRed>:
}
bool UsbWriteStatusOk(void)
{
    uint8_t const StatusOk = 0;
    return UsbWrite(&StatusOk,1);
}
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	0e 94 80 00 	call	0x100	; 0x100 <DebugLedTurnRed>
 346:	19 82       	std	Y+1, r1	; 0x01
 348:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 34c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 350:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 354:	09 95       	icall
 356:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 35a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 35e:	09 95       	icall
 360:	88 23       	and	r24, r24
 362:	81 f0       	breq	.+32     	; 0x384 <CmdLedRed+0x4c>
 364:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 368:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	09 95       	icall
 372:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 376:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 37a:	09 95       	icall
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret
 384:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 388:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 38c:	09 95       	icall
 38e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 392:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 396:	09 95       	icall
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <CmdLedGreen>:
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 3ae:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 3b2:	09 95       	icall
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 3ba:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 3be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 3c2:	09 95       	icall
 3c4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 3c8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 3cc:	09 95       	icall
 3ce:	88 23       	and	r24, r24
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <CmdLedGreen+0x52>
 3d2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 3d6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	09 95       	icall
 3e0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 3e4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 3e8:	09 95       	icall
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret
 3f2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3f6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3fa:	09 95       	icall
 3fc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 400:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 404:	09 95       	icall
 406:	0f 90       	pop	r0
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <CmdCfgLis>:
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	00 d0       	rcall	.+0      	; 0x41c <CmdCfgLis+0xe>
 41c:	00 d0       	rcall	.+0      	; 0x41e <CmdCfgLis+0x10>
 41e:	00 d0       	rcall	.+0      	; 0x420 <CmdCfgLis+0x12>
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 428:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 42c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 430:	09 95       	icall
 432:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 436:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 43a:	09 95       	icall
 43c:	88 23       	and	r24, r24
 43e:	09 f4       	brne	.+2      	; 0x442 <CmdCfgLis+0x34>
 440:	cd c0       	rjmp	.+410    	; 0x5dc <CmdCfgLis+0x1ce>
 442:	00 e0       	ldi	r16, 0x00	; 0
 444:	10 e0       	ldi	r17, 0x00	; 0
 446:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtRead>
 44a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtRead+0x1>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	8c 0f       	add	r24, r28
 454:	9d 1f       	adc	r25, r29
 456:	80 0f       	add	r24, r16
 458:	91 1f       	adc	r25, r17
 45a:	09 95       	icall
 45c:	81 11       	cpse	r24, r1
 45e:	89 c0       	rjmp	.+274    	; 0x572 <CmdCfgLis+0x164>
 460:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 464:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 468:	09 95       	icall
 46a:	8d ef       	ldi	r24, 0xFD	; 253
 46c:	8d 83       	std	Y+5, r24	; 0x05
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	8e 83       	std	Y+6, r24	; 0x06
 472:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 476:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 47a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 47e:	09 95       	icall
 480:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 484:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 488:	09 95       	icall
 48a:	88 23       	and	r24, r24
 48c:	09 f4       	brne	.+2      	; 0x490 <CmdCfgLis+0x82>
 48e:	bc c0       	rjmp	.+376    	; 0x608 <CmdCfgLis+0x1fa>
 490:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 494:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 498:	ce 01       	movw	r24, r28
 49a:	05 96       	adiw	r24, 0x05	; 5
 49c:	09 95       	icall
 49e:	88 23       	and	r24, r24
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <CmdCfgLis+0xa2>
 4a2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 4a6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 4aa:	ce 01       	movw	r24, r28
 4ac:	06 96       	adiw	r24, 0x06	; 6
 4ae:	09 95       	icall
 4b0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 4b4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 4b8:	09 95       	icall
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	8f 30       	cpi	r24, 0x0F	; 15
 4be:	09 f0       	breq	.+2      	; 0x4c2 <CmdCfgLis+0xb4>
 4c0:	6a c0       	rjmp	.+212    	; 0x596 <CmdCfgLis+0x188>
 4c2:	8a 81       	ldd	r24, Y+2	; 0x02
 4c4:	8f 3f       	cpi	r24, 0xFF	; 255
 4c6:	09 f0       	breq	.+2      	; 0x4ca <CmdCfgLis+0xbc>
 4c8:	66 c0       	rjmp	.+204    	; 0x596 <CmdCfgLis+0x188>
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	8f 3f       	cpi	r24, 0xFF	; 255
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <CmdCfgLis+0xc4>
 4d0:	62 c0       	rjmp	.+196    	; 0x596 <CmdCfgLis+0x188>
 4d2:	8c 81       	ldd	r24, Y+4	; 0x04
 4d4:	99 ef       	ldi	r25, 0xF9	; 249
 4d6:	98 13       	cpse	r25, r24
 4d8:	5e c0       	rjmp	.+188    	; 0x596 <CmdCfgLis+0x188>
 4da:	1d 82       	std	Y+5, r1	; 0x05
 4dc:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <FtCmd_Write>
 4e0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 4e4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 4e8:	81 2f       	mov	r24, r17
 4ea:	09 95       	icall
 4ec:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 4f0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 4f4:	09 95       	icall
 4f6:	88 23       	and	r24, r24
 4f8:	09 f4       	brne	.+2      	; 0x4fc <CmdCfgLis+0xee>
 4fa:	7b c0       	rjmp	.+246    	; 0x5f2 <CmdCfgLis+0x1e4>
 4fc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 500:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 504:	ce 01       	movw	r24, r28
 506:	05 96       	adiw	r24, 0x05	; 5
 508:	09 95       	icall
 50a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 50e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 512:	09 95       	icall
 514:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 518:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 51c:	81 2f       	mov	r24, r17
 51e:	09 95       	icall
 520:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 524:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 528:	09 95       	icall
 52a:	88 23       	and	r24, r24
 52c:	49 f1       	breq	.+82     	; 0x580 <CmdCfgLis+0x172>
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	7e 01       	movw	r14, r28
 534:	25 e0       	ldi	r18, 0x05	; 5
 536:	e2 0e       	add	r14, r18
 538:	f1 1c       	adc	r15, r1
 53a:	8c 01       	movw	r16, r24
 53c:	0f 5f       	subi	r16, 0xFF	; 255
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
 540:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 544:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 548:	09 95       	icall
 54a:	81 11       	cpse	r24, r1
 54c:	1f c0       	rjmp	.+62     	; 0x58c <CmdCfgLis+0x17e>
 54e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 552:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 556:	09 95       	icall
 558:	26 96       	adiw	r28, 0x06	; 6
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	f8 94       	cli
 55e:	de bf       	out	0x3e, r29	; 62
 560:	0f be       	out	0x3f, r0	; 63
 562:	cd bf       	out	0x3d, r28	; 61
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	08 95       	ret
 572:	0f 5f       	subi	r16, 0xFF	; 255
 574:	1f 4f       	sbci	r17, 0xFF	; 255
 576:	04 30       	cpi	r16, 0x04	; 4
 578:	11 05       	cpc	r17, r1
 57a:	09 f0       	breq	.+2      	; 0x57e <CmdCfgLis+0x170>
 57c:	64 cf       	rjmp	.-312    	; 0x446 <CmdCfgLis+0x38>
 57e:	98 cf       	rjmp	.-208    	; 0x4b0 <CmdCfgLis+0xa2>
 580:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 584:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 588:	09 95       	icall
 58a:	e1 cf       	rjmp	.-62     	; 0x54e <CmdCfgLis+0x140>
 58c:	c8 01       	movw	r24, r16
 58e:	0e 15       	cp	r16, r14
 590:	1f 05       	cpc	r17, r15
 592:	99 f6       	brne	.-90     	; 0x53a <CmdCfgLis+0x12c>
 594:	dc cf       	rjmp	.-72     	; 0x54e <CmdCfgLis+0x140>
 596:	8e ef       	ldi	r24, 0xFE	; 254
 598:	8d 83       	std	Y+5, r24	; 0x05
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	8e 83       	std	Y+6, r24	; 0x06
 59e:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 5a2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 5a6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 5aa:	09 95       	icall
 5ac:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 5b0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 5b4:	09 95       	icall
 5b6:	88 23       	and	r24, r24
 5b8:	19 f3       	breq	.-58     	; 0x580 <CmdCfgLis+0x172>
 5ba:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 5be:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 5c2:	ce 01       	movw	r24, r28
 5c4:	05 96       	adiw	r24, 0x05	; 5
 5c6:	09 95       	icall
 5c8:	88 23       	and	r24, r24
 5ca:	09 f2       	breq	.-126    	; 0x54e <CmdCfgLis+0x140>
 5cc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 5d0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 5d4:	ce 01       	movw	r24, r28
 5d6:	06 96       	adiw	r24, 0x06	; 6
 5d8:	09 95       	icall
 5da:	b9 cf       	rjmp	.-142    	; 0x54e <CmdCfgLis+0x140>
 5dc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 5e0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 5e4:	09 95       	icall
 5e6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 5ea:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 5ee:	09 95       	icall
 5f0:	3c cf       	rjmp	.-392    	; 0x46a <CmdCfgLis+0x5c>
 5f2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 5f6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 5fa:	09 95       	icall
 5fc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 600:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 604:	09 95       	icall
 606:	86 cf       	rjmp	.-244    	; 0x514 <CmdCfgLis+0x106>
 608:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 60c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 610:	09 95       	icall
 612:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 616:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 61a:	09 95       	icall
 61c:	4e cf       	rjmp	.-356    	; 0x4ba <CmdCfgLis+0xac>

0000061e <UsbInit>:
 61e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <FtInit>

00000622 <LookupCmd>:
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	48 f4       	brcc	.+18     	; 0x638 <LookupCmd+0x16>
 626:	e8 2f       	mov	r30, r24
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	e4 5d       	subi	r30, 0xD4	; 212
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	80 81       	ld	r24, Z
 634:	91 81       	ldd	r25, Z+1	; 0x01
 636:	08 95       	ret
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	08 95       	ret

0000063e <UsbReadOneByte>:
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	ec 01       	movw	r28, r24
 644:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 648:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 64c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 650:	09 95       	icall
 652:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 656:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 65a:	09 95       	icall
 65c:	88 23       	and	r24, r24
 65e:	79 f0       	breq	.+30     	; 0x67e <UsbReadOneByte+0x40>
 660:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtRead>
 664:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtRead+0x1>
 668:	ce 01       	movw	r24, r28
 66a:	09 95       	icall
 66c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 670:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 674:	09 95       	icall
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret
 67e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 682:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 686:	09 95       	icall
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	00 d0       	rcall	.+0      	; 0x698 <UsbWriteStatusInvalid+0x8>
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	99 83       	std	Y+1, r25	; 0x01
 6a0:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 6a2:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 6a6:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 6aa:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 6ae:	09 95       	icall
    if (!FtBusTurnaround())
 6b0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 6b4:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 6b8:	09 95       	icall
 6ba:	88 23       	and	r24, r24
 6bc:	19 f1       	breq	.+70     	; 0x704 <UsbWriteStatusInvalid+0x74>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 6be:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 6c2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 6cc:	81 11       	cpse	r24, r1
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <UsbWriteStatusInvalid+0x5a>
 6d0:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 6d2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 6d6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 6da:	09 95       	icall
 6dc:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 6ea:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 6ee:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 6f2:	ce 01       	movw	r24, r28
 6f4:	02 96       	adiw	r24, 0x02	; 2
 6f6:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 6f8:	88 23       	and	r24, r24
 6fa:	11 f0       	breq	.+4      	; 0x700 <UsbWriteStatusInvalid+0x70>
 6fc:	12 e0       	ldi	r17, 0x02	; 2
 6fe:	e9 cf       	rjmp	.-46     	; 0x6d2 <UsbWriteStatusInvalid+0x42>
 700:	11 e0       	ldi	r17, 0x01	; 1
 702:	e7 cf       	rjmp	.-50     	; 0x6d2 <UsbWriteStatusInvalid+0x42>
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        DebugLedTurnRedToShowError();
 704:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 708:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 70c:	09 95       	icall
        FtDeactivateInterface();
 70e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 712:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 716:	09 95       	icall
 718:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	08 95       	ret

00000726 <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 726:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiStatusRegister>
 72a:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiStatusRegister+0x1>
 72e:	09 95       	icall
 730:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ReadSpiDataRegister>
 734:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ReadSpiDataRegister+0x1>
 738:	09 94       	ijmp

0000073a <ReadSpiStatusRegister_Implementation>:
 73a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spsr>
 73e:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spsr+0x1>
 742:	80 81       	ld	r24, Z
 744:	08 95       	ret

00000746 <ReadSpiDataRegister_Implementation>:
 746:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spdr>
 74a:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spdr+0x1>
 74e:	80 81       	ld	r24, Z
 750:	08 95       	ret

00000752 <EnableSpi_Implementation>:
 752:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <Spi_Enable>
 756:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Spi_spcr>
 75a:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Spi_spcr+0x1>
 75e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000762 <SpiMasterCloseSpi_Implementation>:
 762:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_Ss>
 766:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Spi_port>
 76a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Spi_port+0x1>
 76e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000772 <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
    SlaveSelectIdleHigh();
 778:	0e 94 b1 03 	call	0x762	; 0x762 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 77c:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <Spi_Miso>
 780:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <Spi_ddr>
 784:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <Spi_ddr+0x1>
 788:	61 2f       	mov	r22, r17
 78a:	ce 01       	movw	r24, r28
 78c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 790:	61 2f       	mov	r22, r17
 792:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Spi_port>
 796:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Spi_port+0x1>
 79a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 79e:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_Ss>
 7a2:	ce 01       	movw	r24, r28
 7a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 7a8:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Spi_Mosi>
 7ac:	ce 01       	movw	r24, r28
 7ae:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 7b2:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Spi_Sck>
 7b6:	ce 01       	movw	r24, r28
 7b8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 7bc:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <Spi_spcr>
 7c0:	d0 91 40 01 	lds	r29, 0x0140	; 0x800140 <Spi_spcr+0x1>
 7c4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Spi_MasterSlaveSelect>
 7c8:	ce 01       	movw	r24, r28
 7ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 7ce:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <Spi_ClockRateBit0>
 7d2:	ce 01       	movw	r24, r28
 7d4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 7d8:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <Spi_ClockRateBit1>
 7dc:	ce 01       	movw	r24, r28
 7de:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 7e2:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <Spi_DoubleClockRate>
 7e6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Spi_spsr>
 7ea:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Spi_spsr+0x1>
 7ee:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 7f2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <EnableSpi>
 7f6:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <EnableSpi+0x1>
 7fa:	09 95       	icall
    ClearPendingSpiInterrupt();
 7fc:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ClearPendingSpiInterrupt>
 800:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ClearPendingSpiInterrupt+0x1>
}
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	1f 91       	pop	r17
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
    ClearPendingSpiInterrupt();
 80a:	09 94       	ijmp

0000080c <main>:
} while (0)
#define DebugPinLow()  MacroClearBit(&PORTC, PC5)
#define DebugPinHigh() MacroSetBit(&PORTC, PC5)

int main()
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	1f 92       	push	r1
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
uint16_t nbytes_in_frame;

/* =====[ Helper function for main setup ]===== */
void SetupDebugLed(void)
{
    DebugLedInit(
 816:	23 e0       	ldi	r18, 0x03	; 3
 818:	46 e2       	ldi	r20, 0x26	; 38
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	68 e2       	ldi	r22, 0x28	; 40
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	87 e2       	ldi	r24, 0x27	; 39
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 90 00 	call	0x120	; 0x120 <DebugLedInit>

int main()
{
    /* =====[ Setup ]===== */
    SetupDebugLed();
    SpiMasterInit();
 828:	0e 94 b9 03 	call	0x772	; 0x772 <SpiMasterInit>
    UsbInit();
 82c:	0e 94 0f 03 	call	0x61e	; 0x61e <UsbInit>
    DebugPinInit();
 830:	3d 9a       	sbi	0x07, 5	; 7
 832:	45 9a       	sbi	0x08, 5	; 8
    nbytes_in_frame = sizeof_full_frame;
 834:	80 e2       	ldi	r24, 0x20	; 32
 836:	96 e0       	ldi	r25, 0x06	; 6
 838:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <nbytes_in_frame+0x1>
 83c:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <nbytes_in_frame>
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    /* uint8_t cmd; */
    jump_index cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 840:	ce 01       	movw	r24, r28
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	0e 94 1f 03 	call	0x63e	; 0x63e <UsbReadOneByte>
 848:	88 23       	and	r24, r24
 84a:	d1 f3       	breq	.-12     	; 0x840 <main+0x34>
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	0e 94 11 03 	call	0x622	; 0x622 <LookupCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	19 f0       	breq	.+6      	; 0x85c <main+0x50>
        /* Do command if it is valid. */
        else CmdFn();
 856:	fc 01       	movw	r30, r24
 858:	09 95       	icall
 85a:	f2 cf       	rjmp	.-28     	; 0x840 <main+0x34>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	0e 94 48 03 	call	0x690	; 0x690 <UsbWriteStatusInvalid>
 862:	ee cf       	rjmp	.-36     	; 0x840 <main+0x34>

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>
