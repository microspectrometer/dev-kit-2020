
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800122  00800122  00000390  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c7  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b86  00000000  00000000  00001d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082a  00000000  00000000  00002905  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b95  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004269  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  9e:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 116:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ddr_register_>
 11a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 128:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <port_register_>
 12c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <__data_end>
 13a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <port_register_>
 13e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <ddr_register_+0x1>
 14c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ddr_register_>
    port_register_ = port_register;
 150:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <port_register_+0x1>
 154:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <port_register_>
    pin_register_ = pin_register;
 158:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <pin_register_+0x1>
 15c:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end>
    DebugLedTurnOn();
 164:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnOn>
 168:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnGreen>
 172:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <ReadSpiDataRegister_Implementation>:
    while (!SpiTransferIsDone()) ;
    SpiMasterCloseSpi();
}
static uint8_t ReadSpiDataRegister_Implementation(void)
{
    return *Spi_spdr;
 17a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <Spi_spdr>
 17e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <Spi_spdr+0x1>
 182:	80 81       	ld	r24, Z
}
 184:	08 95       	ret

00000186 <SpiMasterOpenSpi_Implementation>:
//
// TODO: remove Open and Close from the public API
//
static void SpiMasterOpenSpi_Implementation(void)
{
    ClearBit(Spi_port, Spi_Ss);
 186:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <Spi_Ss>
 18a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Spi_port>
 18e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Spi_port+0x1>
 192:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 196:	08 95       	ret

00000198 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 198:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <Spi_Ss>
 19c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Spi_port>
 1a0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Spi_port+0x1>
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1a8:	08 95       	ret

000001aa <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 1aa:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Spi_InterruptFlag>
 1ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Spi_spsr>
 1b2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Spi_spsr+0x1>
 1b6:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 1ba:	08 95       	ret

000001bc <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(garbage);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_port, Spi_Miso);
 1bc:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Spi_Miso>
 1c0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Spi_port>
 1c4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Spi_port+0x1>
 1c8:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 1cc:	08 95       	ret

000001ce <SpiMasterInit>:
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
}
void SpiMasterInit(void)
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
    SlaveSelectIdleHigh();
 1d2:	0e 94 cc 00 	call	0x198	; 0x198 <SpiMasterCloseSpi_Implementation>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 1d6:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <Spi_ddr>
 1da:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <Spi_ddr+0x1>
 1de:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <Spi_Ss>
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 1e8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Spi_Mosi>
 1ec:	ce 01       	movw	r24, r28
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 1f2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Spi_Sck>
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 1fc:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <Spi_spcr>
 200:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <Spi_spcr+0x1>
 204:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Spi_MasterSlaveSelect>
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 20e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_ClockRateBit0>
 212:	ce 01       	movw	r24, r28
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 218:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <Spi_ClockRateBit1>
 21c:	ce 01       	movw	r24, r28
 21e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 222:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Spi_DoubleClockRate>
 226:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Spi_spsr>
 22a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Spi_spsr+0x1>
 22e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 232:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Spi_Enable>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 242:	cf 93       	push	r28
 244:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 246:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <SpiMasterOpenSpi>
 24a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <SpiMasterOpenSpi+0x1>
 24e:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 250:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <Spi_spdr>
 254:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <Spi_spdr+0x1>
 258:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 25a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <SpiTransferIsDone>
 25e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <SpiTransferIsDone+0x1>
 262:	09 95       	icall
 264:	88 23       	and	r24, r24
 266:	c9 f3       	breq	.-14     	; 0x25a <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 268:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <SpiMasterCloseSpi>
 26c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <SpiMasterCloseSpi+0x1>
 270:	09 95       	icall
}
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <SpiMasterRead>:
}
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t SpiMasterRead(void)
{
    uint8_t garbage = 0xFF;
    SpiMasterWrite(garbage);
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	0e 94 21 01 	call	0x242	; 0x242 <SpiMasterWrite>
    return ReadSpiDataRegister();
 27c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiDataRegister>
 280:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiDataRegister+0x1>
 284:	09 95       	icall
}
 286:	08 95       	ret

00000288 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_port, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 288:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <SpiResponseIsReady>
 28c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <SpiResponseIsReady+0x1>
 290:	09 95       	icall
 292:	88 23       	and	r24, r24
 294:	c9 f3       	breq	.-14     	; 0x288 <SpiMasterWaitForResponse>
}
 296:	08 95       	ret

00000298 <SetupDebugLed>:
    // Visually confirm the debug LED turns red.
}
void test_SpiMaster(void)
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02
 298:	23 e0       	ldi	r18, 0x03	; 3
 29a:	46 e2       	ldi	r20, 0x26	; 38
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	68 e2       	ldi	r22, 0x28	; 40
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	87 e2       	ldi	r24, 0x27	; 39
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 2aa:	08 95       	ret

000002ac <Slave_receives_request_and_sends_response_when_ready>:
 2ac:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SpiMasterInit>
 2b0:	8b ea       	ldi	r24, 0xAB	; 171
 2b2:	0e 94 21 01 	call	0x242	; 0x242 <SpiMasterWrite>
 2b6:	0e 94 44 01 	call	0x288	; 0x288 <SpiMasterWaitForResponse>
 2ba:	0e 94 3b 01 	call	0x276	; 0x276 <SpiMasterRead>
 2be:	8a 3b       	cpi	r24, 0xBA	; 186
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <Slave_receives_request_and_sends_response_when_ready+0x1a>
 2c2:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 2c6:	08 95       	ret

000002c8 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 2c8:	0e 94 4c 01 	call	0x298	; 0x298 <SetupDebugLed>
    // Visually confirm the debug LED turns red.
}
void test_SpiMaster(void)
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02
 2cc:	0e 94 56 01 	call	0x2ac	; 0x2ac <Slave_receives_request_and_sends_response_when_ready>
    SetupDebugLed();
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    test_SpiMaster(); // All test pass 2018-08-02
}
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	08 95       	ret

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
