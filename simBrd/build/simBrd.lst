
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000004fa  0000058e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  0080014a  0080014a  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044f4  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001384  00000000  00000000  00004f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002074  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b8c  00000000  00000000  0000830c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000185b  00000000  00000000  00008e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002425  00000000  00000000  0000a6f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  0000cb18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 37       	cpi	r26, 0x73	; 115
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
  9e:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
    *port ^= (1<<bit);
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
}
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <BitIsClear+0xc>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <BitIsClear+0x8>
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	99 27       	eor	r25, r25
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	8f 27       	eor	r24, r31
}
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <DebugLedTurnOn_Implementation>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
  f0:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__data_end>
  f4:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <ddr_register_>
  f8:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <ddr_register_+0x1>
  fc:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000100 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 100:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <__data_end>
 104:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <port_register_>
 108:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <port_register_+0x1>
 10c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000110 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 110:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <ddr_register_+0x1>
 114:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <ddr_register_>
    port_register_ = port_register;
 118:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <port_register_+0x1>
 11c:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <port_register_>
    pin_register_ = pin_register;
 120:	50 93 4c 01 	sts	0x014C, r21	; 0x80014c <pin_register_+0x1>
 124:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <pin_register_>
    debug_led_ = debug_led;
 128:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <__data_end>
    DebugLedTurnOn();
 12c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnOn>
 130:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnOn+0x1>
 134:	09 95       	icall
    DebugLedTurnGreen();
 136:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnGreen>
 13a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnGreen+0x1>
 13e:	09 94       	ijmp

00000140 <FtSendCommand_Implementation>:
bool (*FtIsBusOk)(void) = FtIsBusOk_Implementation;
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtActivateInterface>
 148:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtActivateInterface+0x1>
 14c:	09 95       	icall
 14e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPushData>
 152:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPushData+0x1>
 156:	09 95       	icall
 158:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtLetMasterDriveBus>
 15c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtLetMasterDriveBus+0x1>
 160:	09 95       	icall
 162:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtOutputByte>
 166:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtOutputByte+0x1>
 16a:	8c 2f       	mov	r24, r28
 16c:	09 95       	icall
 16e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtPullData>
 172:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtPullData+0x1>
 176:	cf 91       	pop	r28
 178:	09 94       	ijmp

0000017a <FtBusTurnaround_Implementation>:
 17a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetSlaveDriveBus>
 17e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetSlaveDriveBus+0x1>
 182:	09 95       	icall
 184:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPushData>
 188:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPushData+0x1>
 18c:	09 95       	icall
 18e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtPullData>
 192:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtPullData+0x1>
 196:	09 95       	icall
 198:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtIsBusOk>
 19c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtIsBusOk+0x1>
 1a0:	09 94       	ijmp

000001a2 <FtLetMasterDriveBus_Implementation>:
 1a2:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <FtMiosio_ddr>
 1a6:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <FtMiosio_ddr+0x1>
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <FtLetSlaveDriveBus_Implementation>:
 1b0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <FtMiosio_ddr>
 1b4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <FtMiosio_ddr+0x1>
 1b8:	10 82       	st	Z, r1
 1ba:	08 95       	ret

000001bc <FtReadData_Implementation>:
 1bc:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <FtMiosio_pin>
 1c0:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <FtMiosio_pin+0x1>
 1c4:	80 81       	ld	r24, Z
 1c6:	08 95       	ret

000001c8 <FtActivateInterface_Implementation>:
 1c8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Ft1248_Ss>
 1cc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Ft1248_port>
 1d0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Ft1248_port+0x1>
 1d4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001d8 <FtPullData_Implementation>:
 1d8:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Ft1248_Sck>
 1dc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Ft1248_port>
 1e0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Ft1248_port+0x1>
 1e4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001e8 <FtDeactivateInterface_Implementation>:
 1e8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Ft1248_Ss>
 1ec:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Ft1248_port>
 1f0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Ft1248_port+0x1>
 1f4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001f8 <FtPushData_Implementation>:
 1f8:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Ft1248_Sck>
 1fc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Ft1248_port>
 200:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Ft1248_port+0x1>
 204:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000208 <FtIsBusOk_Implementation>:
 208:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Ft1248_Miso>
 20c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Ft1248_pin>
 210:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <Ft1248_pin+0x1>
 214:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsClear>

00000218 <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 220:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPushData>
 224:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPushData+0x1>
 228:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 22a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtPullData>
 22e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtPullData+0x1>
 232:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 234:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtIsBusOk>
 238:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtIsBusOk+0x1>
 23c:	09 95       	icall
 23e:	c8 2f       	mov	r28, r24
 240:	88 23       	and	r24, r24
 242:	39 f0       	breq	.+14     	; 0x252 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 244:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtReadData>
 248:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtReadData+0x1>
 24c:	09 95       	icall
 24e:	f8 01       	movw	r30, r16
 250:	80 83       	st	Z, r24
    return true;
}
 252:	8c 2f       	mov	r24, r28
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <FtOutputByte_Implementation>:
 25c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <FtMiosio_port>
 260:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <FtMiosio_port+0x1>
 264:	80 83       	st	Z, r24
 266:	08 95       	ret

00000268 <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 272:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <Ft1248_Miso>
 276:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <Ft1248_ddr>
 27a:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <Ft1248_ddr+0x1>
 27e:	61 2f       	mov	r22, r17
 280:	ce 01       	movw	r24, r28
 282:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 286:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Ft1248_port>
 28a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Ft1248_port+0x1>
 28e:	61 2f       	mov	r22, r17
 290:	8c 01       	movw	r16, r24
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 296:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <FtMiosio_ddr>
 29a:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <FtMiosio_ddr+0x1>
 29e:	10 82       	st	Z, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2a0:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <FtMiosio_port>
 2a4:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <FtMiosio_port+0x1>
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	80 83       	st	Z, r24
}
void FtSckLow(void)
{
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ac:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <Ft1248_Sck>
 2b0:	6f 2d       	mov	r22, r15
 2b2:	c8 01       	movw	r24, r16
 2b4:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2b8:	6f 2d       	mov	r22, r15
 2ba:	ce 01       	movw	r24, r28
 2bc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 2c0:	f0 90 3c 01 	lds	r15, 0x013C	; 0x80013c <Ft1248_Ss>
 2c4:	6f 2d       	mov	r22, r15
 2c6:	c8 01       	movw	r24, r16
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 2cc:	6f 2d       	mov	r22, r15
 2ce:	ce 01       	movw	r24, r28
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 2da:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000002de <UsbInit>:
#include "Ft1248.h"
#include "DebugLed.h"

void UsbInit(void)
{
    FtInit();
 2de:	0c 94 34 01 	jmp	0x268	; 0x268 <FtInit>

000002e2 <UsbReadOneByte>:
}
uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 2e8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 2ec:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 2f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <FtCmd_Read>
 2f4:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 2f6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 2fa:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 2fe:	09 95       	icall
    if (!has_data_to_read)
 300:	88 23       	and	r24, r24
 302:	79 f0       	breq	.+30     	; 0x322 <UsbReadOneByte+0x40>
        // Use this in place of checking if Ft_Miso is low in app.
        /* DebugLedTurnRedToShowError(); */
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 304:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 308:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 30c:	ce 01       	movw	r24, r28
 30e:	09 95       	icall
    FtDeactivateInterface();
 310:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtDeactivateInterface>
 314:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtDeactivateInterface+0x1>
 318:	09 95       	icall
    return num_bytes_read;
 31a:	81 e0       	ldi	r24, 0x01	; 1
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret
    {
        // sad path
        // No, not an error. Not a sad path.
        // Use this in place of checking if Ft_Miso is low in app.
        /* DebugLedTurnRedToShowError(); */
        FtDeactivateInterface();
 322:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtDeactivateInterface>
 326:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtDeactivateInterface+0x1>
 32a:	09 95       	icall
        return num_bytes_read;
 32c:	80 e0       	ldi	r24, 0x00	; 0
    }
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 334:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiStatusRegister>
 338:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiStatusRegister+0x1>
 33c:	09 95       	icall
 33e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ReadSpiDataRegister>
 342:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ReadSpiDataRegister+0x1>
 346:	09 94       	ijmp

00000348 <ReadSpiStatusRegister_Implementation>:
 348:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Spi_spsr>
 34c:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Spi_spsr+0x1>
 350:	80 81       	ld	r24, Z
 352:	08 95       	ret

00000354 <ReadSpiDataRegister_Implementation>:
 354:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Spi_spdr>
 358:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Spi_spdr+0x1>
 35c:	80 81       	ld	r24, Z
 35e:	08 95       	ret

00000360 <EnableSpi_Implementation>:
 360:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <Spi_Enable>
 364:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Spi_spcr>
 368:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Spi_spcr+0x1>
 36c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000370 <SpiMasterCloseSpi_Implementation>:
 370:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <Spi_Ss>
 374:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Spi_port>
 378:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Spi_port+0x1>
 37c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000380 <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
    SlaveSelectIdleHigh();
 386:	0e 94 b8 01 	call	0x370	; 0x370 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 38a:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <Spi_Miso>
 38e:	c0 91 38 01 	lds	r28, 0x0138	; 0x800138 <Spi_ddr>
 392:	d0 91 39 01 	lds	r29, 0x0139	; 0x800139 <Spi_ddr+0x1>
 396:	61 2f       	mov	r22, r17
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 39e:	61 2f       	mov	r22, r17
 3a0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <Spi_port>
 3a4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <Spi_port+0x1>
 3a8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 3ac:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <Spi_Ss>
 3b0:	ce 01       	movw	r24, r28
 3b2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 3b6:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <Spi_Mosi>
 3ba:	ce 01       	movw	r24, r28
 3bc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 3c0:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <Spi_Sck>
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 3ca:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <Spi_spcr>
 3ce:	d0 91 35 01 	lds	r29, 0x0135	; 0x800135 <Spi_spcr+0x1>
 3d2:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <Spi_MasterSlaveSelect>
 3d6:	ce 01       	movw	r24, r28
 3d8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 3dc:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <Spi_ClockRateBit0>
 3e0:	ce 01       	movw	r24, r28
 3e2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 3e6:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <Spi_ClockRateBit1>
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 3f0:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Spi_DoubleClockRate>
 3f4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Spi_spsr>
 3f8:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Spi_spsr+0x1>
 3fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 400:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EnableSpi>
 404:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EnableSpi+0x1>
 408:	09 95       	icall
    ClearPendingSpiInterrupt();
 40a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ClearPendingSpiInterrupt>
 40e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ClearPendingSpiInterrupt+0x1>
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
    ClearPendingSpiInterrupt();
 418:	09 94       	ijmp

0000041a <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>:
    *(pnticks--) = *Spi_spdr;               // store lsb
    // Debug: echo the bytes back.
    UsbWrite(pnticks, 2);
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 d0       	rcall	.+0      	; 0x420 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x6>
 420:	00 d0       	rcall	.+0      	; 0x422 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x8>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
    while(1) // loop forever responding to the USB host
    {
        uint8_t cmd;
        if (UsbReadOneByte(&cmd))
 426:	ce 01       	movw	r24, r28
 428:	04 96       	adiw	r24, 0x04	; 4
 42a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <UsbReadOneByte>
 42e:	88 23       	and	r24, r24
 430:	d1 f3       	breq	.-12     	; 0x426 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xc>
        {
            if (cmd == cmd_write_cfg_to_lis)
 432:	8c 81       	ldd	r24, Y+4	; 0x04
 434:	87 30       	cpi	r24, 0x07	; 7
 436:	b9 f7       	brne	.-18     	; 0x426 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xc>
                    // exit if any byte is not valid
                // TODO: gain and row select are themselves structs

                /* Wait until each byte is available, then read it. */
                // TODO: add timeout to while looping
                while (!UsbReadOneByte(&cfg.bin_on_off));
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <UsbReadOneByte>
 440:	88 23       	and	r24, r24
 442:	d1 f3       	breq	.-12     	; 0x438 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x1e>
                while (!UsbReadOneByte(&cfg.gain_select));
 444:	ce 01       	movw	r24, r28
 446:	02 96       	adiw	r24, 0x02	; 2
 448:	0e 94 71 01 	call	0x2e2	; 0x2e2 <UsbReadOneByte>
 44c:	88 23       	and	r24, r24
 44e:	d1 f3       	breq	.-12     	; 0x444 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x2a>
                while (!UsbReadOneByte(&cfg.row_select));
 450:	ce 01       	movw	r24, r28
 452:	03 96       	adiw	r24, 0x03	; 3
 454:	0e 94 71 01 	call	0x2e2	; 0x2e2 <UsbReadOneByte>
 458:	88 23       	and	r24, r24
 45a:	d1 f3       	breq	.-12     	; 0x450 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x36>
                /* =====[ Quick dumb test for now ]===== */
                if (cfg.bin_on_off == cmd_cfg_summing_mode_on)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	86 30       	cpi	r24, 0x06	; 6
 460:	11 f1       	breq	.+68     	; 0x4a6 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x8c>
                {
                    MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
                }
                if (cfg.gain_select == cmd_cfg_lis_gain_1x)
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	8b 30       	cpi	r24, 0x0B	; 11
 466:	89 f0       	breq	.+34     	; 0x48a <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x70>
                {
                    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
                }
                if (cfg.row_select == cmd_cfg_lis_rowselect_12345)
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	8c 30       	cpi	r24, 0x0C	; 12
 46c:	e1 f6       	brne	.-72     	; 0x426 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xc>
                {
                    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12345);
 46e:	2a 98       	cbi	0x05, 2	; 5
 470:	8e bd       	out	0x2e, r24	; 46
 472:	0d b4       	in	r0, 0x2d	; 45
 474:	07 fe       	sbrs	r0, 7
 476:	fd cf       	rjmp	.-6      	; 0x472 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x58>
 478:	8e b5       	in	r24, 0x2e	; 46
 47a:	2a 9a       	sbi	0x05, 2	; 5
 47c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Delay3CpuCyclesPerTick>
 480:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Delay3CpuCyclesPerTick+0x1>
 484:	82 e3       	ldi	r24, 0x32	; 50
 486:	09 95       	icall
                }
            }
        }
    }
 488:	ce cf       	rjmp	.-100    	; 0x426 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xc>
                {
                    MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
                }
                if (cfg.gain_select == cmd_cfg_lis_gain_1x)
                {
                    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
 48a:	2a 98       	cbi	0x05, 2	; 5
 48c:	8e bd       	out	0x2e, r24	; 46
 48e:	0d b4       	in	r0, 0x2d	; 45
 490:	07 fe       	sbrs	r0, 7
 492:	fd cf       	rjmp	.-6      	; 0x48e <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x74>
 494:	8e b5       	in	r24, 0x2e	; 46
 496:	2a 9a       	sbi	0x05, 2	; 5
 498:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Delay3CpuCyclesPerTick>
 49c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Delay3CpuCyclesPerTick+0x1>
 4a0:	82 e3       	ldi	r24, 0x32	; 50
 4a2:	09 95       	icall
 4a4:	e1 cf       	rjmp	.-62     	; 0x468 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x4e>
                while (!UsbReadOneByte(&cfg.gain_select));
                while (!UsbReadOneByte(&cfg.row_select));
                /* =====[ Quick dumb test for now ]===== */
                if (cfg.bin_on_off == cmd_cfg_summing_mode_on)
                {
                    MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
 4a6:	2a 98       	cbi	0x05, 2	; 5
 4a8:	8e bd       	out	0x2e, r24	; 46
 4aa:	0d b4       	in	r0, 0x2d	; 45
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x90>
 4b0:	8e b5       	in	r24, 0x2e	; 46
 4b2:	2a 9a       	sbi	0x05, 2	; 5
 4b4:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Delay3CpuCyclesPerTick>
 4b8:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Delay3CpuCyclesPerTick+0x1>
 4bc:	82 e3       	ldi	r24, 0x32	; 50
 4be:	09 95       	icall
 4c0:	d0 cf       	rjmp	.-96     	; 0x462 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x48>

000004c2 <main>:
{
    EchoByte_reads_a_byte_and_writes_it_back_to_the_host(); // PASS 2018-07-28
}
void SetupDebugLed(void)
{
    DebugLedInit(
 4c2:	23 e0       	ldi	r18, 0x03	; 3
 4c4:	46 e2       	ldi	r20, 0x26	; 38
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	68 e2       	ldi	r22, 0x28	; 40
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	87 e2       	ldi	r24, 0x27	; 39
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 88 00 	call	0x110	; 0x110 <DebugLedInit>
    /* SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_frame_of_adc_readings_and_write_to_USB_host(); */
    /* SpiMaster_get_Lis_frame_and_write_to_USB_host(); */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 4d4:	0e 94 c0 01 	call	0x380	; 0x380 <SpiMasterInit>
    UsbInit();
 4d8:	0e 94 6f 01 	call	0x2de	; 0x2de <UsbInit>
    DebugPinInit();
 4dc:	3d 9a       	sbi	0x07, 5	; 7
 4de:	45 9a       	sbi	0x08, 5	; 8
    nbytes_in_frame = sizeof_full_frame; // initialize global `nbytes_in_frame`
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	96 e0       	ldi	r25, 0x06	; 6
 4e4:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <nbytes_in_frame+0x1>
 4e8:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <nbytes_in_frame>
    SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave();
 4ec:	0e 94 0d 02 	call	0x41a	; 0x41a <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>

000004f0 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4f0:	8a 95       	dec	r24
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <Delay3CpuCyclesPerTick_Implementation>
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
