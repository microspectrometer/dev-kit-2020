
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000800  00000894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080015e  0080015e  000008f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032b3  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001107  00000000  00000000  00003fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001689  00000000  00000000  000050d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000098c  00000000  00000000  00006760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000158e  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001665  00000000  00000000  0000867a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  00009cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <main>
  9e:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

inline void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
}

inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  be:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <ToggleBit>:
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <ToggleBit+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <ToggleBit+0xa>
  ea:	24 27       	eor	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <BitIsSet+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <BitIsSet+0xa>
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	28 23       	and	r18, r24
 106:	39 23       	and	r19, r25
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	23 2b       	or	r18, r19
 10c:	09 f4       	brne	.+2      	; 0x110 <BitIsSet+0x20>
 10e:	80 e0       	ldi	r24, 0x00	; 0
}
 110:	08 95       	ret

00000112 <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <BitIsClear+0xc>
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <BitIsClear+0x8>
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	8f 27       	eor	r24, r31
}
 126:	81 70       	andi	r24, 0x01	; 1
 128:	08 95       	ret

0000012a <DebugLedTurnOn_Implementation>:
}
void (*DebugLedTurnOn)(void) = DebugLedTurnOn_Implementation;

void DebugLedTurnOff(void)
{
    ClearBit(ddr_register_, debug_led_);
 12a:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 12e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <ddr_register_>
 132:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <ddr_register_+0x1>
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 13a:	08 95       	ret

0000013c <DebugLedTurnRed>:
 13c:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 140:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <port_register_>
 144:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <port_register_+0x1>
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 14c:	08 95       	ret

0000014e <DebugLedTurnGreen_Implementation>:
 14e:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 152:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <port_register_>
 156:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <port_register_+0x1>
 15a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 15e:	08 95       	ret

00000160 <DebugLedInit>:
 160:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <ddr_register_+0x1>
 164:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <ddr_register_>
 168:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <port_register_+0x1>
 16c:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <port_register_>
 170:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <pin_register_+0x1>
 174:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <pin_register_>
 178:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__data_end>
 17c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 180:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 184:	09 95       	icall
 186:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 18a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 18e:	09 95       	icall
 190:	08 95       	ret

00000192 <DebugLedToggleColor>:
}
void (*DebugLedTurnRedToShowError)(void) = DebugLedTurnRed;

void DebugLedToggleColor(void)
{
    ToggleBit(port_register_, debug_led_);
 192:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__data_end>
 196:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <port_register_>
 19a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <port_register_+0x1>
 19e:	0e 94 6c 00 	call	0xd8	; 0xd8 <ToggleBit>
 1a2:	08 95       	ret

000001a4 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtActivateInterface>
 1ac:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtActivateInterface+0x1>
 1b0:	09 95       	icall
 1b2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1b6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1ba:	09 95       	icall
 1bc:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 1c0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 1c4:	09 95       	icall
 1c6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtOutputByte>
 1ca:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtOutputByte+0x1>
 1ce:	8c 2f       	mov	r24, r28
 1d0:	09 95       	icall
 1d2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1d6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1da:	09 95       	icall
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <FtBusTurnaround_Implementation>:
 1e0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetSlaveDriveBus>
 1e4:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetSlaveDriveBus+0x1>
 1e8:	09 95       	icall
 1ea:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1ee:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1f2:	09 95       	icall
 1f4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1f8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1fc:	09 95       	icall
 1fe:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 202:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 206:	09 95       	icall
 208:	08 95       	ret

0000020a <FtRead_Implementation>:
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	8c 01       	movw	r16, r24
 212:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 216:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 21a:	09 95       	icall
 21c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 220:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 224:	09 95       	icall
 226:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 22a:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 22e:	09 95       	icall
 230:	c8 2f       	mov	r28, r24
 232:	88 23       	and	r24, r24
 234:	39 f0       	breq	.+14     	; 0x244 <FtRead_Implementation+0x3a>
 236:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 23a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 23e:	09 95       	icall
 240:	f8 01       	movw	r30, r16
 242:	80 83       	st	Z, r24
 244:	8c 2f       	mov	r24, r28
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <FtWrite_Implementation>:
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
 254:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 258:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 25c:	09 95       	icall
 25e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 262:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 266:	09 95       	icall
 268:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 26c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 270:	88 81       	ld	r24, Y
 272:	09 95       	icall
 274:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 278:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 27c:	09 95       	icall
 27e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 282:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 286:	09 95       	icall
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <FtOutputByte_Implementation>:
 28e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_port>
 292:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_port+0x1>
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <FtLetMasterDriveBus_Implementation>:
 29a:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_ddr>
 29e:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_ddr+0x1>
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	80 83       	st	Z, r24
 2a6:	08 95       	ret

000002a8 <FtLetSlaveDriveBus_Implementation>:
 2a8:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_ddr>
 2ac:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_ddr+0x1>
 2b0:	10 82       	st	Z, r1
 2b2:	08 95       	ret

000002b4 <FtReadData_Implementation>:
 2b4:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <FtMiosio_pin>
 2b8:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <FtMiosio_pin+0x1>
 2bc:	80 81       	ld	r24, Z
 2be:	08 95       	ret

000002c0 <FtWriteData_Implementation>:
 2c0:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_port>
 2c4:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_port+0x1>
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret

000002cc <FtActivateInterface_Implementation>:
 2cc:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Ss>
 2d0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2d4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2d8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2dc:	08 95       	ret

000002de <FtPullData_Implementation>:
 2de:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <Ft1248_Sck>
 2e2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2e6:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2ea:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2ee:	08 95       	ret

000002f0 <FtDeactivateInterface_Implementation>:
 2f0:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Ss>
 2f4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 2f8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 2fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 300:	08 95       	ret

00000302 <FtPushData_Implementation>:
 302:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <Ft1248_Sck>
 306:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 30a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 30e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 312:	08 95       	ret

00000314 <FtIsBusOk_Implementation>:
 314:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <Ft1248_Miso>
 318:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Ft1248_pin>
 31c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Ft1248_pin+0x1>
 320:	0e 94 89 00 	call	0x112	; 0x112 <BitIsClear>
 324:	08 95       	ret

00000326 <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 326:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <Ft1248_Miso>
 32a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_ddr>
 32e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_ddr+0x1>
 332:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 336:	08 95       	ret

00000338 <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 338:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <Ft1248_Miso>
 33c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 340:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 344:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 348:	08 95       	ret

0000034a <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 34a:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_ddr>
 34e:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_ddr+0x1>
 352:	10 82       	st	Z, r1
 354:	08 95       	ret

00000356 <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 356:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_port>
 35a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_port+0x1>
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	80 83       	st	Z, r24
 362:	08 95       	ret

00000364 <FtSckLow>:
}
void FtSckLow(void)
{
 364:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 366:	c0 91 50 01 	lds	r28, 0x0150	; 0x800150 <Ft1248_Sck>
 36a:	6c 2f       	mov	r22, r28
 36c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 370:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 374:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 378:	6c 2f       	mov	r22, r28
 37a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_ddr>
 37e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_ddr+0x1>
 382:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <FtSsHigh>:
void FtSsHigh(void)
{
 38a:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 38c:	c0 91 51 01 	lds	r28, 0x0151	; 0x800151 <Ft1248_Ss>
 390:	6c 2f       	mov	r22, r28
 392:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_port>
 396:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_port+0x1>
 39a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 39e:	6c 2f       	mov	r22, r28
 3a0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_ddr>
 3a4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_ddr+0x1>
 3a8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 3b0:	0e 94 93 01 	call	0x326	; 0x326 <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 3b4:	0e 94 9c 01 	call	0x338	; 0x338 <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 3b8:	0e 94 a5 01 	call	0x34a	; 0x34a <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 3bc:	0e 94 ab 01 	call	0x356	; 0x356 <FtEnablePullupsOnMiosio>
    FtSckLow();
 3c0:	0e 94 b2 01 	call	0x364	; 0x364 <FtSckLow>
    FtSsHigh();
 3c4:	0e 94 c5 01 	call	0x38a	; 0x38a <FtSsHigh>
 3c8:	08 95       	ret

000003ca <UsbInit>:
#include "Ft1248.h"
#include "DebugLed.h"

void UsbInit(void)
{
    FtInit();
 3ca:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <FtInit>
 3ce:	08 95       	ret

000003d0 <UsbRead>:
}
uint16_t UsbRead(uint8_t *read_buffer)
{
 3d0:	0f 93       	push	r16
 3d2:	1f 93       	push	r17
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	8c 01       	movw	r16, r24
    uint16_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3da:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 3de:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 3e2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <FtCmd_Read>
 3e6:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3e8:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 3ec:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 3f0:	09 95       	icall
    if (!has_data_to_read)
 3f2:	81 11       	cpse	r24, r1
 3f4:	0f c0       	rjmp	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
    {
        // sad path
        DebugLedTurnRedToShowError();
 3f6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3fa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3fe:	09 95       	icall
        FtDeactivateInterface();
 400:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 404:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 408:	09 95       	icall
        return num_bytes_read;
 40a:	c0 e0       	ldi	r28, 0x00	; 0
 40c:	d0 e0       	ldi	r29, 0x00	; 0
 40e:	13 c0       	rjmp	.+38     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
    }
    while (FtRead(read_buffer++))
    {
        num_bytes_read++;
 410:	21 96       	adiw	r28, 0x01	; 1
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	c0 e0       	ldi	r28, 0x00	; 0
 416:	d0 e0       	ldi	r29, 0x00	; 0
        // sad path
        DebugLedTurnRedToShowError();
        FtDeactivateInterface();
        return num_bytes_read;
    }
    while (FtRead(read_buffer++))
 418:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtRead>
 41c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtRead+0x1>
 420:	c8 01       	movw	r24, r16
 422:	8c 0f       	add	r24, r28
 424:	9d 1f       	adc	r25, r29
 426:	09 95       	icall
 428:	81 11       	cpse	r24, r1
 42a:	f2 cf       	rjmp	.-28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    {
        num_bytes_read++;
    }

    FtDeactivateInterface();
 42c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 430:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 434:	09 95       	icall
    return num_bytes_read;
}
 436:	ce 01       	movw	r24, r28
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	8c 01       	movw	r16, r24
 450:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 452:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 456:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 45a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FtCmd_Write>
 45e:	09 95       	icall
    if (!FtBusTurnaround())
 460:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 464:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 468:	09 95       	icall
 46a:	81 11       	cpse	r24, r1
 46c:	0d c0       	rjmp	.+26     	; 0x488 <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 46e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 472:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 476:	09 95       	icall
        FtDeactivateInterface();
 478:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 47c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 480:	09 95       	icall
        return num_bytes_sent;
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
 486:	15 c0       	rjmp	.+42     	; 0x4b2 <UsbWrite+0x70>
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 48c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtWrite>
 490:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtWrite+0x1>
 494:	c8 01       	movw	r24, r16
 496:	8c 0f       	add	r24, r28
 498:	9d 1f       	adc	r25, r29
 49a:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 49c:	88 23       	and	r24, r24
 49e:	21 f0       	breq	.+8      	; 0x4a8 <UsbWrite+0x66>
 4a0:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 4a2:	ce 15       	cp	r28, r14
 4a4:	df 05       	cpc	r29, r15
 4a6:	90 f3       	brcs	.-28     	; 0x48c <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 4a8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 4ac:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 4b0:	09 95       	icall
    return num_bytes_sent;
}
 4b2:	ce 01       	movw	r24, r28
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	08 95       	ret

000004c2 <UsbHasDataToRead>:
bool UsbHasDataToRead(void) { return FtHasDataToRead(); }
 4c2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtHasDataToRead>
 4c6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtHasDataToRead+0x1>
 4ca:	09 95       	icall
 4cc:	08 95       	ret

000004ce <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
 4ce:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <ReadSpiStatusRegister>
 4d2:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <ReadSpiStatusRegister+0x1>
 4d6:	09 95       	icall
 4d8:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 4dc:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 4e0:	09 95       	icall
 4e2:	08 95       	ret

000004e4 <ReadSpiStatusRegister_Implementation>:
 4e4:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_spsr>
 4e8:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_spsr+0x1>
 4ec:	80 81       	ld	r24, Z
 4ee:	08 95       	ret

000004f0 <ReadSpiDataRegister_Implementation>:
 4f0:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spdr>
 4f4:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spdr+0x1>
 4f8:	80 81       	ld	r24, Z
 4fa:	08 95       	ret

000004fc <SpiMasterOpenSpi_Implementation>:
 4fc:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Ss>
 500:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_port>
 504:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_port+0x1>
 508:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 50c:	08 95       	ret

0000050e <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 50e:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Spi_Enable>
 512:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Spi_spcr>
 516:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Spi_spcr+0x1>
 51a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 51e:	08 95       	ret

00000520 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 520:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Ss>
 524:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_port>
 528:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_port+0x1>
 52c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 530:	08 95       	ret

00000532 <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 532:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Spi_InterruptFlag>
 536:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Spi_spsr>
 53a:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Spi_spsr+0x1>
 53e:	0e 94 78 00 	call	0xf0	; 0xf0 <BitIsSet>
}
 542:	08 95       	ret

00000544 <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 544:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <Spi_Miso>
 548:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Spi_pin>
 54c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Spi_pin+0x1>
 550:	0e 94 89 00 	call	0x112	; 0x112 <BitIsClear>
}
 554:	08 95       	ret

00000556 <SpiClearFlagTransferIsDone>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 556:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spdr>
 55a:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spdr+0x1>
 55e:	80 81       	ld	r24, Z
 560:	08 95       	ret

00000562 <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
    SlaveSelectIdleHigh();
 568:	0e 94 90 02 	call	0x520	; 0x520 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 56c:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <Spi_Miso>
 570:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <Spi_ddr>
 574:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <Spi_ddr+0x1>
 578:	61 2f       	mov	r22, r17
 57a:	ce 01       	movw	r24, r28
 57c:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 580:	61 2f       	mov	r22, r17
 582:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_port>
 586:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_port+0x1>
 58a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 58e:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Ss>
 592:	ce 01       	movw	r24, r28
 594:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 598:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Spi_Mosi>
 59c:	ce 01       	movw	r24, r28
 59e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 5a2:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Spi_Sck>
 5a6:	ce 01       	movw	r24, r28
 5a8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 5ac:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <Spi_spcr>
 5b0:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <Spi_spcr+0x1>
 5b4:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Spi_MasterSlaveSelect>
 5b8:	ce 01       	movw	r24, r28
 5ba:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 5be:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Spi_ClockRateBit0>
 5c2:	ce 01       	movw	r24, r28
 5c4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 5c8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Spi_ClockRateBit1>
 5cc:	ce 01       	movw	r24, r28
 5ce:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5d2:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_DoubleClockRate>
 5d6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Spi_spsr>
 5da:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Spi_spsr+0x1>
 5de:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5e2:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <EnableSpi>
 5e6:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <EnableSpi+0x1>
 5ea:	09 95       	icall
    ClearPendingSpiInterrupt();
 5ec:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <ClearPendingSpiInterrupt>
 5f0:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <ClearPendingSpiInterrupt+0x1>
 5f4:	09 95       	icall
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	08 95       	ret

000005fe <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 5fe:	cf 93       	push	r28
 600:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 602:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SpiMasterOpenSpi>
 606:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SpiMasterOpenSpi+0x1>
 60a:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 60c:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spdr>
 610:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spdr+0x1>
 614:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 616:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SpiTransferIsDone>
 61a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SpiTransferIsDone+0x1>
 61e:	09 95       	icall
 620:	88 23       	and	r24, r24
 622:	c9 f3       	breq	.-14     	; 0x616 <SpiMasterWrite+0x18>
    // You need to now access SPDR to clear the flag!
    // I do not think the reads are destructive.
    // Add code here to clear the flag:
    SpiClearFlagTransferIsDone();  // TODO: add unit tests for this
 624:	0e 94 ab 02 	call	0x556	; 0x556 <SpiClearFlagTransferIsDone>
    SpiMasterCloseSpi();
 628:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiMasterCloseSpi>
 62c:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiMasterCloseSpi+0x1>
 630:	09 95       	icall
}
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <SpiMasterRead>:
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SpiMasterWrite>
    return ReadSpiDataRegister();
 63c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 640:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 644:	09 95       	icall
}
 646:	08 95       	ret

00000648 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 648:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiResponseIsReady>
 64c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiResponseIsReady+0x1>
 650:	09 95       	icall
 652:	88 23       	and	r24, r24
 654:	c9 f3       	breq	.-14     	; 0x648 <SpiMasterWaitForResponse>
}
 656:	08 95       	ret

00000658 <SetupDebugLed>:
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
    UsbInit();
    /* =====[ Operate ]===== */
    SpiMasterPassLisFrame();
 658:	23 e0       	ldi	r18, 0x03	; 3
 65a:	46 e2       	ldi	r20, 0x26	; 38
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	68 e2       	ldi	r22, 0x28	; 40
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	87 e2       	ldi	r24, 0x27	; 39
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 b0 00 	call	0x160	; 0x160 <DebugLedInit>
 66a:	08 95       	ret

0000066c <DoCmdSendFourDummyBytes>:
 66c:	ef 92       	push	r14
 66e:	ff 92       	push	r15
 670:	0f 93       	push	r16
 672:	1f 93       	push	r17
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	00 d0       	rcall	.+0      	; 0x67a <DoCmdSendFourDummyBytes+0xe>
 67a:	00 d0       	rcall	.+0      	; 0x67c <DoCmdSendFourDummyBytes+0x10>
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	82 ef       	ldi	r24, 0xF2	; 242
 682:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SpiMasterWrite>
 686:	8e 01       	movw	r16, r28
 688:	0f 5f       	subi	r16, 0xFF	; 255
 68a:	1f 4f       	sbci	r17, 0xFF	; 255
 68c:	7e 01       	movw	r14, r28
 68e:	85 e0       	ldi	r24, 0x05	; 5
 690:	e8 0e       	add	r14, r24
 692:	f1 1c       	adc	r15, r1
 694:	0e 94 24 03 	call	0x648	; 0x648 <SpiMasterWaitForResponse>
 698:	0e 94 1b 03 	call	0x636	; 0x636 <SpiMasterRead>
 69c:	f8 01       	movw	r30, r16
 69e:	81 93       	st	Z+, r24
 6a0:	8f 01       	movw	r16, r30
 6a2:	ee 15       	cp	r30, r14
 6a4:	ff 05       	cpc	r31, r15
 6a6:	b1 f7       	brne	.-20     	; 0x694 <DoCmdSendFourDummyBytes+0x28>
 6a8:	64 e0       	ldi	r22, 0x04	; 4
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	ce 01       	movw	r24, r28
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	0e 94 21 02 	call	0x442	; 0x442 <UsbWrite>
 6b4:	0e 94 9e 00 	call	0x13c	; 0x13c <DebugLedTurnRed>
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
 6c8:	ff 90       	pop	r15
 6ca:	ef 90       	pop	r14
 6cc:	08 95       	ret

000006ce <SpiMasterPassLisFrame>:
 6ce:	ef 92       	push	r14
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	45 98       	cbi	0x08, 5	; 8
 6dc:	2a 98       	cbi	0x05, 2	; 5
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	8e bd       	out	0x2e, r24	; 46
 6e2:	0d b4       	in	r0, 0x2d	; 45
 6e4:	07 fe       	sbrs	r0, 7
 6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <SpiMasterPassLisFrame+0x14>
 6e8:	8e b5       	in	r24, 0x2e	; 46
 6ea:	2a 9a       	sbi	0x05, 2	; 5
 6ec:	0e 94 24 03 	call	0x648	; 0x648 <SpiMasterWaitForResponse>
 6f0:	45 9a       	sbi	0x08, 5	; 8
 6f2:	cf e1       	ldi	r28, 0x1F	; 31
 6f4:	d6 e0       	ldi	r29, 0x06	; 6
 6f6:	e0 90 38 01 	lds	r14, 0x0138	; 0x800138 <slave_ignore>
 6fa:	1f ef       	ldi	r17, 0xFF	; 255
 6fc:	f0 90 36 01 	lds	r15, 0x0136	; 0x800136 <FtCmd_Write>
 700:	45 98       	cbi	0x08, 5	; 8
 702:	2a 98       	cbi	0x05, 2	; 5
 704:	ee bc       	out	0x2e, r14	; 46
 706:	0d b4       	in	r0, 0x2d	; 45
 708:	07 fe       	sbrs	r0, 7
 70a:	fd cf       	rjmp	.-6      	; 0x706 <SpiMasterPassLisFrame+0x38>
 70c:	8e b5       	in	r24, 0x2e	; 46
 70e:	2a 9a       	sbi	0x05, 2	; 5
 710:	0e b5       	in	r16, 0x2e	; 46
 712:	1c 99       	sbic	0x03, 4	; 3
 714:	fe cf       	rjmp	.-4      	; 0x712 <SpiMasterPassLisFrame+0x44>
 716:	45 9a       	sbi	0x08, 5	; 8
 718:	40 98       	cbi	0x08, 0	; 8
 71a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Delay3CpuCyclesPerTick>
 71e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick+0x1>
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	09 95       	icall
 726:	41 9a       	sbi	0x08, 1	; 8
 728:	1a b9       	out	0x0a, r17	; 10
 72a:	fb b8       	out	0x0b, r15	; 11
 72c:	41 98       	cbi	0x08, 1	; 8
 72e:	1a b8       	out	0x0a, r1	; 10
 730:	41 9a       	sbi	0x08, 1	; 8
 732:	41 98       	cbi	0x08, 1	; 8
 734:	32 9b       	sbis	0x06, 2	; 6
 736:	02 c0       	rjmp	.+4      	; 0x73c <SpiMasterPassLisFrame+0x6e>
 738:	43 9a       	sbi	0x08, 3	; 8
 73a:	06 c0       	rjmp	.+12     	; 0x748 <SpiMasterPassLisFrame+0x7a>
 73c:	1a b9       	out	0x0a, r17	; 10
 73e:	41 9a       	sbi	0x08, 1	; 8
 740:	0b b9       	out	0x0b, r16	; 11
 742:	41 98       	cbi	0x08, 1	; 8
 744:	32 99       	sbic	0x06, 2	; 6
 746:	43 9a       	sbi	0x08, 3	; 8
 748:	40 9a       	sbi	0x08, 0	; 8
 74a:	21 97       	sbiw	r28, 0x01	; 1
 74c:	c9 f6       	brne	.-78     	; 0x700 <SpiMasterPassLisFrame+0x32>
 74e:	2a 98       	cbi	0x05, 2	; 5
 750:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <slave_ignore>
 754:	8e bd       	out	0x2e, r24	; 46
 756:	0d b4       	in	r0, 0x2d	; 45
 758:	07 fe       	sbrs	r0, 7
 75a:	fd cf       	rjmp	.-6      	; 0x756 <SpiMasterPassLisFrame+0x88>
 75c:	8e b5       	in	r24, 0x2e	; 46
 75e:	2a 9a       	sbi	0x05, 2	; 5
 760:	ce b5       	in	r28, 0x2e	; 46
 762:	40 98       	cbi	0x08, 0	; 8
 764:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Delay3CpuCyclesPerTick>
 768:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick+0x1>
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	09 95       	icall
 770:	41 9a       	sbi	0x08, 1	; 8
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	8a b9       	out	0x0a, r24	; 10
 776:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <FtCmd_Write>
 77a:	8b b9       	out	0x0b, r24	; 11
 77c:	41 98       	cbi	0x08, 1	; 8
 77e:	1a b8       	out	0x0a, r1	; 10
 780:	41 9a       	sbi	0x08, 1	; 8
 782:	41 98       	cbi	0x08, 1	; 8
 784:	32 9b       	sbis	0x06, 2	; 6
 786:	02 c0       	rjmp	.+4      	; 0x78c <SpiMasterPassLisFrame+0xbe>
 788:	43 9a       	sbi	0x08, 3	; 8
 78a:	07 c0       	rjmp	.+14     	; 0x79a <SpiMasterPassLisFrame+0xcc>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	8a b9       	out	0x0a, r24	; 10
 790:	41 9a       	sbi	0x08, 1	; 8
 792:	cb b9       	out	0x0b, r28	; 11
 794:	41 98       	cbi	0x08, 1	; 8
 796:	32 99       	sbic	0x06, 2	; 6
 798:	43 9a       	sbi	0x08, 3	; 8
 79a:	40 9a       	sbi	0x08, 0	; 8
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	96 e0       	ldi	r25, 0x06	; 6
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	ff 90       	pop	r15
 7aa:	ef 90       	pop	r14
 7ac:	08 95       	ret

000007ae <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>:
    }
    UsbWrite(fake_data, nbytes);
    DebugLedTurnRed();
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	1f 92       	push	r1
 7b4:	cd b7       	in	r28, 0x3d	; 61
 7b6:	de b7       	in	r29, 0x3e	; 62
    while(1) // loop forever responding to the USB host
    {
        if (UsbHasDataToRead())
 7b8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <UsbHasDataToRead>
 7bc:	88 23       	and	r24, r24
 7be:	e1 f3       	breq	.-8      	; 0x7b8 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xa>
        {
            DebugLedToggleColor();
 7c0:	0e 94 c9 00 	call	0x192	; 0x192 <DebugLedToggleColor>
            uint8_t read_buffer[1];
            UsbRead(read_buffer);
 7c4:	ce 01       	movw	r24, r28
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <UsbRead>
            uint8_t cmd = read_buffer[0];
 7cc:	89 81       	ldd	r24, Y+1	; 0x01
            if      (cmd == cmd_send_lis_frame) SpiMasterPassLisFrame();
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	19 f4       	brne	.+6      	; 0x7d8 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x2a>
 7d2:	0e 94 67 03 	call	0x6ce	; 0x6ce <SpiMasterPassLisFrame>
 7d6:	f0 cf       	rjmp	.-32     	; 0x7b8 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xa>
            // test commands
            else if (cmd == cmd_send_four_dummy_bytes) DoCmdSendFourDummyBytes();
 7d8:	82 3f       	cpi	r24, 0xF2	; 242
 7da:	71 f7       	brne	.-36     	; 0x7b8 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xa>
 7dc:	0e 94 36 03 	call	0x66c	; 0x66c <DoCmdSendFourDummyBytes>
 7e0:	eb cf       	rjmp	.-42     	; 0x7b8 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0xa>

000007e2 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 7e2:	0e 94 2c 03 	call	0x658	; 0x658 <SetupDebugLed>
    /* SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_frame_of_adc_readings_and_write_to_USB_host(); */
    /* SpiMaster_get_Lis_frame_and_write_to_USB_host(); */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 7e6:	0e 94 b1 02 	call	0x562	; 0x562 <SpiMasterInit>
    UsbInit();
 7ea:	0e 94 e5 01 	call	0x3ca	; 0x3ca <UsbInit>
    DebugPinInit();
 7ee:	3d 9a       	sbi	0x07, 5	; 7
 7f0:	45 9a       	sbi	0x08, 5	; 8
    SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave();
 7f2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>

000007f6 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 7f6:	8a 95       	dec	r24
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <Delay3CpuCyclesPerTick_Implementation>
 7fa:	08 95       	ret

000007fc <_exit>:
 7fc:	f8 94       	cli

000007fe <__stop_program>:
 7fe:	ff cf       	rjmp	.-2      	; 0x7fe <__stop_program>
