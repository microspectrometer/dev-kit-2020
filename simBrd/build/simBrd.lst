
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800114  00800114  00000296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c2  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063e  00000000  00000000  000020b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000026f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000818  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021f  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000336f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  9e:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
}

void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  be:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
  d8:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
  dc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ddr_register_>
  e0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <ddr_register_+0x1>
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  e8:	08 95       	ret

000000ea <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
  ea:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
  ee:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <port_register_>
  f2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <port_register_+0x1>
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  fa:	08 95       	ret

000000fc <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
  fc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 100:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <port_register_>
 104:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <port_register_+0x1>
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 10c:	08 95       	ret

0000010e <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 10e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <ddr_register_+0x1>
 112:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ddr_register_>
    port_register_ = port_register;
 116:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <port_register_+0x1>
 11a:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <port_register_>
    pin_register_ = pin_register;
 11e:	50 93 16 01 	sts	0x0116, r21	; 0x800116 <pin_register_+0x1>
 122:	40 93 15 01 	sts	0x0115, r20	; 0x800115 <pin_register_>
    debug_led_ = debug_led;
 126:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>
    DebugLedTurnOn();
 12a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnOn>
 12e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnOn+0x1>
 132:	09 95       	icall
    DebugLedTurnGreen();
 134:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnGreen>
 138:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnGreen+0x1>
 13c:	09 95       	icall
 13e:	08 95       	ret

00000140 <SpiMasterInit>:
#include "SpiMaster.h"
#include "ReadWriteBits.h"

void SpiMasterInit(void)
{
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
    /* =====[ Configure user-defined pins in software. ]===== */
    // Spi_Ss idles high.
    SetBit(Spi_port, Spi_Ss);
 146:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <Spi_Ss>
 14a:	61 2f       	mov	r22, r17
 14c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Spi_port>
 150:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Spi_port+0x1>
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Make Spi_Ss an output pin.
    SetBit(Spi_ddr, Spi_Ss);
 158:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <Spi_ddr>
 15c:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <Spi_ddr+0x1>
 160:	61 2f       	mov	r22, r17
 162:	ce 01       	movw	r24, r28
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    //
    // Make Spi_Mosi an output pin.
    SetBit(Spi_ddr, Spi_Mosi);
 168:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <Spi_Mosi>
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    //
    // Make Spi_Sck an output pin.
    SetBit(Spi_ddr, Spi_Sck);
 172:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <Spi_Sck>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>

    // Make this the master.
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 17c:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <Spi_spcr>
 180:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <Spi_spcr+0x1>
 184:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Spi_MasterSlaveSelect>
 188:	ce 01       	movw	r24, r28
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>

    /* =====[ Hardcode the clock rate for this project. ]===== */
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 18e:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <Spi_ClockRateBit0>
 192:	ce 01       	movw	r24, r28
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 198:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Spi_ClockRateBit1>
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 1a2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Spi_DoubleClockRate>
 1a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Spi_spsr>
 1aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <Spi_spsr+0x1>
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>

    // Enable SPI.
    SetBit(Spi_spcr, Spi_Enable);
 1b2:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <Spi_Enable>
 1b6:	ce 01       	movw	r24, r28
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	08 95       	ret

000001c4 <SetupDebugLed>:
{
    EchoByte_reads_a_byte_and_writes_it_back_to_the_host(); // PASS 2018-07-28
}
void SetupDebugLed(void)
{
    DebugLedInit(
 1c4:	23 e0       	ldi	r18, 0x03	; 3
 1c6:	46 e2       	ldi	r20, 0x26	; 38
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	68 e2       	ldi	r22, 0x28	; 40
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	87 e2       	ldi	r24, 0x27	; 39
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 87 00 	call	0x10e	; 0x10e <DebugLedInit>
 1d6:	08 95       	ret

000001d8 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 1d8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SetupDebugLed>
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    SpiMasterInit(); DebugLedTurnRed();
 1dc:	0e 94 a0 00 	call	0x140	; 0x140 <SpiMasterInit>
 1e0:	0e 94 75 00 	call	0xea	; 0xea <DebugLedTurnRed>
}
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
