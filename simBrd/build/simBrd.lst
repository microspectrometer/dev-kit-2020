
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000da6  00000e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  0080015c  0080015c  00000e96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005eb8  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e4  00000000  00000000  000070e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023a6  00000000  00000000  000084cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c0  00000000  00000000  0000a874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001546  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045d8  00000000  00000000  0000c77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  00010d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <main>
  9e:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 14a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 16e:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 190:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 1b2:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <FtMiosio_ddr>
 1d6:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <FtMiosio_ddr>
 1e4:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Ft1248_pin>
 1f0:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_pin>
 216:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <FtMiosio_port>
 222:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <FtMiosio_port>
 272:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Ft1248_ddr>
 282:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <Ft1248_port>
 2a8:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 50 01 	lds	r28, 0x0150	; 0x800150 <FtMiosio_ddr>
 2b6:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <FtMiosio_port>
 2c0:	d0 91 4f 01 	lds	r29, 0x014F	; 0x80014f <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <BridgeLedRed>:

uint8_t UsbWriteStatusOk(bridge_cmd_key   cmd_done_by_bridge)
{
    uint8_t const StatusOk[] = { 0x00, cmd_done_by_bridge};
    return UsbWrite(StatusOk,2);
}
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <BridgeLedRed+0x6>
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <BiColorLed_port>
 318:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <BiColorLed_port+0x1>
 31c:	20 81       	ld	r18, Z
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <status_led>
 326:	02 c0       	rjmp	.+4      	; 0x32c <BridgeLedRed+0x22>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <BridgeLedRed+0x1e>
 330:	82 2b       	or	r24, r18
 332:	80 83       	st	Z, r24
 334:	19 82       	std	Y+1, r1	; 0x01
 336:	1a 82       	std	Y+2, r1	; 0x02
 338:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 33c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 340:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 344:	09 95       	icall
 346:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 34a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 34e:	09 95       	icall
 350:	88 23       	and	r24, r24
 352:	81 f0       	breq	.+32     	; 0x374 <BridgeLedRed+0x6a>
 354:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 358:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	09 95       	icall
 362:	88 23       	and	r24, r24
 364:	39 f0       	breq	.+14     	; 0x374 <BridgeLedRed+0x6a>
 366:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 36a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 36e:	ce 01       	movw	r24, r28
 370:	02 96       	adiw	r24, 0x02	; 2
 372:	09 95       	icall
 374:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 378:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 37c:	09 95       	icall
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <BridgeLedGreen>:
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <BridgeLedGreen+0x6>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <BiColorLed_port>
 396:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <BiColorLed_port+0x1>
 39a:	20 81       	ld	r18, Z
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <status_led>
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <BridgeLedGreen+0x22>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <BridgeLedGreen+0x1e>
 3ae:	80 95       	com	r24
 3b0:	82 23       	and	r24, r18
 3b2:	80 83       	st	Z, r24
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	8a 83       	std	Y+2, r24	; 0x02
 3ba:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3be:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3c2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 3c6:	09 95       	icall
 3c8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3cc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3d0:	09 95       	icall
 3d2:	88 23       	and	r24, r24
 3d4:	81 f0       	breq	.+32     	; 0x3f6 <BridgeLedGreen+0x6e>
 3d6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 3da:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	09 95       	icall
 3e4:	88 23       	and	r24, r24
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <BridgeLedGreen+0x6e>
 3e8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 3ec:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 3f0:	ce 01       	movw	r24, r28
 3f2:	02 96       	adiw	r24, 0x02	; 2
 3f4:	09 95       	icall
 3f6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3fa:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3fe:	09 95       	icall
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <UsbInit>:
 40a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000040e <SendSensorCommand>:
 40e:	2f 92       	push	r2
 410:	3f 92       	push	r3
 412:	4f 92       	push	r4
 414:	5f 92       	push	r5
 416:	6f 92       	push	r6
 418:	7f 92       	push	r7
 41a:	8f 92       	push	r8
 41c:	9f 92       	push	r9
 41e:	af 92       	push	r10
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	00 d0       	rcall	.+0      	; 0x434 <SendSensorCommand+0x26>
 434:	00 d0       	rcall	.+0      	; 0x436 <SendSensorCommand+0x28>
 436:	00 d0       	rcall	.+0      	; 0x438 <SendSensorCommand+0x2a>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	a8 2e       	mov	r10, r24
 43e:	66 2e       	mov	r6, r22
 440:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Spi_port>
 444:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <Spi_port+0x1>
 448:	db 01       	movw	r26, r22
 44a:	8c 91       	ld	r24, X
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	8a 01       	movw	r16, r20
 452:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Ss>
 456:	02 c0       	rjmp	.+4      	; 0x45c <SendSensorCommand+0x4e>
 458:	00 0f       	add	r16, r16
 45a:	11 1f       	adc	r17, r17
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <SendSensorCommand+0x4a>
 460:	20 2e       	mov	r2, r16
 462:	b0 2e       	mov	r11, r16
 464:	b0 94       	com	r11
 466:	8b 21       	and	r24, r11
 468:	8c 93       	st	X, r24
 46a:	e0 90 3d 01 	lds	r14, 0x013D	; 0x80013d <Spi_spdr>
 46e:	f0 90 3e 01 	lds	r15, 0x013E	; 0x80013e <Spi_spdr+0x1>
 472:	f7 01       	movw	r30, r14
 474:	a0 82       	st	Z, r10
 476:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <Spi_spsr>
 47a:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <Spi_spsr+0x1>
 47e:	3e 83       	std	Y+6, r19	; 0x06
 480:	2d 83       	std	Y+5, r18	; 0x05
 482:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Spi_InterruptFlag>
 486:	02 c0       	rjmp	.+4      	; 0x48c <SendSensorCommand+0x7e>
 488:	44 0f       	add	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <SendSensorCommand+0x7a>
 490:	d9 01       	movw	r26, r18
 492:	8c 91       	ld	r24, X
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	84 23       	and	r24, r20
 498:	95 23       	and	r25, r21
 49a:	89 2b       	or	r24, r25
 49c:	d1 f3       	breq	.-12     	; 0x492 <SendSensorCommand+0x84>
 49e:	f7 01       	movw	r30, r14
 4a0:	80 81       	ld	r24, Z
 4a2:	db 01       	movw	r26, r22
 4a4:	8c 91       	ld	r24, X
 4a6:	80 2b       	or	r24, r16
 4a8:	8c 93       	st	X, r24
 4aa:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_pin>
 4ae:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_pin+0x1>
 4b2:	50 90 3a 01 	lds	r5, 0x013A	; 0x80013a <Spi_Miso>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	05 2c       	mov	r0, r5
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <SendSensorCommand+0xb4>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <SendSensorCommand+0xb0>
 4c6:	20 81       	ld	r18, Z
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	28 23       	and	r18, r24
 4cc:	39 23       	and	r19, r25
 4ce:	23 2b       	or	r18, r19
 4d0:	d1 f7       	brne	.-12     	; 0x4c6 <SendSensorCommand+0xb8>
 4d2:	20 81       	ld	r18, Z
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	28 23       	and	r18, r24
 4d8:	39 23       	and	r19, r25
 4da:	23 2b       	or	r18, r19
 4dc:	d1 f3       	breq	.-12     	; 0x4d2 <SendSensorCommand+0xc4>
 4de:	db 01       	movw	r26, r22
 4e0:	2c 91       	ld	r18, X
 4e2:	2b 21       	and	r18, r11
 4e4:	2c 93       	st	X, r18
 4e6:	70 90 30 01 	lds	r7, 0x0130	; 0x800130 <slave_ignore>
 4ea:	d7 01       	movw	r26, r14
 4ec:	7c 92       	st	X, r7
 4ee:	ad 81       	ldd	r26, Y+5	; 0x05
 4f0:	be 81       	ldd	r27, Y+6	; 0x06
 4f2:	2c 91       	ld	r18, X
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	24 23       	and	r18, r20
 4f8:	35 23       	and	r19, r21
 4fa:	23 2b       	or	r18, r19
 4fc:	d1 f3       	breq	.-12     	; 0x4f2 <SendSensorCommand+0xe4>
 4fe:	d7 01       	movw	r26, r14
 500:	2c 91       	ld	r18, X
 502:	db 01       	movw	r26, r22
 504:	2c 91       	ld	r18, X
 506:	20 2b       	or	r18, r16
 508:	2c 93       	st	X, r18
 50a:	d7 01       	movw	r26, r14
 50c:	4c 90       	ld	r4, X
 50e:	20 81       	ld	r18, Z
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	28 23       	and	r18, r24
 514:	39 23       	and	r19, r25
 516:	23 2b       	or	r18, r19
 518:	d1 f7       	brne	.-12     	; 0x50e <SendSensorCommand+0x100>
 51a:	20 81       	ld	r18, Z
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	28 23       	and	r18, r24
 520:	39 23       	and	r19, r25
 522:	23 2b       	or	r18, r19
 524:	d1 f3       	breq	.-12     	; 0x51a <SendSensorCommand+0x10c>
 526:	db 01       	movw	r26, r22
 528:	2c 91       	ld	r18, X
 52a:	2b 21       	and	r18, r11
 52c:	2c 93       	st	X, r18
 52e:	d7 01       	movw	r26, r14
 530:	7c 92       	st	X, r7
 532:	ad 81       	ldd	r26, Y+5	; 0x05
 534:	be 81       	ldd	r27, Y+6	; 0x06
 536:	2c 91       	ld	r18, X
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	24 23       	and	r18, r20
 53c:	35 23       	and	r19, r21
 53e:	23 2b       	or	r18, r19
 540:	d1 f3       	breq	.-12     	; 0x536 <SendSensorCommand+0x128>
 542:	d7 01       	movw	r26, r14
 544:	2c 91       	ld	r18, X
 546:	db 01       	movw	r26, r22
 548:	2c 91       	ld	r18, X
 54a:	02 2b       	or	r16, r18
 54c:	0c 93       	st	X, r16
 54e:	d7 01       	movw	r26, r14
 550:	3c 90       	ld	r3, X
 552:	23 2d       	mov	r18, r3
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	34 29       	or	r19, r4
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	09 f4       	brne	.+2      	; 0x560 <SendSensorCommand+0x152>
 55e:	44 c0       	rjmp	.+136    	; 0x5e8 <SendSensorCommand+0x1da>
 560:	8c ef       	ldi	r24, 0xFC	; 252
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	aa 82       	std	Y+2, r10	; 0x02
 566:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 56a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 56e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 572:	09 95       	icall
 574:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 578:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 57c:	09 95       	icall
 57e:	88 23       	and	r24, r24
 580:	81 f0       	breq	.+32     	; 0x5a2 <SendSensorCommand+0x194>
 582:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 586:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	09 95       	icall
 590:	88 23       	and	r24, r24
 592:	39 f0       	breq	.+14     	; 0x5a2 <SendSensorCommand+0x194>
 594:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 598:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 59c:	ce 01       	movw	r24, r28
 59e:	02 96       	adiw	r24, 0x02	; 2
 5a0:	09 95       	icall
 5a2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 5a6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 5aa:	09 95       	icall
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	26 96       	adiw	r28, 0x06	; 6
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	ff 90       	pop	r15
 5cc:	ef 90       	pop	r14
 5ce:	df 90       	pop	r13
 5d0:	cf 90       	pop	r12
 5d2:	bf 90       	pop	r11
 5d4:	af 90       	pop	r10
 5d6:	9f 90       	pop	r9
 5d8:	8f 90       	pop	r8
 5da:	7f 90       	pop	r7
 5dc:	6f 90       	pop	r6
 5de:	5f 90       	pop	r5
 5e0:	4f 90       	pop	r4
 5e2:	3f 90       	pop	r3
 5e4:	2f 90       	pop	r2
 5e6:	08 95       	ret
 5e8:	9e 01       	movw	r18, r28
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	69 01       	movw	r12, r18
 5f0:	8e 01       	movw	r16, r28
 5f2:	0d 5f       	subi	r16, 0xFD	; 253
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	20 81       	ld	r18, Z
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	28 23       	and	r18, r24
 5fc:	39 23       	and	r19, r25
 5fe:	23 2b       	or	r18, r19
 600:	d1 f7       	brne	.-12     	; 0x5f6 <SendSensorCommand+0x1e8>
 602:	20 81       	ld	r18, Z
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	28 23       	and	r18, r24
 608:	39 23       	and	r19, r25
 60a:	23 2b       	or	r18, r19
 60c:	d1 f3       	breq	.-12     	; 0x602 <SendSensorCommand+0x1f4>
 60e:	db 01       	movw	r26, r22
 610:	2c 91       	ld	r18, X
 612:	2b 21       	and	r18, r11
 614:	2c 93       	st	X, r18
 616:	d7 01       	movw	r26, r14
 618:	7c 92       	st	X, r7
 61a:	ad 81       	ldd	r26, Y+5	; 0x05
 61c:	be 81       	ldd	r27, Y+6	; 0x06
 61e:	2c 91       	ld	r18, X
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	24 23       	and	r18, r20
 624:	35 23       	and	r19, r21
 626:	23 2b       	or	r18, r19
 628:	d1 f3       	breq	.-12     	; 0x61e <SendSensorCommand+0x210>
 62a:	d7 01       	movw	r26, r14
 62c:	2c 91       	ld	r18, X
 62e:	db 01       	movw	r26, r22
 630:	2c 91       	ld	r18, X
 632:	22 29       	or	r18, r2
 634:	2c 93       	st	X, r18
 636:	d7 01       	movw	r26, r14
 638:	2c 91       	ld	r18, X
 63a:	d6 01       	movw	r26, r12
 63c:	2d 93       	st	X+, r18
 63e:	6d 01       	movw	r12, r26
 640:	0a 17       	cp	r16, r26
 642:	1b 07       	cpc	r17, r27
 644:	c1 f6       	brne	.-80     	; 0x5f6 <SendSensorCommand+0x1e8>
 646:	80 81       	ld	r24, Z
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <SendSensorCommand+0x242>
 64c:	95 95       	asr	r25
 64e:	87 95       	ror	r24
 650:	5a 94       	dec	r5
 652:	e2 f7       	brpl	.-8      	; 0x64c <SendSensorCommand+0x23e>
 654:	80 fd       	sbrc	r24, 0
 656:	23 c0       	rjmp	.+70     	; 0x69e <SendSensorCommand+0x290>
 658:	8c ef       	ldi	r24, 0xFC	; 252
 65a:	8b 83       	std	Y+3, r24	; 0x03
 65c:	ac 82       	std	Y+4, r10	; 0x04
 65e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 662:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 666:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 66a:	09 95       	icall
 66c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 670:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 674:	09 95       	icall
 676:	88 23       	and	r24, r24
 678:	09 f4       	brne	.+2      	; 0x67c <SendSensorCommand+0x26e>
 67a:	93 cf       	rjmp	.-218    	; 0x5a2 <SendSensorCommand+0x194>
 67c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 680:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 684:	c8 01       	movw	r24, r16
 686:	09 95       	icall
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <SendSensorCommand+0x280>
 68c:	8a cf       	rjmp	.-236    	; 0x5a2 <SendSensorCommand+0x194>
 68e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 692:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 696:	ce 01       	movw	r24, r28
 698:	04 96       	adiw	r24, 0x04	; 4
 69a:	09 95       	icall
 69c:	82 cf       	rjmp	.-252    	; 0x5a2 <SendSensorCommand+0x194>
 69e:	1b 82       	std	Y+3, r1	; 0x03
 6a0:	6c 82       	std	Y+4, r6	; 0x04
 6a2:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <FtCmd_Write>
 6a6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 6aa:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 6ae:	8f 2d       	mov	r24, r15
 6b0:	09 95       	icall
 6b2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 6b6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 6ba:	09 95       	icall
 6bc:	88 23       	and	r24, r24
 6be:	79 f0       	breq	.+30     	; 0x6de <SendSensorCommand+0x2d0>
 6c0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6c4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 6c8:	c8 01       	movw	r24, r16
 6ca:	09 95       	icall
 6cc:	88 23       	and	r24, r24
 6ce:	39 f0       	breq	.+14     	; 0x6de <SendSensorCommand+0x2d0>
 6d0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6d4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 6d8:	ce 01       	movw	r24, r28
 6da:	04 96       	adiw	r24, 0x04	; 4
 6dc:	09 95       	icall
 6de:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 6e2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 6e6:	09 95       	icall
 6e8:	4b 82       	std	Y+3, r4	; 0x03
 6ea:	3c 82       	std	Y+4, r3	; 0x04
 6ec:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 6f0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 6f4:	8f 2d       	mov	r24, r15
 6f6:	09 95       	icall
 6f8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 6fc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 700:	09 95       	icall
 702:	88 23       	and	r24, r24
 704:	79 f0       	breq	.+30     	; 0x724 <SendSensorCommand+0x316>
 706:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 70a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 70e:	c8 01       	movw	r24, r16
 710:	09 95       	icall
 712:	88 23       	and	r24, r24
 714:	39 f0       	breq	.+14     	; 0x724 <SendSensorCommand+0x316>
 716:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 71a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 71e:	ce 01       	movw	r24, r28
 720:	04 96       	adiw	r24, 0x04	; 4
 722:	09 95       	icall
 724:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 728:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 72c:	09 95       	icall
 72e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 732:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 736:	8f 2d       	mov	r24, r15
 738:	1c cf       	rjmp	.-456    	; 0x572 <SendSensorCommand+0x164>

0000073a <SendSensorLed1Green>:
 73a:	64 e0       	ldi	r22, 0x04	; 4
 73c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SensorLed1Green_key>
 740:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

00000744 <SendSensorLed1Red>:
 744:	63 e0       	ldi	r22, 0x03	; 3
 746:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <SensorLed1Red_key>
 74a:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

0000074e <LookupBridgeCmd>:
 74e:	85 30       	cpi	r24, 0x05	; 5
 750:	48 f4       	brcc	.+18     	; 0x764 <LookupBridgeCmd+0x16>
 752:	e8 2f       	mov	r30, r24
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	ee 0f       	add	r30, r30
 758:	ff 1f       	adc	r31, r31
 75a:	ea 5d       	subi	r30, 0xDA	; 218
 75c:	fe 4f       	sbci	r31, 0xFE	; 254
 75e:	80 81       	ld	r24, Z
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	08 95       	ret
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	08 95       	ret

0000076a <CfgBytesAreValid>:
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	00 d0       	rcall	.+0      	; 0x770 <CfgBytesAreValid+0x6>
 770:	00 d0       	rcall	.+0      	; 0x772 <CfgBytesAreValid+0x8>
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	fc 01       	movw	r30, r24
 778:	30 81       	ld	r19, Z
 77a:	83 2f       	mov	r24, r19
 77c:	8f 70       	andi	r24, 0x0F	; 15
 77e:	21 81       	ldd	r18, Z+1	; 0x01
 780:	81 11       	cpse	r24, r1
 782:	09 c0       	rjmp	.+18     	; 0x796 <CfgBytesAreValid+0x2c>
 784:	21 11       	cpse	r18, r1
 786:	07 c0       	rjmp	.+14     	; 0x796 <CfgBytesAreValid+0x2c>
 788:	92 81       	ldd	r25, Z+2	; 0x02
 78a:	91 11       	cpse	r25, r1
 78c:	04 c0       	rjmp	.+8      	; 0x796 <CfgBytesAreValid+0x2c>
 78e:	83 81       	ldd	r24, Z+3	; 0x03
 790:	88 7f       	andi	r24, 0xF8	; 248
 792:	09 f4       	brne	.+2      	; 0x796 <CfgBytesAreValid+0x2c>
 794:	a2 c0       	rjmp	.+324    	; 0x8da <CfgBytesAreValid+0x170>
 796:	42 2f       	mov	r20, r18
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	40 95       	com	r20
 79c:	50 95       	com	r21
 79e:	ca 01       	movw	r24, r20
 7a0:	84 78       	andi	r24, 0x84	; 132
 7a2:	99 27       	eor	r25, r25
 7a4:	89 2b       	or	r24, r25
 7a6:	09 f0       	breq	.+2      	; 0x7aa <CfgBytesAreValid+0x40>
 7a8:	a9 c0       	rjmp	.+338    	; 0x8fc <CfgBytesAreValid+0x192>
 7aa:	92 81       	ldd	r25, Z+2	; 0x02
 7ac:	69 2f       	mov	r22, r25
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	60 95       	com	r22
 7b2:	70 95       	com	r23
 7b4:	61 72       	andi	r22, 0x21	; 33
 7b6:	77 27       	eor	r23, r23
 7b8:	67 2b       	or	r22, r23
 7ba:	09 f0       	breq	.+2      	; 0x7be <CfgBytesAreValid+0x54>
 7bc:	9f c0       	rjmp	.+318    	; 0x8fc <CfgBytesAreValid+0x192>
 7be:	83 81       	ldd	r24, Z+3	; 0x03
 7c0:	83 fb       	bst	r24, 3
 7c2:	88 27       	eor	r24, r24
 7c4:	80 f9       	bld	r24, 0
 7c6:	62 2f       	mov	r22, r18
 7c8:	64 78       	andi	r22, 0x84	; 132
 7ca:	09 f0       	breq	.+2      	; 0x7ce <CfgBytesAreValid+0x64>
 7cc:	84 c0       	rjmp	.+264    	; 0x8d6 <CfgBytesAreValid+0x16c>
 7ce:	69 2f       	mov	r22, r25
 7d0:	61 72       	andi	r22, 0x21	; 33
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <CfgBytesAreValid+0x6c>
 7d4:	80 c0       	rjmp	.+256    	; 0x8d6 <CfgBytesAreValid+0x16c>
 7d6:	63 81       	ldd	r22, Z+3	; 0x03
 7d8:	63 fd       	sbrc	r22, 3
 7da:	7d c0       	rjmp	.+250    	; 0x8d6 <CfgBytesAreValid+0x16c>
 7dc:	81 11       	cpse	r24, r1
 7de:	7d c0       	rjmp	.+250    	; 0x8da <CfgBytesAreValid+0x170>
 7e0:	63 2f       	mov	r22, r19
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	db 01       	movw	r26, r22
 7e6:	a0 95       	com	r26
 7e8:	b0 95       	com	r27
 7ea:	30 ff       	sbrs	r19, 0
 7ec:	8d c0       	rjmp	.+282    	; 0x908 <__stack+0x9>
 7ee:	43 fd       	sbrc	r20, 3
 7f0:	8b c0       	rjmp	.+278    	; 0x908 <__stack+0x9>
 7f2:	69 2f       	mov	r22, r25
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 95       	com	r22
 7f8:	70 95       	com	r23
 7fa:	62 74       	andi	r22, 0x42	; 66
 7fc:	77 27       	eor	r23, r23
 7fe:	67 2b       	or	r22, r23
 800:	09 f0       	breq	.+2      	; 0x804 <CfgBytesAreValid+0x9a>
 802:	82 c0       	rjmp	.+260    	; 0x908 <__stack+0x9>
 804:	83 81       	ldd	r24, Z+3	; 0x03
 806:	82 95       	swap	r24
 808:	81 70       	andi	r24, 0x01	; 1
 80a:	30 fd       	sbrc	r19, 0
 80c:	6e c0       	rjmp	.+220    	; 0x8ea <CfgBytesAreValid+0x180>
 80e:	23 fd       	sbrc	r18, 3
 810:	6c c0       	rjmp	.+216    	; 0x8ea <CfgBytesAreValid+0x180>
 812:	69 2f       	mov	r22, r25
 814:	62 74       	andi	r22, 0x42	; 66
 816:	09 f0       	breq	.+2      	; 0x81a <CfgBytesAreValid+0xb0>
 818:	68 c0       	rjmp	.+208    	; 0x8ea <CfgBytesAreValid+0x180>
 81a:	63 81       	ldd	r22, Z+3	; 0x03
 81c:	64 fd       	sbrc	r22, 4
 81e:	65 c0       	rjmp	.+202    	; 0x8ea <CfgBytesAreValid+0x180>
 820:	81 11       	cpse	r24, r1
 822:	5b c0       	rjmp	.+182    	; 0x8da <CfgBytesAreValid+0x170>
 824:	a1 fd       	sbrc	r26, 1
 826:	74 c0       	rjmp	.+232    	; 0x910 <__stack+0x11>
 828:	44 fd       	sbrc	r20, 4
 82a:	72 c0       	rjmp	.+228    	; 0x910 <__stack+0x11>
 82c:	69 2f       	mov	r22, r25
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 95       	com	r22
 832:	70 95       	com	r23
 834:	64 78       	andi	r22, 0x84	; 132
 836:	77 27       	eor	r23, r23
 838:	67 2b       	or	r22, r23
 83a:	09 f0       	breq	.+2      	; 0x83e <CfgBytesAreValid+0xd4>
 83c:	69 c0       	rjmp	.+210    	; 0x910 <__stack+0x11>
 83e:	83 81       	ldd	r24, Z+3	; 0x03
 840:	85 fb       	bst	r24, 5
 842:	88 27       	eor	r24, r24
 844:	80 f9       	bld	r24, 0
 846:	31 fd       	sbrc	r19, 1
 848:	53 c0       	rjmp	.+166    	; 0x8f0 <CfgBytesAreValid+0x186>
 84a:	24 fd       	sbrc	r18, 4
 84c:	51 c0       	rjmp	.+162    	; 0x8f0 <CfgBytesAreValid+0x186>
 84e:	69 2f       	mov	r22, r25
 850:	64 78       	andi	r22, 0x84	; 132
 852:	09 f0       	breq	.+2      	; 0x856 <CfgBytesAreValid+0xec>
 854:	4d c0       	rjmp	.+154    	; 0x8f0 <CfgBytesAreValid+0x186>
 856:	63 81       	ldd	r22, Z+3	; 0x03
 858:	65 fd       	sbrc	r22, 5
 85a:	4a c0       	rjmp	.+148    	; 0x8f0 <CfgBytesAreValid+0x186>
 85c:	81 11       	cpse	r24, r1
 85e:	3d c0       	rjmp	.+122    	; 0x8da <CfgBytesAreValid+0x170>
 860:	a2 fd       	sbrc	r26, 2
 862:	5a c0       	rjmp	.+180    	; 0x918 <__stack+0x19>
 864:	ba 01       	movw	r22, r20
 866:	61 72       	andi	r22, 0x21	; 33
 868:	77 27       	eor	r23, r23
 86a:	67 2b       	or	r22, r23
 86c:	09 f0       	breq	.+2      	; 0x870 <CfgBytesAreValid+0x106>
 86e:	54 c0       	rjmp	.+168    	; 0x918 <__stack+0x19>
 870:	69 2f       	mov	r22, r25
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	60 95       	com	r22
 876:	70 95       	com	r23
 878:	63 fd       	sbrc	r22, 3
 87a:	4e c0       	rjmp	.+156    	; 0x918 <__stack+0x19>
 87c:	83 81       	ldd	r24, Z+3	; 0x03
 87e:	86 fb       	bst	r24, 6
 880:	88 27       	eor	r24, r24
 882:	80 f9       	bld	r24, 0
 884:	32 fd       	sbrc	r19, 2
 886:	37 c0       	rjmp	.+110    	; 0x8f6 <CfgBytesAreValid+0x18c>
 888:	62 2f       	mov	r22, r18
 88a:	61 72       	andi	r22, 0x21	; 33
 88c:	a1 f5       	brne	.+104    	; 0x8f6 <CfgBytesAreValid+0x18c>
 88e:	93 fd       	sbrc	r25, 3
 890:	32 c0       	rjmp	.+100    	; 0x8f6 <CfgBytesAreValid+0x18c>
 892:	63 81       	ldd	r22, Z+3	; 0x03
 894:	66 fd       	sbrc	r22, 6
 896:	2f c0       	rjmp	.+94     	; 0x8f6 <CfgBytesAreValid+0x18c>
 898:	81 11       	cpse	r24, r1
 89a:	1f c0       	rjmp	.+62     	; 0x8da <CfgBytesAreValid+0x170>
 89c:	a3 fd       	sbrc	r26, 3
 89e:	40 c0       	rjmp	.+128    	; 0x920 <__stack+0x21>
 8a0:	42 74       	andi	r20, 0x42	; 66
 8a2:	55 27       	eor	r21, r21
 8a4:	45 2b       	or	r20, r21
 8a6:	09 f0       	breq	.+2      	; 0x8aa <CfgBytesAreValid+0x140>
 8a8:	3b c0       	rjmp	.+118    	; 0x920 <__stack+0x21>
 8aa:	49 2f       	mov	r20, r25
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	40 95       	com	r20
 8b0:	50 95       	com	r21
 8b2:	44 fd       	sbrc	r20, 4
 8b4:	35 c0       	rjmp	.+106    	; 0x920 <__stack+0x21>
 8b6:	83 81       	ldd	r24, Z+3	; 0x03
 8b8:	88 1f       	adc	r24, r24
 8ba:	88 27       	eor	r24, r24
 8bc:	88 1f       	adc	r24, r24
 8be:	33 fd       	sbrc	r19, 3
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <CfgBytesAreValid+0x172>
 8c2:	22 74       	andi	r18, 0x42	; 66
 8c4:	59 f4       	brne	.+22     	; 0x8dc <CfgBytesAreValid+0x172>
 8c6:	94 fd       	sbrc	r25, 4
 8c8:	09 c0       	rjmp	.+18     	; 0x8dc <CfgBytesAreValid+0x172>
 8ca:	93 81       	ldd	r25, Z+3	; 0x03
 8cc:	97 fd       	sbrc	r25, 7
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <CfgBytesAreValid+0x172>
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	89 27       	eor	r24, r25
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <CfgBytesAreValid+0x172>
 8d6:	81 11       	cpse	r24, r1
 8d8:	83 cf       	rjmp	.-250    	; 0x7e0 <CfgBytesAreValid+0x76>
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	0f 90       	pop	r0
 8e2:	0f 90       	pop	r0
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret
 8ea:	81 11       	cpse	r24, r1
 8ec:	9b cf       	rjmp	.-202    	; 0x824 <CfgBytesAreValid+0xba>
 8ee:	f5 cf       	rjmp	.-22     	; 0x8da <CfgBytesAreValid+0x170>
 8f0:	81 11       	cpse	r24, r1
 8f2:	b6 cf       	rjmp	.-148    	; 0x860 <CfgBytesAreValid+0xf6>
 8f4:	f2 cf       	rjmp	.-28     	; 0x8da <CfgBytesAreValid+0x170>
 8f6:	81 11       	cpse	r24, r1
 8f8:	d1 cf       	rjmp	.-94     	; 0x89c <CfgBytesAreValid+0x132>
 8fa:	ef cf       	rjmp	.-34     	; 0x8da <CfgBytesAreValid+0x170>
 8fc:	82 2f       	mov	r24, r18
 8fe:	84 78       	andi	r24, 0x84	; 132
 900:	61 f7       	brne	.-40     	; 0x8da <CfgBytesAreValid+0x170>
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	92 81       	ldd	r25, Z+2	; 0x02
 906:	63 cf       	rjmp	.-314    	; 0x7ce <CfgBytesAreValid+0x64>
 908:	30 fd       	sbrc	r19, 0
 90a:	e7 cf       	rjmp	.-50     	; 0x8da <CfgBytesAreValid+0x170>
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	7f cf       	rjmp	.-258    	; 0x80e <CfgBytesAreValid+0xa4>
 910:	31 fd       	sbrc	r19, 1
 912:	e3 cf       	rjmp	.-58     	; 0x8da <CfgBytesAreValid+0x170>
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	99 cf       	rjmp	.-206    	; 0x84a <CfgBytesAreValid+0xe0>
 918:	32 fd       	sbrc	r19, 2
 91a:	df cf       	rjmp	.-66     	; 0x8da <CfgBytesAreValid+0x170>
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	b4 cf       	rjmp	.-152    	; 0x888 <CfgBytesAreValid+0x11e>
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	cd cf       	rjmp	.-102    	; 0x8be <CfgBytesAreValid+0x154>

00000924 <BridgeCfgLis>:
 924:	ef 92       	push	r14
 926:	ff 92       	push	r15
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	00 d0       	rcall	.+0      	; 0x932 <BridgeCfgLis+0xe>
 932:	00 d0       	rcall	.+0      	; 0x934 <BridgeCfgLis+0x10>
 934:	00 d0       	rcall	.+0      	; 0x936 <BridgeCfgLis+0x12>
 936:	cd b7       	in	r28, 0x3d	; 61
 938:	de b7       	in	r29, 0x3e	; 62
 93a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 93e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 942:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 946:	09 95       	icall
 948:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 94c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 950:	09 95       	icall
 952:	88 23       	and	r24, r24
 954:	09 f4       	brne	.+2      	; 0x958 <BridgeCfgLis+0x34>
 956:	c5 c0       	rjmp	.+394    	; 0xae2 <BridgeCfgLis+0x1be>
 958:	00 e0       	ldi	r16, 0x00	; 0
 95a:	10 e0       	ldi	r17, 0x00	; 0
 95c:	ce 01       	movw	r24, r28
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	7c 01       	movw	r14, r24
 962:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 966:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 96a:	c7 01       	movw	r24, r14
 96c:	80 0f       	add	r24, r16
 96e:	91 1f       	adc	r25, r17
 970:	09 95       	icall
 972:	81 11       	cpse	r24, r1
 974:	8c c0       	rjmp	.+280    	; 0xa8e <BridgeCfgLis+0x16a>
 976:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 97a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 97e:	09 95       	icall
 980:	8d ef       	ldi	r24, 0xFD	; 253
 982:	8d 83       	std	Y+5, r24	; 0x05
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	8e 83       	std	Y+6, r24	; 0x06
 988:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 98c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 990:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 994:	09 95       	icall
 996:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 99a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 99e:	09 95       	icall
 9a0:	88 23       	and	r24, r24
 9a2:	81 f0       	breq	.+32     	; 0x9c4 <BridgeCfgLis+0xa0>
 9a4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 9a8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 9ac:	ce 01       	movw	r24, r28
 9ae:	05 96       	adiw	r24, 0x05	; 5
 9b0:	09 95       	icall
 9b2:	88 23       	and	r24, r24
 9b4:	39 f0       	breq	.+14     	; 0x9c4 <BridgeCfgLis+0xa0>
 9b6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 9ba:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 9be:	ce 01       	movw	r24, r28
 9c0:	06 96       	adiw	r24, 0x06	; 6
 9c2:	09 95       	icall
 9c4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 9c8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 9cc:	09 95       	icall
 9ce:	c7 01       	movw	r24, r14
 9d0:	0e 94 b5 03 	call	0x76a	; 0x76a <CfgBytesAreValid>
 9d4:	88 23       	and	r24, r24
 9d6:	09 f4       	brne	.+2      	; 0x9da <BridgeCfgLis+0xb6>
 9d8:	61 c0       	rjmp	.+194    	; 0xa9c <BridgeCfgLis+0x178>
 9da:	1d 82       	std	Y+5, r1	; 0x05
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	8e 83       	std	Y+6, r24	; 0x06
 9e0:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <FtCmd_Write>
 9e4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 9e8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 9ec:	81 2f       	mov	r24, r17
 9ee:	09 95       	icall
 9f0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 9f4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 9f8:	09 95       	icall
 9fa:	88 23       	and	r24, r24
 9fc:	81 f0       	breq	.+32     	; 0xa1e <BridgeCfgLis+0xfa>
 9fe:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a02:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a06:	ce 01       	movw	r24, r28
 a08:	05 96       	adiw	r24, 0x05	; 5
 a0a:	09 95       	icall
 a0c:	88 23       	and	r24, r24
 a0e:	39 f0       	breq	.+14     	; 0xa1e <BridgeCfgLis+0xfa>
 a10:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a14:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a18:	ce 01       	movw	r24, r28
 a1a:	06 96       	adiw	r24, 0x06	; 6
 a1c:	09 95       	icall
 a1e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a22:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 a26:	09 95       	icall
 a28:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 a2c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 a30:	81 2f       	mov	r24, r17
 a32:	09 95       	icall
 a34:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 a38:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 a3c:	09 95       	icall
 a3e:	88 23       	and	r24, r24
 a40:	a1 f0       	breq	.+40     	; 0xa6a <BridgeCfgLis+0x146>
 a42:	c7 01       	movw	r24, r14
 a44:	7e 01       	movw	r14, r28
 a46:	25 e0       	ldi	r18, 0x05	; 5
 a48:	e2 0e       	add	r14, r18
 a4a:	f1 1c       	adc	r15, r1
 a4c:	04 c0       	rjmp	.+8      	; 0xa56 <BridgeCfgLis+0x132>
 a4e:	c8 01       	movw	r24, r16
 a50:	0e 15       	cp	r16, r14
 a52:	1f 05       	cpc	r17, r15
 a54:	51 f0       	breq	.+20     	; 0xa6a <BridgeCfgLis+0x146>
 a56:	8c 01       	movw	r16, r24
 a58:	0f 5f       	subi	r16, 0xFF	; 255
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a60:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a64:	09 95       	icall
 a66:	81 11       	cpse	r24, r1
 a68:	f2 cf       	rjmp	.-28     	; 0xa4e <BridgeCfgLis+0x12a>
 a6a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a6e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 a72:	09 95       	icall
 a74:	26 96       	adiw	r28, 0x06	; 6
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	0f 91       	pop	r16
 a88:	ff 90       	pop	r15
 a8a:	ef 90       	pop	r14
 a8c:	08 95       	ret
 a8e:	0f 5f       	subi	r16, 0xFF	; 255
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	04 30       	cpi	r16, 0x04	; 4
 a94:	11 05       	cpc	r17, r1
 a96:	09 f0       	breq	.+2      	; 0xa9a <BridgeCfgLis+0x176>
 a98:	64 cf       	rjmp	.-312    	; 0x962 <BridgeCfgLis+0x3e>
 a9a:	94 cf       	rjmp	.-216    	; 0x9c4 <BridgeCfgLis+0xa0>
 a9c:	8e ef       	ldi	r24, 0xFE	; 254
 a9e:	8d 83       	std	Y+5, r24	; 0x05
 aa0:	82 e0       	ldi	r24, 0x02	; 2
 aa2:	8e 83       	std	Y+6, r24	; 0x06
 aa4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 aa8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 aac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 ab0:	09 95       	icall
 ab2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 ab6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 aba:	09 95       	icall
 abc:	88 23       	and	r24, r24
 abe:	a9 f2       	breq	.-86     	; 0xa6a <BridgeCfgLis+0x146>
 ac0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 ac4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 ac8:	ce 01       	movw	r24, r28
 aca:	05 96       	adiw	r24, 0x05	; 5
 acc:	09 95       	icall
 ace:	88 23       	and	r24, r24
 ad0:	61 f2       	breq	.-104    	; 0xa6a <BridgeCfgLis+0x146>
 ad2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 ad6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 ada:	ce 01       	movw	r24, r28
 adc:	06 96       	adiw	r24, 0x06	; 6
 ade:	09 95       	icall
 ae0:	c4 cf       	rjmp	.-120    	; 0xa6a <BridgeCfgLis+0x146>
 ae2:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <BiColorLed_port>
 ae6:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <BiColorLed_port+0x1>
 aea:	20 81       	ld	r18, Z
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <status_led>
 af4:	02 c0       	rjmp	.+4      	; 0xafa <BridgeCfgLis+0x1d6>
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	0a 94       	dec	r0
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <BridgeCfgLis+0x1d2>
 afe:	82 2b       	or	r24, r18
 b00:	80 83       	st	Z, r24
 b02:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b06:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b0a:	09 95       	icall
 b0c:	ce 01       	movw	r24, r28
 b0e:	01 96       	adiw	r24, 0x01	; 1
 b10:	7c 01       	movw	r14, r24
 b12:	36 cf       	rjmp	.-404    	; 0x980 <BridgeCfgLis+0x5c>

00000b14 <UsbReadOneByte>:
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	ec 01       	movw	r28, r24
 b1a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 b1e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 b22:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 b26:	09 95       	icall
 b28:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 b2c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 b30:	09 95       	icall
 b32:	88 23       	and	r24, r24
 b34:	79 f0       	breq	.+30     	; 0xb54 <UsbReadOneByte+0x40>
 b36:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 b3a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 b3e:	ce 01       	movw	r24, r28
 b40:	09 95       	icall
 b42:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b46:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b4a:	09 95       	icall
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	08 95       	ret
 b54:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b58:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b5c:	09 95       	icall
 b5e:	80 e0       	ldi	r24, 0x00	; 0
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28
 b64:	08 95       	ret

00000b66 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
 b66:	1f 93       	push	r17
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	00 d0       	rcall	.+0      	; 0xb6e <UsbWriteStatusInvalid+0x8>
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	99 83       	std	Y+1, r25	; 0x01
 b76:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 b78:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 b7c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 b80:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 b84:	09 95       	icall
    if (!FtBusTurnaround())
 b86:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 b8a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 b8e:	09 95       	icall
 b90:	88 23       	and	r24, r24
 b92:	19 f1       	breq	.+70     	; 0xbda <UsbWriteStatusInvalid+0x74>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 b94:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 b98:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 b9c:	ce 01       	movw	r24, r28
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 ba2:	81 11       	cpse	r24, r1
 ba4:	0d c0       	rjmp	.+26     	; 0xbc0 <UsbWriteStatusInvalid+0x5a>
 ba6:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 ba8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 bac:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 bb0:	09 95       	icall
 bb2:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 bb4:	0f 90       	pop	r0
 bb6:	0f 90       	pop	r0
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	1f 91       	pop	r17
 bbe:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 bc0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 bc4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 bc8:	ce 01       	movw	r24, r28
 bca:	02 96       	adiw	r24, 0x02	; 2
 bcc:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 bce:	88 23       	and	r24, r24
 bd0:	11 f0       	breq	.+4      	; 0xbd6 <UsbWriteStatusInvalid+0x70>
 bd2:	12 e0       	ldi	r17, 0x02	; 2
 bd4:	e9 cf       	rjmp	.-46     	; 0xba8 <UsbWriteStatusInvalid+0x42>
 bd6:	11 e0       	ldi	r17, 0x01	; 1
 bd8:	e7 cf       	rjmp	.-50     	; 0xba8 <UsbWriteStatusInvalid+0x42>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 bda:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 bde:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 be2:	09 95       	icall
 be4:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 be6:	0f 90       	pop	r0
 be8:	0f 90       	pop	r0
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	1f 91       	pop	r17
 bf0:	08 95       	ret

00000bf2 <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 bf2:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiStatusRegister>
 bf6:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiStatusRegister+0x1>
 bfa:	09 95       	icall
 bfc:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ReadSpiDataRegister>
 c00:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ReadSpiDataRegister+0x1>
 c04:	09 94       	ijmp

00000c06 <ReadSpiStatusRegister_Implementation>:
 c06:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spsr>
 c0a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spsr+0x1>
 c0e:	80 81       	ld	r24, Z
 c10:	08 95       	ret

00000c12 <EnableSpi_Implementation>:
 c12:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_spcr>
 c16:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_spcr+0x1>
 c1a:	20 81       	ld	r18, Z
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Spi_Enable>
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <EnableSpi_Implementation+0x18>
 c26:	88 0f       	add	r24, r24
 c28:	99 1f       	adc	r25, r25
 c2a:	0a 94       	dec	r0
 c2c:	e2 f7       	brpl	.-8      	; 0xc26 <EnableSpi_Implementation+0x14>
 c2e:	82 2b       	or	r24, r18
 c30:	80 83       	st	Z, r24
 c32:	08 95       	ret

00000c34 <SpiMasterCloseSpi_Implementation>:
 c34:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_port>
 c38:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_port+0x1>
 c3c:	20 81       	ld	r18, Z
 c3e:	81 e0       	ldi	r24, 0x01	; 1
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Ss>
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <SpiMasterCloseSpi_Implementation+0x18>
 c48:	88 0f       	add	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	0a 94       	dec	r0
 c4e:	e2 f7       	brpl	.-8      	; 0xc48 <SpiMasterCloseSpi_Implementation+0x14>
 c50:	82 2b       	or	r24, r18
 c52:	80 83       	st	Z, r24
 c54:	08 95       	ret

00000c56 <ReadSpiDataRegister_Implementation>:
 c56:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spdr>
 c5a:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spdr+0x1>
 c5e:	80 81       	ld	r24, Z
 c60:	08 95       	ret

00000c62 <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 c62:	0e 94 1a 06 	call	0xc34	; 0xc34 <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 c66:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <Spi_ddr>
 c6a:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 c6e:	40 81       	ld	r20, Z
 c70:	81 e0       	ldi	r24, 0x01	; 1
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	9c 01       	movw	r18, r24
 c76:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <Spi_Miso>
 c7a:	02 c0       	rjmp	.+4      	; 0xc80 <SpiMasterInit+0x1e>
 c7c:	22 0f       	add	r18, r18
 c7e:	33 1f       	adc	r19, r19
 c80:	0a 94       	dec	r0
 c82:	e2 f7       	brpl	.-8      	; 0xc7c <SpiMasterInit+0x1a>
 c84:	32 2f       	mov	r19, r18
 c86:	30 95       	com	r19
 c88:	34 23       	and	r19, r20
 c8a:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 c8c:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <Spi_port>
 c90:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 c94:	3c 91       	ld	r19, X
 c96:	23 2b       	or	r18, r19
 c98:	2c 93       	st	X, r18
 c9a:	40 81       	ld	r20, Z
 c9c:	9c 01       	movw	r18, r24
 c9e:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Ss>
 ca2:	02 c0       	rjmp	.+4      	; 0xca8 <SpiMasterInit+0x46>
 ca4:	22 0f       	add	r18, r18
 ca6:	33 1f       	adc	r19, r19
 ca8:	0a 94       	dec	r0
 caa:	e2 f7       	brpl	.-8      	; 0xca4 <SpiMasterInit+0x42>
 cac:	24 2b       	or	r18, r20
 cae:	20 83       	st	Z, r18
 cb0:	40 81       	ld	r20, Z
 cb2:	9c 01       	movw	r18, r24
 cb4:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <Spi_Mosi>
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <SpiMasterInit+0x5c>
 cba:	22 0f       	add	r18, r18
 cbc:	33 1f       	adc	r19, r19
 cbe:	0a 94       	dec	r0
 cc0:	e2 f7       	brpl	.-8      	; 0xcba <SpiMasterInit+0x58>
 cc2:	24 2b       	or	r18, r20
 cc4:	20 83       	st	Z, r18
 cc6:	40 81       	ld	r20, Z
 cc8:	9c 01       	movw	r18, r24
 cca:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Spi_Sck>
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <SpiMasterInit+0x72>
 cd0:	22 0f       	add	r18, r18
 cd2:	33 1f       	adc	r19, r19
 cd4:	0a 94       	dec	r0
 cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <SpiMasterInit+0x6e>
 cd8:	24 2b       	or	r18, r20
 cda:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 cdc:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_spcr>
 ce0:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_spcr+0x1>
 ce4:	40 81       	ld	r20, Z
 ce6:	9c 01       	movw	r18, r24
 ce8:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_MasterSlaveSelect>
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <SpiMasterInit+0x90>
 cee:	22 0f       	add	r18, r18
 cf0:	33 1f       	adc	r19, r19
 cf2:	0a 94       	dec	r0
 cf4:	e2 f7       	brpl	.-8      	; 0xcee <SpiMasterInit+0x8c>
 cf6:	24 2b       	or	r18, r20
 cf8:	20 83       	st	Z, r18
 cfa:	40 81       	ld	r20, Z
 cfc:	9c 01       	movw	r18, r24
 cfe:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_ClockRateBit0>
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <SpiMasterInit+0xa6>
 d04:	22 0f       	add	r18, r18
 d06:	33 1f       	adc	r19, r19
 d08:	0a 94       	dec	r0
 d0a:	e2 f7       	brpl	.-8      	; 0xd04 <SpiMasterInit+0xa2>
 d0c:	24 2b       	or	r18, r20
 d0e:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 d10:	30 81       	ld	r19, Z
 d12:	ac 01       	movw	r20, r24
 d14:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_ClockRateBit1>
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <SpiMasterInit+0xbc>
 d1a:	44 0f       	add	r20, r20
 d1c:	55 1f       	adc	r21, r21
 d1e:	0a 94       	dec	r0
 d20:	e2 f7       	brpl	.-8      	; 0xd1a <SpiMasterInit+0xb8>
 d22:	24 2f       	mov	r18, r20
 d24:	20 95       	com	r18
 d26:	23 23       	and	r18, r19
 d28:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 d2a:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spsr>
 d2e:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 d32:	20 81       	ld	r18, Z
 d34:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_DoubleClockRate>
 d38:	02 c0       	rjmp	.+4      	; 0xd3e <SpiMasterInit+0xdc>
 d3a:	88 0f       	add	r24, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	0a 94       	dec	r0
 d40:	e2 f7       	brpl	.-8      	; 0xd3a <SpiMasterInit+0xd8>
 d42:	82 2b       	or	r24, r18
 d44:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 d46:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EnableSpi>
 d4a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EnableSpi+0x1>
 d4e:	09 95       	icall
    ClearPendingSpiInterrupt();
 d50:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ClearPendingSpiInterrupt>
 d54:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ClearPendingSpiInterrupt+0x1>
 d58:	09 94       	ijmp

00000d5a <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 d5a:	cf 93       	push	r28
 d5c:	df 93       	push	r29
 d5e:	1f 92       	push	r1
 d60:	cd b7       	in	r28, 0x3d	; 61
 d62:	de b7       	in	r29, 0x3e	; 62
 d64:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 d66:	0e 94 31 06 	call	0xc62	; 0xc62 <SpiMasterInit>
    UsbInit();
 d6a:	0e 94 05 02 	call	0x40a	; 0x40a <UsbInit>
 d6e:	3d 9a       	sbi	0x07, 5	; 7
 d70:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 d72:	80 e2       	ldi	r24, 0x20	; 32
 d74:	96 e0       	ldi	r25, 0x06	; 6
 d76:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <nbytes_in_frame+0x1>
 d7a:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 d7e:	ce 01       	movw	r24, r28
 d80:	01 96       	adiw	r24, 0x01	; 1
 d82:	0e 94 8a 05 	call	0xb14	; 0xb14 <UsbReadOneByte>
 d86:	88 23       	and	r24, r24
 d88:	d1 f3       	breq	.-12     	; 0xd7e <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 d8a:	89 81       	ldd	r24, Y+1	; 0x01
 d8c:	0e 94 a7 03 	call	0x74e	; 0x74e <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	19 f0       	breq	.+6      	; 0xd9a <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 d94:	fc 01       	movw	r30, r24
 d96:	09 95       	icall
 d98:	f2 cf       	rjmp	.-28     	; 0xd7e <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 d9a:	89 81       	ldd	r24, Y+1	; 0x01
 d9c:	0e 94 b3 05 	call	0xb66	; 0xb66 <UsbWriteStatusInvalid>
 da0:	ee cf       	rjmp	.-36     	; 0xd7e <main+0x24>

00000da2 <_exit>:
 da2:	f8 94       	cli

00000da4 <__stop_program>:
 da4:	ff cf       	rjmp	.-2      	; 0xda4 <__stop_program>
