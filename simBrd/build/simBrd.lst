
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028a  00800100  00000fba  0000104e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080038a  0080038a  000012d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a96  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe8  00000000  00000000  00004142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118a  00000000  00000000  0000512a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  000062b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012ea  00000000  00000000  00006a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001008  00000000  00000000  00007d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00008d6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 38       	cpi	r26, 0x8A	; 138
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	aa e8       	ldi	r26, 0x8A	; 138
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 39       	cpi	r26, 0x91	; 145
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <main>
  9e:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <__data_end>
 116:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <ddr_register_>
 11a:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <__data_end>
 128:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <port_register_>
 12c:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 8a 03 	lds	r22, 0x038A	; 0x80038a <__data_end>
 13a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <port_register_>
 13e:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <ddr_register_+0x1>
 14c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <ddr_register_>
    port_register_ = port_register;
 150:	70 93 8e 03 	sts	0x038E, r23	; 0x80038e <port_register_+0x1>
 154:	60 93 8d 03 	sts	0x038D, r22	; 0x80038d <port_register_>
    pin_register_ = pin_register;
 158:	50 93 8c 03 	sts	0x038C, r21	; 0x80038c <pin_register_+0x1>
 15c:	40 93 8b 03 	sts	0x038B, r20	; 0x80038b <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 8a 03 	sts	0x038A, r18	; 0x80038a <__data_end>
    DebugLedTurnOn();
 164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtActivateInterface>
 182:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtActivateInterface+0x1>
 186:	09 95       	icall
 188:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 18c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 190:	09 95       	icall
 192:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 196:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 19a:	09 95       	icall
 19c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtOutputByte>
 1a0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtOutputByte+0x1>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	09 95       	icall
 1a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ac:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
 1b6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtLetSlaveDriveBus>
 1ba:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtLetSlaveDriveBus+0x1>
 1be:	09 95       	icall
 1c0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1c4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1c8:	09 95       	icall
 1ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ce:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 1d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 1dc:	09 95       	icall
 1de:	08 95       	ret

000001e0 <FtWrite_Implementation>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 1ea:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 1ee:	09 95       	icall
 1f0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1f4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1f8:	09 95       	icall
 1fa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1fe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 202:	88 81       	ld	r24, Y
 204:	09 95       	icall
 206:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 20a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 20e:	09 95       	icall
 210:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 214:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 218:	09 95       	icall
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <FtOutputByte_Implementation>:
 220:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <FtMiosio_port>
 224:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <FtMiosio_port+0x1>
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <FtLetMasterDriveBus_Implementation>:
 22c:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <FtMiosio_ddr>
 230:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <FtMiosio_ddr+0x1>
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <FtLetSlaveDriveBus_Implementation>:
 23a:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <FtMiosio_ddr>
 23e:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <FtMiosio_ddr+0x1>
 242:	10 82       	st	Z, r1
 244:	08 95       	ret

00000246 <FtWriteData_Implementation>:
 246:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <FtMiosio_port>
 24a:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <FtMiosio_port+0x1>
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <FtActivateInterface_Implementation>:
 252:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <Ft1248_Ss>
 256:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 25a:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 262:	08 95       	ret

00000264 <FtPullData_Implementation>:
 264:	60 91 7e 03 	lds	r22, 0x037E	; 0x80037e <Ft1248_Sck>
 268:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 26c:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 274:	08 95       	ret

00000276 <FtDeactivateInterface_Implementation>:
 276:	60 91 7f 03 	lds	r22, 0x037F	; 0x80037f <Ft1248_Ss>
 27a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 27e:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 286:	08 95       	ret

00000288 <FtPushData_Implementation>:
 288:	60 91 7e 03 	lds	r22, 0x037E	; 0x80037e <Ft1248_Sck>
 28c:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 290:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 298:	08 95       	ret

0000029a <FtIsBusOk_Implementation>:
 29a:	60 91 7d 03 	lds	r22, 0x037D	; 0x80037d <Ft1248_Miso>
 29e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <Ft1248_pin>
 2a2:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <Ft1248_pin+0x1>
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 2aa:	08 95       	ret

000002ac <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2ac:	60 91 7d 03 	lds	r22, 0x037D	; 0x80037d <Ft1248_Miso>
 2b0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <Ft1248_ddr>
 2b4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <Ft1248_ddr+0x1>
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2bc:	08 95       	ret

000002be <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2be:	60 91 7d 03 	lds	r22, 0x037D	; 0x80037d <Ft1248_Miso>
 2c2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 2c6:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2ce:	08 95       	ret

000002d0 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2d0:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <FtMiosio_ddr>
 2d4:	f0 91 83 03 	lds	r31, 0x0383	; 0x800383 <FtMiosio_ddr+0x1>
 2d8:	10 82       	st	Z, r1
 2da:	08 95       	ret

000002dc <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2dc:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <FtMiosio_port>
 2e0:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <FtMiosio_port+0x1>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <FtSckLow>:
}
void FtSckLow(void)
{
 2ea:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ec:	c0 91 7e 03 	lds	r28, 0x037E	; 0x80037e <Ft1248_Sck>
 2f0:	6c 2f       	mov	r22, r28
 2f2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 2f6:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2fe:	6c 2f       	mov	r22, r28
 300:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <Ft1248_ddr>
 304:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <Ft1248_ddr+0x1>
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <FtSsHigh>:
void FtSsHigh(void)
{
 310:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 312:	c0 91 7f 03 	lds	r28, 0x037F	; 0x80037f <Ft1248_Ss>
 316:	6c 2f       	mov	r22, r28
 318:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <Ft1248_port>
 31c:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <Ft1248_port+0x1>
 320:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 324:	6c 2f       	mov	r22, r28
 326:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <Ft1248_ddr>
 32a:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <Ft1248_ddr+0x1>
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 336:	0e 94 56 01 	call	0x2ac	; 0x2ac <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 33a:	0e 94 5f 01 	call	0x2be	; 0x2be <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 33e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 342:	0e 94 6e 01 	call	0x2dc	; 0x2dc <FtEnablePullupsOnMiosio>
    FtSckLow();
 346:	0e 94 75 01 	call	0x2ea	; 0x2ea <FtSckLow>
    FtSsHigh();
 34a:	0e 94 88 01 	call	0x310	; 0x310 <FtSsHigh>
 34e:	08 95       	ret

00000350 <UsbInit>:
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
 350:	0e 94 9b 01 	call	0x336	; 0x336 <FtInit>
 354:	08 95       	ret

00000356 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
 364:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 366:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtSendCommand>
 36a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtSendCommand+0x1>
 36e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <FtCmd_Write>
 372:	09 95       	icall
    if (!FtBusTurnaround())
 374:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtBusTurnaround>
 378:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtBusTurnaround+0x1>
 37c:	09 95       	icall
 37e:	81 11       	cpse	r24, r1
 380:	0d c0       	rjmp	.+26     	; 0x39c <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 382:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 386:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 38a:	09 95       	icall
        FtDeactivateInterface();
 38c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 390:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 394:	09 95       	icall
        return num_bytes_sent;
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	15 c0       	rjmp	.+42     	; 0x3c6 <UsbWrite+0x70>
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 3a0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtWrite>
 3a4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtWrite+0x1>
 3a8:	c8 01       	movw	r24, r16
 3aa:	8c 0f       	add	r24, r28
 3ac:	9d 1f       	adc	r25, r29
 3ae:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 3b0:	88 23       	and	r24, r24
 3b2:	21 f0       	breq	.+8      	; 0x3bc <UsbWrite+0x66>
 3b4:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 3b6:	ce 15       	cp	r28, r14
 3b8:	df 05       	cpc	r29, r15
 3ba:	90 f3       	brcs	.-28     	; 0x3a0 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 3bc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 3c0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 3c4:	09 95       	icall
    return num_bytes_sent;
}
 3c6:	ce 01       	movw	r24, r28
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	08 95       	ret

000003d6 <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
 3d6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <ReadSpiStatusRegister>
 3da:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <ReadSpiStatusRegister+0x1>
 3de:	09 95       	icall
 3e0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 3e4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 3e8:	09 95       	icall
 3ea:	08 95       	ret

000003ec <ReadSpiStatusRegister_Implementation>:
 3ec:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <Spi_spsr>
 3f0:	f0 91 74 03 	lds	r31, 0x0374	; 0x800374 <Spi_spsr+0x1>
 3f4:	80 81       	ld	r24, Z
 3f6:	08 95       	ret

000003f8 <ReadSpiDataRegister_Implementation>:
 3f8:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <Spi_spdr>
 3fc:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <Spi_spdr+0x1>
 400:	80 81       	ld	r24, Z
 402:	08 95       	ret

00000404 <SpiMasterOpenSpi_Implementation>:
 404:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <Spi_Ss>
 408:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <Spi_port>
 40c:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <Spi_port+0x1>
 410:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 414:	08 95       	ret

00000416 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 416:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <Spi_Enable>
 41a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <Spi_spcr>
 41e:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <Spi_spcr+0x1>
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 426:	08 95       	ret

00000428 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 428:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <Spi_Ss>
 42c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <Spi_port>
 430:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <Spi_port+0x1>
 434:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 438:	08 95       	ret

0000043a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 43a:	60 91 67 03 	lds	r22, 0x0367	; 0x800367 <Spi_InterruptFlag>
 43e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <Spi_spsr>
 442:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <Spi_spsr+0x1>
 446:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 44a:	08 95       	ret

0000044c <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 44c:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <Spi_Miso>
 450:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <Spi_pin>
 454:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <Spi_pin+0x1>
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 45c:	08 95       	ret

0000045e <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
    SlaveSelectIdleHigh();
 464:	0e 94 14 02 	call	0x428	; 0x428 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 468:	10 91 6e 03 	lds	r17, 0x036E	; 0x80036e <Spi_Miso>
 46c:	c0 91 7b 03 	lds	r28, 0x037B	; 0x80037b <Spi_ddr>
 470:	d0 91 7c 03 	lds	r29, 0x037C	; 0x80037c <Spi_ddr+0x1>
 474:	61 2f       	mov	r22, r17
 476:	ce 01       	movw	r24, r28
 478:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 47c:	61 2f       	mov	r22, r17
 47e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <Spi_port>
 482:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <Spi_port+0x1>
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 48a:	60 91 70 03 	lds	r22, 0x0370	; 0x800370 <Spi_Ss>
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 494:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <Spi_Mosi>
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 49e:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <Spi_Sck>
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 4a8:	c0 91 75 03 	lds	r28, 0x0375	; 0x800375 <Spi_spcr>
 4ac:	d0 91 76 03 	lds	r29, 0x0376	; 0x800376 <Spi_spcr+0x1>
 4b0:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <Spi_MasterSlaveSelect>
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 4ba:	60 91 6b 03 	lds	r22, 0x036B	; 0x80036b <Spi_ClockRateBit0>
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 4c4:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <Spi_ClockRateBit1>
 4c8:	ce 01       	movw	r24, r28
 4ca:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 4ce:	60 91 68 03 	lds	r22, 0x0368	; 0x800368 <Spi_DoubleClockRate>
 4d2:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <Spi_spsr>
 4d6:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <Spi_spsr+0x1>
 4da:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 4de:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <EnableSpi>
 4e2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <EnableSpi+0x1>
 4e6:	09 95       	icall
    ClearPendingSpiInterrupt();
 4e8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <ClearPendingSpiInterrupt>
 4ec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <ClearPendingSpiInterrupt+0x1>
 4f0:	09 95       	icall
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 4fe:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <SpiMasterOpenSpi>
 502:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <SpiMasterOpenSpi+0x1>
 506:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 508:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <Spi_spdr>
 50c:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <Spi_spdr+0x1>
 510:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 512:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <SpiTransferIsDone>
 516:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <SpiTransferIsDone+0x1>
 51a:	09 95       	icall
 51c:	88 23       	and	r24, r24
 51e:	c9 f3       	breq	.-14     	; 0x512 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 520:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiMasterCloseSpi>
 524:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiMasterCloseSpi+0x1>
 528:	09 95       	icall
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <SpiMasterRead>:
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    return ReadSpiDataRegister();
 534:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 538:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 53c:	09 95       	icall
}
 53e:	08 95       	ret

00000540 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 540:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <SpiResponseIsReady>
 544:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <SpiResponseIsReady+0x1>
 548:	09 95       	icall
 54a:	88 23       	and	r24, r24
 54c:	c9 f3       	breq	.-14     	; 0x540 <SpiMasterWaitForResponse>
}
 54e:	08 95       	ret

00000550 <AddTestResultStringLengths>:
    // Expect 2 green:  sent a response
    // Expect 3 red:    done responding
    // Expect 4 green:  unknown command
}
void test_SpiMaster(void)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	e5 e0       	ldi	r30, 0x05	; 5
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ec 0f       	add	r30, r28
 55e:	fd 1f       	adc	r31, r29
 560:	01 90       	ld	r0, Z+
 562:	00 20       	and	r0, r0
 564:	e9 f7       	brne	.-6      	; 0x560 <AddTestResultStringLengths+0x10>
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	cf 01       	movw	r24, r30
 56a:	25 e0       	ldi	r18, 0x05	; 5
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	2c 0f       	add	r18, r28
 570:	3d 1f       	adc	r19, r29
 572:	82 1b       	sub	r24, r18
 574:	93 0b       	sbc	r25, r19
 576:	de 01       	movw	r26, r28
 578:	1c 96       	adiw	r26, 0x0c	; 12
 57a:	fd 01       	movw	r30, r26
 57c:	01 90       	ld	r0, Z+
 57e:	00 20       	and	r0, r0
 580:	e9 f7       	brne	.-6      	; 0x57c <AddTestResultStringLengths+0x2c>
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	ea 1b       	sub	r30, r26
 586:	fb 0b       	sbc	r31, r27
 588:	8e 0f       	add	r24, r30
 58a:	8c 5f       	subi	r24, 0xFC	; 252
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <PrintTestResultInColor>:
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	cb 57       	subi	r28, 0x7B	; 123
 59c:	d1 09       	sbc	r29, r1
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	2d b7       	in	r18, 0x3d	; 61
 5aa:	3e b7       	in	r19, 0x3e	; 62
 5ac:	29 55       	subi	r18, 0x59	; 89
 5ae:	31 09       	sbc	r19, r1
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	3e bf       	out	0x3e, r19	; 62
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	2d bf       	out	0x3d, r18	; 61
 5ba:	ad b7       	in	r26, 0x3d	; 61
 5bc:	be b7       	in	r27, 0x3e	; 62
 5be:	11 96       	adiw	r26, 0x01	; 1
 5c0:	89 e5       	ldi	r24, 0x59	; 89
 5c2:	fe 01       	movw	r30, r28
 5c4:	e0 58       	subi	r30, 0x80	; 128
 5c6:	ff 4f       	sbci	r31, 0xFF	; 255
 5c8:	01 90       	ld	r0, Z+
 5ca:	0d 92       	st	X+, r0
 5cc:	8a 95       	dec	r24
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <PrintTestResultInColor+0x36>
 5d0:	0e 94 a8 02 	call	0x550	; 0x550 <AddTestResultStringLengths>
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	4e 96       	adiw	r24, 0x1e	; 30
 5e2:	8c 37       	cpi	r24, 0x7C	; 124
 5e4:	91 05       	cpc	r25, r1
 5e6:	98 f0       	brcs	.+38     	; 0x60e <PrintTestResultInColor+0x7c>
 5e8:	2d e8       	ldi	r18, 0x8D	; 141
 5ea:	32 e0       	ldi	r19, 0x02	; 2
 5ec:	3f 93       	push	r19
 5ee:	2f 93       	push	r18
 5f0:	9f 93       	push	r25
 5f2:	8f 93       	push	r24
 5f4:	ce 01       	movw	r24, r28
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	9f 93       	push	r25
 5fa:	8f 93       	push	r24
 5fc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <snprintf>
 600:	0f 90       	pop	r0
 602:	0f 90       	pop	r0
 604:	0f 90       	pop	r0
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	3c c0       	rjmp	.+120    	; 0x686 <PrintTestResultInColor+0xf4>
 60e:	c8 52       	subi	r28, 0x28	; 40
 610:	df 4f       	sbci	r29, 0xFF	; 255
 612:	28 81       	ld	r18, Y
 614:	c8 5d       	subi	r28, 0xD8	; 216
 616:	d0 40       	sbci	r29, 0x00	; 0
 618:	21 11       	cpse	r18, r1
 61a:	05 c0       	rjmp	.+10     	; 0x626 <PrintTestResultInColor+0x94>
 61c:	48 e8       	ldi	r20, 0x88	; 136
 61e:	52 e0       	ldi	r21, 0x02	; 2
 620:	2f e4       	ldi	r18, 0x4F	; 79
 622:	33 e0       	ldi	r19, 0x03	; 3
 624:	04 c0       	rjmp	.+8      	; 0x62e <PrintTestResultInColor+0x9c>
 626:	43 e8       	ldi	r20, 0x83	; 131
 628:	52 e0       	ldi	r21, 0x02	; 2
 62a:	25 e5       	ldi	r18, 0x55	; 85
 62c:	33 e0       	ldi	r19, 0x03	; 3
 62e:	61 e6       	ldi	r22, 0x61	; 97
 630:	73 e0       	ldi	r23, 0x03	; 3
 632:	7f 93       	push	r23
 634:	6f 93       	push	r22
 636:	5f 93       	push	r21
 638:	4f 93       	push	r20
 63a:	3f 93       	push	r19
 63c:	2f 93       	push	r18
 63e:	9e 01       	movw	r18, r28
 640:	29 57       	subi	r18, 0x79	; 121
 642:	3f 4f       	sbci	r19, 0xFF	; 255
 644:	3f 93       	push	r19
 646:	2f 93       	push	r18
 648:	2b e5       	ldi	r18, 0x5B	; 91
 64a:	33 e0       	ldi	r19, 0x03	; 3
 64c:	3f 93       	push	r19
 64e:	2f 93       	push	r18
 650:	20 e8       	ldi	r18, 0x80	; 128
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	2c 0f       	add	r18, r28
 656:	3d 1f       	adc	r19, r29
 658:	3f 93       	push	r19
 65a:	2f 93       	push	r18
 65c:	25 e5       	ldi	r18, 0x55	; 85
 65e:	33 e0       	ldi	r19, 0x03	; 3
 660:	3f 93       	push	r19
 662:	2f 93       	push	r18
 664:	21 ec       	ldi	r18, 0xC1	; 193
 666:	32 e0       	ldi	r19, 0x02	; 2
 668:	3f 93       	push	r19
 66a:	2f 93       	push	r18
 66c:	9f 93       	push	r25
 66e:	8f 93       	push	r24
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	9f 93       	push	r25
 676:	8f 93       	push	r24
 678:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <snprintf>
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	fc 01       	movw	r30, r24
 68c:	01 90       	ld	r0, Z+
 68e:	00 20       	and	r0, r0
 690:	e9 f7       	brne	.-6      	; 0x68c <PrintTestResultInColor+0xfa>
 692:	31 97       	sbiw	r30, 0x01	; 1
 694:	bf 01       	movw	r22, r30
 696:	68 1b       	sub	r22, r24
 698:	79 0b       	sbc	r23, r25
 69a:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 69e:	c5 58       	subi	r28, 0x85	; 133
 6a0:	df 4f       	sbci	r29, 0xFF	; 255
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	f8 94       	cli
 6a6:	de bf       	out	0x3e, r29	; 62
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	cd bf       	out	0x3d, r28	; 61
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <RunTest>:
 6b2:	fc 01       	movw	r30, r24
 6b4:	dc 01       	movw	r26, r24
 6b6:	a8 5a       	subi	r26, 0xA8	; 168
 6b8:	bf 4f       	sbci	r27, 0xFF	; 255
 6ba:	6c 93       	st	X, r22
 6bc:	8d b7       	in	r24, 0x3d	; 61
 6be:	9e b7       	in	r25, 0x3e	; 62
 6c0:	89 55       	subi	r24, 0x59	; 89
 6c2:	91 09       	sbc	r25, r1
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	9e bf       	out	0x3e, r25	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	8d bf       	out	0x3d, r24	; 61
 6ce:	ad b7       	in	r26, 0x3d	; 61
 6d0:	be b7       	in	r27, 0x3e	; 62
 6d2:	11 96       	adiw	r26, 0x01	; 1
 6d4:	99 e5       	ldi	r25, 0x59	; 89
 6d6:	01 90       	ld	r0, Z+
 6d8:	0d 92       	st	X+, r0
 6da:	9a 95       	dec	r25
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <RunTest+0x24>
 6de:	0e 94 c9 02 	call	0x592	; 0x592 <PrintTestResultInColor>
 6e2:	8d b7       	in	r24, 0x3d	; 61
 6e4:	9e b7       	in	r25, 0x3e	; 62
 6e6:	87 5a       	subi	r24, 0xA7	; 167
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	9e bf       	out	0x3e, r25	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	8d bf       	out	0x3d, r24	; 61
 6f4:	08 95       	ret

000006f6 <PrintSizeOfSpiSlaveResponse>:
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	ee 97       	sbiw	r28, 0x3e	; 62
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	21 e6       	ldi	r18, 0x61	; 97
 710:	33 e0       	ldi	r19, 0x03	; 3
 712:	3f 93       	push	r19
 714:	2f 93       	push	r18
 716:	9f 93       	push	r25
 718:	8f 93       	push	r24
 71a:	85 e5       	ldi	r24, 0x55	; 85
 71c:	93 e0       	ldi	r25, 0x03	; 3
 71e:	9f 93       	push	r25
 720:	8f 93       	push	r24
 722:	8b e5       	ldi	r24, 0x5B	; 91
 724:	93 e0       	ldi	r25, 0x03	; 3
 726:	9f 93       	push	r25
 728:	8f 93       	push	r24
 72a:	88 ef       	ldi	r24, 0xF8	; 248
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	9f 93       	push	r25
 730:	8f 93       	push	r24
 732:	1f 92       	push	r1
 734:	8e e3       	ldi	r24, 0x3E	; 62
 736:	8f 93       	push	r24
 738:	8e 01       	movw	r16, r28
 73a:	0f 5f       	subi	r16, 0xFF	; 255
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	1f 93       	push	r17
 740:	0f 93       	push	r16
 742:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <snprintf>
 746:	f8 01       	movw	r30, r16
 748:	01 90       	ld	r0, Z+
 74a:	00 20       	and	r0, r0
 74c:	e9 f7       	brne	.-6      	; 0x748 <PrintSizeOfSpiSlaveResponse+0x52>
 74e:	31 97       	sbiw	r30, 0x01	; 1
 750:	bf 01       	movw	r22, r30
 752:	60 1b       	sub	r22, r16
 754:	71 0b       	sbc	r23, r17
 756:	c8 01       	movw	r24, r16
 758:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	ee 96       	adiw	r28, 0x3e	; 62
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	08 95       	ret

0000077c <PrintSpiSlaveResponseInColor>:
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	ad 97       	sbiw	r28, 0x2d	; 45
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	21 e6       	ldi	r18, 0x61	; 97
 796:	33 e0       	ldi	r19, 0x03	; 3
 798:	3f 93       	push	r19
 79a:	2f 93       	push	r18
 79c:	1f 92       	push	r1
 79e:	8f 93       	push	r24
 7a0:	85 e5       	ldi	r24, 0x55	; 85
 7a2:	93 e0       	ldi	r25, 0x03	; 3
 7a4:	9f 93       	push	r25
 7a6:	8f 93       	push	r24
 7a8:	8b e5       	ldi	r24, 0x5B	; 91
 7aa:	93 e0       	ldi	r25, 0x03	; 3
 7ac:	9f 93       	push	r25
 7ae:	8f 93       	push	r24
 7b0:	83 e2       	ldi	r24, 0x23	; 35
 7b2:	93 e0       	ldi	r25, 0x03	; 3
 7b4:	9f 93       	push	r25
 7b6:	8f 93       	push	r24
 7b8:	1f 92       	push	r1
 7ba:	8d e2       	ldi	r24, 0x2D	; 45
 7bc:	8f 93       	push	r24
 7be:	8e 01       	movw	r16, r28
 7c0:	0f 5f       	subi	r16, 0xFF	; 255
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	1f 93       	push	r17
 7c6:	0f 93       	push	r16
 7c8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <snprintf>
 7cc:	f8 01       	movw	r30, r16
 7ce:	01 90       	ld	r0, Z+
 7d0:	00 20       	and	r0, r0
 7d2:	e9 f7       	brne	.-6      	; 0x7ce <PrintSpiSlaveResponseInColor+0x52>
 7d4:	31 97       	sbiw	r30, 0x01	; 1
 7d6:	bf 01       	movw	r22, r30
 7d8:	60 1b       	sub	r22, r16
 7da:	71 0b       	sbc	r23, r17
 7dc:	c8 01       	movw	r24, r16
 7de:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	ad 96       	adiw	r28, 0x2d	; 45
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	f8 94       	cli
 7f2:	de bf       	out	0x3e, r29	; 62
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	cd bf       	out	0x3d, r28	; 61
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	08 95       	ret

00000802 <SetupDebugLed>:
 802:	23 e0       	ldi	r18, 0x03	; 3
 804:	46 e2       	ldi	r20, 0x26	; 38
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	68 e2       	ldi	r22, 0x28	; 40
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	87 e2       	ldi	r24, 0x27	; 39
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 814:	08 95       	ret

00000816 <SpiMasterPassFakeSensorData>:
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	1f 92       	push	r1
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
 82a:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 82e:	03 e0       	ldi	r16, 0x03	; 3
 830:	16 e0       	ldi	r17, 0x06	; 6
 832:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 836:	89 83       	std	Y+1, r24	; 0x01
 838:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	ce 01       	movw	r24, r28
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 848:	01 50       	subi	r16, 0x01	; 1
 84a:	11 09       	sbc	r17, r1
 84c:	91 f7       	brne	.-28     	; 0x832 <SpiMasterPassFakeSensorData+0x1c>
 84e:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 852:	89 83       	std	Y+1, r24	; 0x01
 854:	61 e0       	ldi	r22, 0x01	; 1
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	ce 01       	movw	r24, r28
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 860:	84 e0       	ldi	r24, 0x04	; 4
 862:	96 e0       	ldi	r25, 0x06	; 6
 864:	0f 90       	pop	r0
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host>:
    /* Slave_ignores_cmd_slave_ignore();  // PASS 2018-08-09 */
    /* Slave_indicates_unknown_cmd_on_led_4(); // PASS 2018-08-09 */
}
/* =====[ The automated testing starts here ]===== */
void SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(void)
{
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	c9 55       	subi	r28, 0x59	; 89
 87c:	d1 09       	sbc	r29, r1
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	de bf       	out	0x3e, r29	; 62
 884:	0f be       	out	0x3f, r0	; 63
 886:	cd bf       	out	0x3d, r28	; 61
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 888:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
    UsbInit();
 88c:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
    /* =====[ Operate ]===== */
    SpiMasterWrite(cmd_send_dummy_byte);
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    SpiMasterWaitForResponse(); // Slave signals when the response is ready.
 896:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
    uint8_t response = SpiMasterRead();
 89a:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 89e:	18 2f       	mov	r17, r24
    /* =====[ Test ]===== */
    // USB host reads the byte.
    // ```python REPL
    // a = s.read(s.inWaiting())
    // ```
    TestResult this_test = {
 8a0:	de 01       	movw	r26, r28
 8a2:	11 96       	adiw	r26, 0x01	; 1
 8a4:	89 e5       	ldi	r24, 0x59	; 89
 8a6:	fd 01       	movw	r30, r26
 8a8:	11 92       	st	Z+, r1
 8aa:	8a 95       	dec	r24
 8ac:	e9 f7       	brne	.-6      	; 0x8a8 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x38>
 8ae:	87 e0       	ldi	r24, 0x07	; 7
 8b0:	e8 e4       	ldi	r30, 0x48	; 72
 8b2:	f3 e0       	ldi	r31, 0x03	; 3
 8b4:	01 90       	ld	r0, Z+
 8b6:	0d 92       	st	X+, r0
 8b8:	8a 95       	dec	r24
 8ba:	e1 f7       	brne	.-8      	; 0x8b4 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x44>
 8bc:	85 e4       	ldi	r24, 0x45	; 69
 8be:	e1 e3       	ldi	r30, 0x31	; 49
 8c0:	f2 e0       	ldi	r31, 0x02	; 2
 8c2:	de 01       	movw	r26, r28
 8c4:	18 96       	adiw	r26, 0x08	; 8
 8c6:	01 90       	ld	r0, Z+
 8c8:	0d 92       	st	X+, r0
 8ca:	8a 95       	dec	r24
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x56>
 8ce:	fe 01       	movw	r30, r28
 8d0:	e3 5b       	subi	r30, 0xB3	; 179
 8d2:	ff 4f       	sbci	r31, 0xFF	; 255
 8d4:	8c e0       	ldi	r24, 0x0C	; 12
 8d6:	df 01       	movw	r26, r30
 8d8:	1d 92       	st	X+, r1
 8da:	8a 95       	dec	r24
 8dc:	e9 f7       	brne	.-6      	; 0x8d8 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x68>
        .pcb_name = "simBrd",
        .test_name = "SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host"
    };
    bool assert_true = (response == cmd_send_dummy_byte);
    TestResult *result = &this_test; RunTest(result, assert_true);
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	11 30       	cpi	r17, 0x01	; 1
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x76>
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	ce 01       	movw	r24, r28
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RunTest>
    // Expect `0x01`.
    // If test fails, print the received byte. `0x01` prints as a smiley face.
    if (Failed(result)) PrintSpiSlaveResponseInColor(response);
 8ee:	6a 96       	adiw	r28, 0x1a	; 26
 8f0:	8f ad       	ldd	r24, Y+63	; 0x3f
 8f2:	6a 97       	sbiw	r28, 0x1a	; 26
 8f4:	81 11       	cpse	r24, r1
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x8e>
 8f8:	81 2f       	mov	r24, r17
 8fa:	0e 94 be 03 	call	0x77c	; 0x77c <PrintSpiSlaveResponseInColor>
    /* this_test.passed = (response == cmd_send_dummy_byte); */
    /* PrintTestResultInColor(this_test); */
    /* // Expect `0x01`. */
    /* // If test fails, print the byte sent. `0x01` prints as a smiley face. */
    /* if (!this_test.passed) PrintSpiSlaveResponseInColor(response); */
}
 8fe:	c7 5a       	subi	r28, 0xA7	; 167
 900:	df 4f       	sbci	r29, 0xFF	; 255
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	de bf       	out	0x3e, r29	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	cd bf       	out	0x3d, r28	; 61
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	08 95       	ret

00000914 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host>:
void SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host(void)
{
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
 918:	cf 93       	push	r28
 91a:	df 93       	push	r29
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
 920:	c9 55       	subi	r28, 0x59	; 89
 922:	d1 09       	sbc	r29, r1
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	f8 94       	cli
 928:	de bf       	out	0x3e, r29	; 62
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	cd bf       	out	0x3d, r28	; 61
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 92e:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
    UsbInit();
 932:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
    /* =====[ Operate ]===== */
    uint16_t nbytes = SpiMasterPassFakeSensorData();
 936:	0e 94 0b 04 	call	0x816	; 0x816 <SpiMasterPassFakeSensorData>
 93a:	8c 01       	movw	r16, r24
    /* =====[ Test ]===== */
    // USB host reads the frame.
    // ```python REPL
    // a = s.read(s.inWaiting())
    // ```
    TestResult this_test = {
 93c:	de 01       	movw	r26, r28
 93e:	11 96       	adiw	r26, 0x01	; 1
 940:	89 e5       	ldi	r24, 0x59	; 89
 942:	fd 01       	movw	r30, r26
 944:	11 92       	st	Z+, r1
 946:	8a 95       	dec	r24
 948:	e9 f7       	brne	.-6      	; 0x944 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x30>
 94a:	87 e0       	ldi	r24, 0x07	; 7
 94c:	e8 e4       	ldi	r30, 0x48	; 72
 94e:	f3 e0       	ldi	r31, 0x03	; 3
 950:	01 90       	ld	r0, Z+
 952:	0d 92       	st	X+, r0
 954:	8a 95       	dec	r24
 956:	e1 f7       	brne	.-8      	; 0x950 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x3c>
 958:	83 e3       	ldi	r24, 0x33	; 51
 95a:	e0 ee       	ldi	r30, 0xE0	; 224
 95c:	f1 e0       	ldi	r31, 0x01	; 1
 95e:	de 01       	movw	r26, r28
 960:	18 96       	adiw	r26, 0x08	; 8
 962:	01 90       	ld	r0, Z+
 964:	0d 92       	st	X+, r0
 966:	8a 95       	dec	r24
 968:	e1 f7       	brne	.-8      	; 0x962 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x4e>
 96a:	fe 01       	movw	r30, r28
 96c:	fb 96       	adiw	r30, 0x3b	; 59
 96e:	8e e1       	ldi	r24, 0x1E	; 30
 970:	df 01       	movw	r26, r30
 972:	1d 92       	st	X+, r1
 974:	8a 95       	dec	r24
 976:	e9 f7       	brne	.-6      	; 0x972 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x5e>
        .pcb_name = "simBrd",
        .test_name = "Get_a_frame_from_slave_and_write_frame_to_USB_host"
    };
    bool assert_true = (nbytes == sizeof_dummy_frame);
    TestResult *result = &this_test; RunTest(result, assert_true);
 978:	61 e0       	ldi	r22, 0x01	; 1
 97a:	04 30       	cpi	r16, 0x04	; 4
 97c:	b6 e0       	ldi	r27, 0x06	; 6
 97e:	1b 07       	cpc	r17, r27
 980:	09 f0       	breq	.+2      	; 0x984 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x70>
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	ce 01       	movw	r24, r28
 986:	01 96       	adiw	r24, 0x01	; 1
 988:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RunTest>
    // Expect 1540 bytes of repeated ABCs, ending in letter `F`
    if (Failed(result)) PrintSizeOfSpiSlaveResponse(nbytes);
 98c:	6a 96       	adiw	r28, 0x1a	; 26
 98e:	8f ad       	ldd	r24, Y+63	; 0x3f
 990:	6a 97       	sbiw	r28, 0x1a	; 26
 992:	81 11       	cpse	r24, r1
 994:	03 c0       	rjmp	.+6      	; 0x99c <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x88>
 996:	c8 01       	movw	r24, r16
 998:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <PrintSizeOfSpiSlaveResponse>
}
 99c:	c7 5a       	subi	r28, 0xA7	; 167
 99e:	df 4f       	sbci	r29, 0xFF	; 255
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	f8 94       	cli
 9a4:	de bf       	out	0x3e, r29	; 62
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	cd bf       	out	0x3d, r28	; 61
 9aa:	df 91       	pop	r29
 9ac:	cf 91       	pop	r28
 9ae:	1f 91       	pop	r17
 9b0:	0f 91       	pop	r16
 9b2:	08 95       	ret

000009b4 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 9b4:	0e 94 01 04 	call	0x802	; 0x802 <SetupDebugLed>
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    /* test_SpiMaster(); // All test pass 2018-08-15 */
    SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host();
 9b8:	0e 94 38 04 	call	0x870	; 0x870 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host>
    SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host();
 9bc:	0e 94 8a 04 	call	0x914	; 0x914 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host>

}
 9c0:	80 e0       	ldi	r24, 0x00	; 0
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	08 95       	ret

000009c6 <snprintf>:
 9c6:	ae e0       	ldi	r26, 0x0E	; 14
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e9 ee       	ldi	r30, 0xE9	; 233
 9cc:	f4 e0       	ldi	r31, 0x04	; 4
 9ce:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__prologue_saves__+0x1c>
 9d2:	0d 89       	ldd	r16, Y+21	; 0x15
 9d4:	1e 89       	ldd	r17, Y+22	; 0x16
 9d6:	8f 89       	ldd	r24, Y+23	; 0x17
 9d8:	98 8d       	ldd	r25, Y+24	; 0x18
 9da:	26 e0       	ldi	r18, 0x06	; 6
 9dc:	2c 83       	std	Y+4, r18	; 0x04
 9de:	1a 83       	std	Y+2, r17	; 0x02
 9e0:	09 83       	std	Y+1, r16	; 0x01
 9e2:	97 ff       	sbrs	r25, 7
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <snprintf+0x24>
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	90 e8       	ldi	r25, 0x80	; 128
 9ea:	01 97       	sbiw	r24, 0x01	; 1
 9ec:	9e 83       	std	Y+6, r25	; 0x06
 9ee:	8d 83       	std	Y+5, r24	; 0x05
 9f0:	ae 01       	movw	r20, r28
 9f2:	45 5e       	subi	r20, 0xE5	; 229
 9f4:	5f 4f       	sbci	r21, 0xFF	; 255
 9f6:	69 8d       	ldd	r22, Y+25	; 0x19
 9f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 9fa:	ce 01       	movw	r24, r28
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	0e 94 13 05 	call	0xa26	; 0xa26 <vfprintf>
 a02:	4d 81       	ldd	r20, Y+5	; 0x05
 a04:	5e 81       	ldd	r21, Y+6	; 0x06
 a06:	57 fd       	sbrc	r21, 7
 a08:	0a c0       	rjmp	.+20     	; 0xa1e <snprintf+0x58>
 a0a:	2f 81       	ldd	r18, Y+7	; 0x07
 a0c:	38 85       	ldd	r19, Y+8	; 0x08
 a0e:	42 17       	cp	r20, r18
 a10:	53 07       	cpc	r21, r19
 a12:	0c f4       	brge	.+2      	; 0xa16 <snprintf+0x50>
 a14:	9a 01       	movw	r18, r20
 a16:	f8 01       	movw	r30, r16
 a18:	e2 0f       	add	r30, r18
 a1a:	f3 1f       	adc	r31, r19
 a1c:	10 82       	st	Z, r1
 a1e:	2e 96       	adiw	r28, 0x0e	; 14
 a20:	e4 e0       	ldi	r30, 0x04	; 4
 a22:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__epilogue_restores__+0x1c>

00000a26 <vfprintf>:
 a26:	ab e0       	ldi	r26, 0x0B	; 11
 a28:	b0 e0       	ldi	r27, 0x00	; 0
 a2a:	e9 e1       	ldi	r30, 0x19	; 25
 a2c:	f5 e0       	ldi	r31, 0x05	; 5
 a2e:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__prologue_saves__>
 a32:	6c 01       	movw	r12, r24
 a34:	7b 01       	movw	r14, r22
 a36:	8a 01       	movw	r16, r20
 a38:	fc 01       	movw	r30, r24
 a3a:	17 82       	std	Z+7, r1	; 0x07
 a3c:	16 82       	std	Z+6, r1	; 0x06
 a3e:	83 81       	ldd	r24, Z+3	; 0x03
 a40:	81 ff       	sbrs	r24, 1
 a42:	cc c1       	rjmp	.+920    	; 0xddc <vfprintf+0x3b6>
 a44:	ce 01       	movw	r24, r28
 a46:	01 96       	adiw	r24, 0x01	; 1
 a48:	3c 01       	movw	r6, r24
 a4a:	f6 01       	movw	r30, r12
 a4c:	93 81       	ldd	r25, Z+3	; 0x03
 a4e:	f7 01       	movw	r30, r14
 a50:	93 fd       	sbrc	r25, 3
 a52:	85 91       	lpm	r24, Z+
 a54:	93 ff       	sbrs	r25, 3
 a56:	81 91       	ld	r24, Z+
 a58:	7f 01       	movw	r14, r30
 a5a:	88 23       	and	r24, r24
 a5c:	09 f4       	brne	.+2      	; 0xa60 <vfprintf+0x3a>
 a5e:	ba c1       	rjmp	.+884    	; 0xdd4 <vfprintf+0x3ae>
 a60:	85 32       	cpi	r24, 0x25	; 37
 a62:	39 f4       	brne	.+14     	; 0xa72 <vfprintf+0x4c>
 a64:	93 fd       	sbrc	r25, 3
 a66:	85 91       	lpm	r24, Z+
 a68:	93 ff       	sbrs	r25, 3
 a6a:	81 91       	ld	r24, Z+
 a6c:	7f 01       	movw	r14, r30
 a6e:	85 32       	cpi	r24, 0x25	; 37
 a70:	29 f4       	brne	.+10     	; 0xa7c <vfprintf+0x56>
 a72:	b6 01       	movw	r22, r12
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 a7a:	e7 cf       	rjmp	.-50     	; 0xa4a <vfprintf+0x24>
 a7c:	91 2c       	mov	r9, r1
 a7e:	21 2c       	mov	r2, r1
 a80:	31 2c       	mov	r3, r1
 a82:	ff e1       	ldi	r31, 0x1F	; 31
 a84:	f3 15       	cp	r31, r3
 a86:	d8 f0       	brcs	.+54     	; 0xabe <vfprintf+0x98>
 a88:	8b 32       	cpi	r24, 0x2B	; 43
 a8a:	79 f0       	breq	.+30     	; 0xaaa <vfprintf+0x84>
 a8c:	38 f4       	brcc	.+14     	; 0xa9c <vfprintf+0x76>
 a8e:	80 32       	cpi	r24, 0x20	; 32
 a90:	79 f0       	breq	.+30     	; 0xab0 <vfprintf+0x8a>
 a92:	83 32       	cpi	r24, 0x23	; 35
 a94:	a1 f4       	brne	.+40     	; 0xabe <vfprintf+0x98>
 a96:	23 2d       	mov	r18, r3
 a98:	20 61       	ori	r18, 0x10	; 16
 a9a:	1d c0       	rjmp	.+58     	; 0xad6 <vfprintf+0xb0>
 a9c:	8d 32       	cpi	r24, 0x2D	; 45
 a9e:	61 f0       	breq	.+24     	; 0xab8 <vfprintf+0x92>
 aa0:	80 33       	cpi	r24, 0x30	; 48
 aa2:	69 f4       	brne	.+26     	; 0xabe <vfprintf+0x98>
 aa4:	23 2d       	mov	r18, r3
 aa6:	21 60       	ori	r18, 0x01	; 1
 aa8:	16 c0       	rjmp	.+44     	; 0xad6 <vfprintf+0xb0>
 aaa:	83 2d       	mov	r24, r3
 aac:	82 60       	ori	r24, 0x02	; 2
 aae:	38 2e       	mov	r3, r24
 ab0:	e3 2d       	mov	r30, r3
 ab2:	e4 60       	ori	r30, 0x04	; 4
 ab4:	3e 2e       	mov	r3, r30
 ab6:	2a c0       	rjmp	.+84     	; 0xb0c <vfprintf+0xe6>
 ab8:	f3 2d       	mov	r31, r3
 aba:	f8 60       	ori	r31, 0x08	; 8
 abc:	1d c0       	rjmp	.+58     	; 0xaf8 <vfprintf+0xd2>
 abe:	37 fc       	sbrc	r3, 7
 ac0:	2d c0       	rjmp	.+90     	; 0xb1c <vfprintf+0xf6>
 ac2:	20 ed       	ldi	r18, 0xD0	; 208
 ac4:	28 0f       	add	r18, r24
 ac6:	2a 30       	cpi	r18, 0x0A	; 10
 ac8:	40 f0       	brcs	.+16     	; 0xada <vfprintf+0xb4>
 aca:	8e 32       	cpi	r24, 0x2E	; 46
 acc:	b9 f4       	brne	.+46     	; 0xafc <vfprintf+0xd6>
 ace:	36 fc       	sbrc	r3, 6
 ad0:	81 c1       	rjmp	.+770    	; 0xdd4 <vfprintf+0x3ae>
 ad2:	23 2d       	mov	r18, r3
 ad4:	20 64       	ori	r18, 0x40	; 64
 ad6:	32 2e       	mov	r3, r18
 ad8:	19 c0       	rjmp	.+50     	; 0xb0c <vfprintf+0xe6>
 ada:	36 fe       	sbrs	r3, 6
 adc:	06 c0       	rjmp	.+12     	; 0xaea <vfprintf+0xc4>
 ade:	8a e0       	ldi	r24, 0x0A	; 10
 ae0:	98 9e       	mul	r9, r24
 ae2:	20 0d       	add	r18, r0
 ae4:	11 24       	eor	r1, r1
 ae6:	92 2e       	mov	r9, r18
 ae8:	11 c0       	rjmp	.+34     	; 0xb0c <vfprintf+0xe6>
 aea:	ea e0       	ldi	r30, 0x0A	; 10
 aec:	2e 9e       	mul	r2, r30
 aee:	20 0d       	add	r18, r0
 af0:	11 24       	eor	r1, r1
 af2:	22 2e       	mov	r2, r18
 af4:	f3 2d       	mov	r31, r3
 af6:	f0 62       	ori	r31, 0x20	; 32
 af8:	3f 2e       	mov	r3, r31
 afa:	08 c0       	rjmp	.+16     	; 0xb0c <vfprintf+0xe6>
 afc:	8c 36       	cpi	r24, 0x6C	; 108
 afe:	21 f4       	brne	.+8      	; 0xb08 <vfprintf+0xe2>
 b00:	83 2d       	mov	r24, r3
 b02:	80 68       	ori	r24, 0x80	; 128
 b04:	38 2e       	mov	r3, r24
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <vfprintf+0xe6>
 b08:	88 36       	cpi	r24, 0x68	; 104
 b0a:	41 f4       	brne	.+16     	; 0xb1c <vfprintf+0xf6>
 b0c:	f7 01       	movw	r30, r14
 b0e:	93 fd       	sbrc	r25, 3
 b10:	85 91       	lpm	r24, Z+
 b12:	93 ff       	sbrs	r25, 3
 b14:	81 91       	ld	r24, Z+
 b16:	7f 01       	movw	r14, r30
 b18:	81 11       	cpse	r24, r1
 b1a:	b3 cf       	rjmp	.-154    	; 0xa82 <vfprintf+0x5c>
 b1c:	98 2f       	mov	r25, r24
 b1e:	9f 7d       	andi	r25, 0xDF	; 223
 b20:	95 54       	subi	r25, 0x45	; 69
 b22:	93 30       	cpi	r25, 0x03	; 3
 b24:	28 f4       	brcc	.+10     	; 0xb30 <vfprintf+0x10a>
 b26:	0c 5f       	subi	r16, 0xFC	; 252
 b28:	1f 4f       	sbci	r17, 0xFF	; 255
 b2a:	9f e3       	ldi	r25, 0x3F	; 63
 b2c:	99 83       	std	Y+1, r25	; 0x01
 b2e:	0d c0       	rjmp	.+26     	; 0xb4a <vfprintf+0x124>
 b30:	83 36       	cpi	r24, 0x63	; 99
 b32:	31 f0       	breq	.+12     	; 0xb40 <vfprintf+0x11a>
 b34:	83 37       	cpi	r24, 0x73	; 115
 b36:	71 f0       	breq	.+28     	; 0xb54 <vfprintf+0x12e>
 b38:	83 35       	cpi	r24, 0x53	; 83
 b3a:	09 f0       	breq	.+2      	; 0xb3e <vfprintf+0x118>
 b3c:	59 c0       	rjmp	.+178    	; 0xbf0 <vfprintf+0x1ca>
 b3e:	21 c0       	rjmp	.+66     	; 0xb82 <vfprintf+0x15c>
 b40:	f8 01       	movw	r30, r16
 b42:	80 81       	ld	r24, Z
 b44:	89 83       	std	Y+1, r24	; 0x01
 b46:	0e 5f       	subi	r16, 0xFE	; 254
 b48:	1f 4f       	sbci	r17, 0xFF	; 255
 b4a:	88 24       	eor	r8, r8
 b4c:	83 94       	inc	r8
 b4e:	91 2c       	mov	r9, r1
 b50:	53 01       	movw	r10, r6
 b52:	13 c0       	rjmp	.+38     	; 0xb7a <vfprintf+0x154>
 b54:	28 01       	movw	r4, r16
 b56:	f2 e0       	ldi	r31, 0x02	; 2
 b58:	4f 0e       	add	r4, r31
 b5a:	51 1c       	adc	r5, r1
 b5c:	f8 01       	movw	r30, r16
 b5e:	a0 80       	ld	r10, Z
 b60:	b1 80       	ldd	r11, Z+1	; 0x01
 b62:	36 fe       	sbrs	r3, 6
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <vfprintf+0x146>
 b66:	69 2d       	mov	r22, r9
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0x14a>
 b6c:	6f ef       	ldi	r22, 0xFF	; 255
 b6e:	7f ef       	ldi	r23, 0xFF	; 255
 b70:	c5 01       	movw	r24, r10
 b72:	0e 94 ff 06 	call	0xdfe	; 0xdfe <strnlen>
 b76:	4c 01       	movw	r8, r24
 b78:	82 01       	movw	r16, r4
 b7a:	f3 2d       	mov	r31, r3
 b7c:	ff 77       	andi	r31, 0x7F	; 127
 b7e:	3f 2e       	mov	r3, r31
 b80:	16 c0       	rjmp	.+44     	; 0xbae <vfprintf+0x188>
 b82:	28 01       	movw	r4, r16
 b84:	22 e0       	ldi	r18, 0x02	; 2
 b86:	42 0e       	add	r4, r18
 b88:	51 1c       	adc	r5, r1
 b8a:	f8 01       	movw	r30, r16
 b8c:	a0 80       	ld	r10, Z
 b8e:	b1 80       	ldd	r11, Z+1	; 0x01
 b90:	36 fe       	sbrs	r3, 6
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <vfprintf+0x174>
 b94:	69 2d       	mov	r22, r9
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0x178>
 b9a:	6f ef       	ldi	r22, 0xFF	; 255
 b9c:	7f ef       	ldi	r23, 0xFF	; 255
 b9e:	c5 01       	movw	r24, r10
 ba0:	0e 94 f4 06 	call	0xde8	; 0xde8 <strnlen_P>
 ba4:	4c 01       	movw	r8, r24
 ba6:	f3 2d       	mov	r31, r3
 ba8:	f0 68       	ori	r31, 0x80	; 128
 baa:	3f 2e       	mov	r3, r31
 bac:	82 01       	movw	r16, r4
 bae:	33 fc       	sbrc	r3, 3
 bb0:	1b c0       	rjmp	.+54     	; 0xbe8 <vfprintf+0x1c2>
 bb2:	82 2d       	mov	r24, r2
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	88 16       	cp	r8, r24
 bb8:	99 06       	cpc	r9, r25
 bba:	b0 f4       	brcc	.+44     	; 0xbe8 <vfprintf+0x1c2>
 bbc:	b6 01       	movw	r22, r12
 bbe:	80 e2       	ldi	r24, 0x20	; 32
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 bc6:	2a 94       	dec	r2
 bc8:	f4 cf       	rjmp	.-24     	; 0xbb2 <vfprintf+0x18c>
 bca:	f5 01       	movw	r30, r10
 bcc:	37 fc       	sbrc	r3, 7
 bce:	85 91       	lpm	r24, Z+
 bd0:	37 fe       	sbrs	r3, 7
 bd2:	81 91       	ld	r24, Z+
 bd4:	5f 01       	movw	r10, r30
 bd6:	b6 01       	movw	r22, r12
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 bde:	21 10       	cpse	r2, r1
 be0:	2a 94       	dec	r2
 be2:	21 e0       	ldi	r18, 0x01	; 1
 be4:	82 1a       	sub	r8, r18
 be6:	91 08       	sbc	r9, r1
 be8:	81 14       	cp	r8, r1
 bea:	91 04       	cpc	r9, r1
 bec:	71 f7       	brne	.-36     	; 0xbca <vfprintf+0x1a4>
 bee:	e8 c0       	rjmp	.+464    	; 0xdc0 <vfprintf+0x39a>
 bf0:	84 36       	cpi	r24, 0x64	; 100
 bf2:	11 f0       	breq	.+4      	; 0xbf8 <vfprintf+0x1d2>
 bf4:	89 36       	cpi	r24, 0x69	; 105
 bf6:	41 f5       	brne	.+80     	; 0xc48 <vfprintf+0x222>
 bf8:	f8 01       	movw	r30, r16
 bfa:	37 fe       	sbrs	r3, 7
 bfc:	07 c0       	rjmp	.+14     	; 0xc0c <vfprintf+0x1e6>
 bfe:	60 81       	ld	r22, Z
 c00:	71 81       	ldd	r23, Z+1	; 0x01
 c02:	82 81       	ldd	r24, Z+2	; 0x02
 c04:	93 81       	ldd	r25, Z+3	; 0x03
 c06:	0c 5f       	subi	r16, 0xFC	; 252
 c08:	1f 4f       	sbci	r17, 0xFF	; 255
 c0a:	08 c0       	rjmp	.+16     	; 0xc1c <vfprintf+0x1f6>
 c0c:	60 81       	ld	r22, Z
 c0e:	71 81       	ldd	r23, Z+1	; 0x01
 c10:	07 2e       	mov	r0, r23
 c12:	00 0c       	add	r0, r0
 c14:	88 0b       	sbc	r24, r24
 c16:	99 0b       	sbc	r25, r25
 c18:	0e 5f       	subi	r16, 0xFE	; 254
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
 c1c:	f3 2d       	mov	r31, r3
 c1e:	ff 76       	andi	r31, 0x6F	; 111
 c20:	3f 2e       	mov	r3, r31
 c22:	97 ff       	sbrs	r25, 7
 c24:	09 c0       	rjmp	.+18     	; 0xc38 <vfprintf+0x212>
 c26:	90 95       	com	r25
 c28:	80 95       	com	r24
 c2a:	70 95       	com	r23
 c2c:	61 95       	neg	r22
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	f0 68       	ori	r31, 0x80	; 128
 c36:	3f 2e       	mov	r3, r31
 c38:	2a e0       	ldi	r18, 0x0A	; 10
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	a3 01       	movw	r20, r6
 c3e:	0e 94 46 07 	call	0xe8c	; 0xe8c <__ultoa_invert>
 c42:	88 2e       	mov	r8, r24
 c44:	86 18       	sub	r8, r6
 c46:	45 c0       	rjmp	.+138    	; 0xcd2 <vfprintf+0x2ac>
 c48:	85 37       	cpi	r24, 0x75	; 117
 c4a:	31 f4       	brne	.+12     	; 0xc58 <vfprintf+0x232>
 c4c:	23 2d       	mov	r18, r3
 c4e:	2f 7e       	andi	r18, 0xEF	; 239
 c50:	b2 2e       	mov	r11, r18
 c52:	2a e0       	ldi	r18, 0x0A	; 10
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	25 c0       	rjmp	.+74     	; 0xca2 <vfprintf+0x27c>
 c58:	93 2d       	mov	r25, r3
 c5a:	99 7f       	andi	r25, 0xF9	; 249
 c5c:	b9 2e       	mov	r11, r25
 c5e:	8f 36       	cpi	r24, 0x6F	; 111
 c60:	c1 f0       	breq	.+48     	; 0xc92 <vfprintf+0x26c>
 c62:	18 f4       	brcc	.+6      	; 0xc6a <vfprintf+0x244>
 c64:	88 35       	cpi	r24, 0x58	; 88
 c66:	79 f0       	breq	.+30     	; 0xc86 <vfprintf+0x260>
 c68:	b5 c0       	rjmp	.+362    	; 0xdd4 <vfprintf+0x3ae>
 c6a:	80 37       	cpi	r24, 0x70	; 112
 c6c:	19 f0       	breq	.+6      	; 0xc74 <vfprintf+0x24e>
 c6e:	88 37       	cpi	r24, 0x78	; 120
 c70:	21 f0       	breq	.+8      	; 0xc7a <vfprintf+0x254>
 c72:	b0 c0       	rjmp	.+352    	; 0xdd4 <vfprintf+0x3ae>
 c74:	e9 2f       	mov	r30, r25
 c76:	e0 61       	ori	r30, 0x10	; 16
 c78:	be 2e       	mov	r11, r30
 c7a:	b4 fe       	sbrs	r11, 4
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <vfprintf+0x272>
 c7e:	fb 2d       	mov	r31, r11
 c80:	f4 60       	ori	r31, 0x04	; 4
 c82:	bf 2e       	mov	r11, r31
 c84:	09 c0       	rjmp	.+18     	; 0xc98 <vfprintf+0x272>
 c86:	34 fe       	sbrs	r3, 4
 c88:	0a c0       	rjmp	.+20     	; 0xc9e <vfprintf+0x278>
 c8a:	29 2f       	mov	r18, r25
 c8c:	26 60       	ori	r18, 0x06	; 6
 c8e:	b2 2e       	mov	r11, r18
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <vfprintf+0x278>
 c92:	28 e0       	ldi	r18, 0x08	; 8
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	05 c0       	rjmp	.+10     	; 0xca2 <vfprintf+0x27c>
 c98:	20 e1       	ldi	r18, 0x10	; 16
 c9a:	30 e0       	ldi	r19, 0x00	; 0
 c9c:	02 c0       	rjmp	.+4      	; 0xca2 <vfprintf+0x27c>
 c9e:	20 e1       	ldi	r18, 0x10	; 16
 ca0:	32 e0       	ldi	r19, 0x02	; 2
 ca2:	f8 01       	movw	r30, r16
 ca4:	b7 fe       	sbrs	r11, 7
 ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <vfprintf+0x290>
 ca8:	60 81       	ld	r22, Z
 caa:	71 81       	ldd	r23, Z+1	; 0x01
 cac:	82 81       	ldd	r24, Z+2	; 0x02
 cae:	93 81       	ldd	r25, Z+3	; 0x03
 cb0:	0c 5f       	subi	r16, 0xFC	; 252
 cb2:	1f 4f       	sbci	r17, 0xFF	; 255
 cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <vfprintf+0x29c>
 cb6:	60 81       	ld	r22, Z
 cb8:	71 81       	ldd	r23, Z+1	; 0x01
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	0e 5f       	subi	r16, 0xFE	; 254
 cc0:	1f 4f       	sbci	r17, 0xFF	; 255
 cc2:	a3 01       	movw	r20, r6
 cc4:	0e 94 46 07 	call	0xe8c	; 0xe8c <__ultoa_invert>
 cc8:	88 2e       	mov	r8, r24
 cca:	86 18       	sub	r8, r6
 ccc:	fb 2d       	mov	r31, r11
 cce:	ff 77       	andi	r31, 0x7F	; 127
 cd0:	3f 2e       	mov	r3, r31
 cd2:	36 fe       	sbrs	r3, 6
 cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <vfprintf+0x2ca>
 cd6:	23 2d       	mov	r18, r3
 cd8:	2e 7f       	andi	r18, 0xFE	; 254
 cda:	a2 2e       	mov	r10, r18
 cdc:	89 14       	cp	r8, r9
 cde:	58 f4       	brcc	.+22     	; 0xcf6 <vfprintf+0x2d0>
 ce0:	34 fe       	sbrs	r3, 4
 ce2:	0b c0       	rjmp	.+22     	; 0xcfa <vfprintf+0x2d4>
 ce4:	32 fc       	sbrc	r3, 2
 ce6:	09 c0       	rjmp	.+18     	; 0xcfa <vfprintf+0x2d4>
 ce8:	83 2d       	mov	r24, r3
 cea:	8e 7e       	andi	r24, 0xEE	; 238
 cec:	a8 2e       	mov	r10, r24
 cee:	05 c0       	rjmp	.+10     	; 0xcfa <vfprintf+0x2d4>
 cf0:	b8 2c       	mov	r11, r8
 cf2:	a3 2c       	mov	r10, r3
 cf4:	03 c0       	rjmp	.+6      	; 0xcfc <vfprintf+0x2d6>
 cf6:	b8 2c       	mov	r11, r8
 cf8:	01 c0       	rjmp	.+2      	; 0xcfc <vfprintf+0x2d6>
 cfa:	b9 2c       	mov	r11, r9
 cfc:	a4 fe       	sbrs	r10, 4
 cfe:	0f c0       	rjmp	.+30     	; 0xd1e <vfprintf+0x2f8>
 d00:	fe 01       	movw	r30, r28
 d02:	e8 0d       	add	r30, r8
 d04:	f1 1d       	adc	r31, r1
 d06:	80 81       	ld	r24, Z
 d08:	80 33       	cpi	r24, 0x30	; 48
 d0a:	21 f4       	brne	.+8      	; 0xd14 <vfprintf+0x2ee>
 d0c:	9a 2d       	mov	r25, r10
 d0e:	99 7e       	andi	r25, 0xE9	; 233
 d10:	a9 2e       	mov	r10, r25
 d12:	09 c0       	rjmp	.+18     	; 0xd26 <vfprintf+0x300>
 d14:	a2 fe       	sbrs	r10, 2
 d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x2fe>
 d18:	b3 94       	inc	r11
 d1a:	b3 94       	inc	r11
 d1c:	04 c0       	rjmp	.+8      	; 0xd26 <vfprintf+0x300>
 d1e:	8a 2d       	mov	r24, r10
 d20:	86 78       	andi	r24, 0x86	; 134
 d22:	09 f0       	breq	.+2      	; 0xd26 <vfprintf+0x300>
 d24:	b3 94       	inc	r11
 d26:	a3 fc       	sbrc	r10, 3
 d28:	11 c0       	rjmp	.+34     	; 0xd4c <vfprintf+0x326>
 d2a:	a0 fe       	sbrs	r10, 0
 d2c:	06 c0       	rjmp	.+12     	; 0xd3a <vfprintf+0x314>
 d2e:	b2 14       	cp	r11, r2
 d30:	88 f4       	brcc	.+34     	; 0xd54 <vfprintf+0x32e>
 d32:	28 0c       	add	r2, r8
 d34:	92 2c       	mov	r9, r2
 d36:	9b 18       	sub	r9, r11
 d38:	0e c0       	rjmp	.+28     	; 0xd56 <vfprintf+0x330>
 d3a:	b2 14       	cp	r11, r2
 d3c:	60 f4       	brcc	.+24     	; 0xd56 <vfprintf+0x330>
 d3e:	b6 01       	movw	r22, r12
 d40:	80 e2       	ldi	r24, 0x20	; 32
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 d48:	b3 94       	inc	r11
 d4a:	f7 cf       	rjmp	.-18     	; 0xd3a <vfprintf+0x314>
 d4c:	b2 14       	cp	r11, r2
 d4e:	18 f4       	brcc	.+6      	; 0xd56 <vfprintf+0x330>
 d50:	2b 18       	sub	r2, r11
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x332>
 d54:	98 2c       	mov	r9, r8
 d56:	21 2c       	mov	r2, r1
 d58:	a4 fe       	sbrs	r10, 4
 d5a:	10 c0       	rjmp	.+32     	; 0xd7c <vfprintf+0x356>
 d5c:	b6 01       	movw	r22, r12
 d5e:	80 e3       	ldi	r24, 0x30	; 48
 d60:	90 e0       	ldi	r25, 0x00	; 0
 d62:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 d66:	a2 fe       	sbrs	r10, 2
 d68:	17 c0       	rjmp	.+46     	; 0xd98 <vfprintf+0x372>
 d6a:	a1 fc       	sbrc	r10, 1
 d6c:	03 c0       	rjmp	.+6      	; 0xd74 <vfprintf+0x34e>
 d6e:	88 e7       	ldi	r24, 0x78	; 120
 d70:	90 e0       	ldi	r25, 0x00	; 0
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x352>
 d74:	88 e5       	ldi	r24, 0x58	; 88
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	b6 01       	movw	r22, r12
 d7a:	0c c0       	rjmp	.+24     	; 0xd94 <vfprintf+0x36e>
 d7c:	8a 2d       	mov	r24, r10
 d7e:	86 78       	andi	r24, 0x86	; 134
 d80:	59 f0       	breq	.+22     	; 0xd98 <vfprintf+0x372>
 d82:	a1 fe       	sbrs	r10, 1
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x364>
 d86:	8b e2       	ldi	r24, 0x2B	; 43
 d88:	01 c0       	rjmp	.+2      	; 0xd8c <vfprintf+0x366>
 d8a:	80 e2       	ldi	r24, 0x20	; 32
 d8c:	a7 fc       	sbrc	r10, 7
 d8e:	8d e2       	ldi	r24, 0x2D	; 45
 d90:	b6 01       	movw	r22, r12
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 d98:	89 14       	cp	r8, r9
 d9a:	38 f4       	brcc	.+14     	; 0xdaa <vfprintf+0x384>
 d9c:	b6 01       	movw	r22, r12
 d9e:	80 e3       	ldi	r24, 0x30	; 48
 da0:	90 e0       	ldi	r25, 0x00	; 0
 da2:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 da6:	9a 94       	dec	r9
 da8:	f7 cf       	rjmp	.-18     	; 0xd98 <vfprintf+0x372>
 daa:	8a 94       	dec	r8
 dac:	f3 01       	movw	r30, r6
 dae:	e8 0d       	add	r30, r8
 db0:	f1 1d       	adc	r31, r1
 db2:	80 81       	ld	r24, Z
 db4:	b6 01       	movw	r22, r12
 db6:	90 e0       	ldi	r25, 0x00	; 0
 db8:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 dbc:	81 10       	cpse	r8, r1
 dbe:	f5 cf       	rjmp	.-22     	; 0xdaa <vfprintf+0x384>
 dc0:	22 20       	and	r2, r2
 dc2:	09 f4       	brne	.+2      	; 0xdc6 <vfprintf+0x3a0>
 dc4:	42 ce       	rjmp	.-892    	; 0xa4a <vfprintf+0x24>
 dc6:	b6 01       	movw	r22, r12
 dc8:	80 e2       	ldi	r24, 0x20	; 32
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 0a 07 	call	0xe14	; 0xe14 <fputc>
 dd0:	2a 94       	dec	r2
 dd2:	f6 cf       	rjmp	.-20     	; 0xdc0 <vfprintf+0x39a>
 dd4:	f6 01       	movw	r30, r12
 dd6:	86 81       	ldd	r24, Z+6	; 0x06
 dd8:	97 81       	ldd	r25, Z+7	; 0x07
 dda:	02 c0       	rjmp	.+4      	; 0xde0 <vfprintf+0x3ba>
 ddc:	8f ef       	ldi	r24, 0xFF	; 255
 dde:	9f ef       	ldi	r25, 0xFF	; 255
 de0:	2b 96       	adiw	r28, 0x0b	; 11
 de2:	e2 e1       	ldi	r30, 0x12	; 18
 de4:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__epilogue_restores__>

00000de8 <strnlen_P>:
 de8:	fc 01       	movw	r30, r24
 dea:	05 90       	lpm	r0, Z+
 dec:	61 50       	subi	r22, 0x01	; 1
 dee:	70 40       	sbci	r23, 0x00	; 0
 df0:	01 10       	cpse	r0, r1
 df2:	d8 f7       	brcc	.-10     	; 0xdea <strnlen_P+0x2>
 df4:	80 95       	com	r24
 df6:	90 95       	com	r25
 df8:	8e 0f       	add	r24, r30
 dfa:	9f 1f       	adc	r25, r31
 dfc:	08 95       	ret

00000dfe <strnlen>:
 dfe:	fc 01       	movw	r30, r24
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 90       	ld	r0, Z+
 e06:	01 10       	cpse	r0, r1
 e08:	d8 f7       	brcc	.-10     	; 0xe00 <strnlen+0x2>
 e0a:	80 95       	com	r24
 e0c:	90 95       	com	r25
 e0e:	8e 0f       	add	r24, r30
 e10:	9f 1f       	adc	r25, r31
 e12:	08 95       	ret

00000e14 <fputc>:
 e14:	0f 93       	push	r16
 e16:	1f 93       	push	r17
 e18:	cf 93       	push	r28
 e1a:	df 93       	push	r29
 e1c:	fb 01       	movw	r30, r22
 e1e:	23 81       	ldd	r18, Z+3	; 0x03
 e20:	21 fd       	sbrc	r18, 1
 e22:	03 c0       	rjmp	.+6      	; 0xe2a <fputc+0x16>
 e24:	8f ef       	ldi	r24, 0xFF	; 255
 e26:	9f ef       	ldi	r25, 0xFF	; 255
 e28:	2c c0       	rjmp	.+88     	; 0xe82 <fputc+0x6e>
 e2a:	22 ff       	sbrs	r18, 2
 e2c:	16 c0       	rjmp	.+44     	; 0xe5a <fputc+0x46>
 e2e:	46 81       	ldd	r20, Z+6	; 0x06
 e30:	57 81       	ldd	r21, Z+7	; 0x07
 e32:	24 81       	ldd	r18, Z+4	; 0x04
 e34:	35 81       	ldd	r19, Z+5	; 0x05
 e36:	42 17       	cp	r20, r18
 e38:	53 07       	cpc	r21, r19
 e3a:	44 f4       	brge	.+16     	; 0xe4c <fputc+0x38>
 e3c:	a0 81       	ld	r26, Z
 e3e:	b1 81       	ldd	r27, Z+1	; 0x01
 e40:	9d 01       	movw	r18, r26
 e42:	2f 5f       	subi	r18, 0xFF	; 255
 e44:	3f 4f       	sbci	r19, 0xFF	; 255
 e46:	31 83       	std	Z+1, r19	; 0x01
 e48:	20 83       	st	Z, r18
 e4a:	8c 93       	st	X, r24
 e4c:	26 81       	ldd	r18, Z+6	; 0x06
 e4e:	37 81       	ldd	r19, Z+7	; 0x07
 e50:	2f 5f       	subi	r18, 0xFF	; 255
 e52:	3f 4f       	sbci	r19, 0xFF	; 255
 e54:	37 83       	std	Z+7, r19	; 0x07
 e56:	26 83       	std	Z+6, r18	; 0x06
 e58:	14 c0       	rjmp	.+40     	; 0xe82 <fputc+0x6e>
 e5a:	8b 01       	movw	r16, r22
 e5c:	ec 01       	movw	r28, r24
 e5e:	fb 01       	movw	r30, r22
 e60:	00 84       	ldd	r0, Z+8	; 0x08
 e62:	f1 85       	ldd	r31, Z+9	; 0x09
 e64:	e0 2d       	mov	r30, r0
 e66:	09 95       	icall
 e68:	89 2b       	or	r24, r25
 e6a:	e1 f6       	brne	.-72     	; 0xe24 <fputc+0x10>
 e6c:	d8 01       	movw	r26, r16
 e6e:	16 96       	adiw	r26, 0x06	; 6
 e70:	8d 91       	ld	r24, X+
 e72:	9c 91       	ld	r25, X
 e74:	17 97       	sbiw	r26, 0x07	; 7
 e76:	01 96       	adiw	r24, 0x01	; 1
 e78:	17 96       	adiw	r26, 0x07	; 7
 e7a:	9c 93       	st	X, r25
 e7c:	8e 93       	st	-X, r24
 e7e:	16 97       	sbiw	r26, 0x06	; 6
 e80:	ce 01       	movw	r24, r28
 e82:	df 91       	pop	r29
 e84:	cf 91       	pop	r28
 e86:	1f 91       	pop	r17
 e88:	0f 91       	pop	r16
 e8a:	08 95       	ret

00000e8c <__ultoa_invert>:
 e8c:	fa 01       	movw	r30, r20
 e8e:	aa 27       	eor	r26, r26
 e90:	28 30       	cpi	r18, 0x08	; 8
 e92:	51 f1       	breq	.+84     	; 0xee8 <__ultoa_invert+0x5c>
 e94:	20 31       	cpi	r18, 0x10	; 16
 e96:	81 f1       	breq	.+96     	; 0xef8 <__ultoa_invert+0x6c>
 e98:	e8 94       	clt
 e9a:	6f 93       	push	r22
 e9c:	6e 7f       	andi	r22, 0xFE	; 254
 e9e:	6e 5f       	subi	r22, 0xFE	; 254
 ea0:	7f 4f       	sbci	r23, 0xFF	; 255
 ea2:	8f 4f       	sbci	r24, 0xFF	; 255
 ea4:	9f 4f       	sbci	r25, 0xFF	; 255
 ea6:	af 4f       	sbci	r26, 0xFF	; 255
 ea8:	b1 e0       	ldi	r27, 0x01	; 1
 eaa:	3e d0       	rcall	.+124    	; 0xf28 <__ultoa_invert+0x9c>
 eac:	b4 e0       	ldi	r27, 0x04	; 4
 eae:	3c d0       	rcall	.+120    	; 0xf28 <__ultoa_invert+0x9c>
 eb0:	67 0f       	add	r22, r23
 eb2:	78 1f       	adc	r23, r24
 eb4:	89 1f       	adc	r24, r25
 eb6:	9a 1f       	adc	r25, r26
 eb8:	a1 1d       	adc	r26, r1
 eba:	68 0f       	add	r22, r24
 ebc:	79 1f       	adc	r23, r25
 ebe:	8a 1f       	adc	r24, r26
 ec0:	91 1d       	adc	r25, r1
 ec2:	a1 1d       	adc	r26, r1
 ec4:	6a 0f       	add	r22, r26
 ec6:	71 1d       	adc	r23, r1
 ec8:	81 1d       	adc	r24, r1
 eca:	91 1d       	adc	r25, r1
 ecc:	a1 1d       	adc	r26, r1
 ece:	20 d0       	rcall	.+64     	; 0xf10 <__ultoa_invert+0x84>
 ed0:	09 f4       	brne	.+2      	; 0xed4 <__ultoa_invert+0x48>
 ed2:	68 94       	set
 ed4:	3f 91       	pop	r19
 ed6:	2a e0       	ldi	r18, 0x0A	; 10
 ed8:	26 9f       	mul	r18, r22
 eda:	11 24       	eor	r1, r1
 edc:	30 19       	sub	r19, r0
 ede:	30 5d       	subi	r19, 0xD0	; 208
 ee0:	31 93       	st	Z+, r19
 ee2:	de f6       	brtc	.-74     	; 0xe9a <__ultoa_invert+0xe>
 ee4:	cf 01       	movw	r24, r30
 ee6:	08 95       	ret
 ee8:	46 2f       	mov	r20, r22
 eea:	47 70       	andi	r20, 0x07	; 7
 eec:	40 5d       	subi	r20, 0xD0	; 208
 eee:	41 93       	st	Z+, r20
 ef0:	b3 e0       	ldi	r27, 0x03	; 3
 ef2:	0f d0       	rcall	.+30     	; 0xf12 <__ultoa_invert+0x86>
 ef4:	c9 f7       	brne	.-14     	; 0xee8 <__ultoa_invert+0x5c>
 ef6:	f6 cf       	rjmp	.-20     	; 0xee4 <__ultoa_invert+0x58>
 ef8:	46 2f       	mov	r20, r22
 efa:	4f 70       	andi	r20, 0x0F	; 15
 efc:	40 5d       	subi	r20, 0xD0	; 208
 efe:	4a 33       	cpi	r20, 0x3A	; 58
 f00:	18 f0       	brcs	.+6      	; 0xf08 <__ultoa_invert+0x7c>
 f02:	49 5d       	subi	r20, 0xD9	; 217
 f04:	31 fd       	sbrc	r19, 1
 f06:	40 52       	subi	r20, 0x20	; 32
 f08:	41 93       	st	Z+, r20
 f0a:	02 d0       	rcall	.+4      	; 0xf10 <__ultoa_invert+0x84>
 f0c:	a9 f7       	brne	.-22     	; 0xef8 <__ultoa_invert+0x6c>
 f0e:	ea cf       	rjmp	.-44     	; 0xee4 <__ultoa_invert+0x58>
 f10:	b4 e0       	ldi	r27, 0x04	; 4
 f12:	a6 95       	lsr	r26
 f14:	97 95       	ror	r25
 f16:	87 95       	ror	r24
 f18:	77 95       	ror	r23
 f1a:	67 95       	ror	r22
 f1c:	ba 95       	dec	r27
 f1e:	c9 f7       	brne	.-14     	; 0xf12 <__ultoa_invert+0x86>
 f20:	00 97       	sbiw	r24, 0x00	; 0
 f22:	61 05       	cpc	r22, r1
 f24:	71 05       	cpc	r23, r1
 f26:	08 95       	ret
 f28:	9b 01       	movw	r18, r22
 f2a:	ac 01       	movw	r20, r24
 f2c:	0a 2e       	mov	r0, r26
 f2e:	06 94       	lsr	r0
 f30:	57 95       	ror	r21
 f32:	47 95       	ror	r20
 f34:	37 95       	ror	r19
 f36:	27 95       	ror	r18
 f38:	ba 95       	dec	r27
 f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0xa2>
 f3c:	62 0f       	add	r22, r18
 f3e:	73 1f       	adc	r23, r19
 f40:	84 1f       	adc	r24, r20
 f42:	95 1f       	adc	r25, r21
 f44:	a0 1d       	adc	r26, r0
 f46:	08 95       	ret

00000f48 <__prologue_saves__>:
 f48:	2f 92       	push	r2
 f4a:	3f 92       	push	r3
 f4c:	4f 92       	push	r4
 f4e:	5f 92       	push	r5
 f50:	6f 92       	push	r6
 f52:	7f 92       	push	r7
 f54:	8f 92       	push	r8
 f56:	9f 92       	push	r9
 f58:	af 92       	push	r10
 f5a:	bf 92       	push	r11
 f5c:	cf 92       	push	r12
 f5e:	df 92       	push	r13
 f60:	ef 92       	push	r14
 f62:	ff 92       	push	r15
 f64:	0f 93       	push	r16
 f66:	1f 93       	push	r17
 f68:	cf 93       	push	r28
 f6a:	df 93       	push	r29
 f6c:	cd b7       	in	r28, 0x3d	; 61
 f6e:	de b7       	in	r29, 0x3e	; 62
 f70:	ca 1b       	sub	r28, r26
 f72:	db 0b       	sbc	r29, r27
 f74:	0f b6       	in	r0, 0x3f	; 63
 f76:	f8 94       	cli
 f78:	de bf       	out	0x3e, r29	; 62
 f7a:	0f be       	out	0x3f, r0	; 63
 f7c:	cd bf       	out	0x3d, r28	; 61
 f7e:	09 94       	ijmp

00000f80 <__epilogue_restores__>:
 f80:	2a 88       	ldd	r2, Y+18	; 0x12
 f82:	39 88       	ldd	r3, Y+17	; 0x11
 f84:	48 88       	ldd	r4, Y+16	; 0x10
 f86:	5f 84       	ldd	r5, Y+15	; 0x0f
 f88:	6e 84       	ldd	r6, Y+14	; 0x0e
 f8a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f8c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f8e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f90:	aa 84       	ldd	r10, Y+10	; 0x0a
 f92:	b9 84       	ldd	r11, Y+9	; 0x09
 f94:	c8 84       	ldd	r12, Y+8	; 0x08
 f96:	df 80       	ldd	r13, Y+7	; 0x07
 f98:	ee 80       	ldd	r14, Y+6	; 0x06
 f9a:	fd 80       	ldd	r15, Y+5	; 0x05
 f9c:	0c 81       	ldd	r16, Y+4	; 0x04
 f9e:	1b 81       	ldd	r17, Y+3	; 0x03
 fa0:	aa 81       	ldd	r26, Y+2	; 0x02
 fa2:	b9 81       	ldd	r27, Y+1	; 0x01
 fa4:	ce 0f       	add	r28, r30
 fa6:	d1 1d       	adc	r29, r1
 fa8:	0f b6       	in	r0, 0x3f	; 63
 faa:	f8 94       	cli
 fac:	de bf       	out	0x3e, r29	; 62
 fae:	0f be       	out	0x3f, r0	; 63
 fb0:	cd bf       	out	0x3d, r28	; 61
 fb2:	ed 01       	movw	r28, r26
 fb4:	08 95       	ret

00000fb6 <_exit>:
 fb6:	f8 94       	cli

00000fb8 <__stop_program>:
 fb8:	ff cf       	rjmp	.-2      	; 0xfb8 <__stop_program>
