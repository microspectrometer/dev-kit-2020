
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  000005f2  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008001ac  008001ac  00000732  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ba  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed9  00000000  00000000  00002d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e54  00000000  00000000  00003c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f8  00000000  00000000  00004a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010bb  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c3  00000000  00000000  0000612f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  000067f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac ea       	ldi	r26, 0xAC	; 172
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3b       	cpi	r26, 0xB3	; 179
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <main>
  9e:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <__data_end>
 116:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <ddr_register_>
 11a:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <__data_end>
 128:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <port_register_>
 12c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <__data_end>
 13a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <port_register_>
 13e:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <ddr_register_+0x1>
 14c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <ddr_register_>
    port_register_ = port_register;
 150:	70 93 b0 01 	sts	0x01B0, r23	; 0x8001b0 <port_register_+0x1>
 154:	60 93 af 01 	sts	0x01AF, r22	; 0x8001af <port_register_>
    pin_register_ = pin_register;
 158:	50 93 ae 01 	sts	0x01AE, r21	; 0x8001ae <pin_register_+0x1>
 15c:	40 93 ad 01 	sts	0x01AD, r20	; 0x8001ad <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <__data_end>
    DebugLedTurnOn();
 164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtActivateInterface>
 182:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtActivateInterface+0x1>
 186:	09 95       	icall
 188:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 18c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 190:	09 95       	icall
 192:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 196:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 19a:	09 95       	icall
 19c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtOutputByte>
 1a0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtOutputByte+0x1>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	09 95       	icall
 1a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ac:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
 1b6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtLetSlaveDriveBus>
 1ba:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtLetSlaveDriveBus+0x1>
 1be:	09 95       	icall
 1c0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1c4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1c8:	09 95       	icall
 1ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ce:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 1d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 1dc:	09 95       	icall
 1de:	08 95       	ret

000001e0 <FtWrite_Implementation>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 1ea:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 1ee:	09 95       	icall
 1f0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1f4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1f8:	09 95       	icall
 1fa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1fe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 202:	88 81       	ld	r24, Y
 204:	09 95       	icall
 206:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 20a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 20e:	09 95       	icall
 210:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 214:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 218:	09 95       	icall
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <FtOutputByte_Implementation>:
 220:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <FtMiosio_port>
 224:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <FtMiosio_port+0x1>
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <FtLetMasterDriveBus_Implementation>:
 22c:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <FtMiosio_ddr>
 230:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <FtMiosio_ddr+0x1>
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <FtLetSlaveDriveBus_Implementation>:
 23a:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <FtMiosio_ddr>
 23e:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <FtMiosio_ddr+0x1>
 242:	10 82       	st	Z, r1
 244:	08 95       	ret

00000246 <FtWriteData_Implementation>:
 246:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <FtMiosio_port>
 24a:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <FtMiosio_port+0x1>
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <FtActivateInterface_Implementation>:
 252:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <Ft1248_Ss>
 256:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 25a:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 262:	08 95       	ret

00000264 <FtPullData_Implementation>:
 264:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <Ft1248_Sck>
 268:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 26c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 274:	08 95       	ret

00000276 <FtDeactivateInterface_Implementation>:
 276:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <Ft1248_Ss>
 27a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 27e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 286:	08 95       	ret

00000288 <FtPushData_Implementation>:
 288:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <Ft1248_Sck>
 28c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 290:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 298:	08 95       	ret

0000029a <FtIsBusOk_Implementation>:
 29a:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <Ft1248_Miso>
 29e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <Ft1248_pin>
 2a2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <Ft1248_pin+0x1>
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 2aa:	08 95       	ret

000002ac <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2ac:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <Ft1248_Miso>
 2b0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <Ft1248_ddr>
 2b4:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <Ft1248_ddr+0x1>
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2bc:	08 95       	ret

000002be <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2be:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <Ft1248_Miso>
 2c2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 2c6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2ce:	08 95       	ret

000002d0 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2d0:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <FtMiosio_ddr>
 2d4:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <FtMiosio_ddr+0x1>
 2d8:	10 82       	st	Z, r1
 2da:	08 95       	ret

000002dc <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2dc:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <FtMiosio_port>
 2e0:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <FtMiosio_port+0x1>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <FtSckLow>:
}
void FtSckLow(void)
{
 2ea:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ec:	c0 91 a0 01 	lds	r28, 0x01A0	; 0x8001a0 <Ft1248_Sck>
 2f0:	6c 2f       	mov	r22, r28
 2f2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 2f6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2fe:	6c 2f       	mov	r22, r28
 300:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <Ft1248_ddr>
 304:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <Ft1248_ddr+0x1>
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <FtSsHigh>:
void FtSsHigh(void)
{
 310:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 312:	c0 91 a1 01 	lds	r28, 0x01A1	; 0x8001a1 <Ft1248_Ss>
 316:	6c 2f       	mov	r22, r28
 318:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Ft1248_port>
 31c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <Ft1248_port+0x1>
 320:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 324:	6c 2f       	mov	r22, r28
 326:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <Ft1248_ddr>
 32a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <Ft1248_ddr+0x1>
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 336:	0e 94 56 01 	call	0x2ac	; 0x2ac <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 33a:	0e 94 5f 01 	call	0x2be	; 0x2be <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 33e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 342:	0e 94 6e 01 	call	0x2dc	; 0x2dc <FtEnablePullupsOnMiosio>
    FtSckLow();
 346:	0e 94 75 01 	call	0x2ea	; 0x2ea <FtSckLow>
    FtSsHigh();
 34a:	0e 94 88 01 	call	0x310	; 0x310 <FtSsHigh>
 34e:	08 95       	ret

00000350 <UsbInit>:
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
 350:	0e 94 9b 01 	call	0x336	; 0x336 <FtInit>
 354:	08 95       	ret

00000356 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
 364:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 366:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtSendCommand>
 36a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtSendCommand+0x1>
 36e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <FtCmd_Write>
 372:	09 95       	icall
    if (!FtBusTurnaround())
 374:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtBusTurnaround>
 378:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtBusTurnaround+0x1>
 37c:	09 95       	icall
 37e:	81 11       	cpse	r24, r1
 380:	0d c0       	rjmp	.+26     	; 0x39c <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 382:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 386:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 38a:	09 95       	icall
        FtDeactivateInterface();
 38c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 390:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 394:	09 95       	icall
        return num_bytes_sent;
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	15 c0       	rjmp	.+42     	; 0x3c6 <UsbWrite+0x70>
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 3a0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtWrite>
 3a4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtWrite+0x1>
 3a8:	c8 01       	movw	r24, r16
 3aa:	8c 0f       	add	r24, r28
 3ac:	9d 1f       	adc	r25, r29
 3ae:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 3b0:	88 23       	and	r24, r24
 3b2:	21 f0       	breq	.+8      	; 0x3bc <UsbWrite+0x66>
 3b4:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 3b6:	ce 15       	cp	r28, r14
 3b8:	df 05       	cpc	r29, r15
 3ba:	90 f3       	brcs	.-28     	; 0x3a0 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 3bc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 3c0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 3c4:	09 95       	icall
    return num_bytes_sent;
}
 3c6:	ce 01       	movw	r24, r28
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	08 95       	ret

000003d6 <ClearPendingSpiInterrupt_Implementation>:
}
uint8_t (*ReadSpiStatusRegister)(void) = ReadSpiStatusRegister_Implementation;
//
static void DisableSpi_Implementation(void)
{
    ClearBit(Spi_spcr, Spi_Enable);
 3d6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <ReadSpiStatusRegister>
 3da:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <ReadSpiStatusRegister+0x1>
 3de:	09 95       	icall
 3e0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 3e4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 3e8:	09 95       	icall
 3ea:	08 95       	ret

000003ec <ReadSpiStatusRegister_Implementation>:
 3ec:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <Spi_spsr>
 3f0:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <Spi_spsr+0x1>
 3f4:	80 81       	ld	r24, Z
 3f6:	08 95       	ret

000003f8 <ReadSpiDataRegister_Implementation>:
 3f8:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <Spi_spdr>
 3fc:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <Spi_spdr+0x1>
 400:	80 81       	ld	r24, Z
 402:	08 95       	ret

00000404 <SpiMasterOpenSpi_Implementation>:
//
// TODO: remove Open and Close from the public API
//
static void SpiMasterOpenSpi_Implementation(void)
{
    ClearBit(Spi_port, Spi_Ss);
 404:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <Spi_Ss>
 408:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Spi_port>
 40c:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Spi_port+0x1>
 410:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 414:	08 95       	ret

00000416 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 416:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <Spi_Enable>
 41a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <Spi_spcr>
 41e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <Spi_spcr+0x1>
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 426:	08 95       	ret

00000428 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 428:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <Spi_Ss>
 42c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Spi_port>
 430:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Spi_port+0x1>
 434:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 438:	08 95       	ret

0000043a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 43a:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <Spi_InterruptFlag>
 43e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Spi_spsr>
 442:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <Spi_spsr+0x1>
 446:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 44a:	08 95       	ret

0000044c <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(garbage);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 44c:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <Spi_Miso>
 450:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <Spi_pin>
 454:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <Spi_pin+0x1>
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 45c:	08 95       	ret

0000045e <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
    SlaveSelectIdleHigh();
 464:	0e 94 14 02 	call	0x428	; 0x428 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 468:	10 91 90 01 	lds	r17, 0x0190	; 0x800190 <Spi_Miso>
 46c:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <Spi_ddr>
 470:	d0 91 9e 01 	lds	r29, 0x019E	; 0x80019e <Spi_ddr+0x1>
 474:	61 2f       	mov	r22, r17
 476:	ce 01       	movw	r24, r28
 478:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 47c:	61 2f       	mov	r22, r17
 47e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Spi_port>
 482:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <Spi_port+0x1>
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 48a:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <Spi_Ss>
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 494:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <Spi_Mosi>
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 49e:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <Spi_Sck>
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 4a8:	c0 91 97 01 	lds	r28, 0x0197	; 0x800197 <Spi_spcr>
 4ac:	d0 91 98 01 	lds	r29, 0x0198	; 0x800198 <Spi_spcr+0x1>
 4b0:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <Spi_MasterSlaveSelect>
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 4ba:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <Spi_ClockRateBit0>
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 4c4:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <Spi_ClockRateBit1>
 4c8:	ce 01       	movw	r24, r28
 4ca:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 4ce:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <Spi_DoubleClockRate>
 4d2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <Spi_spsr>
 4d6:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <Spi_spsr+0x1>
 4da:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 4de:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <EnableSpi>
 4e2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <EnableSpi+0x1>
 4e6:	09 95       	icall
    ClearPendingSpiInterrupt();
 4e8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <ClearPendingSpiInterrupt>
 4ec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <ClearPendingSpiInterrupt+0x1>
 4f0:	09 95       	icall
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 4fe:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <SpiMasterOpenSpi>
 502:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <SpiMasterOpenSpi+0x1>
 506:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 508:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <Spi_spdr>
 50c:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <Spi_spdr+0x1>
 510:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 512:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <SpiTransferIsDone>
 516:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <SpiTransferIsDone+0x1>
 51a:	09 95       	icall
 51c:	88 23       	and	r24, r24
 51e:	c9 f3       	breq	.-14     	; 0x512 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 520:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiMasterCloseSpi>
 524:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiMasterCloseSpi+0x1>
 528:	09 95       	icall
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <SpiMasterRead>:
}
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t SpiMasterRead(void)
{
    uint8_t garbage = 0xFF;
    SpiMasterWrite(garbage);
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    return ReadSpiDataRegister();
 534:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 538:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 53c:	09 95       	icall
}
 53e:	08 95       	ret

00000540 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 540:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <SpiResponseIsReady>
 544:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <SpiResponseIsReady+0x1>
 548:	09 95       	icall
 54a:	88 23       	and	r24, r24
 54c:	c9 f3       	breq	.-14     	; 0x540 <SpiMasterWaitForResponse>
}
 54e:	08 95       	ret

00000550 <SetupDebugLed>:
void test_SpiMaster(void)
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-03
 550:	23 e0       	ldi	r18, 0x03	; 3
 552:	46 e2       	ldi	r20, 0x26	; 38
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	68 e2       	ldi	r22, 0x28	; 40
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	87 e2       	ldi	r24, 0x27	; 39
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 562:	08 95       	ret

00000564 <Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host>:
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	cb 55       	subi	r28, 0x5B	; 91
 56e:	d1 09       	sbc	r29, r1
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
 57e:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
 588:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 58c:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 590:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	d1 f4       	brne	.+52     	; 0x5cc <Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x68>
 598:	8a e5       	ldi	r24, 0x5A	; 90
 59a:	ef e2       	ldi	r30, 0x2F	; 47
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	de 01       	movw	r26, r28
 5a0:	11 96       	adiw	r26, 0x01	; 1
 5a2:	01 90       	ld	r0, Z+
 5a4:	0d 92       	st	X+, r0
 5a6:	8a 95       	dec	r24
 5a8:	e1 f7       	brne	.-8      	; 0x5a2 <Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x3e>
 5aa:	6a e5       	ldi	r22, 0x5A	; 90
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	6c 96       	adiw	r28, 0x1c	; 28
 5ba:	8f af       	std	Y+63, r24	; 0x3f
 5bc:	6c 97       	sbiw	r28, 0x1c	; 28
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	ce 01       	movw	r24, r28
 5c4:	85 5a       	subi	r24, 0xA5	; 165
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 5cc:	c5 5a       	subi	r28, 0xA5	; 165
 5ce:	df 4f       	sbci	r29, 0xFF	; 255
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 5e0:	0e 94 a8 02 	call	0x550	; 0x550 <SetupDebugLed>
void test_SpiMaster(void)
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-03
 5e4:	0e 94 b2 02 	call	0x564	; 0x564 <Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host>
    SetupDebugLed();
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    test_SpiMaster(); // All test pass 2018-08-03
}
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	08 95       	ret

000005ee <_exit>:
 5ee:	f8 94       	cli

000005f0 <__stop_program>:
 5f0:	ff cf       	rjmp	.-2      	; 0x5f0 <__stop_program>
