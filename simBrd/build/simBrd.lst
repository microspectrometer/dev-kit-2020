
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  0080015c  0080015c  00000ddc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cfe  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e5  00000000  00000000  00006e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002333  00000000  00000000  00008257  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009bc  00000000  00000000  0000a58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001524  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000043d2  00000000  00000000  0000c46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  0001083e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
  9e:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 14a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 16e:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 190:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_port>
 1b2:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <FtMiosio_ddr>
 1d6:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <FtMiosio_ddr>
 1e4:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Ft1248_pin>
 1f0:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_pin>
 216:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <FtMiosio_port>
 222:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <FtMiosio_port>
 272:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Ft1248_ddr>
 282:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <Ft1248_port>
 2a8:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 50 01 	lds	r28, 0x0150	; 0x800150 <FtMiosio_ddr>
 2b6:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <FtMiosio_port>
 2c0:	d0 91 4f 01 	lds	r29, 0x014F	; 0x80014f <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <BridgeLedRed>:

bool UsbWriteStatusOk(void)
{
    uint8_t const StatusOk = 0x00;
    return UsbWrite(&StatusOk,1);
}
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <BiColorLed_port>
 318:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <BiColorLed_port+0x1>
 31c:	20 81       	ld	r18, Z
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <status_led>
 326:	02 c0       	rjmp	.+4      	; 0x32c <BridgeLedRed+0x22>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <BridgeLedRed+0x1e>
 330:	82 2b       	or	r24, r18
 332:	80 83       	st	Z, r24
 334:	19 82       	std	Y+1, r1	; 0x01
 336:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 33a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 33e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 342:	09 95       	icall
 344:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 348:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 34c:	09 95       	icall
 34e:	88 23       	and	r24, r24
 350:	39 f0       	breq	.+14     	; 0x360 <BridgeLedRed+0x56>
 352:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 356:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	09 95       	icall
 360:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 364:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 368:	09 95       	icall
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <BridgeLedGreen>:
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	1f 92       	push	r1
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <BiColorLed_port>
 380:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <BiColorLed_port+0x1>
 384:	20 81       	ld	r18, Z
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <status_led>
 38e:	02 c0       	rjmp	.+4      	; 0x394 <BridgeLedGreen+0x22>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <BridgeLedGreen+0x1e>
 398:	80 95       	com	r24
 39a:	82 23       	and	r24, r18
 39c:	80 83       	st	Z, r24
 39e:	19 82       	std	Y+1, r1	; 0x01
 3a0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3a4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3a8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 3ac:	09 95       	icall
 3ae:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3b2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3b6:	09 95       	icall
 3b8:	88 23       	and	r24, r24
 3ba:	39 f0       	breq	.+14     	; 0x3ca <BridgeLedGreen+0x58>
 3bc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 3c0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	09 95       	icall
 3ca:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3ce:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3d2:	09 95       	icall
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <UsbInit>:
 3dc:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

000003e0 <SendSensorCommand>:
 3e0:	2f 92       	push	r2
 3e2:	3f 92       	push	r3
 3e4:	5f 92       	push	r5
 3e6:	6f 92       	push	r6
 3e8:	7f 92       	push	r7
 3ea:	8f 92       	push	r8
 3ec:	9f 92       	push	r9
 3ee:	af 92       	push	r10
 3f0:	bf 92       	push	r11
 3f2:	cf 92       	push	r12
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	00 d0       	rcall	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 d0       	rcall	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	a8 2e       	mov	r10, r24
 40c:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Spi_port>
 410:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <Spi_port+0x1>
 414:	db 01       	movw	r26, r22
 416:	8c 91       	ld	r24, X
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	8a 01       	movw	r16, r20
 41e:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Ss>
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	00 0f       	add	r16, r16
 426:	11 1f       	adc	r17, r17
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	50 2e       	mov	r5, r16
 42e:	b0 2e       	mov	r11, r16
 430:	b0 94       	com	r11
 432:	8b 21       	and	r24, r11
 434:	8c 93       	st	X, r24
 436:	e0 90 3d 01 	lds	r14, 0x013D	; 0x80013d <Spi_spdr>
 43a:	f0 90 3e 01 	lds	r15, 0x013E	; 0x80013e <Spi_spdr+0x1>
 43e:	f7 01       	movw	r30, r14
 440:	a0 82       	st	Z, r10
 442:	20 90 3f 01 	lds	r2, 0x013F	; 0x80013f <Spi_spsr>
 446:	30 90 40 01 	lds	r3, 0x0140	; 0x800140 <Spi_spsr+0x1>
 44a:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Spi_InterruptFlag>
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	d1 01       	movw	r26, r2
 45a:	8c 91       	ld	r24, X
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	84 23       	and	r24, r20
 460:	95 23       	and	r25, r21
 462:	89 2b       	or	r24, r25
 464:	c9 f3       	breq	.-14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 466:	f7 01       	movw	r30, r14
 468:	80 81       	ld	r24, Z
 46a:	db 01       	movw	r26, r22
 46c:	8c 91       	ld	r24, X
 46e:	80 2b       	or	r24, r16
 470:	8c 93       	st	X, r24
 472:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_pin>
 476:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_pin+0x1>
 47a:	60 90 3a 01 	lds	r6, 0x013A	; 0x80013a <Spi_Miso>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	06 2c       	mov	r0, r6
 484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	20 81       	ld	r18, Z
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	28 23       	and	r18, r24
 494:	39 23       	and	r19, r25
 496:	23 2b       	or	r18, r19
 498:	d1 f7       	brne	.-12     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 49a:	20 81       	ld	r18, Z
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	28 23       	and	r18, r24
 4a0:	39 23       	and	r19, r25
 4a2:	23 2b       	or	r18, r19
 4a4:	d1 f3       	breq	.-12     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a6:	db 01       	movw	r26, r22
 4a8:	2c 91       	ld	r18, X
 4aa:	2b 21       	and	r18, r11
 4ac:	2c 93       	st	X, r18
 4ae:	70 90 30 01 	lds	r7, 0x0130	; 0x800130 <slave_ignore>
 4b2:	d7 01       	movw	r26, r14
 4b4:	7c 92       	st	X, r7
 4b6:	d1 01       	movw	r26, r2
 4b8:	2c 91       	ld	r18, X
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	24 23       	and	r18, r20
 4be:	35 23       	and	r19, r21
 4c0:	23 2b       	or	r18, r19
 4c2:	c9 f3       	breq	.-14     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4c4:	d7 01       	movw	r26, r14
 4c6:	2c 91       	ld	r18, X
 4c8:	db 01       	movw	r26, r22
 4ca:	2c 91       	ld	r18, X
 4cc:	20 2b       	or	r18, r16
 4ce:	2c 93       	st	X, r18
 4d0:	d7 01       	movw	r26, r14
 4d2:	dc 90       	ld	r13, X
 4d4:	20 81       	ld	r18, Z
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	28 23       	and	r18, r24
 4da:	39 23       	and	r19, r25
 4dc:	23 2b       	or	r18, r19
 4de:	d1 f7       	brne	.-12     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4e0:	20 81       	ld	r18, Z
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	28 23       	and	r18, r24
 4e6:	39 23       	and	r19, r25
 4e8:	23 2b       	or	r18, r19
 4ea:	d1 f3       	breq	.-12     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4ec:	db 01       	movw	r26, r22
 4ee:	2c 91       	ld	r18, X
 4f0:	2b 21       	and	r18, r11
 4f2:	2c 93       	st	X, r18
 4f4:	d7 01       	movw	r26, r14
 4f6:	7c 92       	st	X, r7
 4f8:	d1 01       	movw	r26, r2
 4fa:	2c 91       	ld	r18, X
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	24 23       	and	r18, r20
 500:	35 23       	and	r19, r21
 502:	23 2b       	or	r18, r19
 504:	c9 f3       	breq	.-14     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 506:	d7 01       	movw	r26, r14
 508:	2c 91       	ld	r18, X
 50a:	db 01       	movw	r26, r22
 50c:	2c 91       	ld	r18, X
 50e:	02 2b       	or	r16, r18
 510:	0c 93       	st	X, r16
 512:	d7 01       	movw	r26, r14
 514:	2c 91       	ld	r18, X
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	3d 29       	or	r19, r13
 51a:	22 30       	cpi	r18, 0x02	; 2
 51c:	31 05       	cpc	r19, r1
 51e:	09 f4       	brne	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	41 c0       	rjmp	.+130    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 522:	8c ef       	ldi	r24, 0xFC	; 252
 524:	89 83       	std	Y+1, r24	; 0x01
 526:	aa 82       	std	Y+2, r10	; 0x02
 528:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 52c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 530:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 534:	09 95       	icall
 536:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 53a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 53e:	09 95       	icall
 540:	88 23       	and	r24, r24
 542:	81 f0       	breq	.+32     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 544:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 548:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	09 95       	icall
 552:	88 23       	and	r24, r24
 554:	39 f0       	breq	.+14     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 556:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 55a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 55e:	ce 01       	movw	r24, r28
 560:	02 96       	adiw	r24, 0x02	; 2
 562:	09 95       	icall
 564:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 568:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 56c:	09 95       	icall
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	ff 90       	pop	r15
 58a:	ef 90       	pop	r14
 58c:	df 90       	pop	r13
 58e:	cf 90       	pop	r12
 590:	bf 90       	pop	r11
 592:	af 90       	pop	r10
 594:	9f 90       	pop	r9
 596:	8f 90       	pop	r8
 598:	7f 90       	pop	r7
 59a:	6f 90       	pop	r6
 59c:	5f 90       	pop	r5
 59e:	3f 90       	pop	r3
 5a0:	2f 90       	pop	r2
 5a2:	08 95       	ret
 5a4:	9e 01       	movw	r18, r28
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
 5aa:	69 01       	movw	r12, r18
 5ac:	8e 01       	movw	r16, r28
 5ae:	0d 5f       	subi	r16, 0xFD	; 253
 5b0:	1f 4f       	sbci	r17, 0xFF	; 255
 5b2:	20 81       	ld	r18, Z
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	28 23       	and	r18, r24
 5b8:	39 23       	and	r19, r25
 5ba:	23 2b       	or	r18, r19
 5bc:	d1 f7       	brne	.-12     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5be:	20 81       	ld	r18, Z
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	28 23       	and	r18, r24
 5c4:	39 23       	and	r19, r25
 5c6:	23 2b       	or	r18, r19
 5c8:	d1 f3       	breq	.-12     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5ca:	db 01       	movw	r26, r22
 5cc:	2c 91       	ld	r18, X
 5ce:	2b 21       	and	r18, r11
 5d0:	2c 93       	st	X, r18
 5d2:	d7 01       	movw	r26, r14
 5d4:	7c 92       	st	X, r7
 5d6:	d1 01       	movw	r26, r2
 5d8:	2c 91       	ld	r18, X
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	24 23       	and	r18, r20
 5de:	35 23       	and	r19, r21
 5e0:	23 2b       	or	r18, r19
 5e2:	c9 f3       	breq	.-14     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5e4:	d7 01       	movw	r26, r14
 5e6:	2c 91       	ld	r18, X
 5e8:	db 01       	movw	r26, r22
 5ea:	2c 91       	ld	r18, X
 5ec:	25 29       	or	r18, r5
 5ee:	2c 93       	st	X, r18
 5f0:	d7 01       	movw	r26, r14
 5f2:	2c 91       	ld	r18, X
 5f4:	d6 01       	movw	r26, r12
 5f6:	2d 93       	st	X+, r18
 5f8:	6d 01       	movw	r12, r26
 5fa:	0a 17       	cp	r16, r26
 5fc:	1b 07       	cpc	r17, r27
 5fe:	c9 f6       	brne	.-78     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 600:	80 81       	ld	r24, Z
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 606:	95 95       	asr	r25
 608:	87 95       	ror	r24
 60a:	6a 94       	dec	r6
 60c:	e2 f7       	brpl	.-8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 60e:	80 fd       	sbrc	r24, 0
 610:	23 c0       	rjmp	.+70     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 612:	8c ef       	ldi	r24, 0xFC	; 252
 614:	8b 83       	std	Y+3, r24	; 0x03
 616:	ac 82       	std	Y+4, r10	; 0x04
 618:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 61c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 620:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 624:	09 95       	icall
 626:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 62a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 62e:	09 95       	icall
 630:	88 23       	and	r24, r24
 632:	09 f4       	brne	.+2      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 634:	97 cf       	rjmp	.-210    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 636:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 63a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 63e:	c8 01       	movw	r24, r16
 640:	09 95       	icall
 642:	88 23       	and	r24, r24
 644:	09 f4       	brne	.+2      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 646:	8e cf       	rjmp	.-228    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 648:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 64c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 650:	ce 01       	movw	r24, r28
 652:	04 96       	adiw	r24, 0x04	; 4
 654:	09 95       	icall
 656:	86 cf       	rjmp	.-244    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 658:	1b 82       	std	Y+3, r1	; 0x03
 65a:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <FtCmd_Write>
 65e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 662:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 666:	8f 2d       	mov	r24, r15
 668:	09 95       	icall
 66a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 66e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 672:	09 95       	icall
 674:	88 23       	and	r24, r24
 676:	31 f0       	breq	.+12     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 678:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 67c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 680:	c8 01       	movw	r24, r16
 682:	09 95       	icall
 684:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 688:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 68c:	09 95       	icall
 68e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 692:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 696:	8f 2d       	mov	r24, r15
 698:	4d cf       	rjmp	.-358    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>

0000069a <SendSensorLed1Green>:
 69a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SensorLed1Green_key>
 69e:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <SendSensorCommand>

000006a2 <SendSensorLed1Red>:
 6a2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <SensorLed1Red_key>
 6a6:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <SendSensorCommand>

000006aa <LookupBridgeCmd>:
 6aa:	85 30       	cpi	r24, 0x05	; 5
 6ac:	48 f4       	brcc	.+18     	; 0x6c0 <LookupBridgeCmd+0x16>
 6ae:	e8 2f       	mov	r30, r24
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	ee 0f       	add	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	ea 5d       	subi	r30, 0xDA	; 218
 6b8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ba:	80 81       	ld	r24, Z
 6bc:	91 81       	ldd	r25, Z+1	; 0x01
 6be:	08 95       	ret
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	08 95       	ret

000006c6 <CfgBytesAreValid>:
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <CfgBytesAreValid+0x6>
 6cc:	00 d0       	rcall	.+0      	; 0x6ce <CfgBytesAreValid+0x8>
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	fc 01       	movw	r30, r24
 6d4:	30 81       	ld	r19, Z
 6d6:	83 2f       	mov	r24, r19
 6d8:	8f 70       	andi	r24, 0x0F	; 15
 6da:	21 81       	ldd	r18, Z+1	; 0x01
 6dc:	81 11       	cpse	r24, r1
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <CfgBytesAreValid+0x2c>
 6e0:	21 11       	cpse	r18, r1
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <CfgBytesAreValid+0x2c>
 6e4:	92 81       	ldd	r25, Z+2	; 0x02
 6e6:	91 11       	cpse	r25, r1
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <CfgBytesAreValid+0x2c>
 6ea:	83 81       	ldd	r24, Z+3	; 0x03
 6ec:	88 7f       	andi	r24, 0xF8	; 248
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <CfgBytesAreValid+0x2c>
 6f0:	a2 c0       	rjmp	.+324    	; 0x836 <CfgBytesAreValid+0x170>
 6f2:	42 2f       	mov	r20, r18
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	40 95       	com	r20
 6f8:	50 95       	com	r21
 6fa:	ca 01       	movw	r24, r20
 6fc:	84 78       	andi	r24, 0x84	; 132
 6fe:	99 27       	eor	r25, r25
 700:	89 2b       	or	r24, r25
 702:	09 f0       	breq	.+2      	; 0x706 <CfgBytesAreValid+0x40>
 704:	a9 c0       	rjmp	.+338    	; 0x858 <CfgBytesAreValid+0x192>
 706:	92 81       	ldd	r25, Z+2	; 0x02
 708:	69 2f       	mov	r22, r25
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	60 95       	com	r22
 70e:	70 95       	com	r23
 710:	61 72       	andi	r22, 0x21	; 33
 712:	77 27       	eor	r23, r23
 714:	67 2b       	or	r22, r23
 716:	09 f0       	breq	.+2      	; 0x71a <CfgBytesAreValid+0x54>
 718:	9f c0       	rjmp	.+318    	; 0x858 <CfgBytesAreValid+0x192>
 71a:	83 81       	ldd	r24, Z+3	; 0x03
 71c:	83 fb       	bst	r24, 3
 71e:	88 27       	eor	r24, r24
 720:	80 f9       	bld	r24, 0
 722:	62 2f       	mov	r22, r18
 724:	64 78       	andi	r22, 0x84	; 132
 726:	09 f0       	breq	.+2      	; 0x72a <CfgBytesAreValid+0x64>
 728:	84 c0       	rjmp	.+264    	; 0x832 <CfgBytesAreValid+0x16c>
 72a:	69 2f       	mov	r22, r25
 72c:	61 72       	andi	r22, 0x21	; 33
 72e:	09 f0       	breq	.+2      	; 0x732 <CfgBytesAreValid+0x6c>
 730:	80 c0       	rjmp	.+256    	; 0x832 <CfgBytesAreValid+0x16c>
 732:	63 81       	ldd	r22, Z+3	; 0x03
 734:	63 fd       	sbrc	r22, 3
 736:	7d c0       	rjmp	.+250    	; 0x832 <CfgBytesAreValid+0x16c>
 738:	81 11       	cpse	r24, r1
 73a:	7d c0       	rjmp	.+250    	; 0x836 <CfgBytesAreValid+0x170>
 73c:	63 2f       	mov	r22, r19
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	db 01       	movw	r26, r22
 742:	a0 95       	com	r26
 744:	b0 95       	com	r27
 746:	30 ff       	sbrs	r19, 0
 748:	8d c0       	rjmp	.+282    	; 0x864 <CfgBytesAreValid+0x19e>
 74a:	43 fd       	sbrc	r20, 3
 74c:	8b c0       	rjmp	.+278    	; 0x864 <CfgBytesAreValid+0x19e>
 74e:	69 2f       	mov	r22, r25
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	60 95       	com	r22
 754:	70 95       	com	r23
 756:	62 74       	andi	r22, 0x42	; 66
 758:	77 27       	eor	r23, r23
 75a:	67 2b       	or	r22, r23
 75c:	09 f0       	breq	.+2      	; 0x760 <CfgBytesAreValid+0x9a>
 75e:	82 c0       	rjmp	.+260    	; 0x864 <CfgBytesAreValid+0x19e>
 760:	83 81       	ldd	r24, Z+3	; 0x03
 762:	82 95       	swap	r24
 764:	81 70       	andi	r24, 0x01	; 1
 766:	30 fd       	sbrc	r19, 0
 768:	6e c0       	rjmp	.+220    	; 0x846 <CfgBytesAreValid+0x180>
 76a:	23 fd       	sbrc	r18, 3
 76c:	6c c0       	rjmp	.+216    	; 0x846 <CfgBytesAreValid+0x180>
 76e:	69 2f       	mov	r22, r25
 770:	62 74       	andi	r22, 0x42	; 66
 772:	09 f0       	breq	.+2      	; 0x776 <CfgBytesAreValid+0xb0>
 774:	68 c0       	rjmp	.+208    	; 0x846 <CfgBytesAreValid+0x180>
 776:	63 81       	ldd	r22, Z+3	; 0x03
 778:	64 fd       	sbrc	r22, 4
 77a:	65 c0       	rjmp	.+202    	; 0x846 <CfgBytesAreValid+0x180>
 77c:	81 11       	cpse	r24, r1
 77e:	5b c0       	rjmp	.+182    	; 0x836 <CfgBytesAreValid+0x170>
 780:	a1 fd       	sbrc	r26, 1
 782:	74 c0       	rjmp	.+232    	; 0x86c <CfgBytesAreValid+0x1a6>
 784:	44 fd       	sbrc	r20, 4
 786:	72 c0       	rjmp	.+228    	; 0x86c <CfgBytesAreValid+0x1a6>
 788:	69 2f       	mov	r22, r25
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	60 95       	com	r22
 78e:	70 95       	com	r23
 790:	64 78       	andi	r22, 0x84	; 132
 792:	77 27       	eor	r23, r23
 794:	67 2b       	or	r22, r23
 796:	09 f0       	breq	.+2      	; 0x79a <CfgBytesAreValid+0xd4>
 798:	69 c0       	rjmp	.+210    	; 0x86c <CfgBytesAreValid+0x1a6>
 79a:	83 81       	ldd	r24, Z+3	; 0x03
 79c:	85 fb       	bst	r24, 5
 79e:	88 27       	eor	r24, r24
 7a0:	80 f9       	bld	r24, 0
 7a2:	31 fd       	sbrc	r19, 1
 7a4:	53 c0       	rjmp	.+166    	; 0x84c <CfgBytesAreValid+0x186>
 7a6:	24 fd       	sbrc	r18, 4
 7a8:	51 c0       	rjmp	.+162    	; 0x84c <CfgBytesAreValid+0x186>
 7aa:	69 2f       	mov	r22, r25
 7ac:	64 78       	andi	r22, 0x84	; 132
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <CfgBytesAreValid+0xec>
 7b0:	4d c0       	rjmp	.+154    	; 0x84c <CfgBytesAreValid+0x186>
 7b2:	63 81       	ldd	r22, Z+3	; 0x03
 7b4:	65 fd       	sbrc	r22, 5
 7b6:	4a c0       	rjmp	.+148    	; 0x84c <CfgBytesAreValid+0x186>
 7b8:	81 11       	cpse	r24, r1
 7ba:	3d c0       	rjmp	.+122    	; 0x836 <CfgBytesAreValid+0x170>
 7bc:	a2 fd       	sbrc	r26, 2
 7be:	5a c0       	rjmp	.+180    	; 0x874 <CfgBytesAreValid+0x1ae>
 7c0:	ba 01       	movw	r22, r20
 7c2:	61 72       	andi	r22, 0x21	; 33
 7c4:	77 27       	eor	r23, r23
 7c6:	67 2b       	or	r22, r23
 7c8:	09 f0       	breq	.+2      	; 0x7cc <CfgBytesAreValid+0x106>
 7ca:	54 c0       	rjmp	.+168    	; 0x874 <CfgBytesAreValid+0x1ae>
 7cc:	69 2f       	mov	r22, r25
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	60 95       	com	r22
 7d2:	70 95       	com	r23
 7d4:	63 fd       	sbrc	r22, 3
 7d6:	4e c0       	rjmp	.+156    	; 0x874 <CfgBytesAreValid+0x1ae>
 7d8:	83 81       	ldd	r24, Z+3	; 0x03
 7da:	86 fb       	bst	r24, 6
 7dc:	88 27       	eor	r24, r24
 7de:	80 f9       	bld	r24, 0
 7e0:	32 fd       	sbrc	r19, 2
 7e2:	37 c0       	rjmp	.+110    	; 0x852 <CfgBytesAreValid+0x18c>
 7e4:	62 2f       	mov	r22, r18
 7e6:	61 72       	andi	r22, 0x21	; 33
 7e8:	a1 f5       	brne	.+104    	; 0x852 <CfgBytesAreValid+0x18c>
 7ea:	93 fd       	sbrc	r25, 3
 7ec:	32 c0       	rjmp	.+100    	; 0x852 <CfgBytesAreValid+0x18c>
 7ee:	63 81       	ldd	r22, Z+3	; 0x03
 7f0:	66 fd       	sbrc	r22, 6
 7f2:	2f c0       	rjmp	.+94     	; 0x852 <CfgBytesAreValid+0x18c>
 7f4:	81 11       	cpse	r24, r1
 7f6:	1f c0       	rjmp	.+62     	; 0x836 <CfgBytesAreValid+0x170>
 7f8:	a3 fd       	sbrc	r26, 3
 7fa:	40 c0       	rjmp	.+128    	; 0x87c <CfgBytesAreValid+0x1b6>
 7fc:	42 74       	andi	r20, 0x42	; 66
 7fe:	55 27       	eor	r21, r21
 800:	45 2b       	or	r20, r21
 802:	09 f0       	breq	.+2      	; 0x806 <CfgBytesAreValid+0x140>
 804:	3b c0       	rjmp	.+118    	; 0x87c <CfgBytesAreValid+0x1b6>
 806:	49 2f       	mov	r20, r25
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	40 95       	com	r20
 80c:	50 95       	com	r21
 80e:	44 fd       	sbrc	r20, 4
 810:	35 c0       	rjmp	.+106    	; 0x87c <CfgBytesAreValid+0x1b6>
 812:	83 81       	ldd	r24, Z+3	; 0x03
 814:	88 1f       	adc	r24, r24
 816:	88 27       	eor	r24, r24
 818:	88 1f       	adc	r24, r24
 81a:	33 fd       	sbrc	r19, 3
 81c:	0d c0       	rjmp	.+26     	; 0x838 <CfgBytesAreValid+0x172>
 81e:	22 74       	andi	r18, 0x42	; 66
 820:	59 f4       	brne	.+22     	; 0x838 <CfgBytesAreValid+0x172>
 822:	94 fd       	sbrc	r25, 4
 824:	09 c0       	rjmp	.+18     	; 0x838 <CfgBytesAreValid+0x172>
 826:	93 81       	ldd	r25, Z+3	; 0x03
 828:	97 fd       	sbrc	r25, 7
 82a:	06 c0       	rjmp	.+12     	; 0x838 <CfgBytesAreValid+0x172>
 82c:	91 e0       	ldi	r25, 0x01	; 1
 82e:	89 27       	eor	r24, r25
 830:	03 c0       	rjmp	.+6      	; 0x838 <CfgBytesAreValid+0x172>
 832:	81 11       	cpse	r24, r1
 834:	83 cf       	rjmp	.-250    	; 0x73c <CfgBytesAreValid+0x76>
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	08 95       	ret
 846:	81 11       	cpse	r24, r1
 848:	9b cf       	rjmp	.-202    	; 0x780 <CfgBytesAreValid+0xba>
 84a:	f5 cf       	rjmp	.-22     	; 0x836 <CfgBytesAreValid+0x170>
 84c:	81 11       	cpse	r24, r1
 84e:	b6 cf       	rjmp	.-148    	; 0x7bc <CfgBytesAreValid+0xf6>
 850:	f2 cf       	rjmp	.-28     	; 0x836 <CfgBytesAreValid+0x170>
 852:	81 11       	cpse	r24, r1
 854:	d1 cf       	rjmp	.-94     	; 0x7f8 <CfgBytesAreValid+0x132>
 856:	ef cf       	rjmp	.-34     	; 0x836 <CfgBytesAreValid+0x170>
 858:	82 2f       	mov	r24, r18
 85a:	84 78       	andi	r24, 0x84	; 132
 85c:	61 f7       	brne	.-40     	; 0x836 <CfgBytesAreValid+0x170>
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	92 81       	ldd	r25, Z+2	; 0x02
 862:	63 cf       	rjmp	.-314    	; 0x72a <CfgBytesAreValid+0x64>
 864:	30 fd       	sbrc	r19, 0
 866:	e7 cf       	rjmp	.-50     	; 0x836 <CfgBytesAreValid+0x170>
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	7f cf       	rjmp	.-258    	; 0x76a <CfgBytesAreValid+0xa4>
 86c:	31 fd       	sbrc	r19, 1
 86e:	e3 cf       	rjmp	.-58     	; 0x836 <CfgBytesAreValid+0x170>
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	99 cf       	rjmp	.-206    	; 0x7a6 <CfgBytesAreValid+0xe0>
 874:	32 fd       	sbrc	r19, 2
 876:	df cf       	rjmp	.-66     	; 0x836 <CfgBytesAreValid+0x170>
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	b4 cf       	rjmp	.-152    	; 0x7e4 <CfgBytesAreValid+0x11e>
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	cd cf       	rjmp	.-102    	; 0x81a <CfgBytesAreValid+0x154>

00000880 <BridgeCfgLis>:
 880:	ef 92       	push	r14
 882:	ff 92       	push	r15
 884:	0f 93       	push	r16
 886:	1f 93       	push	r17
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	00 d0       	rcall	.+0      	; 0x88e <BridgeCfgLis+0xe>
 88e:	00 d0       	rcall	.+0      	; 0x890 <BridgeCfgLis+0x10>
 890:	00 d0       	rcall	.+0      	; 0x892 <BridgeCfgLis+0x12>
 892:	cd b7       	in	r28, 0x3d	; 61
 894:	de b7       	in	r29, 0x3e	; 62
 896:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 89a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 89e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 8a2:	09 95       	icall
 8a4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 8a8:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 8ac:	09 95       	icall
 8ae:	88 23       	and	r24, r24
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <BridgeCfgLis+0x34>
 8b2:	ba c0       	rjmp	.+372    	; 0xa28 <__stack+0x129>
 8b4:	00 e0       	ldi	r16, 0x00	; 0
 8b6:	10 e0       	ldi	r17, 0x00	; 0
 8b8:	ce 01       	movw	r24, r28
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	7c 01       	movw	r14, r24
 8be:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 8c2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 8c6:	c7 01       	movw	r24, r14
 8c8:	80 0f       	add	r24, r16
 8ca:	91 1f       	adc	r25, r17
 8cc:	09 95       	icall
 8ce:	81 11       	cpse	r24, r1
 8d0:	7c c0       	rjmp	.+248    	; 0x9ca <__stack+0xcb>
 8d2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 8d6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 8da:	09 95       	icall
 8dc:	8d ef       	ldi	r24, 0xFD	; 253
 8de:	8d 83       	std	Y+5, r24	; 0x05
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	8e 83       	std	Y+6, r24	; 0x06
 8e4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 8e8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 8ec:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 8f0:	09 95       	icall
 8f2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 8f6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 8fa:	09 95       	icall
 8fc:	88 23       	and	r24, r24
 8fe:	81 f0       	breq	.+32     	; 0x920 <__stack+0x21>
 900:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 904:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 908:	ce 01       	movw	r24, r28
 90a:	05 96       	adiw	r24, 0x05	; 5
 90c:	09 95       	icall
 90e:	88 23       	and	r24, r24
 910:	39 f0       	breq	.+14     	; 0x920 <__stack+0x21>
 912:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 916:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 91a:	ce 01       	movw	r24, r28
 91c:	06 96       	adiw	r24, 0x06	; 6
 91e:	09 95       	icall
 920:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 924:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 928:	09 95       	icall
 92a:	c7 01       	movw	r24, r14
 92c:	0e 94 63 03 	call	0x6c6	; 0x6c6 <CfgBytesAreValid>
 930:	88 23       	and	r24, r24
 932:	09 f4       	brne	.+2      	; 0x936 <__stack+0x37>
 934:	56 c0       	rjmp	.+172    	; 0x9e2 <__stack+0xe3>
 936:	1d 82       	std	Y+5, r1	; 0x05
 938:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <FtCmd_Write>
 93c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 940:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 944:	81 2f       	mov	r24, r17
 946:	09 95       	icall
 948:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 94c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 950:	09 95       	icall
 952:	88 23       	and	r24, r24
 954:	39 f0       	breq	.+14     	; 0x964 <__stack+0x65>
 956:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 95a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 95e:	ce 01       	movw	r24, r28
 960:	05 96       	adiw	r24, 0x05	; 5
 962:	09 95       	icall
 964:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 968:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 96c:	09 95       	icall
 96e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 972:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 976:	81 2f       	mov	r24, r17
 978:	09 95       	icall
 97a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 97e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 982:	09 95       	icall
 984:	88 23       	and	r24, r24
 986:	79 f0       	breq	.+30     	; 0x9a6 <__stack+0xa7>
 988:	c7 01       	movw	r24, r14
 98a:	7e 01       	movw	r14, r28
 98c:	25 e0       	ldi	r18, 0x05	; 5
 98e:	e2 0e       	add	r14, r18
 990:	f1 1c       	adc	r15, r1
 992:	8c 01       	movw	r16, r24
 994:	0f 5f       	subi	r16, 0xFF	; 255
 996:	1f 4f       	sbci	r17, 0xFF	; 255
 998:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 99c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 9a0:	09 95       	icall
 9a2:	81 11       	cpse	r24, r1
 9a4:	19 c0       	rjmp	.+50     	; 0x9d8 <__stack+0xd9>
 9a6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 9aa:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 9ae:	09 95       	icall
 9b0:	26 96       	adiw	r28, 0x06	; 6
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	f8 94       	cli
 9b6:	de bf       	out	0x3e, r29	; 62
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	cd bf       	out	0x3d, r28	; 61
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	08 95       	ret
 9ca:	0f 5f       	subi	r16, 0xFF	; 255
 9cc:	1f 4f       	sbci	r17, 0xFF	; 255
 9ce:	04 30       	cpi	r16, 0x04	; 4
 9d0:	11 05       	cpc	r17, r1
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	74 cf       	rjmp	.-280    	; 0x8be <BridgeCfgLis+0x3e>
 9d6:	a4 cf       	rjmp	.-184    	; 0x920 <__stack+0x21>
 9d8:	c8 01       	movw	r24, r16
 9da:	0e 15       	cp	r16, r14
 9dc:	1f 05       	cpc	r17, r15
 9de:	c9 f6       	brne	.-78     	; 0x992 <__stack+0x93>
 9e0:	e2 cf       	rjmp	.-60     	; 0x9a6 <__stack+0xa7>
 9e2:	8e ef       	ldi	r24, 0xFE	; 254
 9e4:	8d 83       	std	Y+5, r24	; 0x05
 9e6:	82 e0       	ldi	r24, 0x02	; 2
 9e8:	8e 83       	std	Y+6, r24	; 0x06
 9ea:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 9ee:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 9f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 9f6:	09 95       	icall
 9f8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 9fc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 a00:	09 95       	icall
 a02:	88 23       	and	r24, r24
 a04:	81 f2       	breq	.-96     	; 0x9a6 <__stack+0xa7>
 a06:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a0a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a0e:	ce 01       	movw	r24, r28
 a10:	05 96       	adiw	r24, 0x05	; 5
 a12:	09 95       	icall
 a14:	88 23       	and	r24, r24
 a16:	39 f2       	breq	.-114    	; 0x9a6 <__stack+0xa7>
 a18:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a1c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a20:	ce 01       	movw	r24, r28
 a22:	06 96       	adiw	r24, 0x06	; 6
 a24:	09 95       	icall
 a26:	bf cf       	rjmp	.-130    	; 0x9a6 <__stack+0xa7>
 a28:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <BiColorLed_port>
 a2c:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <BiColorLed_port+0x1>
 a30:	20 81       	ld	r18, Z
 a32:	81 e0       	ldi	r24, 0x01	; 1
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <status_led>
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__stack+0x141>
 a3c:	88 0f       	add	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	0a 94       	dec	r0
 a42:	e2 f7       	brpl	.-8      	; 0xa3c <__stack+0x13d>
 a44:	82 2b       	or	r24, r18
 a46:	80 83       	st	Z, r24
 a48:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a4c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 a50:	09 95       	icall
 a52:	ce 01       	movw	r24, r28
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	7c 01       	movw	r14, r24
 a58:	41 cf       	rjmp	.-382    	; 0x8dc <BridgeCfgLis+0x5c>

00000a5a <UsbReadOneByte>:
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	ec 01       	movw	r28, r24
 a60:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 a64:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 a68:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 a6c:	09 95       	icall
 a6e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 a72:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 a76:	09 95       	icall
 a78:	88 23       	and	r24, r24
 a7a:	79 f0       	breq	.+30     	; 0xa9a <UsbReadOneByte+0x40>
 a7c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 a80:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 a84:	ce 01       	movw	r24, r28
 a86:	09 95       	icall
 a88:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a8c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 a90:	09 95       	icall
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	08 95       	ret
 a9a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a9e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 aa2:	09 95       	icall
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	08 95       	ret

00000aac <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
 aac:	1f 93       	push	r17
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	00 d0       	rcall	.+0      	; 0xab4 <UsbWriteStatusInvalid+0x8>
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
 ab8:	9f ef       	ldi	r25, 0xFF	; 255
 aba:	99 83       	std	Y+1, r25	; 0x01
 abc:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 abe:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 ac2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 ac6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 aca:	09 95       	icall
    if (!FtBusTurnaround())
 acc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 ad0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 ad4:	09 95       	icall
 ad6:	88 23       	and	r24, r24
 ad8:	19 f1       	breq	.+70     	; 0xb20 <UsbWriteStatusInvalid+0x74>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 ada:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 ade:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 ae2:	ce 01       	movw	r24, r28
 ae4:	01 96       	adiw	r24, 0x01	; 1
 ae6:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 ae8:	81 11       	cpse	r24, r1
 aea:	0d c0       	rjmp	.+26     	; 0xb06 <UsbWriteStatusInvalid+0x5a>
 aec:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 aee:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 af2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 af6:	09 95       	icall
 af8:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 afa:	0f 90       	pop	r0
 afc:	0f 90       	pop	r0
 afe:	df 91       	pop	r29
 b00:	cf 91       	pop	r28
 b02:	1f 91       	pop	r17
 b04:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 b06:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 b0a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 b0e:	ce 01       	movw	r24, r28
 b10:	02 96       	adiw	r24, 0x02	; 2
 b12:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 b14:	88 23       	and	r24, r24
 b16:	11 f0       	breq	.+4      	; 0xb1c <UsbWriteStatusInvalid+0x70>
 b18:	12 e0       	ldi	r17, 0x02	; 2
 b1a:	e9 cf       	rjmp	.-46     	; 0xaee <UsbWriteStatusInvalid+0x42>
 b1c:	11 e0       	ldi	r17, 0x01	; 1
 b1e:	e7 cf       	rjmp	.-50     	; 0xaee <UsbWriteStatusInvalid+0x42>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 b20:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b24:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b28:	09 95       	icall
 b2a:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	1f 91       	pop	r17
 b36:	08 95       	ret

00000b38 <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 b38:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiStatusRegister>
 b3c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiStatusRegister+0x1>
 b40:	09 95       	icall
 b42:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ReadSpiDataRegister>
 b46:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ReadSpiDataRegister+0x1>
 b4a:	09 94       	ijmp

00000b4c <ReadSpiStatusRegister_Implementation>:
 b4c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spsr>
 b50:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spsr+0x1>
 b54:	80 81       	ld	r24, Z
 b56:	08 95       	ret

00000b58 <EnableSpi_Implementation>:
 b58:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_spcr>
 b5c:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_spcr+0x1>
 b60:	20 81       	ld	r18, Z
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Spi_Enable>
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <EnableSpi_Implementation+0x18>
 b6c:	88 0f       	add	r24, r24
 b6e:	99 1f       	adc	r25, r25
 b70:	0a 94       	dec	r0
 b72:	e2 f7       	brpl	.-8      	; 0xb6c <EnableSpi_Implementation+0x14>
 b74:	82 2b       	or	r24, r18
 b76:	80 83       	st	Z, r24
 b78:	08 95       	ret

00000b7a <SpiMasterCloseSpi_Implementation>:
 b7a:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_port>
 b7e:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_port+0x1>
 b82:	20 81       	ld	r18, Z
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Ss>
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <SpiMasterCloseSpi_Implementation+0x18>
 b8e:	88 0f       	add	r24, r24
 b90:	99 1f       	adc	r25, r25
 b92:	0a 94       	dec	r0
 b94:	e2 f7       	brpl	.-8      	; 0xb8e <SpiMasterCloseSpi_Implementation+0x14>
 b96:	82 2b       	or	r24, r18
 b98:	80 83       	st	Z, r24
 b9a:	08 95       	ret

00000b9c <ReadSpiDataRegister_Implementation>:
 b9c:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spdr>
 ba0:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spdr+0x1>
 ba4:	80 81       	ld	r24, Z
 ba6:	08 95       	ret

00000ba8 <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 ba8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 bac:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <Spi_ddr>
 bb0:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 bb4:	40 81       	ld	r20, Z
 bb6:	81 e0       	ldi	r24, 0x01	; 1
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	9c 01       	movw	r18, r24
 bbc:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <Spi_Miso>
 bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <SpiMasterInit+0x1e>
 bc2:	22 0f       	add	r18, r18
 bc4:	33 1f       	adc	r19, r19
 bc6:	0a 94       	dec	r0
 bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <SpiMasterInit+0x1a>
 bca:	32 2f       	mov	r19, r18
 bcc:	30 95       	com	r19
 bce:	34 23       	and	r19, r20
 bd0:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 bd2:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <Spi_port>
 bd6:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 bda:	3c 91       	ld	r19, X
 bdc:	23 2b       	or	r18, r19
 bde:	2c 93       	st	X, r18
 be0:	40 81       	ld	r20, Z
 be2:	9c 01       	movw	r18, r24
 be4:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Ss>
 be8:	02 c0       	rjmp	.+4      	; 0xbee <SpiMasterInit+0x46>
 bea:	22 0f       	add	r18, r18
 bec:	33 1f       	adc	r19, r19
 bee:	0a 94       	dec	r0
 bf0:	e2 f7       	brpl	.-8      	; 0xbea <SpiMasterInit+0x42>
 bf2:	24 2b       	or	r18, r20
 bf4:	20 83       	st	Z, r18
 bf6:	40 81       	ld	r20, Z
 bf8:	9c 01       	movw	r18, r24
 bfa:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <Spi_Mosi>
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <SpiMasterInit+0x5c>
 c00:	22 0f       	add	r18, r18
 c02:	33 1f       	adc	r19, r19
 c04:	0a 94       	dec	r0
 c06:	e2 f7       	brpl	.-8      	; 0xc00 <SpiMasterInit+0x58>
 c08:	24 2b       	or	r18, r20
 c0a:	20 83       	st	Z, r18
 c0c:	40 81       	ld	r20, Z
 c0e:	9c 01       	movw	r18, r24
 c10:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Spi_Sck>
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <SpiMasterInit+0x72>
 c16:	22 0f       	add	r18, r18
 c18:	33 1f       	adc	r19, r19
 c1a:	0a 94       	dec	r0
 c1c:	e2 f7       	brpl	.-8      	; 0xc16 <SpiMasterInit+0x6e>
 c1e:	24 2b       	or	r18, r20
 c20:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 c22:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_spcr>
 c26:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_spcr+0x1>
 c2a:	40 81       	ld	r20, Z
 c2c:	9c 01       	movw	r18, r24
 c2e:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_MasterSlaveSelect>
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <SpiMasterInit+0x90>
 c34:	22 0f       	add	r18, r18
 c36:	33 1f       	adc	r19, r19
 c38:	0a 94       	dec	r0
 c3a:	e2 f7       	brpl	.-8      	; 0xc34 <SpiMasterInit+0x8c>
 c3c:	24 2b       	or	r18, r20
 c3e:	20 83       	st	Z, r18
 c40:	40 81       	ld	r20, Z
 c42:	9c 01       	movw	r18, r24
 c44:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_ClockRateBit0>
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <SpiMasterInit+0xa6>
 c4a:	22 0f       	add	r18, r18
 c4c:	33 1f       	adc	r19, r19
 c4e:	0a 94       	dec	r0
 c50:	e2 f7       	brpl	.-8      	; 0xc4a <SpiMasterInit+0xa2>
 c52:	24 2b       	or	r18, r20
 c54:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 c56:	30 81       	ld	r19, Z
 c58:	ac 01       	movw	r20, r24
 c5a:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_ClockRateBit1>
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <SpiMasterInit+0xbc>
 c60:	44 0f       	add	r20, r20
 c62:	55 1f       	adc	r21, r21
 c64:	0a 94       	dec	r0
 c66:	e2 f7       	brpl	.-8      	; 0xc60 <SpiMasterInit+0xb8>
 c68:	24 2f       	mov	r18, r20
 c6a:	20 95       	com	r18
 c6c:	23 23       	and	r18, r19
 c6e:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 c70:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spsr>
 c74:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 c78:	20 81       	ld	r18, Z
 c7a:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_DoubleClockRate>
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <SpiMasterInit+0xdc>
 c80:	88 0f       	add	r24, r24
 c82:	99 1f       	adc	r25, r25
 c84:	0a 94       	dec	r0
 c86:	e2 f7       	brpl	.-8      	; 0xc80 <SpiMasterInit+0xd8>
 c88:	82 2b       	or	r24, r18
 c8a:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 c8c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EnableSpi>
 c90:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EnableSpi+0x1>
 c94:	09 95       	icall
    ClearPendingSpiInterrupt();
 c96:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ClearPendingSpiInterrupt>
 c9a:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ClearPendingSpiInterrupt+0x1>
 c9e:	09 94       	ijmp

00000ca0 <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	1f 92       	push	r1
 ca6:	cd b7       	in	r28, 0x3d	; 61
 ca8:	de b7       	in	r29, 0x3e	; 62
 caa:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 cac:	0e 94 d4 05 	call	0xba8	; 0xba8 <SpiMasterInit>
    UsbInit();
 cb0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <UsbInit>
 cb4:	3d 9a       	sbi	0x07, 5	; 7
 cb6:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 cb8:	80 e2       	ldi	r24, 0x20	; 32
 cba:	96 e0       	ldi	r25, 0x06	; 6
 cbc:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <nbytes_in_frame+0x1>
 cc0:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 cc4:	ce 01       	movw	r24, r28
 cc6:	01 96       	adiw	r24, 0x01	; 1
 cc8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <UsbReadOneByte>
 ccc:	88 23       	and	r24, r24
 cce:	d1 f3       	breq	.-12     	; 0xcc4 <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 cd0:	89 81       	ldd	r24, Y+1	; 0x01
 cd2:	0e 94 55 03 	call	0x6aa	; 0x6aa <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 cd6:	00 97       	sbiw	r24, 0x00	; 0
 cd8:	19 f0       	breq	.+6      	; 0xce0 <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 cda:	fc 01       	movw	r30, r24
 cdc:	09 95       	icall
 cde:	f2 cf       	rjmp	.-28     	; 0xcc4 <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 ce0:	89 81       	ldd	r24, Y+1	; 0x01
 ce2:	0e 94 56 05 	call	0xaac	; 0xaac <UsbWriteStatusInvalid>
 ce6:	ee cf       	rjmp	.-36     	; 0xcc4 <main+0x24>

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
