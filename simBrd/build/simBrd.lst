
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080011e  0080011e  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001582  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abf  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f4  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cb  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  0000389f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 22 01 	call	0x244	; 0x244 <main>
  9e:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
    *port ^= (1<<bit);
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
}
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <BitIsClear+0xc>
  e0:	95 95       	asr	r25
  e2:	87 95       	ror	r24
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <BitIsClear+0x8>
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	8f 27       	eor	r24, r31
}
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <DebugLedTurnOn_Implementation>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
  f0:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end>
  f4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <ddr_register_>
  f8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <ddr_register_+0x1>
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 100:	08 95       	ret

00000102 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 102:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end>
 106:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <port_register_>
 10a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <port_register_+0x1>
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 112:	08 95       	ret

00000114 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 114:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <ddr_register_+0x1>
 118:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <ddr_register_>
    port_register_ = port_register;
 11c:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <port_register_+0x1>
 120:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <port_register_>
    pin_register_ = pin_register;
 124:	50 93 20 01 	sts	0x0120, r21	; 0x800120 <pin_register_+0x1>
 128:	40 93 1f 01 	sts	0x011F, r20	; 0x80011f <pin_register_>
    debug_led_ = debug_led;
 12c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <__data_end>
    DebugLedTurnOn();
 130:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnOn>
 134:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnOn+0x1>
 138:	09 95       	icall
    DebugLedTurnGreen();
 13a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnGreen>
 13e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnGreen+0x1>
 142:	09 95       	icall
 144:	08 95       	ret

00000146 <SpiMasterOpenSpi_Implementation>:
//
// TODO: remove Open and Close from the public API
//
static void SpiMasterOpenSpi_Implementation(void)
{
    ClearBit(Spi_port, Spi_Ss);
 146:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_Ss>
 14a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Spi_port>
 14e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Spi_port+0x1>
 152:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 156:	08 95       	ret

00000158 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 158:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_Ss>
 15c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Spi_port>
 160:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Spi_port+0x1>
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 168:	08 95       	ret

0000016a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsClear(Spi_spsr, Spi_InterruptFlag);
 16a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <Spi_InterruptFlag>
 16e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Spi_spsr>
 172:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Spi_spsr+0x1>
 176:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsClear>
}
 17a:	08 95       	ret

0000017c <SpiMasterInit>:
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
}
void SpiMasterInit(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
    SlaveSelectIdleHigh();
 180:	0e 94 ac 00 	call	0x158	; 0x158 <SpiMasterCloseSpi_Implementation>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 184:	c0 91 1b 01 	lds	r28, 0x011B	; 0x80011b <Spi_ddr>
 188:	d0 91 1c 01 	lds	r29, 0x011C	; 0x80011c <Spi_ddr+0x1>
 18c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_Ss>
 190:	ce 01       	movw	r24, r28
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 196:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <Spi_Mosi>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 1a0:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Spi_Sck>
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 1aa:	c0 91 17 01 	lds	r28, 0x0117	; 0x800117 <Spi_spcr>
 1ae:	d0 91 18 01 	lds	r29, 0x0118	; 0x800118 <Spi_spcr+0x1>
 1b2:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Spi_MasterSlaveSelect>
 1b6:	ce 01       	movw	r24, r28
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 1bc:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Spi_ClockRateBit0>
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 1c6:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <Spi_ClockRateBit1>
 1ca:	ce 01       	movw	r24, r28
 1cc:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 1d0:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <Spi_DoubleClockRate>
 1d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Spi_spsr>
 1d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Spi_spsr+0x1>
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 1e0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Spi_Enable>
 1e4:	ce 01       	movw	r24, r28
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 1f4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <SpiMasterOpenSpi>
 1f8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <SpiMasterOpenSpi+0x1>
 1fc:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 1fe:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <Spi_spdr>
 202:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <Spi_spdr+0x1>
 206:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 208:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <SpiTransferIsDone>
 20c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <SpiTransferIsDone+0x1>
 210:	09 95       	icall
 212:	88 23       	and	r24, r24
 214:	c9 f3       	breq	.-14     	; 0x208 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 216:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiMasterCloseSpi>
 21a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiMasterCloseSpi+0x1>
 21e:	09 95       	icall
}
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <SetupDebugLed>:
    // led number: 4  3  2  1
    // led color:  R  G  R  R
}
void test_SpiMaster(void)
{
    SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31
 224:	23 e0       	ldi	r18, 0x03	; 3
 226:	46 e2       	ldi	r20, 0x26	; 38
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	68 e2       	ldi	r22, 0x28	; 40
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	87 e2       	ldi	r24, 0x27	; 39
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 8a 00 	call	0x114	; 0x114 <DebugLedInit>
 236:	08 95       	ret

00000238 <SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble>:
 238:	0e 94 be 00 	call	0x17c	; 0x17c <SpiMasterInit>
 23c:	8b e0       	ldi	r24, 0x0B	; 11
 23e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SpiMasterWrite>
 242:	08 95       	ret

00000244 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 244:	0e 94 12 01 	call	0x224	; 0x224 <SetupDebugLed>
    // led number: 4  3  2  1
    // led color:  R  G  R  R
}
void test_SpiMaster(void)
{
    SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31
 248:	0e 94 1c 01 	call	0x238	; 0x238 <SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble>
    SetupDebugLed();
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    test_SpiMaster(); // All test pass 2018-07-31
}
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
