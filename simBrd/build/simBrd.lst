
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800100  00000e8c  00000f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080029e  0080029e  000010be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a5  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001021  00000000  00000000  00003c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001046  00000000  00000000  00004c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  00005c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001219  00000000  00000000  000063b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd9  00000000  00000000  000075c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  000081a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 39       	cpi	r26, 0x9E	; 158
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e9       	ldi	r26, 0x9E	; 158
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3a       	cpi	r26, 0xA5	; 165
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3c 04 	call	0x878	; 0x878 <main>
  9e:	0c 94 44 07 	jmp	0xe88	; 0xe88 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <__data_end>
 116:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <ddr_register_>
 11a:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <__data_end>
 128:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <port_register_>
 12c:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <__data_end>
 13a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <port_register_>
 13e:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <ddr_register_+0x1>
 14c:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <ddr_register_>
    port_register_ = port_register;
 150:	70 93 a2 02 	sts	0x02A2, r23	; 0x8002a2 <port_register_+0x1>
 154:	60 93 a1 02 	sts	0x02A1, r22	; 0x8002a1 <port_register_>
    pin_register_ = pin_register;
 158:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <pin_register_+0x1>
 15c:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <__data_end>
    DebugLedTurnOn();
 164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtActivateInterface>
 182:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtActivateInterface+0x1>
 186:	09 95       	icall
 188:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 18c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 190:	09 95       	icall
 192:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 196:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 19a:	09 95       	icall
 19c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtOutputByte>
 1a0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtOutputByte+0x1>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	09 95       	icall
 1a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ac:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
 1b6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtLetSlaveDriveBus>
 1ba:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtLetSlaveDriveBus+0x1>
 1be:	09 95       	icall
 1c0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1c4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1c8:	09 95       	icall
 1ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 1ce:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 1d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 1dc:	09 95       	icall
 1de:	08 95       	ret

000001e0 <FtWrite_Implementation>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
 1ea:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
 1ee:	09 95       	icall
 1f0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
 1f4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
 1f8:	09 95       	icall
 1fa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1fe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 202:	88 81       	ld	r24, Y
 204:	09 95       	icall
 206:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
 20a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
 20e:	09 95       	icall
 210:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
 214:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
 218:	09 95       	icall
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <FtOutputByte_Implementation>:
 220:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <FtMiosio_port>
 224:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <FtMiosio_port+0x1>
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <FtLetMasterDriveBus_Implementation>:
 22c:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <FtMiosio_ddr>
 230:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <FtMiosio_ddr+0x1>
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <FtLetSlaveDriveBus_Implementation>:
 23a:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <FtMiosio_ddr>
 23e:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <FtMiosio_ddr+0x1>
 242:	10 82       	st	Z, r1
 244:	08 95       	ret

00000246 <FtWriteData_Implementation>:
 246:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <FtMiosio_port>
 24a:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <FtMiosio_port+0x1>
 24e:	80 83       	st	Z, r24
 250:	08 95       	ret

00000252 <FtActivateInterface_Implementation>:
 252:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <Ft1248_Ss>
 256:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 25a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 262:	08 95       	ret

00000264 <FtPullData_Implementation>:
 264:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <Ft1248_Sck>
 268:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 26c:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 274:	08 95       	ret

00000276 <FtDeactivateInterface_Implementation>:
 276:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <Ft1248_Ss>
 27a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 27e:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 286:	08 95       	ret

00000288 <FtPushData_Implementation>:
 288:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <Ft1248_Sck>
 28c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 290:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 298:	08 95       	ret

0000029a <FtIsBusOk_Implementation>:
 29a:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <Ft1248_Miso>
 29e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <Ft1248_pin>
 2a2:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <Ft1248_pin+0x1>
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 2aa:	08 95       	ret

000002ac <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2ac:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <Ft1248_Miso>
 2b0:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <Ft1248_ddr>
 2b4:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <Ft1248_ddr+0x1>
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2bc:	08 95       	ret

000002be <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2be:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <Ft1248_Miso>
 2c2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 2c6:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2ce:	08 95       	ret

000002d0 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2d0:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <FtMiosio_ddr>
 2d4:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <FtMiosio_ddr+0x1>
 2d8:	10 82       	st	Z, r1
 2da:	08 95       	ret

000002dc <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2dc:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <FtMiosio_port>
 2e0:	f0 91 94 02 	lds	r31, 0x0294	; 0x800294 <FtMiosio_port+0x1>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 83       	st	Z, r24
 2e8:	08 95       	ret

000002ea <FtSckLow>:
}
void FtSckLow(void)
{
 2ea:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ec:	c0 91 91 02 	lds	r28, 0x0291	; 0x800291 <Ft1248_Sck>
 2f0:	6c 2f       	mov	r22, r28
 2f2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 2f6:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2fe:	6c 2f       	mov	r22, r28
 300:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <Ft1248_ddr>
 304:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <Ft1248_ddr+0x1>
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <FtSsHigh>:
void FtSsHigh(void)
{
 310:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 312:	c0 91 92 02 	lds	r28, 0x0292	; 0x800292 <Ft1248_Ss>
 316:	6c 2f       	mov	r22, r28
 318:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <Ft1248_port>
 31c:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <Ft1248_port+0x1>
 320:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 324:	6c 2f       	mov	r22, r28
 326:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <Ft1248_ddr>
 32a:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <Ft1248_ddr+0x1>
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 336:	0e 94 56 01 	call	0x2ac	; 0x2ac <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 33a:	0e 94 5f 01 	call	0x2be	; 0x2be <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 33e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 342:	0e 94 6e 01 	call	0x2dc	; 0x2dc <FtEnablePullupsOnMiosio>
    FtSckLow();
 346:	0e 94 75 01 	call	0x2ea	; 0x2ea <FtSckLow>
    FtSsHigh();
 34a:	0e 94 88 01 	call	0x310	; 0x310 <FtSsHigh>
 34e:	08 95       	ret

00000350 <UsbInit>:
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
 350:	0e 94 9b 01 	call	0x336	; 0x336 <FtInit>
 354:	08 95       	ret

00000356 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	8c 01       	movw	r16, r24
 364:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 366:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtSendCommand>
 36a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtSendCommand+0x1>
 36e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <FtCmd_Write>
 372:	09 95       	icall
    if (!FtBusTurnaround())
 374:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtBusTurnaround>
 378:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtBusTurnaround+0x1>
 37c:	09 95       	icall
 37e:	81 11       	cpse	r24, r1
 380:	0d c0       	rjmp	.+26     	; 0x39c <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 382:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 386:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 38a:	09 95       	icall
        FtDeactivateInterface();
 38c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 390:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 394:	09 95       	icall
        return num_bytes_sent;
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	15 c0       	rjmp	.+42     	; 0x3c6 <UsbWrite+0x70>
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 3a0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtWrite>
 3a4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtWrite+0x1>
 3a8:	c8 01       	movw	r24, r16
 3aa:	8c 0f       	add	r24, r28
 3ac:	9d 1f       	adc	r25, r29
 3ae:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 3b0:	88 23       	and	r24, r24
 3b2:	21 f0       	breq	.+8      	; 0x3bc <UsbWrite+0x66>
 3b4:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 3b6:	ce 15       	cp	r28, r14
 3b8:	df 05       	cpc	r29, r15
 3ba:	90 f3       	brcs	.-28     	; 0x3a0 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 3bc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
 3c0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
 3c4:	09 95       	icall
    return num_bytes_sent;
}
 3c6:	ce 01       	movw	r24, r28
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	08 95       	ret

000003d6 <ClearPendingSpiInterrupt_Implementation>:
}
uint8_t (*ReadSpiStatusRegister)(void) = ReadSpiStatusRegister_Implementation;
//
static void DisableSpi_Implementation(void)
{
    ClearBit(Spi_spcr, Spi_Enable);
 3d6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <ReadSpiStatusRegister>
 3da:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <ReadSpiStatusRegister+0x1>
 3de:	09 95       	icall
 3e0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 3e4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 3e8:	09 95       	icall
 3ea:	08 95       	ret

000003ec <ReadSpiStatusRegister_Implementation>:
 3ec:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Spi_spsr>
 3f0:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <Spi_spsr+0x1>
 3f4:	80 81       	ld	r24, Z
 3f6:	08 95       	ret

000003f8 <ReadSpiDataRegister_Implementation>:
 3f8:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <Spi_spdr>
 3fc:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <Spi_spdr+0x1>
 400:	80 81       	ld	r24, Z
 402:	08 95       	ret

00000404 <SpiMasterOpenSpi_Implementation>:
//
// TODO: remove Open and Close from the public API
//
static void SpiMasterOpenSpi_Implementation(void)
{
    ClearBit(Spi_port, Spi_Ss);
 404:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <Spi_Ss>
 408:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <Spi_port>
 40c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <Spi_port+0x1>
 410:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 414:	08 95       	ret

00000416 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 416:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <Spi_Enable>
 41a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <Spi_spcr>
 41e:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <Spi_spcr+0x1>
 422:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 426:	08 95       	ret

00000428 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 428:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <Spi_Ss>
 42c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <Spi_port>
 430:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <Spi_port+0x1>
 434:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 438:	08 95       	ret

0000043a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 43a:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <Spi_InterruptFlag>
 43e:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Spi_spsr>
 442:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <Spi_spsr+0x1>
 446:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 44a:	08 95       	ret

0000044c <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(garbage);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 44c:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <Spi_Miso>
 450:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <Spi_pin>
 454:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <Spi_pin+0x1>
 458:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 45c:	08 95       	ret

0000045e <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
    SlaveSelectIdleHigh();
 464:	0e 94 14 02 	call	0x428	; 0x428 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 468:	10 91 81 02 	lds	r17, 0x0281	; 0x800281 <Spi_Miso>
 46c:	c0 91 8e 02 	lds	r28, 0x028E	; 0x80028e <Spi_ddr>
 470:	d0 91 8f 02 	lds	r29, 0x028F	; 0x80028f <Spi_ddr+0x1>
 474:	61 2f       	mov	r22, r17
 476:	ce 01       	movw	r24, r28
 478:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 47c:	61 2f       	mov	r22, r17
 47e:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <Spi_port>
 482:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <Spi_port+0x1>
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 48a:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <Spi_Ss>
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 494:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <Spi_Mosi>
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 49e:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <Spi_Sck>
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 4a8:	c0 91 88 02 	lds	r28, 0x0288	; 0x800288 <Spi_spcr>
 4ac:	d0 91 89 02 	lds	r29, 0x0289	; 0x800289 <Spi_spcr+0x1>
 4b0:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <Spi_MasterSlaveSelect>
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 4ba:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Spi_ClockRateBit0>
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 4c4:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <Spi_ClockRateBit1>
 4c8:	ce 01       	movw	r24, r28
 4ca:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 4ce:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <Spi_DoubleClockRate>
 4d2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Spi_spsr>
 4d6:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <Spi_spsr+0x1>
 4da:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 4de:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <EnableSpi>
 4e2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <EnableSpi+0x1>
 4e6:	09 95       	icall
    ClearPendingSpiInterrupt();
 4e8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <ClearPendingSpiInterrupt>
 4ec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <ClearPendingSpiInterrupt+0x1>
 4f0:	09 95       	icall
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 4fe:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <SpiMasterOpenSpi>
 502:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <SpiMasterOpenSpi+0x1>
 506:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 508:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <Spi_spdr>
 50c:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <Spi_spdr+0x1>
 510:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 512:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <SpiTransferIsDone>
 516:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <SpiTransferIsDone+0x1>
 51a:	09 95       	icall
 51c:	88 23       	and	r24, r24
 51e:	c9 f3       	breq	.-14     	; 0x512 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 520:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiMasterCloseSpi>
 524:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiMasterCloseSpi+0x1>
 528:	09 95       	icall
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <SpiMasterRead>:
}
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t SpiMasterRead(void)
{
    uint8_t garbage = 0xFF;
    SpiMasterWrite(garbage);
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    return ReadSpiDataRegister();
 534:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 538:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 53c:	09 95       	icall
}
 53e:	08 95       	ret

00000540 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 540:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <SpiResponseIsReady>
 544:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <SpiResponseIsReady+0x1>
 548:	09 95       	icall
 54a:	88 23       	and	r24, r24
 54c:	c9 f3       	breq	.-14     	; 0x540 <SpiMasterWaitForResponse>
}
 54e:	08 95       	ret

00000550 <AddTestResultStringLengths>:
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-08 */
    Get_several_bytes_from_slave_and_write_bytes_to_USB_host();
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	e5 e0       	ldi	r30, 0x05	; 5
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ec 0f       	add	r30, r28
 55e:	fd 1f       	adc	r31, r29
 560:	01 90       	ld	r0, Z+
 562:	00 20       	and	r0, r0
 564:	e9 f7       	brne	.-6      	; 0x560 <AddTestResultStringLengths+0x10>
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	cf 01       	movw	r24, r30
 56a:	25 e0       	ldi	r18, 0x05	; 5
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	2c 0f       	add	r18, r28
 570:	3d 1f       	adc	r19, r29
 572:	82 1b       	sub	r24, r18
 574:	93 0b       	sbc	r25, r19
 576:	de 01       	movw	r26, r28
 578:	1c 96       	adiw	r26, 0x0c	; 12
 57a:	fd 01       	movw	r30, r26
 57c:	01 90       	ld	r0, Z+
 57e:	00 20       	and	r0, r0
 580:	e9 f7       	brne	.-6      	; 0x57c <AddTestResultStringLengths+0x2c>
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	ea 1b       	sub	r30, r26
 586:	fb 0b       	sbc	r31, r27
 588:	9e 01       	movw	r18, r28
 58a:	23 5a       	subi	r18, 0xA3	; 163
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	d9 01       	movw	r26, r18
 590:	0d 90       	ld	r0, X+
 592:	00 20       	and	r0, r0
 594:	e9 f7       	brne	.-6      	; 0x590 <AddTestResultStringLengths+0x40>
 596:	11 97       	sbiw	r26, 0x01	; 1
 598:	a2 1b       	sub	r26, r18
 59a:	b3 0b       	sbc	r27, r19
 59c:	8e 0f       	add	r24, r30
 59e:	8a 0f       	add	r24, r26
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <PrintTestResultInColor>:
 5a6:	cf 92       	push	r12
 5a8:	df 92       	push	r13
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	cd 55       	subi	r28, 0x5D	; 93
 5bc:	d1 09       	sbc	r29, r1
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	f8 94       	cli
 5c2:	de bf       	out	0x3e, r29	; 62
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	cd b6       	in	r12, 0x3d	; 61
 5ca:	de b6       	in	r13, 0x3e	; 62
 5cc:	2d b7       	in	r18, 0x3d	; 61
 5ce:	3e b7       	in	r19, 0x3e	; 62
 5d0:	2d 55       	subi	r18, 0x5D	; 93
 5d2:	31 09       	sbc	r19, r1
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	3e bf       	out	0x3e, r19	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	2d bf       	out	0x3d, r18	; 61
 5de:	ad b7       	in	r26, 0x3d	; 61
 5e0:	be b7       	in	r27, 0x3e	; 62
 5e2:	11 96       	adiw	r26, 0x01	; 1
 5e4:	8d e5       	ldi	r24, 0x5D	; 93
 5e6:	fe 01       	movw	r30, r28
 5e8:	e8 59       	subi	r30, 0x98	; 152
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255
 5ec:	01 90       	ld	r0, Z+
 5ee:	0d 92       	st	X+, r0
 5f0:	8a 95       	dec	r24
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <PrintTestResultInColor+0x46>
 5f4:	0e 94 a8 02 	call	0x550	; 0x550 <AddTestResultStringLengths>
 5f8:	2d b7       	in	r18, 0x3d	; 61
 5fa:	3e b7       	in	r19, 0x3e	; 62
 5fc:	23 5a       	subi	r18, 0xA3	; 163
 5fe:	3f 4f       	sbci	r19, 0xFF	; 255
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	3e bf       	out	0x3e, r19	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	2d bf       	out	0x3d, r18	; 61
 60a:	08 2f       	mov	r16, r24
 60c:	10 e0       	ldi	r17, 0x00	; 0
 60e:	03 5e       	subi	r16, 0xE3	; 227
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	8d b7       	in	r24, 0x3d	; 61
 614:	9e b7       	in	r25, 0x3e	; 62
 616:	80 1b       	sub	r24, r16
 618:	91 0b       	sbc	r25, r17
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	9e bf       	out	0x3e, r25	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	8d bf       	out	0x3d, r24	; 61
 624:	2d b7       	in	r18, 0x3d	; 61
 626:	3e b7       	in	r19, 0x3e	; 62
 628:	2f 5f       	subi	r18, 0xFF	; 255
 62a:	3f 4f       	sbci	r19, 0xFF	; 255
 62c:	79 01       	movw	r14, r18
 62e:	8d e5       	ldi	r24, 0x5D	; 93
 630:	fe 01       	movw	r30, r28
 632:	e8 59       	subi	r30, 0x98	; 152
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	de 01       	movw	r26, r28
 638:	11 96       	adiw	r26, 0x01	; 1
 63a:	01 90       	ld	r0, Z+
 63c:	0d 92       	st	X+, r0
 63e:	8a 95       	dec	r24
 640:	e1 f7       	brne	.-8      	; 0x63a <PrintTestResultInColor+0x94>
 642:	6f ee       	ldi	r22, 0xEF	; 239
 644:	71 e0       	ldi	r23, 0x01	; 1
 646:	ce 01       	movw	r24, r28
 648:	87 5a       	subi	r24, 0xA7	; 167
 64a:	9f 4f       	sbci	r25, 0xFF	; 255
 64c:	0e 94 43 04 	call	0x886	; 0x886 <strcmp>
 650:	89 2b       	or	r24, r25
 652:	19 f4       	brne	.+6      	; 0x65a <PrintTestResultInColor+0xb4>
 654:	88 e6       	ldi	r24, 0x68	; 104
 656:	92 e0       	ldi	r25, 0x02	; 2
 658:	02 c0       	rjmp	.+4      	; 0x65e <PrintTestResultInColor+0xb8>
 65a:	82 e6       	ldi	r24, 0x62	; 98
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	24 e7       	ldi	r18, 0x74	; 116
 660:	32 e0       	ldi	r19, 0x02	; 2
 662:	3f 93       	push	r19
 664:	2f 93       	push	r18
 666:	9e 01       	movw	r18, r28
 668:	20 54       	subi	r18, 0x40	; 64
 66a:	3f 4f       	sbci	r19, 0xFF	; 255
 66c:	3f 93       	push	r19
 66e:	2f 93       	push	r18
 670:	9f 93       	push	r25
 672:	8f 93       	push	r24
 674:	ce 01       	movw	r24, r28
 676:	81 59       	subi	r24, 0x91	; 145
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	9f 93       	push	r25
 67c:	8f 93       	push	r24
 67e:	8e e6       	ldi	r24, 0x6E	; 110
 680:	92 e0       	ldi	r25, 0x02	; 2
 682:	9f 93       	push	r25
 684:	8f 93       	push	r24
 686:	88 e6       	ldi	r24, 0x68	; 104
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	8c 0f       	add	r24, r28
 68c:	9d 1f       	adc	r25, r29
 68e:	9f 93       	push	r25
 690:	8f 93       	push	r24
 692:	88 e6       	ldi	r24, 0x68	; 104
 694:	92 e0       	ldi	r25, 0x02	; 2
 696:	9f 93       	push	r25
 698:	8f 93       	push	r24
 69a:	87 e0       	ldi	r24, 0x07	; 7
 69c:	92 e0       	ldi	r25, 0x02	; 2
 69e:	9f 93       	push	r25
 6a0:	8f 93       	push	r24
 6a2:	1f 93       	push	r17
 6a4:	0f 93       	push	r16
 6a6:	ff 92       	push	r15
 6a8:	ef 92       	push	r14
 6aa:	0e 94 4c 04 	call	0x898	; 0x898 <snprintf>
 6ae:	ae 2d       	mov	r26, r14
 6b0:	bf 2d       	mov	r27, r15
 6b2:	fd 01       	movw	r30, r26
 6b4:	01 90       	ld	r0, Z+
 6b6:	00 20       	and	r0, r0
 6b8:	e9 f7       	brne	.-6      	; 0x6b4 <PrintTestResultInColor+0x10e>
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	bf 01       	movw	r22, r30
 6be:	6a 1b       	sub	r22, r26
 6c0:	7b 0b       	sbc	r23, r27
 6c2:	8e 2d       	mov	r24, r14
 6c4:	9f 2d       	mov	r25, r15
 6c6:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 6ca:	2d b7       	in	r18, 0x3d	; 61
 6cc:	3e b7       	in	r19, 0x3e	; 62
 6ce:	2c 5e       	subi	r18, 0xEC	; 236
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	3e bf       	out	0x3e, r19	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	2d bf       	out	0x3d, r18	; 61
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de be       	out	0x3e, r13	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd be       	out	0x3d, r12	; 61
 6e6:	c3 5a       	subi	r28, 0xA3	; 163
 6e8:	df 4f       	sbci	r29, 0xFF	; 255
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	f8 94       	cli
 6ee:	de bf       	out	0x3e, r29	; 62
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	cd bf       	out	0x3d, r28	; 61
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <PrintSpiSlaveResponseInColor>:
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	ad 97       	sbiw	r28, 0x2d	; 45
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	24 e7       	ldi	r18, 0x74	; 116
 720:	32 e0       	ldi	r19, 0x02	; 2
 722:	3f 93       	push	r19
 724:	2f 93       	push	r18
 726:	1f 92       	push	r1
 728:	8f 93       	push	r24
 72a:	88 e6       	ldi	r24, 0x68	; 104
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	9f 93       	push	r25
 730:	8f 93       	push	r24
 732:	8e e6       	ldi	r24, 0x6E	; 110
 734:	92 e0       	ldi	r25, 0x02	; 2
 736:	9f 93       	push	r25
 738:	8f 93       	push	r24
 73a:	8d e3       	ldi	r24, 0x3D	; 61
 73c:	92 e0       	ldi	r25, 0x02	; 2
 73e:	9f 93       	push	r25
 740:	8f 93       	push	r24
 742:	1f 92       	push	r1
 744:	8d e2       	ldi	r24, 0x2D	; 45
 746:	8f 93       	push	r24
 748:	8e 01       	movw	r16, r28
 74a:	0f 5f       	subi	r16, 0xFF	; 255
 74c:	1f 4f       	sbci	r17, 0xFF	; 255
 74e:	1f 93       	push	r17
 750:	0f 93       	push	r16
 752:	0e 94 4c 04 	call	0x898	; 0x898 <snprintf>
 756:	f8 01       	movw	r30, r16
 758:	01 90       	ld	r0, Z+
 75a:	00 20       	and	r0, r0
 75c:	e9 f7       	brne	.-6      	; 0x758 <PrintSpiSlaveResponseInColor+0x52>
 75e:	31 97       	sbiw	r30, 0x01	; 1
 760:	bf 01       	movw	r22, r30
 762:	60 1b       	sub	r22, r16
 764:	71 0b       	sbc	r23, r17
 766:	c8 01       	movw	r24, r16
 768:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	ad 96       	adiw	r28, 0x2d	; 45
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	08 95       	ret

0000078c <SetupDebugLed>:
 78c:	23 e0       	ldi	r18, 0x03	; 3
 78e:	46 e2       	ldi	r20, 0x26	; 38
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	68 e2       	ldi	r22, 0x28	; 40
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	87 e2       	ldi	r24, 0x27	; 39
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 79e:	08 95       	ret

000007a0 <Get_several_bytes_from_slave_and_write_bytes_to_USB_host>:
 7a0:	ef 92       	push	r14
 7a2:	ff 92       	push	r15
 7a4:	0f 93       	push	r16
 7a6:	1f 93       	push	r17
 7a8:	cf 93       	push	r28
 7aa:	df 93       	push	r29
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
 7b0:	c1 56       	subi	r28, 0x61	; 97
 7b2:	d1 09       	sbc	r29, r1
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	de bf       	out	0x3e, r29	; 62
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	cd bf       	out	0x3d, r28	; 61
 7be:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
 7c2:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
 7cc:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 7d0:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 7d4:	89 83       	std	Y+1, r24	; 0x01
 7d6:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 7da:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 7de:	8a 83       	std	Y+2, r24	; 0x02
 7e0:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 7e4:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 7e8:	8b 83       	std	Y+3, r24	; 0x03
 7ea:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
 7ee:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
 7f2:	8c 83       	std	Y+4, r24	; 0x04
 7f4:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 7f8:	8d e5       	ldi	r24, 0x5D	; 93
 7fa:	e1 e9       	ldi	r30, 0x91	; 145
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	de 01       	movw	r26, r28
 800:	15 96       	adiw	r26, 0x05	; 5
 802:	01 90       	ld	r0, Z+
 804:	0d 92       	st	X+, r0
 806:	8a 95       	dec	r24
 808:	e1 f7       	brne	.-8      	; 0x802 <Get_several_bytes_from_slave_and_write_bytes_to_USB_host+0x62>
 80a:	8d b7       	in	r24, 0x3d	; 61
 80c:	9e b7       	in	r25, 0x3e	; 62
 80e:	8d 55       	subi	r24, 0x5D	; 93
 810:	91 09       	sbc	r25, r1
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	9e bf       	out	0x3e, r25	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	8d bf       	out	0x3d, r24	; 61
 81c:	ad b7       	in	r26, 0x3d	; 61
 81e:	be b7       	in	r27, 0x3e	; 62
 820:	11 96       	adiw	r26, 0x01	; 1
 822:	8d e5       	ldi	r24, 0x5D	; 93
 824:	fe 01       	movw	r30, r28
 826:	35 96       	adiw	r30, 0x05	; 5
 828:	01 90       	ld	r0, Z+
 82a:	0d 92       	st	X+, r0
 82c:	8a 95       	dec	r24
 82e:	e1 f7       	brne	.-8      	; 0x828 <Get_several_bytes_from_slave_and_write_bytes_to_USB_host+0x88>
 830:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <PrintTestResultInColor>
 834:	8e 01       	movw	r16, r28
 836:	0f 5f       	subi	r16, 0xFF	; 255
 838:	1f 4f       	sbci	r17, 0xFF	; 255
 83a:	7e 01       	movw	r14, r28
 83c:	95 e0       	ldi	r25, 0x05	; 5
 83e:	e9 0e       	add	r14, r25
 840:	f1 1c       	adc	r15, r1
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	de bf       	out	0x3e, r29	; 62
 848:	0f be       	out	0x3f, r0	; 63
 84a:	cd bf       	out	0x3d, r28	; 61
 84c:	f8 01       	movw	r30, r16
 84e:	81 91       	ld	r24, Z+
 850:	8f 01       	movw	r16, r30
 852:	0e 94 83 03 	call	0x706	; 0x706 <PrintSpiSlaveResponseInColor>
 856:	0e 15       	cp	r16, r14
 858:	1f 05       	cpc	r17, r15
 85a:	c1 f7       	brne	.-16     	; 0x84c <Get_several_bytes_from_slave_and_write_bytes_to_USB_host+0xac>
 85c:	cf 59       	subi	r28, 0x9F	; 159
 85e:	df 4f       	sbci	r29, 0xFF	; 255
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	f8 94       	cli
 864:	de bf       	out	0x3e, r29	; 62
 866:	0f be       	out	0x3f, r0	; 63
 868:	cd bf       	out	0x3d, r28	; 61
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	1f 91       	pop	r17
 870:	0f 91       	pop	r16
 872:	ff 90       	pop	r15
 874:	ef 90       	pop	r14
 876:	08 95       	ret

00000878 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 878:	0e 94 c6 03 	call	0x78c	; 0x78c <SetupDebugLed>
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-08 */
    Get_several_bytes_from_slave_and_write_bytes_to_USB_host();
 87c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Get_several_bytes_from_slave_and_write_bytes_to_USB_host>
    SetupDebugLed();
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    test_SpiMaster(); // All test pass 2018-08-03
}
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	08 95       	ret

00000886 <strcmp>:
 886:	fb 01       	movw	r30, r22
 888:	dc 01       	movw	r26, r24
 88a:	8d 91       	ld	r24, X+
 88c:	01 90       	ld	r0, Z+
 88e:	80 19       	sub	r24, r0
 890:	01 10       	cpse	r0, r1
 892:	d9 f3       	breq	.-10     	; 0x88a <strcmp+0x4>
 894:	99 0b       	sbc	r25, r25
 896:	08 95       	ret

00000898 <snprintf>:
 898:	ae e0       	ldi	r26, 0x0E	; 14
 89a:	b0 e0       	ldi	r27, 0x00	; 0
 89c:	e2 e5       	ldi	r30, 0x52	; 82
 89e:	f4 e0       	ldi	r31, 0x04	; 4
 8a0:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__prologue_saves__+0x1c>
 8a4:	0d 89       	ldd	r16, Y+21	; 0x15
 8a6:	1e 89       	ldd	r17, Y+22	; 0x16
 8a8:	8f 89       	ldd	r24, Y+23	; 0x17
 8aa:	98 8d       	ldd	r25, Y+24	; 0x18
 8ac:	26 e0       	ldi	r18, 0x06	; 6
 8ae:	2c 83       	std	Y+4, r18	; 0x04
 8b0:	1a 83       	std	Y+2, r17	; 0x02
 8b2:	09 83       	std	Y+1, r16	; 0x01
 8b4:	97 ff       	sbrs	r25, 7
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <snprintf+0x24>
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e8       	ldi	r25, 0x80	; 128
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	9e 83       	std	Y+6, r25	; 0x06
 8c0:	8d 83       	std	Y+5, r24	; 0x05
 8c2:	ae 01       	movw	r20, r28
 8c4:	45 5e       	subi	r20, 0xE5	; 229
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	69 8d       	ldd	r22, Y+25	; 0x19
 8ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
 8cc:	ce 01       	movw	r24, r28
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <vfprintf>
 8d4:	4d 81       	ldd	r20, Y+5	; 0x05
 8d6:	5e 81       	ldd	r21, Y+6	; 0x06
 8d8:	57 fd       	sbrc	r21, 7
 8da:	0a c0       	rjmp	.+20     	; 0x8f0 <snprintf+0x58>
 8dc:	2f 81       	ldd	r18, Y+7	; 0x07
 8de:	38 85       	ldd	r19, Y+8	; 0x08
 8e0:	42 17       	cp	r20, r18
 8e2:	53 07       	cpc	r21, r19
 8e4:	0c f4       	brge	.+2      	; 0x8e8 <snprintf+0x50>
 8e6:	9a 01       	movw	r18, r20
 8e8:	f8 01       	movw	r30, r16
 8ea:	e2 0f       	add	r30, r18
 8ec:	f3 1f       	adc	r31, r19
 8ee:	10 82       	st	Z, r1
 8f0:	2e 96       	adiw	r28, 0x0e	; 14
 8f2:	e4 e0       	ldi	r30, 0x04	; 4
 8f4:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__epilogue_restores__+0x1c>

000008f8 <vfprintf>:
 8f8:	ab e0       	ldi	r26, 0x0B	; 11
 8fa:	b0 e0       	ldi	r27, 0x00	; 0
 8fc:	e2 e8       	ldi	r30, 0x82	; 130
 8fe:	f4 e0       	ldi	r31, 0x04	; 4
 900:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__prologue_saves__>
 904:	6c 01       	movw	r12, r24
 906:	7b 01       	movw	r14, r22
 908:	8a 01       	movw	r16, r20
 90a:	fc 01       	movw	r30, r24
 90c:	17 82       	std	Z+7, r1	; 0x07
 90e:	16 82       	std	Z+6, r1	; 0x06
 910:	83 81       	ldd	r24, Z+3	; 0x03
 912:	81 ff       	sbrs	r24, 1
 914:	cc c1       	rjmp	.+920    	; 0xcae <__stack+0x3af>
 916:	ce 01       	movw	r24, r28
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	3c 01       	movw	r6, r24
 91c:	f6 01       	movw	r30, r12
 91e:	93 81       	ldd	r25, Z+3	; 0x03
 920:	f7 01       	movw	r30, r14
 922:	93 fd       	sbrc	r25, 3
 924:	85 91       	lpm	r24, Z+
 926:	93 ff       	sbrs	r25, 3
 928:	81 91       	ld	r24, Z+
 92a:	7f 01       	movw	r14, r30
 92c:	88 23       	and	r24, r24
 92e:	09 f4       	brne	.+2      	; 0x932 <__stack+0x33>
 930:	ba c1       	rjmp	.+884    	; 0xca6 <__stack+0x3a7>
 932:	85 32       	cpi	r24, 0x25	; 37
 934:	39 f4       	brne	.+14     	; 0x944 <__stack+0x45>
 936:	93 fd       	sbrc	r25, 3
 938:	85 91       	lpm	r24, Z+
 93a:	93 ff       	sbrs	r25, 3
 93c:	81 91       	ld	r24, Z+
 93e:	7f 01       	movw	r14, r30
 940:	85 32       	cpi	r24, 0x25	; 37
 942:	29 f4       	brne	.+10     	; 0x94e <__stack+0x4f>
 944:	b6 01       	movw	r22, r12
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 94c:	e7 cf       	rjmp	.-50     	; 0x91c <__stack+0x1d>
 94e:	91 2c       	mov	r9, r1
 950:	21 2c       	mov	r2, r1
 952:	31 2c       	mov	r3, r1
 954:	ff e1       	ldi	r31, 0x1F	; 31
 956:	f3 15       	cp	r31, r3
 958:	d8 f0       	brcs	.+54     	; 0x990 <__stack+0x91>
 95a:	8b 32       	cpi	r24, 0x2B	; 43
 95c:	79 f0       	breq	.+30     	; 0x97c <__stack+0x7d>
 95e:	38 f4       	brcc	.+14     	; 0x96e <__stack+0x6f>
 960:	80 32       	cpi	r24, 0x20	; 32
 962:	79 f0       	breq	.+30     	; 0x982 <__stack+0x83>
 964:	83 32       	cpi	r24, 0x23	; 35
 966:	a1 f4       	brne	.+40     	; 0x990 <__stack+0x91>
 968:	23 2d       	mov	r18, r3
 96a:	20 61       	ori	r18, 0x10	; 16
 96c:	1d c0       	rjmp	.+58     	; 0x9a8 <__stack+0xa9>
 96e:	8d 32       	cpi	r24, 0x2D	; 45
 970:	61 f0       	breq	.+24     	; 0x98a <__stack+0x8b>
 972:	80 33       	cpi	r24, 0x30	; 48
 974:	69 f4       	brne	.+26     	; 0x990 <__stack+0x91>
 976:	23 2d       	mov	r18, r3
 978:	21 60       	ori	r18, 0x01	; 1
 97a:	16 c0       	rjmp	.+44     	; 0x9a8 <__stack+0xa9>
 97c:	83 2d       	mov	r24, r3
 97e:	82 60       	ori	r24, 0x02	; 2
 980:	38 2e       	mov	r3, r24
 982:	e3 2d       	mov	r30, r3
 984:	e4 60       	ori	r30, 0x04	; 4
 986:	3e 2e       	mov	r3, r30
 988:	2a c0       	rjmp	.+84     	; 0x9de <__stack+0xdf>
 98a:	f3 2d       	mov	r31, r3
 98c:	f8 60       	ori	r31, 0x08	; 8
 98e:	1d c0       	rjmp	.+58     	; 0x9ca <__stack+0xcb>
 990:	37 fc       	sbrc	r3, 7
 992:	2d c0       	rjmp	.+90     	; 0x9ee <__stack+0xef>
 994:	20 ed       	ldi	r18, 0xD0	; 208
 996:	28 0f       	add	r18, r24
 998:	2a 30       	cpi	r18, 0x0A	; 10
 99a:	40 f0       	brcs	.+16     	; 0x9ac <__stack+0xad>
 99c:	8e 32       	cpi	r24, 0x2E	; 46
 99e:	b9 f4       	brne	.+46     	; 0x9ce <__stack+0xcf>
 9a0:	36 fc       	sbrc	r3, 6
 9a2:	81 c1       	rjmp	.+770    	; 0xca6 <__stack+0x3a7>
 9a4:	23 2d       	mov	r18, r3
 9a6:	20 64       	ori	r18, 0x40	; 64
 9a8:	32 2e       	mov	r3, r18
 9aa:	19 c0       	rjmp	.+50     	; 0x9de <__stack+0xdf>
 9ac:	36 fe       	sbrs	r3, 6
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <__stack+0xbd>
 9b0:	8a e0       	ldi	r24, 0x0A	; 10
 9b2:	98 9e       	mul	r9, r24
 9b4:	20 0d       	add	r18, r0
 9b6:	11 24       	eor	r1, r1
 9b8:	92 2e       	mov	r9, r18
 9ba:	11 c0       	rjmp	.+34     	; 0x9de <__stack+0xdf>
 9bc:	ea e0       	ldi	r30, 0x0A	; 10
 9be:	2e 9e       	mul	r2, r30
 9c0:	20 0d       	add	r18, r0
 9c2:	11 24       	eor	r1, r1
 9c4:	22 2e       	mov	r2, r18
 9c6:	f3 2d       	mov	r31, r3
 9c8:	f0 62       	ori	r31, 0x20	; 32
 9ca:	3f 2e       	mov	r3, r31
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__stack+0xdf>
 9ce:	8c 36       	cpi	r24, 0x6C	; 108
 9d0:	21 f4       	brne	.+8      	; 0x9da <__stack+0xdb>
 9d2:	83 2d       	mov	r24, r3
 9d4:	80 68       	ori	r24, 0x80	; 128
 9d6:	38 2e       	mov	r3, r24
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	88 36       	cpi	r24, 0x68	; 104
 9dc:	41 f4       	brne	.+16     	; 0x9ee <__stack+0xef>
 9de:	f7 01       	movw	r30, r14
 9e0:	93 fd       	sbrc	r25, 3
 9e2:	85 91       	lpm	r24, Z+
 9e4:	93 ff       	sbrs	r25, 3
 9e6:	81 91       	ld	r24, Z+
 9e8:	7f 01       	movw	r14, r30
 9ea:	81 11       	cpse	r24, r1
 9ec:	b3 cf       	rjmp	.-154    	; 0x954 <__stack+0x55>
 9ee:	98 2f       	mov	r25, r24
 9f0:	9f 7d       	andi	r25, 0xDF	; 223
 9f2:	95 54       	subi	r25, 0x45	; 69
 9f4:	93 30       	cpi	r25, 0x03	; 3
 9f6:	28 f4       	brcc	.+10     	; 0xa02 <__stack+0x103>
 9f8:	0c 5f       	subi	r16, 0xFC	; 252
 9fa:	1f 4f       	sbci	r17, 0xFF	; 255
 9fc:	9f e3       	ldi	r25, 0x3F	; 63
 9fe:	99 83       	std	Y+1, r25	; 0x01
 a00:	0d c0       	rjmp	.+26     	; 0xa1c <__stack+0x11d>
 a02:	83 36       	cpi	r24, 0x63	; 99
 a04:	31 f0       	breq	.+12     	; 0xa12 <__stack+0x113>
 a06:	83 37       	cpi	r24, 0x73	; 115
 a08:	71 f0       	breq	.+28     	; 0xa26 <__stack+0x127>
 a0a:	83 35       	cpi	r24, 0x53	; 83
 a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x111>
 a0e:	59 c0       	rjmp	.+178    	; 0xac2 <__stack+0x1c3>
 a10:	21 c0       	rjmp	.+66     	; 0xa54 <__stack+0x155>
 a12:	f8 01       	movw	r30, r16
 a14:	80 81       	ld	r24, Z
 a16:	89 83       	std	Y+1, r24	; 0x01
 a18:	0e 5f       	subi	r16, 0xFE	; 254
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	88 24       	eor	r8, r8
 a1e:	83 94       	inc	r8
 a20:	91 2c       	mov	r9, r1
 a22:	53 01       	movw	r10, r6
 a24:	13 c0       	rjmp	.+38     	; 0xa4c <__stack+0x14d>
 a26:	28 01       	movw	r4, r16
 a28:	f2 e0       	ldi	r31, 0x02	; 2
 a2a:	4f 0e       	add	r4, r31
 a2c:	51 1c       	adc	r5, r1
 a2e:	f8 01       	movw	r30, r16
 a30:	a0 80       	ld	r10, Z
 a32:	b1 80       	ldd	r11, Z+1	; 0x01
 a34:	36 fe       	sbrs	r3, 6
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <__stack+0x13f>
 a38:	69 2d       	mov	r22, r9
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x143>
 a3e:	6f ef       	ldi	r22, 0xFF	; 255
 a40:	7f ef       	ldi	r23, 0xFF	; 255
 a42:	c5 01       	movw	r24, r10
 a44:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strnlen>
 a48:	4c 01       	movw	r8, r24
 a4a:	82 01       	movw	r16, r4
 a4c:	f3 2d       	mov	r31, r3
 a4e:	ff 77       	andi	r31, 0x7F	; 127
 a50:	3f 2e       	mov	r3, r31
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <__stack+0x181>
 a54:	28 01       	movw	r4, r16
 a56:	22 e0       	ldi	r18, 0x02	; 2
 a58:	42 0e       	add	r4, r18
 a5a:	51 1c       	adc	r5, r1
 a5c:	f8 01       	movw	r30, r16
 a5e:	a0 80       	ld	r10, Z
 a60:	b1 80       	ldd	r11, Z+1	; 0x01
 a62:	36 fe       	sbrs	r3, 6
 a64:	03 c0       	rjmp	.+6      	; 0xa6c <__stack+0x16d>
 a66:	69 2d       	mov	r22, r9
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <__stack+0x171>
 a6c:	6f ef       	ldi	r22, 0xFF	; 255
 a6e:	7f ef       	ldi	r23, 0xFF	; 255
 a70:	c5 01       	movw	r24, r10
 a72:	0e 94 5d 06 	call	0xcba	; 0xcba <strnlen_P>
 a76:	4c 01       	movw	r8, r24
 a78:	f3 2d       	mov	r31, r3
 a7a:	f0 68       	ori	r31, 0x80	; 128
 a7c:	3f 2e       	mov	r3, r31
 a7e:	82 01       	movw	r16, r4
 a80:	33 fc       	sbrc	r3, 3
 a82:	1b c0       	rjmp	.+54     	; 0xaba <__stack+0x1bb>
 a84:	82 2d       	mov	r24, r2
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	88 16       	cp	r8, r24
 a8a:	99 06       	cpc	r9, r25
 a8c:	b0 f4       	brcc	.+44     	; 0xaba <__stack+0x1bb>
 a8e:	b6 01       	movw	r22, r12
 a90:	80 e2       	ldi	r24, 0x20	; 32
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 a98:	2a 94       	dec	r2
 a9a:	f4 cf       	rjmp	.-24     	; 0xa84 <__stack+0x185>
 a9c:	f5 01       	movw	r30, r10
 a9e:	37 fc       	sbrc	r3, 7
 aa0:	85 91       	lpm	r24, Z+
 aa2:	37 fe       	sbrs	r3, 7
 aa4:	81 91       	ld	r24, Z+
 aa6:	5f 01       	movw	r10, r30
 aa8:	b6 01       	movw	r22, r12
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 ab0:	21 10       	cpse	r2, r1
 ab2:	2a 94       	dec	r2
 ab4:	21 e0       	ldi	r18, 0x01	; 1
 ab6:	82 1a       	sub	r8, r18
 ab8:	91 08       	sbc	r9, r1
 aba:	81 14       	cp	r8, r1
 abc:	91 04       	cpc	r9, r1
 abe:	71 f7       	brne	.-36     	; 0xa9c <__stack+0x19d>
 ac0:	e8 c0       	rjmp	.+464    	; 0xc92 <__stack+0x393>
 ac2:	84 36       	cpi	r24, 0x64	; 100
 ac4:	11 f0       	breq	.+4      	; 0xaca <__stack+0x1cb>
 ac6:	89 36       	cpi	r24, 0x69	; 105
 ac8:	41 f5       	brne	.+80     	; 0xb1a <__stack+0x21b>
 aca:	f8 01       	movw	r30, r16
 acc:	37 fe       	sbrs	r3, 7
 ace:	07 c0       	rjmp	.+14     	; 0xade <__stack+0x1df>
 ad0:	60 81       	ld	r22, Z
 ad2:	71 81       	ldd	r23, Z+1	; 0x01
 ad4:	82 81       	ldd	r24, Z+2	; 0x02
 ad6:	93 81       	ldd	r25, Z+3	; 0x03
 ad8:	0c 5f       	subi	r16, 0xFC	; 252
 ada:	1f 4f       	sbci	r17, 0xFF	; 255
 adc:	08 c0       	rjmp	.+16     	; 0xaee <__stack+0x1ef>
 ade:	60 81       	ld	r22, Z
 ae0:	71 81       	ldd	r23, Z+1	; 0x01
 ae2:	07 2e       	mov	r0, r23
 ae4:	00 0c       	add	r0, r0
 ae6:	88 0b       	sbc	r24, r24
 ae8:	99 0b       	sbc	r25, r25
 aea:	0e 5f       	subi	r16, 0xFE	; 254
 aec:	1f 4f       	sbci	r17, 0xFF	; 255
 aee:	f3 2d       	mov	r31, r3
 af0:	ff 76       	andi	r31, 0x6F	; 111
 af2:	3f 2e       	mov	r3, r31
 af4:	97 ff       	sbrs	r25, 7
 af6:	09 c0       	rjmp	.+18     	; 0xb0a <__stack+0x20b>
 af8:	90 95       	com	r25
 afa:	80 95       	com	r24
 afc:	70 95       	com	r23
 afe:	61 95       	neg	r22
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	f0 68       	ori	r31, 0x80	; 128
 b08:	3f 2e       	mov	r3, r31
 b0a:	2a e0       	ldi	r18, 0x0A	; 10
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	a3 01       	movw	r20, r6
 b10:	0e 94 af 06 	call	0xd5e	; 0xd5e <__ultoa_invert>
 b14:	88 2e       	mov	r8, r24
 b16:	86 18       	sub	r8, r6
 b18:	45 c0       	rjmp	.+138    	; 0xba4 <__stack+0x2a5>
 b1a:	85 37       	cpi	r24, 0x75	; 117
 b1c:	31 f4       	brne	.+12     	; 0xb2a <__stack+0x22b>
 b1e:	23 2d       	mov	r18, r3
 b20:	2f 7e       	andi	r18, 0xEF	; 239
 b22:	b2 2e       	mov	r11, r18
 b24:	2a e0       	ldi	r18, 0x0A	; 10
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	25 c0       	rjmp	.+74     	; 0xb74 <__stack+0x275>
 b2a:	93 2d       	mov	r25, r3
 b2c:	99 7f       	andi	r25, 0xF9	; 249
 b2e:	b9 2e       	mov	r11, r25
 b30:	8f 36       	cpi	r24, 0x6F	; 111
 b32:	c1 f0       	breq	.+48     	; 0xb64 <__stack+0x265>
 b34:	18 f4       	brcc	.+6      	; 0xb3c <__stack+0x23d>
 b36:	88 35       	cpi	r24, 0x58	; 88
 b38:	79 f0       	breq	.+30     	; 0xb58 <__stack+0x259>
 b3a:	b5 c0       	rjmp	.+362    	; 0xca6 <__stack+0x3a7>
 b3c:	80 37       	cpi	r24, 0x70	; 112
 b3e:	19 f0       	breq	.+6      	; 0xb46 <__stack+0x247>
 b40:	88 37       	cpi	r24, 0x78	; 120
 b42:	21 f0       	breq	.+8      	; 0xb4c <__stack+0x24d>
 b44:	b0 c0       	rjmp	.+352    	; 0xca6 <__stack+0x3a7>
 b46:	e9 2f       	mov	r30, r25
 b48:	e0 61       	ori	r30, 0x10	; 16
 b4a:	be 2e       	mov	r11, r30
 b4c:	b4 fe       	sbrs	r11, 4
 b4e:	0d c0       	rjmp	.+26     	; 0xb6a <__stack+0x26b>
 b50:	fb 2d       	mov	r31, r11
 b52:	f4 60       	ori	r31, 0x04	; 4
 b54:	bf 2e       	mov	r11, r31
 b56:	09 c0       	rjmp	.+18     	; 0xb6a <__stack+0x26b>
 b58:	34 fe       	sbrs	r3, 4
 b5a:	0a c0       	rjmp	.+20     	; 0xb70 <__stack+0x271>
 b5c:	29 2f       	mov	r18, r25
 b5e:	26 60       	ori	r18, 0x06	; 6
 b60:	b2 2e       	mov	r11, r18
 b62:	06 c0       	rjmp	.+12     	; 0xb70 <__stack+0x271>
 b64:	28 e0       	ldi	r18, 0x08	; 8
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	05 c0       	rjmp	.+10     	; 0xb74 <__stack+0x275>
 b6a:	20 e1       	ldi	r18, 0x10	; 16
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__stack+0x275>
 b70:	20 e1       	ldi	r18, 0x10	; 16
 b72:	32 e0       	ldi	r19, 0x02	; 2
 b74:	f8 01       	movw	r30, r16
 b76:	b7 fe       	sbrs	r11, 7
 b78:	07 c0       	rjmp	.+14     	; 0xb88 <__stack+0x289>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	82 81       	ldd	r24, Z+2	; 0x02
 b80:	93 81       	ldd	r25, Z+3	; 0x03
 b82:	0c 5f       	subi	r16, 0xFC	; 252
 b84:	1f 4f       	sbci	r17, 0xFF	; 255
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <__stack+0x295>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 5f       	subi	r16, 0xFE	; 254
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	a3 01       	movw	r20, r6
 b96:	0e 94 af 06 	call	0xd5e	; 0xd5e <__ultoa_invert>
 b9a:	88 2e       	mov	r8, r24
 b9c:	86 18       	sub	r8, r6
 b9e:	fb 2d       	mov	r31, r11
 ba0:	ff 77       	andi	r31, 0x7F	; 127
 ba2:	3f 2e       	mov	r3, r31
 ba4:	36 fe       	sbrs	r3, 6
 ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <__stack+0x2c3>
 ba8:	23 2d       	mov	r18, r3
 baa:	2e 7f       	andi	r18, 0xFE	; 254
 bac:	a2 2e       	mov	r10, r18
 bae:	89 14       	cp	r8, r9
 bb0:	58 f4       	brcc	.+22     	; 0xbc8 <__stack+0x2c9>
 bb2:	34 fe       	sbrs	r3, 4
 bb4:	0b c0       	rjmp	.+22     	; 0xbcc <__stack+0x2cd>
 bb6:	32 fc       	sbrc	r3, 2
 bb8:	09 c0       	rjmp	.+18     	; 0xbcc <__stack+0x2cd>
 bba:	83 2d       	mov	r24, r3
 bbc:	8e 7e       	andi	r24, 0xEE	; 238
 bbe:	a8 2e       	mov	r10, r24
 bc0:	05 c0       	rjmp	.+10     	; 0xbcc <__stack+0x2cd>
 bc2:	b8 2c       	mov	r11, r8
 bc4:	a3 2c       	mov	r10, r3
 bc6:	03 c0       	rjmp	.+6      	; 0xbce <__stack+0x2cf>
 bc8:	b8 2c       	mov	r11, r8
 bca:	01 c0       	rjmp	.+2      	; 0xbce <__stack+0x2cf>
 bcc:	b9 2c       	mov	r11, r9
 bce:	a4 fe       	sbrs	r10, 4
 bd0:	0f c0       	rjmp	.+30     	; 0xbf0 <__stack+0x2f1>
 bd2:	fe 01       	movw	r30, r28
 bd4:	e8 0d       	add	r30, r8
 bd6:	f1 1d       	adc	r31, r1
 bd8:	80 81       	ld	r24, Z
 bda:	80 33       	cpi	r24, 0x30	; 48
 bdc:	21 f4       	brne	.+8      	; 0xbe6 <__stack+0x2e7>
 bde:	9a 2d       	mov	r25, r10
 be0:	99 7e       	andi	r25, 0xE9	; 233
 be2:	a9 2e       	mov	r10, r25
 be4:	09 c0       	rjmp	.+18     	; 0xbf8 <__stack+0x2f9>
 be6:	a2 fe       	sbrs	r10, 2
 be8:	06 c0       	rjmp	.+12     	; 0xbf6 <__stack+0x2f7>
 bea:	b3 94       	inc	r11
 bec:	b3 94       	inc	r11
 bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__stack+0x2f9>
 bf0:	8a 2d       	mov	r24, r10
 bf2:	86 78       	andi	r24, 0x86	; 134
 bf4:	09 f0       	breq	.+2      	; 0xbf8 <__stack+0x2f9>
 bf6:	b3 94       	inc	r11
 bf8:	a3 fc       	sbrc	r10, 3
 bfa:	11 c0       	rjmp	.+34     	; 0xc1e <__stack+0x31f>
 bfc:	a0 fe       	sbrs	r10, 0
 bfe:	06 c0       	rjmp	.+12     	; 0xc0c <__stack+0x30d>
 c00:	b2 14       	cp	r11, r2
 c02:	88 f4       	brcc	.+34     	; 0xc26 <__stack+0x327>
 c04:	28 0c       	add	r2, r8
 c06:	92 2c       	mov	r9, r2
 c08:	9b 18       	sub	r9, r11
 c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__stack+0x329>
 c0c:	b2 14       	cp	r11, r2
 c0e:	60 f4       	brcc	.+24     	; 0xc28 <__stack+0x329>
 c10:	b6 01       	movw	r22, r12
 c12:	80 e2       	ldi	r24, 0x20	; 32
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 c1a:	b3 94       	inc	r11
 c1c:	f7 cf       	rjmp	.-18     	; 0xc0c <__stack+0x30d>
 c1e:	b2 14       	cp	r11, r2
 c20:	18 f4       	brcc	.+6      	; 0xc28 <__stack+0x329>
 c22:	2b 18       	sub	r2, r11
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <__stack+0x32b>
 c26:	98 2c       	mov	r9, r8
 c28:	21 2c       	mov	r2, r1
 c2a:	a4 fe       	sbrs	r10, 4
 c2c:	10 c0       	rjmp	.+32     	; 0xc4e <__stack+0x34f>
 c2e:	b6 01       	movw	r22, r12
 c30:	80 e3       	ldi	r24, 0x30	; 48
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 c38:	a2 fe       	sbrs	r10, 2
 c3a:	17 c0       	rjmp	.+46     	; 0xc6a <__stack+0x36b>
 c3c:	a1 fc       	sbrc	r10, 1
 c3e:	03 c0       	rjmp	.+6      	; 0xc46 <__stack+0x347>
 c40:	88 e7       	ldi	r24, 0x78	; 120
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <__stack+0x34b>
 c46:	88 e5       	ldi	r24, 0x58	; 88
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	b6 01       	movw	r22, r12
 c4c:	0c c0       	rjmp	.+24     	; 0xc66 <__stack+0x367>
 c4e:	8a 2d       	mov	r24, r10
 c50:	86 78       	andi	r24, 0x86	; 134
 c52:	59 f0       	breq	.+22     	; 0xc6a <__stack+0x36b>
 c54:	a1 fe       	sbrs	r10, 1
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <__stack+0x35d>
 c58:	8b e2       	ldi	r24, 0x2B	; 43
 c5a:	01 c0       	rjmp	.+2      	; 0xc5e <__stack+0x35f>
 c5c:	80 e2       	ldi	r24, 0x20	; 32
 c5e:	a7 fc       	sbrc	r10, 7
 c60:	8d e2       	ldi	r24, 0x2D	; 45
 c62:	b6 01       	movw	r22, r12
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 c6a:	89 14       	cp	r8, r9
 c6c:	38 f4       	brcc	.+14     	; 0xc7c <__stack+0x37d>
 c6e:	b6 01       	movw	r22, r12
 c70:	80 e3       	ldi	r24, 0x30	; 48
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 c78:	9a 94       	dec	r9
 c7a:	f7 cf       	rjmp	.-18     	; 0xc6a <__stack+0x36b>
 c7c:	8a 94       	dec	r8
 c7e:	f3 01       	movw	r30, r6
 c80:	e8 0d       	add	r30, r8
 c82:	f1 1d       	adc	r31, r1
 c84:	80 81       	ld	r24, Z
 c86:	b6 01       	movw	r22, r12
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 c8e:	81 10       	cpse	r8, r1
 c90:	f5 cf       	rjmp	.-22     	; 0xc7c <__stack+0x37d>
 c92:	22 20       	and	r2, r2
 c94:	09 f4       	brne	.+2      	; 0xc98 <__stack+0x399>
 c96:	42 ce       	rjmp	.-892    	; 0x91c <__stack+0x1d>
 c98:	b6 01       	movw	r22, r12
 c9a:	80 e2       	ldi	r24, 0x20	; 32
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 73 06 	call	0xce6	; 0xce6 <fputc>
 ca2:	2a 94       	dec	r2
 ca4:	f6 cf       	rjmp	.-20     	; 0xc92 <__stack+0x393>
 ca6:	f6 01       	movw	r30, r12
 ca8:	86 81       	ldd	r24, Z+6	; 0x06
 caa:	97 81       	ldd	r25, Z+7	; 0x07
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <__stack+0x3b3>
 cae:	8f ef       	ldi	r24, 0xFF	; 255
 cb0:	9f ef       	ldi	r25, 0xFF	; 255
 cb2:	2b 96       	adiw	r28, 0x0b	; 11
 cb4:	e2 e1       	ldi	r30, 0x12	; 18
 cb6:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__epilogue_restores__>

00000cba <strnlen_P>:
 cba:	fc 01       	movw	r30, r24
 cbc:	05 90       	lpm	r0, Z+
 cbe:	61 50       	subi	r22, 0x01	; 1
 cc0:	70 40       	sbci	r23, 0x00	; 0
 cc2:	01 10       	cpse	r0, r1
 cc4:	d8 f7       	brcc	.-10     	; 0xcbc <strnlen_P+0x2>
 cc6:	80 95       	com	r24
 cc8:	90 95       	com	r25
 cca:	8e 0f       	add	r24, r30
 ccc:	9f 1f       	adc	r25, r31
 cce:	08 95       	ret

00000cd0 <strnlen>:
 cd0:	fc 01       	movw	r30, r24
 cd2:	61 50       	subi	r22, 0x01	; 1
 cd4:	70 40       	sbci	r23, 0x00	; 0
 cd6:	01 90       	ld	r0, Z+
 cd8:	01 10       	cpse	r0, r1
 cda:	d8 f7       	brcc	.-10     	; 0xcd2 <strnlen+0x2>
 cdc:	80 95       	com	r24
 cde:	90 95       	com	r25
 ce0:	8e 0f       	add	r24, r30
 ce2:	9f 1f       	adc	r25, r31
 ce4:	08 95       	ret

00000ce6 <fputc>:
 ce6:	0f 93       	push	r16
 ce8:	1f 93       	push	r17
 cea:	cf 93       	push	r28
 cec:	df 93       	push	r29
 cee:	fb 01       	movw	r30, r22
 cf0:	23 81       	ldd	r18, Z+3	; 0x03
 cf2:	21 fd       	sbrc	r18, 1
 cf4:	03 c0       	rjmp	.+6      	; 0xcfc <fputc+0x16>
 cf6:	8f ef       	ldi	r24, 0xFF	; 255
 cf8:	9f ef       	ldi	r25, 0xFF	; 255
 cfa:	2c c0       	rjmp	.+88     	; 0xd54 <fputc+0x6e>
 cfc:	22 ff       	sbrs	r18, 2
 cfe:	16 c0       	rjmp	.+44     	; 0xd2c <fputc+0x46>
 d00:	46 81       	ldd	r20, Z+6	; 0x06
 d02:	57 81       	ldd	r21, Z+7	; 0x07
 d04:	24 81       	ldd	r18, Z+4	; 0x04
 d06:	35 81       	ldd	r19, Z+5	; 0x05
 d08:	42 17       	cp	r20, r18
 d0a:	53 07       	cpc	r21, r19
 d0c:	44 f4       	brge	.+16     	; 0xd1e <fputc+0x38>
 d0e:	a0 81       	ld	r26, Z
 d10:	b1 81       	ldd	r27, Z+1	; 0x01
 d12:	9d 01       	movw	r18, r26
 d14:	2f 5f       	subi	r18, 0xFF	; 255
 d16:	3f 4f       	sbci	r19, 0xFF	; 255
 d18:	31 83       	std	Z+1, r19	; 0x01
 d1a:	20 83       	st	Z, r18
 d1c:	8c 93       	st	X, r24
 d1e:	26 81       	ldd	r18, Z+6	; 0x06
 d20:	37 81       	ldd	r19, Z+7	; 0x07
 d22:	2f 5f       	subi	r18, 0xFF	; 255
 d24:	3f 4f       	sbci	r19, 0xFF	; 255
 d26:	37 83       	std	Z+7, r19	; 0x07
 d28:	26 83       	std	Z+6, r18	; 0x06
 d2a:	14 c0       	rjmp	.+40     	; 0xd54 <fputc+0x6e>
 d2c:	8b 01       	movw	r16, r22
 d2e:	ec 01       	movw	r28, r24
 d30:	fb 01       	movw	r30, r22
 d32:	00 84       	ldd	r0, Z+8	; 0x08
 d34:	f1 85       	ldd	r31, Z+9	; 0x09
 d36:	e0 2d       	mov	r30, r0
 d38:	09 95       	icall
 d3a:	89 2b       	or	r24, r25
 d3c:	e1 f6       	brne	.-72     	; 0xcf6 <fputc+0x10>
 d3e:	d8 01       	movw	r26, r16
 d40:	16 96       	adiw	r26, 0x06	; 6
 d42:	8d 91       	ld	r24, X+
 d44:	9c 91       	ld	r25, X
 d46:	17 97       	sbiw	r26, 0x07	; 7
 d48:	01 96       	adiw	r24, 0x01	; 1
 d4a:	17 96       	adiw	r26, 0x07	; 7
 d4c:	9c 93       	st	X, r25
 d4e:	8e 93       	st	-X, r24
 d50:	16 97       	sbiw	r26, 0x06	; 6
 d52:	ce 01       	movw	r24, r28
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	1f 91       	pop	r17
 d5a:	0f 91       	pop	r16
 d5c:	08 95       	ret

00000d5e <__ultoa_invert>:
 d5e:	fa 01       	movw	r30, r20
 d60:	aa 27       	eor	r26, r26
 d62:	28 30       	cpi	r18, 0x08	; 8
 d64:	51 f1       	breq	.+84     	; 0xdba <__ultoa_invert+0x5c>
 d66:	20 31       	cpi	r18, 0x10	; 16
 d68:	81 f1       	breq	.+96     	; 0xdca <__ultoa_invert+0x6c>
 d6a:	e8 94       	clt
 d6c:	6f 93       	push	r22
 d6e:	6e 7f       	andi	r22, 0xFE	; 254
 d70:	6e 5f       	subi	r22, 0xFE	; 254
 d72:	7f 4f       	sbci	r23, 0xFF	; 255
 d74:	8f 4f       	sbci	r24, 0xFF	; 255
 d76:	9f 4f       	sbci	r25, 0xFF	; 255
 d78:	af 4f       	sbci	r26, 0xFF	; 255
 d7a:	b1 e0       	ldi	r27, 0x01	; 1
 d7c:	3e d0       	rcall	.+124    	; 0xdfa <__ultoa_invert+0x9c>
 d7e:	b4 e0       	ldi	r27, 0x04	; 4
 d80:	3c d0       	rcall	.+120    	; 0xdfa <__ultoa_invert+0x9c>
 d82:	67 0f       	add	r22, r23
 d84:	78 1f       	adc	r23, r24
 d86:	89 1f       	adc	r24, r25
 d88:	9a 1f       	adc	r25, r26
 d8a:	a1 1d       	adc	r26, r1
 d8c:	68 0f       	add	r22, r24
 d8e:	79 1f       	adc	r23, r25
 d90:	8a 1f       	adc	r24, r26
 d92:	91 1d       	adc	r25, r1
 d94:	a1 1d       	adc	r26, r1
 d96:	6a 0f       	add	r22, r26
 d98:	71 1d       	adc	r23, r1
 d9a:	81 1d       	adc	r24, r1
 d9c:	91 1d       	adc	r25, r1
 d9e:	a1 1d       	adc	r26, r1
 da0:	20 d0       	rcall	.+64     	; 0xde2 <__ultoa_invert+0x84>
 da2:	09 f4       	brne	.+2      	; 0xda6 <__ultoa_invert+0x48>
 da4:	68 94       	set
 da6:	3f 91       	pop	r19
 da8:	2a e0       	ldi	r18, 0x0A	; 10
 daa:	26 9f       	mul	r18, r22
 dac:	11 24       	eor	r1, r1
 dae:	30 19       	sub	r19, r0
 db0:	30 5d       	subi	r19, 0xD0	; 208
 db2:	31 93       	st	Z+, r19
 db4:	de f6       	brtc	.-74     	; 0xd6c <__ultoa_invert+0xe>
 db6:	cf 01       	movw	r24, r30
 db8:	08 95       	ret
 dba:	46 2f       	mov	r20, r22
 dbc:	47 70       	andi	r20, 0x07	; 7
 dbe:	40 5d       	subi	r20, 0xD0	; 208
 dc0:	41 93       	st	Z+, r20
 dc2:	b3 e0       	ldi	r27, 0x03	; 3
 dc4:	0f d0       	rcall	.+30     	; 0xde4 <__ultoa_invert+0x86>
 dc6:	c9 f7       	brne	.-14     	; 0xdba <__ultoa_invert+0x5c>
 dc8:	f6 cf       	rjmp	.-20     	; 0xdb6 <__ultoa_invert+0x58>
 dca:	46 2f       	mov	r20, r22
 dcc:	4f 70       	andi	r20, 0x0F	; 15
 dce:	40 5d       	subi	r20, 0xD0	; 208
 dd0:	4a 33       	cpi	r20, 0x3A	; 58
 dd2:	18 f0       	brcs	.+6      	; 0xdda <__ultoa_invert+0x7c>
 dd4:	49 5d       	subi	r20, 0xD9	; 217
 dd6:	31 fd       	sbrc	r19, 1
 dd8:	40 52       	subi	r20, 0x20	; 32
 dda:	41 93       	st	Z+, r20
 ddc:	02 d0       	rcall	.+4      	; 0xde2 <__ultoa_invert+0x84>
 dde:	a9 f7       	brne	.-22     	; 0xdca <__ultoa_invert+0x6c>
 de0:	ea cf       	rjmp	.-44     	; 0xdb6 <__ultoa_invert+0x58>
 de2:	b4 e0       	ldi	r27, 0x04	; 4
 de4:	a6 95       	lsr	r26
 de6:	97 95       	ror	r25
 de8:	87 95       	ror	r24
 dea:	77 95       	ror	r23
 dec:	67 95       	ror	r22
 dee:	ba 95       	dec	r27
 df0:	c9 f7       	brne	.-14     	; 0xde4 <__ultoa_invert+0x86>
 df2:	00 97       	sbiw	r24, 0x00	; 0
 df4:	61 05       	cpc	r22, r1
 df6:	71 05       	cpc	r23, r1
 df8:	08 95       	ret
 dfa:	9b 01       	movw	r18, r22
 dfc:	ac 01       	movw	r20, r24
 dfe:	0a 2e       	mov	r0, r26
 e00:	06 94       	lsr	r0
 e02:	57 95       	ror	r21
 e04:	47 95       	ror	r20
 e06:	37 95       	ror	r19
 e08:	27 95       	ror	r18
 e0a:	ba 95       	dec	r27
 e0c:	c9 f7       	brne	.-14     	; 0xe00 <__ultoa_invert+0xa2>
 e0e:	62 0f       	add	r22, r18
 e10:	73 1f       	adc	r23, r19
 e12:	84 1f       	adc	r24, r20
 e14:	95 1f       	adc	r25, r21
 e16:	a0 1d       	adc	r26, r0
 e18:	08 95       	ret

00000e1a <__prologue_saves__>:
 e1a:	2f 92       	push	r2
 e1c:	3f 92       	push	r3
 e1e:	4f 92       	push	r4
 e20:	5f 92       	push	r5
 e22:	6f 92       	push	r6
 e24:	7f 92       	push	r7
 e26:	8f 92       	push	r8
 e28:	9f 92       	push	r9
 e2a:	af 92       	push	r10
 e2c:	bf 92       	push	r11
 e2e:	cf 92       	push	r12
 e30:	df 92       	push	r13
 e32:	ef 92       	push	r14
 e34:	ff 92       	push	r15
 e36:	0f 93       	push	r16
 e38:	1f 93       	push	r17
 e3a:	cf 93       	push	r28
 e3c:	df 93       	push	r29
 e3e:	cd b7       	in	r28, 0x3d	; 61
 e40:	de b7       	in	r29, 0x3e	; 62
 e42:	ca 1b       	sub	r28, r26
 e44:	db 0b       	sbc	r29, r27
 e46:	0f b6       	in	r0, 0x3f	; 63
 e48:	f8 94       	cli
 e4a:	de bf       	out	0x3e, r29	; 62
 e4c:	0f be       	out	0x3f, r0	; 63
 e4e:	cd bf       	out	0x3d, r28	; 61
 e50:	09 94       	ijmp

00000e52 <__epilogue_restores__>:
 e52:	2a 88       	ldd	r2, Y+18	; 0x12
 e54:	39 88       	ldd	r3, Y+17	; 0x11
 e56:	48 88       	ldd	r4, Y+16	; 0x10
 e58:	5f 84       	ldd	r5, Y+15	; 0x0f
 e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
 e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
 e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
 e60:	9b 84       	ldd	r9, Y+11	; 0x0b
 e62:	aa 84       	ldd	r10, Y+10	; 0x0a
 e64:	b9 84       	ldd	r11, Y+9	; 0x09
 e66:	c8 84       	ldd	r12, Y+8	; 0x08
 e68:	df 80       	ldd	r13, Y+7	; 0x07
 e6a:	ee 80       	ldd	r14, Y+6	; 0x06
 e6c:	fd 80       	ldd	r15, Y+5	; 0x05
 e6e:	0c 81       	ldd	r16, Y+4	; 0x04
 e70:	1b 81       	ldd	r17, Y+3	; 0x03
 e72:	aa 81       	ldd	r26, Y+2	; 0x02
 e74:	b9 81       	ldd	r27, Y+1	; 0x01
 e76:	ce 0f       	add	r28, r30
 e78:	d1 1d       	adc	r29, r1
 e7a:	0f b6       	in	r0, 0x3f	; 63
 e7c:	f8 94       	cli
 e7e:	de bf       	out	0x3e, r29	; 62
 e80:	0f be       	out	0x3f, r0	; 63
 e82:	cd bf       	out	0x3d, r28	; 61
 e84:	ed 01       	movw	r28, r26
 e86:	08 95       	ret

00000e88 <_exit>:
 e88:	f8 94       	cli

00000e8a <__stop_program>:
 e8a:	ff cf       	rjmp	.-2      	; 0xe8a <__stop_program>
