
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800128  00800128  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199c  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba3  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000921  00000000  00000000  00002b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00003470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf0  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00004765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  9e:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
 116:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ddr_register_>
 11a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
 128:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <port_register_>
 12c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
 13a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <port_register_>
 13e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <ddr_register_+0x1>
 14c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ddr_register_>
    port_register_ = port_register;
 150:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <port_register_+0x1>
 154:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <port_register_>
    pin_register_ = pin_register;
 158:	50 93 2a 01 	sts	0x012A, r21	; 0x80012a <pin_register_+0x1>
 15c:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__data_end>
    DebugLedTurnOn();
 164:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnOn>
 168:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnGreen>
 172:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <ClearPendingSpiInterrupt_Implementation>:
uint8_t SpiMasterRead(void)
{
    uint8_t garbage = 0xFF;
    SpiMasterWrite(garbage);
    return ReadSpiDataRegister();
}
 17a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ReadSpiStatusRegister>
 17e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ReadSpiStatusRegister+0x1>
 182:	09 95       	icall
 184:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiDataRegister>
 188:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiDataRegister+0x1>
 18c:	09 95       	icall
 18e:	08 95       	ret

00000190 <ReadSpiStatusRegister_Implementation>:
 190:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <Spi_spsr>
 194:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <Spi_spsr+0x1>
 198:	80 81       	ld	r24, Z
 19a:	08 95       	ret

0000019c <ReadSpiDataRegister_Implementation>:
 19c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <Spi_spdr>
 1a0:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <Spi_spdr+0x1>
 1a4:	80 81       	ld	r24, Z
 1a6:	08 95       	ret

000001a8 <SpiMasterOpenSpi_Implementation>:
 1a8:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Spi_Ss>
 1ac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Spi_port>
 1b0:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Spi_port+0x1>
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1b8:	08 95       	ret

000001ba <SpiMasterCloseSpi_Implementation>:
 1ba:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Spi_Ss>
 1be:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Spi_port>
 1c2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Spi_port+0x1>
 1c6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1ca:	08 95       	ret

000001cc <SpiTransferIsDone_Implementation>:
 1cc:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_InterruptFlag>
 1d0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Spi_spsr>
 1d4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Spi_spsr+0x1>
 1d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 1dc:	08 95       	ret

000001de <SpiResponseIsReady_Implementation>:
 1de:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <Spi_Miso>
 1e2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Spi_pin>
 1e6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Spi_pin+0x1>
 1ea:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 1ee:	08 95       	ret

000001f0 <SpiMasterInit>:
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SpiMasterCloseSpi_Implementation>
 1fa:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <Spi_Miso>
 1fe:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <Spi_ddr>
 202:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <Spi_ddr+0x1>
 206:	61 2f       	mov	r22, r17
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 20e:	61 2f       	mov	r22, r17
 210:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Spi_port>
 214:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Spi_port+0x1>
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 21c:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Spi_Ss>
 220:	ce 01       	movw	r24, r28
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 226:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Spi_Mosi>
 22a:	ce 01       	movw	r24, r28
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 230:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Spi_Sck>
 234:	ce 01       	movw	r24, r28
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 23a:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <Spi_spcr>
 23e:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <Spi_spcr+0x1>
 242:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <Spi_MasterSlaveSelect>
 246:	ce 01       	movw	r24, r28
 248:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 24c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Spi_ClockRateBit0>
 250:	ce 01       	movw	r24, r28
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 256:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Spi_ClockRateBit1>
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 260:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Spi_DoubleClockRate>
 264:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Spi_spsr>
 268:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Spi_spsr+0x1>
 26c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 270:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Spi_Enable>
 274:	ce 01       	movw	r24, r28
 276:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 27a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <ClearPendingSpiInterrupt>
 27e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <ClearPendingSpiInterrupt+0x1>
 282:	09 95       	icall
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	08 95       	ret

0000028c <SpiMasterWrite>:
 28c:	cf 93       	push	r28
 28e:	c8 2f       	mov	r28, r24
 290:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <SpiMasterOpenSpi>
 294:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <SpiMasterOpenSpi+0x1>
 298:	09 95       	icall
 29a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <Spi_spdr>
 29e:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <Spi_spdr+0x1>
 2a2:	c0 83       	st	Z, r28
 2a4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <SpiTransferIsDone>
 2a8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <SpiTransferIsDone+0x1>
 2ac:	09 95       	icall
 2ae:	88 23       	and	r24, r24
 2b0:	c9 f3       	breq	.-14     	; 0x2a4 <SpiMasterWrite+0x18>
 2b2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <SpiMasterCloseSpi>
 2b6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <SpiMasterCloseSpi+0x1>
 2ba:	09 95       	icall
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 2c0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <SpiResponseIsReady>
 2c4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <SpiResponseIsReady+0x1>
 2c8:	09 95       	icall
 2ca:	88 23       	and	r24, r24
 2cc:	c9 f3       	breq	.-14     	; 0x2c0 <SpiMasterWaitForResponse>
}
 2ce:	08 95       	ret

000002d0 <SetupDebugLed>:
void test_SpiMaster(void)
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-03 */
    SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03
 2d0:	23 e0       	ldi	r18, 0x03	; 3
 2d2:	46 e2       	ldi	r20, 0x26	; 38
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	68 e2       	ldi	r22, 0x28	; 40
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	87 e2       	ldi	r24, 0x27	; 39
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 2e2:	08 95       	ret

000002e4 <SpiMaster_detects_when_slave_is_ready_to_send_data>:
 2e4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SpiMasterInit>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 46 01 	call	0x28c	; 0x28c <SpiMasterWrite>
 2ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <SpiMasterWaitForResponse>
 2f2:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <SpiMaster_detects_when_slave_is_ready_to_send_data+0x12>

000002f8 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 2f8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <SetupDebugLed>
void test_SpiMaster(void)
{
    /* SpiMaster_sends_a_byte_and_slave_debug_leds_show_lower_nibble(); // PASS 2018-07-31 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-03 */
    SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03
 2fc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <SpiMaster_detects_when_slave_is_ready_to_send_data>

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
