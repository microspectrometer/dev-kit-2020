
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000b2c  00000bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800152  00800152  00000c12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000512b  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001260  00000000  00000000  00006067  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f49  00000000  00000000  000072c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000868  00000000  00000000  00009210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013cb  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e13  00000000  00000000  0000ae43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  0000ec56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 37       	cpi	r26, 0x74	; 116
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 05 	call	0xae0	; 0xae0 <main>
  9e:	0c 94 94 05 	jmp	0xb28	; 0xb28 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Ft1248_port>
 14a:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Ft1248_port>
 16e:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Ft1248_port>
 190:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Ft1248_port>
 1b2:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <FtMiosio_ddr>
 1d6:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <FtMiosio_ddr>
 1e4:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Ft1248_pin>
 1f0:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <FtMiosio_pin>
 216:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <FtMiosio_port>
 222:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <FtMiosio_port>
 272:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Ft1248_ddr>
 282:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <Ft1248_port>
 2a8:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <FtMiosio_ddr>
 2b6:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <FtMiosio_port>
 2c0:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <CmdLedRed>:
/* =====[ Status ]===== */
bool UsbWriteStatusOk(void)
{
    uint8_t const StatusOk = 0;
    return UsbWrite(&StatusOk,1);
}
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	1f 92       	push	r1
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	e0 90 4f 01 	lds	r14, 0x014F	; 0x80014f <BiColorLed_port>
 320:	f0 90 50 01 	lds	r15, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 324:	f7 01       	movw	r30, r14
 326:	80 81       	ld	r24, Z
 328:	01 e0       	ldi	r16, 0x01	; 1
 32a:	10 e0       	ldi	r17, 0x00	; 0
 32c:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 330:	02 c0       	rjmp	.+4      	; 0x336 <CmdLedRed+0x2c>
 332:	00 0f       	add	r16, r16
 334:	11 1f       	adc	r17, r17
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <CmdLedRed+0x28>
 33a:	80 2b       	or	r24, r16
 33c:	80 83       	st	Z, r24
 33e:	19 82       	std	Y+1, r1	; 0x01
 340:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 344:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 348:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 34c:	09 95       	icall
 34e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 352:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 356:	09 95       	icall
 358:	88 23       	and	r24, r24
 35a:	a1 f0       	breq	.+40     	; 0x384 <CmdLedRed+0x7a>
 35c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 360:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	09 95       	icall
 36a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 36e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 372:	09 95       	icall
 374:	0f 90       	pop	r0
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	08 95       	ret
 384:	f7 01       	movw	r30, r14
 386:	80 81       	ld	r24, Z
 388:	08 2b       	or	r16, r24
 38a:	00 83       	st	Z, r16
 38c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 390:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 394:	09 95       	icall
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	08 95       	ret

000003a6 <CmdLedGreen>:
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	1f 92       	push	r1
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	e0 90 4f 01 	lds	r14, 0x014F	; 0x80014f <BiColorLed_port>
 3bc:	f0 90 50 01 	lds	r15, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 3c0:	f7 01       	movw	r30, r14
 3c2:	80 81       	ld	r24, Z
 3c4:	01 e0       	ldi	r16, 0x01	; 1
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <CmdLedGreen+0x2c>
 3ce:	00 0f       	add	r16, r16
 3d0:	11 1f       	adc	r17, r17
 3d2:	0a 94       	dec	r0
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <CmdLedGreen+0x28>
 3d6:	90 2f       	mov	r25, r16
 3d8:	90 95       	com	r25
 3da:	89 23       	and	r24, r25
 3dc:	80 83       	st	Z, r24
 3de:	19 82       	std	Y+1, r1	; 0x01
 3e0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3e4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3e8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 3ec:	09 95       	icall
 3ee:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3f2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3f6:	09 95       	icall
 3f8:	88 23       	and	r24, r24
 3fa:	a1 f0       	breq	.+40     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3fc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 400:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	09 95       	icall
 40a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 40e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 412:	09 95       	icall
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	1f 91       	pop	r17
 41c:	0f 91       	pop	r16
 41e:	ff 90       	pop	r15
 420:	ef 90       	pop	r14
 422:	08 95       	ret
 424:	f7 01       	movw	r30, r14
 426:	80 81       	ld	r24, Z
 428:	08 2b       	or	r16, r24
 42a:	00 83       	st	Z, r16
 42c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 430:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 434:	09 95       	icall
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <UsbInit>:
 446:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000044a <LookupCmd>:
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	48 f4       	brcc	.+18     	; 0x460 <LookupCmd+0x16>
 44e:	e8 2f       	mov	r30, r24
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	ea 5d       	subi	r30, 0xDA	; 218
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	80 81       	ld	r24, Z
 45c:	91 81       	ldd	r25, Z+1	; 0x01
 45e:	08 95       	ret
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	08 95       	ret

00000466 <CfgBytesAreValid>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	00 d0       	rcall	.+0      	; 0x46c <CfgBytesAreValid+0x6>
 46c:	00 d0       	rcall	.+0      	; 0x46e <CfgBytesAreValid+0x8>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	fc 01       	movw	r30, r24
 474:	30 81       	ld	r19, Z
 476:	83 2f       	mov	r24, r19
 478:	8f 70       	andi	r24, 0x0F	; 15
 47a:	21 81       	ldd	r18, Z+1	; 0x01
 47c:	81 11       	cpse	r24, r1
 47e:	09 c0       	rjmp	.+18     	; 0x492 <CfgBytesAreValid+0x2c>
 480:	21 11       	cpse	r18, r1
 482:	07 c0       	rjmp	.+14     	; 0x492 <CfgBytesAreValid+0x2c>
 484:	92 81       	ldd	r25, Z+2	; 0x02
 486:	91 11       	cpse	r25, r1
 488:	04 c0       	rjmp	.+8      	; 0x492 <CfgBytesAreValid+0x2c>
 48a:	83 81       	ldd	r24, Z+3	; 0x03
 48c:	88 7f       	andi	r24, 0xF8	; 248
 48e:	09 f4       	brne	.+2      	; 0x492 <CfgBytesAreValid+0x2c>
 490:	a2 c0       	rjmp	.+324    	; 0x5d6 <CfgBytesAreValid+0x170>
 492:	42 2f       	mov	r20, r18
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	40 95       	com	r20
 498:	50 95       	com	r21
 49a:	ca 01       	movw	r24, r20
 49c:	84 78       	andi	r24, 0x84	; 132
 49e:	99 27       	eor	r25, r25
 4a0:	89 2b       	or	r24, r25
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <CfgBytesAreValid+0x40>
 4a4:	a9 c0       	rjmp	.+338    	; 0x5f8 <CfgBytesAreValid+0x192>
 4a6:	92 81       	ldd	r25, Z+2	; 0x02
 4a8:	69 2f       	mov	r22, r25
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	60 95       	com	r22
 4ae:	70 95       	com	r23
 4b0:	61 72       	andi	r22, 0x21	; 33
 4b2:	77 27       	eor	r23, r23
 4b4:	67 2b       	or	r22, r23
 4b6:	09 f0       	breq	.+2      	; 0x4ba <CfgBytesAreValid+0x54>
 4b8:	9f c0       	rjmp	.+318    	; 0x5f8 <CfgBytesAreValid+0x192>
 4ba:	83 81       	ldd	r24, Z+3	; 0x03
 4bc:	83 fb       	bst	r24, 3
 4be:	88 27       	eor	r24, r24
 4c0:	80 f9       	bld	r24, 0
 4c2:	62 2f       	mov	r22, r18
 4c4:	64 78       	andi	r22, 0x84	; 132
 4c6:	09 f0       	breq	.+2      	; 0x4ca <CfgBytesAreValid+0x64>
 4c8:	84 c0       	rjmp	.+264    	; 0x5d2 <CfgBytesAreValid+0x16c>
 4ca:	69 2f       	mov	r22, r25
 4cc:	61 72       	andi	r22, 0x21	; 33
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <CfgBytesAreValid+0x6c>
 4d0:	80 c0       	rjmp	.+256    	; 0x5d2 <CfgBytesAreValid+0x16c>
 4d2:	63 81       	ldd	r22, Z+3	; 0x03
 4d4:	63 fd       	sbrc	r22, 3
 4d6:	7d c0       	rjmp	.+250    	; 0x5d2 <CfgBytesAreValid+0x16c>
 4d8:	81 11       	cpse	r24, r1
 4da:	7d c0       	rjmp	.+250    	; 0x5d6 <CfgBytesAreValid+0x170>
 4dc:	63 2f       	mov	r22, r19
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	db 01       	movw	r26, r22
 4e2:	a0 95       	com	r26
 4e4:	b0 95       	com	r27
 4e6:	30 ff       	sbrs	r19, 0
 4e8:	8d c0       	rjmp	.+282    	; 0x604 <CfgBytesAreValid+0x19e>
 4ea:	43 fd       	sbrc	r20, 3
 4ec:	8b c0       	rjmp	.+278    	; 0x604 <CfgBytesAreValid+0x19e>
 4ee:	69 2f       	mov	r22, r25
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	60 95       	com	r22
 4f4:	70 95       	com	r23
 4f6:	62 74       	andi	r22, 0x42	; 66
 4f8:	77 27       	eor	r23, r23
 4fa:	67 2b       	or	r22, r23
 4fc:	09 f0       	breq	.+2      	; 0x500 <CfgBytesAreValid+0x9a>
 4fe:	82 c0       	rjmp	.+260    	; 0x604 <CfgBytesAreValid+0x19e>
 500:	83 81       	ldd	r24, Z+3	; 0x03
 502:	82 95       	swap	r24
 504:	81 70       	andi	r24, 0x01	; 1
 506:	30 fd       	sbrc	r19, 0
 508:	6e c0       	rjmp	.+220    	; 0x5e6 <CfgBytesAreValid+0x180>
 50a:	23 fd       	sbrc	r18, 3
 50c:	6c c0       	rjmp	.+216    	; 0x5e6 <CfgBytesAreValid+0x180>
 50e:	69 2f       	mov	r22, r25
 510:	62 74       	andi	r22, 0x42	; 66
 512:	09 f0       	breq	.+2      	; 0x516 <CfgBytesAreValid+0xb0>
 514:	68 c0       	rjmp	.+208    	; 0x5e6 <CfgBytesAreValid+0x180>
 516:	63 81       	ldd	r22, Z+3	; 0x03
 518:	64 fd       	sbrc	r22, 4
 51a:	65 c0       	rjmp	.+202    	; 0x5e6 <CfgBytesAreValid+0x180>
 51c:	81 11       	cpse	r24, r1
 51e:	5b c0       	rjmp	.+182    	; 0x5d6 <CfgBytesAreValid+0x170>
 520:	a1 fd       	sbrc	r26, 1
 522:	74 c0       	rjmp	.+232    	; 0x60c <CfgBytesAreValid+0x1a6>
 524:	44 fd       	sbrc	r20, 4
 526:	72 c0       	rjmp	.+228    	; 0x60c <CfgBytesAreValid+0x1a6>
 528:	69 2f       	mov	r22, r25
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	60 95       	com	r22
 52e:	70 95       	com	r23
 530:	64 78       	andi	r22, 0x84	; 132
 532:	77 27       	eor	r23, r23
 534:	67 2b       	or	r22, r23
 536:	09 f0       	breq	.+2      	; 0x53a <CfgBytesAreValid+0xd4>
 538:	69 c0       	rjmp	.+210    	; 0x60c <CfgBytesAreValid+0x1a6>
 53a:	83 81       	ldd	r24, Z+3	; 0x03
 53c:	85 fb       	bst	r24, 5
 53e:	88 27       	eor	r24, r24
 540:	80 f9       	bld	r24, 0
 542:	31 fd       	sbrc	r19, 1
 544:	53 c0       	rjmp	.+166    	; 0x5ec <CfgBytesAreValid+0x186>
 546:	24 fd       	sbrc	r18, 4
 548:	51 c0       	rjmp	.+162    	; 0x5ec <CfgBytesAreValid+0x186>
 54a:	69 2f       	mov	r22, r25
 54c:	64 78       	andi	r22, 0x84	; 132
 54e:	09 f0       	breq	.+2      	; 0x552 <CfgBytesAreValid+0xec>
 550:	4d c0       	rjmp	.+154    	; 0x5ec <CfgBytesAreValid+0x186>
 552:	63 81       	ldd	r22, Z+3	; 0x03
 554:	65 fd       	sbrc	r22, 5
 556:	4a c0       	rjmp	.+148    	; 0x5ec <CfgBytesAreValid+0x186>
 558:	81 11       	cpse	r24, r1
 55a:	3d c0       	rjmp	.+122    	; 0x5d6 <CfgBytesAreValid+0x170>
 55c:	a2 fd       	sbrc	r26, 2
 55e:	5a c0       	rjmp	.+180    	; 0x614 <CfgBytesAreValid+0x1ae>
 560:	ba 01       	movw	r22, r20
 562:	61 72       	andi	r22, 0x21	; 33
 564:	77 27       	eor	r23, r23
 566:	67 2b       	or	r22, r23
 568:	09 f0       	breq	.+2      	; 0x56c <CfgBytesAreValid+0x106>
 56a:	54 c0       	rjmp	.+168    	; 0x614 <CfgBytesAreValid+0x1ae>
 56c:	69 2f       	mov	r22, r25
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	60 95       	com	r22
 572:	70 95       	com	r23
 574:	63 fd       	sbrc	r22, 3
 576:	4e c0       	rjmp	.+156    	; 0x614 <CfgBytesAreValid+0x1ae>
 578:	83 81       	ldd	r24, Z+3	; 0x03
 57a:	86 fb       	bst	r24, 6
 57c:	88 27       	eor	r24, r24
 57e:	80 f9       	bld	r24, 0
 580:	32 fd       	sbrc	r19, 2
 582:	37 c0       	rjmp	.+110    	; 0x5f2 <CfgBytesAreValid+0x18c>
 584:	62 2f       	mov	r22, r18
 586:	61 72       	andi	r22, 0x21	; 33
 588:	a1 f5       	brne	.+104    	; 0x5f2 <CfgBytesAreValid+0x18c>
 58a:	93 fd       	sbrc	r25, 3
 58c:	32 c0       	rjmp	.+100    	; 0x5f2 <CfgBytesAreValid+0x18c>
 58e:	63 81       	ldd	r22, Z+3	; 0x03
 590:	66 fd       	sbrc	r22, 6
 592:	2f c0       	rjmp	.+94     	; 0x5f2 <CfgBytesAreValid+0x18c>
 594:	81 11       	cpse	r24, r1
 596:	1f c0       	rjmp	.+62     	; 0x5d6 <CfgBytesAreValid+0x170>
 598:	a3 fd       	sbrc	r26, 3
 59a:	40 c0       	rjmp	.+128    	; 0x61c <CfgBytesAreValid+0x1b6>
 59c:	42 74       	andi	r20, 0x42	; 66
 59e:	55 27       	eor	r21, r21
 5a0:	45 2b       	or	r20, r21
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <CfgBytesAreValid+0x140>
 5a4:	3b c0       	rjmp	.+118    	; 0x61c <CfgBytesAreValid+0x1b6>
 5a6:	49 2f       	mov	r20, r25
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	40 95       	com	r20
 5ac:	50 95       	com	r21
 5ae:	44 fd       	sbrc	r20, 4
 5b0:	35 c0       	rjmp	.+106    	; 0x61c <CfgBytesAreValid+0x1b6>
 5b2:	83 81       	ldd	r24, Z+3	; 0x03
 5b4:	88 1f       	adc	r24, r24
 5b6:	88 27       	eor	r24, r24
 5b8:	88 1f       	adc	r24, r24
 5ba:	33 fd       	sbrc	r19, 3
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <CfgBytesAreValid+0x172>
 5be:	22 74       	andi	r18, 0x42	; 66
 5c0:	59 f4       	brne	.+22     	; 0x5d8 <CfgBytesAreValid+0x172>
 5c2:	94 fd       	sbrc	r25, 4
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <CfgBytesAreValid+0x172>
 5c6:	93 81       	ldd	r25, Z+3	; 0x03
 5c8:	97 fd       	sbrc	r25, 7
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <CfgBytesAreValid+0x172>
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	89 27       	eor	r24, r25
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <CfgBytesAreValid+0x172>
 5d2:	81 11       	cpse	r24, r1
 5d4:	83 cf       	rjmp	.-250    	; 0x4dc <CfgBytesAreValid+0x76>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0f 90       	pop	r0
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret
 5e6:	81 11       	cpse	r24, r1
 5e8:	9b cf       	rjmp	.-202    	; 0x520 <CfgBytesAreValid+0xba>
 5ea:	f5 cf       	rjmp	.-22     	; 0x5d6 <CfgBytesAreValid+0x170>
 5ec:	81 11       	cpse	r24, r1
 5ee:	b6 cf       	rjmp	.-148    	; 0x55c <CfgBytesAreValid+0xf6>
 5f0:	f2 cf       	rjmp	.-28     	; 0x5d6 <CfgBytesAreValid+0x170>
 5f2:	81 11       	cpse	r24, r1
 5f4:	d1 cf       	rjmp	.-94     	; 0x598 <CfgBytesAreValid+0x132>
 5f6:	ef cf       	rjmp	.-34     	; 0x5d6 <CfgBytesAreValid+0x170>
 5f8:	82 2f       	mov	r24, r18
 5fa:	84 78       	andi	r24, 0x84	; 132
 5fc:	61 f7       	brne	.-40     	; 0x5d6 <CfgBytesAreValid+0x170>
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	92 81       	ldd	r25, Z+2	; 0x02
 602:	63 cf       	rjmp	.-314    	; 0x4ca <CfgBytesAreValid+0x64>
 604:	30 fd       	sbrc	r19, 0
 606:	e7 cf       	rjmp	.-50     	; 0x5d6 <CfgBytesAreValid+0x170>
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	7f cf       	rjmp	.-258    	; 0x50a <CfgBytesAreValid+0xa4>
 60c:	31 fd       	sbrc	r19, 1
 60e:	e3 cf       	rjmp	.-58     	; 0x5d6 <CfgBytesAreValid+0x170>
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	99 cf       	rjmp	.-206    	; 0x546 <CfgBytesAreValid+0xe0>
 614:	32 fd       	sbrc	r19, 2
 616:	df cf       	rjmp	.-66     	; 0x5d6 <CfgBytesAreValid+0x170>
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	b4 cf       	rjmp	.-152    	; 0x584 <CfgBytesAreValid+0x11e>
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	cd cf       	rjmp	.-102    	; 0x5ba <CfgBytesAreValid+0x154>

00000620 <CmdCfgLis>:
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	00 d0       	rcall	.+0      	; 0x62e <CmdCfgLis+0xe>
 62e:	00 d0       	rcall	.+0      	; 0x630 <CmdCfgLis+0x10>
 630:	00 d0       	rcall	.+0      	; 0x632 <CmdCfgLis+0x12>
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 63a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 63e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 642:	09 95       	icall
 644:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 648:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 64c:	09 95       	icall
 64e:	88 23       	and	r24, r24
 650:	09 f4       	brne	.+2      	; 0x654 <CmdCfgLis+0x34>
 652:	ce c0       	rjmp	.+412    	; 0x7f0 <CmdCfgLis+0x1d0>
 654:	00 e0       	ldi	r16, 0x00	; 0
 656:	10 e0       	ldi	r17, 0x00	; 0
 658:	ce 01       	movw	r24, r28
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	7c 01       	movw	r14, r24
 65e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 662:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 666:	c7 01       	movw	r24, r14
 668:	80 0f       	add	r24, r16
 66a:	91 1f       	adc	r25, r17
 66c:	09 95       	icall
 66e:	81 11       	cpse	r24, r1
 670:	7e c0       	rjmp	.+252    	; 0x76e <CmdCfgLis+0x14e>
 672:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 676:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 67a:	09 95       	icall
 67c:	8d ef       	ldi	r24, 0xFD	; 253
 67e:	8d 83       	std	Y+5, r24	; 0x05
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	8e 83       	std	Y+6, r24	; 0x06
 684:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 688:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 68c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 690:	09 95       	icall
 692:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 696:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 69a:	09 95       	icall
 69c:	88 23       	and	r24, r24
 69e:	09 f4       	brne	.+2      	; 0x6a2 <CmdCfgLis+0x82>
 6a0:	d6 c0       	rjmp	.+428    	; 0x84e <CmdCfgLis+0x22e>
 6a2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6a6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 6aa:	ce 01       	movw	r24, r28
 6ac:	05 96       	adiw	r24, 0x05	; 5
 6ae:	09 95       	icall
 6b0:	88 23       	and	r24, r24
 6b2:	39 f0       	breq	.+14     	; 0x6c2 <CmdCfgLis+0xa2>
 6b4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6b8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 6bc:	ce 01       	movw	r24, r28
 6be:	06 96       	adiw	r24, 0x06	; 6
 6c0:	09 95       	icall
 6c2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 6c6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 6ca:	09 95       	icall
 6cc:	c7 01       	movw	r24, r14
 6ce:	0e 94 33 02 	call	0x466	; 0x466 <CfgBytesAreValid>
 6d2:	88 23       	and	r24, r24
 6d4:	09 f4       	brne	.+2      	; 0x6d8 <CmdCfgLis+0xb8>
 6d6:	68 c0       	rjmp	.+208    	; 0x7a8 <CmdCfgLis+0x188>
 6d8:	1d 82       	std	Y+5, r1	; 0x05
 6da:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <FtCmd_Write>
 6de:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 6e2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 6e6:	81 2f       	mov	r24, r17
 6e8:	09 95       	icall
 6ea:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 6ee:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 6f2:	09 95       	icall
 6f4:	88 23       	and	r24, r24
 6f6:	09 f4       	brne	.+2      	; 0x6fa <CmdCfgLis+0xda>
 6f8:	94 c0       	rjmp	.+296    	; 0x822 <CmdCfgLis+0x202>
 6fa:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6fe:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 702:	ce 01       	movw	r24, r28
 704:	05 96       	adiw	r24, 0x05	; 5
 706:	09 95       	icall
 708:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 70c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 710:	09 95       	icall
 712:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 716:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 71a:	81 2f       	mov	r24, r17
 71c:	09 95       	icall
 71e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 722:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 726:	09 95       	icall
 728:	88 23       	and	r24, r24
 72a:	41 f1       	breq	.+80     	; 0x77c <CmdCfgLis+0x15c>
 72c:	c7 01       	movw	r24, r14
 72e:	7e 01       	movw	r14, r28
 730:	25 e0       	ldi	r18, 0x05	; 5
 732:	e2 0e       	add	r14, r18
 734:	f1 1c       	adc	r15, r1
 736:	8c 01       	movw	r16, r24
 738:	0f 5f       	subi	r16, 0xFF	; 255
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 740:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 744:	09 95       	icall
 746:	81 11       	cpse	r24, r1
 748:	2a c0       	rjmp	.+84     	; 0x79e <CmdCfgLis+0x17e>
 74a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 74e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 752:	09 95       	icall
 754:	26 96       	adiw	r28, 0x06	; 6
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	f8 94       	cli
 75a:	de bf       	out	0x3e, r29	; 62
 75c:	0f be       	out	0x3f, r0	; 63
 75e:	cd bf       	out	0x3d, r28	; 61
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	08 95       	ret
 76e:	0f 5f       	subi	r16, 0xFF	; 255
 770:	1f 4f       	sbci	r17, 0xFF	; 255
 772:	04 30       	cpi	r16, 0x04	; 4
 774:	11 05       	cpc	r17, r1
 776:	09 f0       	breq	.+2      	; 0x77a <CmdCfgLis+0x15a>
 778:	72 cf       	rjmp	.-284    	; 0x65e <CmdCfgLis+0x3e>
 77a:	a3 cf       	rjmp	.-186    	; 0x6c2 <CmdCfgLis+0xa2>
 77c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <BiColorLed_port>
 780:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 784:	20 81       	ld	r18, Z
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 78e:	02 c0       	rjmp	.+4      	; 0x794 <CmdCfgLis+0x174>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	0a 94       	dec	r0
 796:	e2 f7       	brpl	.-8      	; 0x790 <CmdCfgLis+0x170>
 798:	82 2b       	or	r24, r18
 79a:	80 83       	st	Z, r24
 79c:	d6 cf       	rjmp	.-84     	; 0x74a <CmdCfgLis+0x12a>
 79e:	c8 01       	movw	r24, r16
 7a0:	0e 15       	cp	r16, r14
 7a2:	1f 05       	cpc	r17, r15
 7a4:	41 f6       	brne	.-112    	; 0x736 <CmdCfgLis+0x116>
 7a6:	d1 cf       	rjmp	.-94     	; 0x74a <CmdCfgLis+0x12a>
 7a8:	8e ef       	ldi	r24, 0xFE	; 254
 7aa:	8d 83       	std	Y+5, r24	; 0x05
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	8e 83       	std	Y+6, r24	; 0x06
 7b0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 7b4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 7b8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 7bc:	09 95       	icall
 7be:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 7c2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 7c6:	09 95       	icall
 7c8:	88 23       	and	r24, r24
 7ca:	c1 f2       	breq	.-80     	; 0x77c <CmdCfgLis+0x15c>
 7cc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 7d0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 7d4:	ce 01       	movw	r24, r28
 7d6:	05 96       	adiw	r24, 0x05	; 5
 7d8:	09 95       	icall
 7da:	88 23       	and	r24, r24
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <CmdCfgLis+0x1c0>
 7de:	b5 cf       	rjmp	.-150    	; 0x74a <CmdCfgLis+0x12a>
 7e0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 7e4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 7e8:	ce 01       	movw	r24, r28
 7ea:	06 96       	adiw	r24, 0x06	; 6
 7ec:	09 95       	icall
 7ee:	ad cf       	rjmp	.-166    	; 0x74a <CmdCfgLis+0x12a>
 7f0:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <BiColorLed_port>
 7f4:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 7f8:	20 81       	ld	r18, Z
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 802:	02 c0       	rjmp	.+4      	; 0x808 <CmdCfgLis+0x1e8>
 804:	88 0f       	add	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	0a 94       	dec	r0
 80a:	e2 f7       	brpl	.-8      	; 0x804 <CmdCfgLis+0x1e4>
 80c:	82 2b       	or	r24, r18
 80e:	80 83       	st	Z, r24
 810:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 814:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 818:	09 95       	icall
 81a:	ce 01       	movw	r24, r28
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	7c 01       	movw	r14, r24
 820:	2d cf       	rjmp	.-422    	; 0x67c <CmdCfgLis+0x5c>
 822:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <BiColorLed_port>
 826:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 82a:	20 81       	ld	r18, Z
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 834:	02 c0       	rjmp	.+4      	; 0x83a <CmdCfgLis+0x21a>
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	0a 94       	dec	r0
 83c:	e2 f7       	brpl	.-8      	; 0x836 <CmdCfgLis+0x216>
 83e:	82 2b       	or	r24, r18
 840:	80 83       	st	Z, r24
 842:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 846:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 84a:	09 95       	icall
 84c:	62 cf       	rjmp	.-316    	; 0x712 <CmdCfgLis+0xf2>
 84e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <BiColorLed_port>
 852:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 856:	20 81       	ld	r18, Z
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 860:	02 c0       	rjmp	.+4      	; 0x866 <CmdCfgLis+0x246>
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	0a 94       	dec	r0
 868:	e2 f7       	brpl	.-8      	; 0x862 <CmdCfgLis+0x242>
 86a:	82 2b       	or	r24, r18
 86c:	80 83       	st	Z, r24
 86e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 872:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 876:	09 95       	icall
 878:	29 cf       	rjmp	.-430    	; 0x6cc <CmdCfgLis+0xac>

0000087a <UsbReadOneByte>:
 87a:	cf 93       	push	r28
 87c:	df 93       	push	r29
 87e:	ec 01       	movw	r28, r24
 880:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 884:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 888:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 88c:	09 95       	icall
 88e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 892:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 896:	09 95       	icall
 898:	88 23       	and	r24, r24
 89a:	79 f0       	breq	.+30     	; 0x8ba <UsbReadOneByte+0x40>
 89c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 8a0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 8a4:	ce 01       	movw	r24, r28
 8a6:	09 95       	icall
 8a8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 8ac:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 8b0:	09 95       	icall
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret
 8ba:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 8be:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 8c2:	09 95       	icall
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	08 95       	ret

000008cc <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
 8cc:	1f 93       	push	r17
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <UsbWriteStatusInvalid+0x8>
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
 8d8:	9f ef       	ldi	r25, 0xFF	; 255
 8da:	99 83       	std	Y+1, r25	; 0x01
 8dc:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 8de:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 8e2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 8e6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 8ea:	09 95       	icall
    if (!FtBusTurnaround())
 8ec:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 8f0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 8f4:	09 95       	icall
 8f6:	88 23       	and	r24, r24
 8f8:	19 f1       	breq	.+70     	; 0x940 <__stack+0x41>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 8fa:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 8fe:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 902:	ce 01       	movw	r24, r28
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 908:	81 11       	cpse	r24, r1
 90a:	0d c0       	rjmp	.+26     	; 0x926 <__stack+0x27>
 90c:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 90e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 912:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 916:	09 95       	icall
 918:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	1f 91       	pop	r17
 924:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 926:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 92a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 92e:	ce 01       	movw	r24, r28
 930:	02 96       	adiw	r24, 0x02	; 2
 932:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 934:	88 23       	and	r24, r24
 936:	11 f0       	breq	.+4      	; 0x93c <__stack+0x3d>
 938:	12 e0       	ldi	r17, 0x02	; 2
 93a:	e9 cf       	rjmp	.-46     	; 0x90e <__stack+0xf>
 93c:	11 e0       	ldi	r17, 0x01	; 1
 93e:	e7 cf       	rjmp	.-50     	; 0x90e <__stack+0xf>
{
    ClearBit(BiColorLed_port, led_name);
}
inline void BiColorLedRed(uint8_t led_name)
{
    SetBit(BiColorLed_port, led_name);
 940:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <BiColorLed_port>
 944:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <BiColorLed_port+0x1>
 948:	20 81       	ld	r18, Z
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <status_led>
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	0a 94       	dec	r0
 95a:	e2 f7       	brpl	.-8      	; 0x954 <__stack+0x55>
 95c:	82 2b       	or	r24, r18
 95e:	80 83       	st	Z, r24
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        BiColorLedRed(status_led);
        FtDeactivateInterface();
 960:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 964:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 968:	09 95       	icall
 96a:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	08 95       	ret

00000978 <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 978:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiStatusRegister>
 97c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiStatusRegister+0x1>
 980:	09 95       	icall
 982:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ReadSpiDataRegister>
 986:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ReadSpiDataRegister+0x1>
 98a:	09 94       	ijmp

0000098c <ReadSpiStatusRegister_Implementation>:
 98c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Spi_spsr>
 990:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Spi_spsr+0x1>
 994:	80 81       	ld	r24, Z
 996:	08 95       	ret

00000998 <EnableSpi_Implementation>:
 998:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Spi_spcr>
 99c:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Spi_spcr+0x1>
 9a0:	20 81       	ld	r18, Z
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <Spi_Enable>
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <EnableSpi_Implementation+0x18>
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	0a 94       	dec	r0
 9b2:	e2 f7       	brpl	.-8      	; 0x9ac <EnableSpi_Implementation+0x14>
 9b4:	82 2b       	or	r24, r18
 9b6:	80 83       	st	Z, r24
 9b8:	08 95       	ret

000009ba <SpiMasterCloseSpi_Implementation>:
 9ba:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_port>
 9be:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_port+0x1>
 9c2:	20 81       	ld	r18, Z
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_Ss>
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <SpiMasterCloseSpi_Implementation+0x18>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	0a 94       	dec	r0
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <SpiMasterCloseSpi_Implementation+0x14>
 9d6:	82 2b       	or	r24, r18
 9d8:	80 83       	st	Z, r24
 9da:	08 95       	ret

000009dc <ReadSpiDataRegister_Implementation>:
 9dc:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Spi_spdr>
 9e0:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Spi_spdr+0x1>
 9e4:	80 81       	ld	r24, Z
 9e6:	08 95       	ret

000009e8 <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 9e8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 9ec:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_ddr>
 9f0:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 9f4:	40 81       	ld	r20, Z
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	9c 01       	movw	r18, r24
 9fc:	00 90 32 01 	lds	r0, 0x0132	; 0x800132 <Spi_Miso>
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <SpiMasterInit+0x1e>
 a02:	22 0f       	add	r18, r18
 a04:	33 1f       	adc	r19, r19
 a06:	0a 94       	dec	r0
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <SpiMasterInit+0x1a>
 a0a:	32 2f       	mov	r19, r18
 a0c:	30 95       	com	r19
 a0e:	34 23       	and	r19, r20
 a10:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 a12:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Spi_port>
 a16:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 a1a:	3c 91       	ld	r19, X
 a1c:	23 2b       	or	r18, r19
 a1e:	2c 93       	st	X, r18
 a20:	40 81       	ld	r20, Z
 a22:	9c 01       	movw	r18, r24
 a24:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_Ss>
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <SpiMasterInit+0x46>
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	0a 94       	dec	r0
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <SpiMasterInit+0x42>
 a32:	24 2b       	or	r18, r20
 a34:	20 83       	st	Z, r18
 a36:	40 81       	ld	r20, Z
 a38:	9c 01       	movw	r18, r24
 a3a:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Spi_Mosi>
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <SpiMasterInit+0x5c>
 a40:	22 0f       	add	r18, r18
 a42:	33 1f       	adc	r19, r19
 a44:	0a 94       	dec	r0
 a46:	e2 f7       	brpl	.-8      	; 0xa40 <SpiMasterInit+0x58>
 a48:	24 2b       	or	r18, r20
 a4a:	20 83       	st	Z, r18
 a4c:	40 81       	ld	r20, Z
 a4e:	9c 01       	movw	r18, r24
 a50:	00 90 31 01 	lds	r0, 0x0131	; 0x800131 <Spi_Sck>
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <SpiMasterInit+0x72>
 a56:	22 0f       	add	r18, r18
 a58:	33 1f       	adc	r19, r19
 a5a:	0a 94       	dec	r0
 a5c:	e2 f7       	brpl	.-8      	; 0xa56 <SpiMasterInit+0x6e>
 a5e:	24 2b       	or	r18, r20
 a60:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 a62:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Spi_spcr>
 a66:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Spi_spcr+0x1>
 a6a:	40 81       	ld	r20, Z
 a6c:	9c 01       	movw	r18, r24
 a6e:	00 90 30 01 	lds	r0, 0x0130	; 0x800130 <Spi_MasterSlaveSelect>
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <SpiMasterInit+0x90>
 a74:	22 0f       	add	r18, r18
 a76:	33 1f       	adc	r19, r19
 a78:	0a 94       	dec	r0
 a7a:	e2 f7       	brpl	.-8      	; 0xa74 <SpiMasterInit+0x8c>
 a7c:	24 2b       	or	r18, r20
 a7e:	20 83       	st	Z, r18
 a80:	40 81       	ld	r20, Z
 a82:	9c 01       	movw	r18, r24
 a84:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Spi_ClockRateBit0>
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <SpiMasterInit+0xa6>
 a8a:	22 0f       	add	r18, r18
 a8c:	33 1f       	adc	r19, r19
 a8e:	0a 94       	dec	r0
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <SpiMasterInit+0xa2>
 a92:	24 2b       	or	r18, r20
 a94:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 a96:	30 81       	ld	r19, Z
 a98:	ac 01       	movw	r20, r24
 a9a:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Spi_ClockRateBit1>
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <SpiMasterInit+0xbc>
 aa0:	44 0f       	add	r20, r20
 aa2:	55 1f       	adc	r21, r21
 aa4:	0a 94       	dec	r0
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <SpiMasterInit+0xb8>
 aa8:	24 2f       	mov	r18, r20
 aaa:	20 95       	com	r18
 aac:	23 23       	and	r18, r19
 aae:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 ab0:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Spi_spsr>
 ab4:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 ab8:	20 81       	ld	r18, Z
 aba:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <Spi_DoubleClockRate>
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <SpiMasterInit+0xdc>
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	0a 94       	dec	r0
 ac6:	e2 f7       	brpl	.-8      	; 0xac0 <SpiMasterInit+0xd8>
 ac8:	82 2b       	or	r24, r18
 aca:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 acc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EnableSpi>
 ad0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EnableSpi+0x1>
 ad4:	09 95       	icall
    ClearPendingSpiInterrupt();
 ad6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ClearPendingSpiInterrupt>
 ada:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ClearPendingSpiInterrupt+0x1>
 ade:	09 94       	ijmp

00000ae0 <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
 ae4:	1f 92       	push	r1
 ae6:	cd b7       	in	r28, 0x3d	; 61
 ae8:	de b7       	in	r29, 0x3e	; 62
 aea:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 aec:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SpiMasterInit>
    UsbInit();
 af0:	0e 94 23 02 	call	0x446	; 0x446 <UsbInit>
 af4:	3d 9a       	sbi	0x07, 5	; 7
 af6:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	96 e0       	ldi	r25, 0x06	; 6
 afc:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <nbytes_in_frame+0x1>
 b00:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    jump_index cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 b04:	ce 01       	movw	r24, r28
 b06:	01 96       	adiw	r24, 0x01	; 1
 b08:	0e 94 3d 04 	call	0x87a	; 0x87a <UsbReadOneByte>
 b0c:	88 23       	and	r24, r24
 b0e:	d1 f3       	breq	.-12     	; 0xb04 <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
 b10:	89 81       	ldd	r24, Y+1	; 0x01
 b12:	0e 94 25 02 	call	0x44a	; 0x44a <LookupCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 b16:	00 97       	sbiw	r24, 0x00	; 0
 b18:	19 f0       	breq	.+6      	; 0xb20 <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 b1a:	fc 01       	movw	r30, r24
 b1c:	09 95       	icall
 b1e:	f2 cf       	rjmp	.-28     	; 0xb04 <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 b20:	89 81       	ldd	r24, Y+1	; 0x01
 b22:	0e 94 66 04 	call	0x8cc	; 0x8cc <UsbWriteStatusInvalid>
 b26:	ee cf       	rjmp	.-36     	; 0xb04 <main+0x24>

00000b28 <_exit>:
 b28:	f8 94       	cli

00000b2a <__stop_program>:
 b2a:	ff cf       	rjmp	.-2      	; 0xb2a <__stop_program>
