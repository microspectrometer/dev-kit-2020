
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000a12  00000aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800154  00800154  00000afa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fcf  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001323  00000000  00000000  00004e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ff  00000000  00000000  00006186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  00007b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000145e  00000000  00000000  000083b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028cd  00000000  00000000  0000980e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e0  00000000  00000000  0000c0db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <main>
  9e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
    *port ^= (1<<bit);
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
}
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <BitIsClear+0xc>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <BitIsClear+0x8>
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	99 27       	eor	r25, r25
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	8f 27       	eor	r24, r31
}
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
  f0:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
  f4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ddr_register_>
  f8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <ddr_register_+0x1>
  fc:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000100 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 100:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
 104:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <port_register_>
 108:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <port_register_+0x1>
 10c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000110 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 110:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
 114:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <port_register_>
 118:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <port_register_+0x1>
 11c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000120 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 120:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <ddr_register_+0x1>
 124:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ddr_register_>
    port_register_ = port_register;
 128:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <port_register_+0x1>
 12c:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <port_register_>
    pin_register_ = pin_register;
 130:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <pin_register_+0x1>
 134:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <pin_register_>
    debug_led_ = debug_led;
 138:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__data_end>
    DebugLedTurnOn();
 13c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 140:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 144:	09 95       	icall
    DebugLedTurnGreen();
 146:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 14a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 14e:	09 94       	ijmp

00000150 <FtSendCommand_Implementation>:
bool (*FtIsBusOk)(void) = FtIsBusOk_Implementation;
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtActivateInterface>
 158:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtActivateInterface+0x1>
 15c:	09 95       	icall
 15e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 162:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 166:	09 95       	icall
 168:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 16c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 170:	09 95       	icall
 172:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtOutputByte>
 176:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtOutputByte+0x1>
 17a:	8c 2f       	mov	r24, r28
 17c:	09 95       	icall
 17e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 182:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 186:	cf 91       	pop	r28
 188:	09 94       	ijmp

0000018a <FtBusTurnaround_Implementation>:
 18a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetSlaveDriveBus>
 18e:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetSlaveDriveBus+0x1>
 192:	09 95       	icall
 194:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 198:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 19c:	09 95       	icall
 19e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1a2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1a6:	09 95       	icall
 1a8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1ac:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1b0:	09 94       	ijmp

000001b2 <FtWrite_Implementation>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 1bc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 1c0:	09 95       	icall
 1c2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 1c6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 1ca:	09 95       	icall
 1cc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1d0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 1d4:	88 81       	ld	r24, Y
 1d6:	09 95       	icall
 1d8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1dc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1e0:	09 95       	icall
 1e2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1e6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	09 94       	ijmp

000001f0 <FtLetMasterDriveBus_Implementation>:
 1f0:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 1f4:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <FtLetSlaveDriveBus_Implementation>:
 1fe:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 202:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 206:	10 82       	st	Z, r1
 208:	08 95       	ret

0000020a <FtReadData_Implementation>:
 20a:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_pin>
 20e:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_pin+0x1>
 212:	80 81       	ld	r24, Z
 214:	08 95       	ret

00000216 <FtWriteData_Implementation>:
 216:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 21a:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <FtActivateInterface_Implementation>:
 222:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <Ft1248_Ss>
 226:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 22a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 22e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000232 <FtPullData_Implementation>:
 232:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <Ft1248_Sck>
 236:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 23a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 23e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000242 <FtDeactivateInterface_Implementation>:
 242:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <Ft1248_Ss>
 246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 24e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000252 <FtPushData_Implementation>:
 252:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <Ft1248_Sck>
 256:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 25a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 25e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000262 <FtIsBusOk_Implementation>:
 262:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <Ft1248_Miso>
 266:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Ft1248_pin>
 26a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <Ft1248_pin+0x1>
 26e:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsClear>

00000272 <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 27a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 27e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 282:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 284:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 288:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 28c:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 28e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 292:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 296:	09 95       	icall
 298:	c8 2f       	mov	r28, r24
 29a:	88 23       	and	r24, r24
 29c:	39 f0       	breq	.+14     	; 0x2ac <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 29e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 2a2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 2a6:	09 95       	icall
 2a8:	f8 01       	movw	r30, r16
 2aa:	80 83       	st	Z, r24
    return true;
}
 2ac:	8c 2f       	mov	r24, r28
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <FtOutputByte_Implementation>:
 2b6:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 2ba:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2cc:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <Ft1248_Miso>
 2d0:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <Ft1248_ddr>
 2d4:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <Ft1248_ddr+0x1>
 2d8:	61 2f       	mov	r22, r17
 2da:	ce 01       	movw	r24, r28
 2dc:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2e0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Ft1248_port>
 2e4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Ft1248_port+0x1>
 2e8:	61 2f       	mov	r22, r17
 2ea:	8c 01       	movw	r16, r24
 2ec:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2f0:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 2f4:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 2f8:	10 82       	st	Z, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2fa:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 2fe:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 83       	st	Z, r24
}
void FtSckLow(void)
{
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 306:	f0 90 46 01 	lds	r15, 0x0146	; 0x800146 <Ft1248_Sck>
 30a:	6f 2d       	mov	r22, r15
 30c:	c8 01       	movw	r24, r16
 30e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 312:	6f 2d       	mov	r22, r15
 314:	ce 01       	movw	r24, r28
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 31a:	f0 90 47 01 	lds	r15, 0x0147	; 0x800147 <Ft1248_Ss>
 31e:	6f 2d       	mov	r22, r15
 320:	c8 01       	movw	r24, r16
 322:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 326:	6f 2d       	mov	r22, r15
 328:	ce 01       	movw	r24, r28
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 334:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000338 <CmdLedRed>:
}
bool UsbWriteStatusOk(void)
{
    uint8_t const StatusOk = 0;
    return UsbWrite(&StatusOk,1);
}
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	0e 94 80 00 	call	0x100	; 0x100 <DebugLedTurnRed>
 346:	19 82       	std	Y+1, r1	; 0x01
 348:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 34c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 350:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 354:	09 95       	icall
 356:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 35a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 35e:	09 95       	icall
 360:	88 23       	and	r24, r24
 362:	81 f0       	breq	.+32     	; 0x384 <CmdLedRed+0x4c>
 364:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 368:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	09 95       	icall
 372:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 376:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 37a:	09 95       	icall
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret
 384:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 388:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 38c:	09 95       	icall
 38e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 392:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 396:	09 95       	icall
 398:	0f 90       	pop	r0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <CmdLedGreen>:
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 3ae:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 3b2:	09 95       	icall
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 3ba:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 3be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 3c2:	09 95       	icall
 3c4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 3c8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 3cc:	09 95       	icall
 3ce:	88 23       	and	r24, r24
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <CmdLedGreen+0x52>
 3d2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 3d6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 3da:	ce 01       	movw	r24, r28
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	09 95       	icall
 3e0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 3e4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 3e8:	09 95       	icall
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret
 3f2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3f6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3fa:	09 95       	icall
 3fc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 400:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 404:	09 95       	icall
 406:	0f 90       	pop	r0
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <UsbInit>:
 40e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <FtInit>

00000412 <CfgBytesAreValid>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 d0       	rcall	.+0      	; 0x418 <CfgBytesAreValid+0x6>
 418:	00 d0       	rcall	.+0      	; 0x41a <CfgBytesAreValid+0x8>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	fc 01       	movw	r30, r24
 420:	30 81       	ld	r19, Z
 422:	83 2f       	mov	r24, r19
 424:	8f 70       	andi	r24, 0x0F	; 15
 426:	21 81       	ldd	r18, Z+1	; 0x01
 428:	81 11       	cpse	r24, r1
 42a:	09 c0       	rjmp	.+18     	; 0x43e <CfgBytesAreValid+0x2c>
 42c:	21 11       	cpse	r18, r1
 42e:	07 c0       	rjmp	.+14     	; 0x43e <CfgBytesAreValid+0x2c>
 430:	92 81       	ldd	r25, Z+2	; 0x02
 432:	91 11       	cpse	r25, r1
 434:	04 c0       	rjmp	.+8      	; 0x43e <CfgBytesAreValid+0x2c>
 436:	83 81       	ldd	r24, Z+3	; 0x03
 438:	88 7f       	andi	r24, 0xF8	; 248
 43a:	09 f4       	brne	.+2      	; 0x43e <CfgBytesAreValid+0x2c>
 43c:	a2 c0       	rjmp	.+324    	; 0x582 <CfgBytesAreValid+0x170>
 43e:	42 2f       	mov	r20, r18
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	40 95       	com	r20
 444:	50 95       	com	r21
 446:	ca 01       	movw	r24, r20
 448:	84 78       	andi	r24, 0x84	; 132
 44a:	99 27       	eor	r25, r25
 44c:	89 2b       	or	r24, r25
 44e:	09 f0       	breq	.+2      	; 0x452 <CfgBytesAreValid+0x40>
 450:	a9 c0       	rjmp	.+338    	; 0x5a4 <CfgBytesAreValid+0x192>
 452:	92 81       	ldd	r25, Z+2	; 0x02
 454:	69 2f       	mov	r22, r25
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	60 95       	com	r22
 45a:	70 95       	com	r23
 45c:	61 72       	andi	r22, 0x21	; 33
 45e:	77 27       	eor	r23, r23
 460:	67 2b       	or	r22, r23
 462:	09 f0       	breq	.+2      	; 0x466 <CfgBytesAreValid+0x54>
 464:	9f c0       	rjmp	.+318    	; 0x5a4 <CfgBytesAreValid+0x192>
 466:	83 81       	ldd	r24, Z+3	; 0x03
 468:	83 fb       	bst	r24, 3
 46a:	88 27       	eor	r24, r24
 46c:	80 f9       	bld	r24, 0
 46e:	62 2f       	mov	r22, r18
 470:	64 78       	andi	r22, 0x84	; 132
 472:	09 f0       	breq	.+2      	; 0x476 <CfgBytesAreValid+0x64>
 474:	84 c0       	rjmp	.+264    	; 0x57e <CfgBytesAreValid+0x16c>
 476:	69 2f       	mov	r22, r25
 478:	61 72       	andi	r22, 0x21	; 33
 47a:	09 f0       	breq	.+2      	; 0x47e <CfgBytesAreValid+0x6c>
 47c:	80 c0       	rjmp	.+256    	; 0x57e <CfgBytesAreValid+0x16c>
 47e:	63 81       	ldd	r22, Z+3	; 0x03
 480:	63 fd       	sbrc	r22, 3
 482:	7d c0       	rjmp	.+250    	; 0x57e <CfgBytesAreValid+0x16c>
 484:	81 11       	cpse	r24, r1
 486:	7d c0       	rjmp	.+250    	; 0x582 <CfgBytesAreValid+0x170>
 488:	63 2f       	mov	r22, r19
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	db 01       	movw	r26, r22
 48e:	a0 95       	com	r26
 490:	b0 95       	com	r27
 492:	30 ff       	sbrs	r19, 0
 494:	8d c0       	rjmp	.+282    	; 0x5b0 <CfgBytesAreValid+0x19e>
 496:	43 fd       	sbrc	r20, 3
 498:	8b c0       	rjmp	.+278    	; 0x5b0 <CfgBytesAreValid+0x19e>
 49a:	69 2f       	mov	r22, r25
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	60 95       	com	r22
 4a0:	70 95       	com	r23
 4a2:	62 74       	andi	r22, 0x42	; 66
 4a4:	77 27       	eor	r23, r23
 4a6:	67 2b       	or	r22, r23
 4a8:	09 f0       	breq	.+2      	; 0x4ac <CfgBytesAreValid+0x9a>
 4aa:	82 c0       	rjmp	.+260    	; 0x5b0 <CfgBytesAreValid+0x19e>
 4ac:	83 81       	ldd	r24, Z+3	; 0x03
 4ae:	82 95       	swap	r24
 4b0:	81 70       	andi	r24, 0x01	; 1
 4b2:	30 fd       	sbrc	r19, 0
 4b4:	6e c0       	rjmp	.+220    	; 0x592 <CfgBytesAreValid+0x180>
 4b6:	23 fd       	sbrc	r18, 3
 4b8:	6c c0       	rjmp	.+216    	; 0x592 <CfgBytesAreValid+0x180>
 4ba:	69 2f       	mov	r22, r25
 4bc:	62 74       	andi	r22, 0x42	; 66
 4be:	09 f0       	breq	.+2      	; 0x4c2 <CfgBytesAreValid+0xb0>
 4c0:	68 c0       	rjmp	.+208    	; 0x592 <CfgBytesAreValid+0x180>
 4c2:	63 81       	ldd	r22, Z+3	; 0x03
 4c4:	64 fd       	sbrc	r22, 4
 4c6:	65 c0       	rjmp	.+202    	; 0x592 <CfgBytesAreValid+0x180>
 4c8:	81 11       	cpse	r24, r1
 4ca:	5b c0       	rjmp	.+182    	; 0x582 <CfgBytesAreValid+0x170>
 4cc:	a1 fd       	sbrc	r26, 1
 4ce:	74 c0       	rjmp	.+232    	; 0x5b8 <CfgBytesAreValid+0x1a6>
 4d0:	44 fd       	sbrc	r20, 4
 4d2:	72 c0       	rjmp	.+228    	; 0x5b8 <CfgBytesAreValid+0x1a6>
 4d4:	69 2f       	mov	r22, r25
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	60 95       	com	r22
 4da:	70 95       	com	r23
 4dc:	64 78       	andi	r22, 0x84	; 132
 4de:	77 27       	eor	r23, r23
 4e0:	67 2b       	or	r22, r23
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <CfgBytesAreValid+0xd4>
 4e4:	69 c0       	rjmp	.+210    	; 0x5b8 <CfgBytesAreValid+0x1a6>
 4e6:	83 81       	ldd	r24, Z+3	; 0x03
 4e8:	85 fb       	bst	r24, 5
 4ea:	88 27       	eor	r24, r24
 4ec:	80 f9       	bld	r24, 0
 4ee:	31 fd       	sbrc	r19, 1
 4f0:	53 c0       	rjmp	.+166    	; 0x598 <CfgBytesAreValid+0x186>
 4f2:	24 fd       	sbrc	r18, 4
 4f4:	51 c0       	rjmp	.+162    	; 0x598 <CfgBytesAreValid+0x186>
 4f6:	69 2f       	mov	r22, r25
 4f8:	64 78       	andi	r22, 0x84	; 132
 4fa:	09 f0       	breq	.+2      	; 0x4fe <CfgBytesAreValid+0xec>
 4fc:	4d c0       	rjmp	.+154    	; 0x598 <CfgBytesAreValid+0x186>
 4fe:	63 81       	ldd	r22, Z+3	; 0x03
 500:	65 fd       	sbrc	r22, 5
 502:	4a c0       	rjmp	.+148    	; 0x598 <CfgBytesAreValid+0x186>
 504:	81 11       	cpse	r24, r1
 506:	3d c0       	rjmp	.+122    	; 0x582 <CfgBytesAreValid+0x170>
 508:	a2 fd       	sbrc	r26, 2
 50a:	5a c0       	rjmp	.+180    	; 0x5c0 <CfgBytesAreValid+0x1ae>
 50c:	ba 01       	movw	r22, r20
 50e:	61 72       	andi	r22, 0x21	; 33
 510:	77 27       	eor	r23, r23
 512:	67 2b       	or	r22, r23
 514:	09 f0       	breq	.+2      	; 0x518 <CfgBytesAreValid+0x106>
 516:	54 c0       	rjmp	.+168    	; 0x5c0 <CfgBytesAreValid+0x1ae>
 518:	69 2f       	mov	r22, r25
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	60 95       	com	r22
 51e:	70 95       	com	r23
 520:	63 fd       	sbrc	r22, 3
 522:	4e c0       	rjmp	.+156    	; 0x5c0 <CfgBytesAreValid+0x1ae>
 524:	83 81       	ldd	r24, Z+3	; 0x03
 526:	86 fb       	bst	r24, 6
 528:	88 27       	eor	r24, r24
 52a:	80 f9       	bld	r24, 0
 52c:	32 fd       	sbrc	r19, 2
 52e:	37 c0       	rjmp	.+110    	; 0x59e <CfgBytesAreValid+0x18c>
 530:	62 2f       	mov	r22, r18
 532:	61 72       	andi	r22, 0x21	; 33
 534:	a1 f5       	brne	.+104    	; 0x59e <CfgBytesAreValid+0x18c>
 536:	93 fd       	sbrc	r25, 3
 538:	32 c0       	rjmp	.+100    	; 0x59e <CfgBytesAreValid+0x18c>
 53a:	63 81       	ldd	r22, Z+3	; 0x03
 53c:	66 fd       	sbrc	r22, 6
 53e:	2f c0       	rjmp	.+94     	; 0x59e <CfgBytesAreValid+0x18c>
 540:	81 11       	cpse	r24, r1
 542:	1f c0       	rjmp	.+62     	; 0x582 <CfgBytesAreValid+0x170>
 544:	a3 fd       	sbrc	r26, 3
 546:	40 c0       	rjmp	.+128    	; 0x5c8 <CfgBytesAreValid+0x1b6>
 548:	42 74       	andi	r20, 0x42	; 66
 54a:	55 27       	eor	r21, r21
 54c:	45 2b       	or	r20, r21
 54e:	09 f0       	breq	.+2      	; 0x552 <CfgBytesAreValid+0x140>
 550:	3b c0       	rjmp	.+118    	; 0x5c8 <CfgBytesAreValid+0x1b6>
 552:	49 2f       	mov	r20, r25
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	40 95       	com	r20
 558:	50 95       	com	r21
 55a:	44 fd       	sbrc	r20, 4
 55c:	35 c0       	rjmp	.+106    	; 0x5c8 <CfgBytesAreValid+0x1b6>
 55e:	83 81       	ldd	r24, Z+3	; 0x03
 560:	88 1f       	adc	r24, r24
 562:	88 27       	eor	r24, r24
 564:	88 1f       	adc	r24, r24
 566:	33 fd       	sbrc	r19, 3
 568:	0d c0       	rjmp	.+26     	; 0x584 <CfgBytesAreValid+0x172>
 56a:	22 74       	andi	r18, 0x42	; 66
 56c:	59 f4       	brne	.+22     	; 0x584 <CfgBytesAreValid+0x172>
 56e:	94 fd       	sbrc	r25, 4
 570:	09 c0       	rjmp	.+18     	; 0x584 <CfgBytesAreValid+0x172>
 572:	93 81       	ldd	r25, Z+3	; 0x03
 574:	97 fd       	sbrc	r25, 7
 576:	06 c0       	rjmp	.+12     	; 0x584 <CfgBytesAreValid+0x172>
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	89 27       	eor	r24, r25
 57c:	03 c0       	rjmp	.+6      	; 0x584 <CfgBytesAreValid+0x172>
 57e:	81 11       	cpse	r24, r1
 580:	83 cf       	rjmp	.-250    	; 0x488 <CfgBytesAreValid+0x76>
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret
 592:	81 11       	cpse	r24, r1
 594:	9b cf       	rjmp	.-202    	; 0x4cc <CfgBytesAreValid+0xba>
 596:	f5 cf       	rjmp	.-22     	; 0x582 <CfgBytesAreValid+0x170>
 598:	81 11       	cpse	r24, r1
 59a:	b6 cf       	rjmp	.-148    	; 0x508 <CfgBytesAreValid+0xf6>
 59c:	f2 cf       	rjmp	.-28     	; 0x582 <CfgBytesAreValid+0x170>
 59e:	81 11       	cpse	r24, r1
 5a0:	d1 cf       	rjmp	.-94     	; 0x544 <CfgBytesAreValid+0x132>
 5a2:	ef cf       	rjmp	.-34     	; 0x582 <CfgBytesAreValid+0x170>
 5a4:	82 2f       	mov	r24, r18
 5a6:	84 78       	andi	r24, 0x84	; 132
 5a8:	61 f7       	brne	.-40     	; 0x582 <CfgBytesAreValid+0x170>
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	92 81       	ldd	r25, Z+2	; 0x02
 5ae:	63 cf       	rjmp	.-314    	; 0x476 <CfgBytesAreValid+0x64>
 5b0:	30 fd       	sbrc	r19, 0
 5b2:	e7 cf       	rjmp	.-50     	; 0x582 <CfgBytesAreValid+0x170>
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	7f cf       	rjmp	.-258    	; 0x4b6 <CfgBytesAreValid+0xa4>
 5b8:	31 fd       	sbrc	r19, 1
 5ba:	e3 cf       	rjmp	.-58     	; 0x582 <CfgBytesAreValid+0x170>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	99 cf       	rjmp	.-206    	; 0x4f2 <CfgBytesAreValid+0xe0>
 5c0:	32 fd       	sbrc	r19, 2
 5c2:	df cf       	rjmp	.-66     	; 0x582 <CfgBytesAreValid+0x170>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	b4 cf       	rjmp	.-152    	; 0x530 <CfgBytesAreValid+0x11e>
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	cd cf       	rjmp	.-102    	; 0x566 <CfgBytesAreValid+0x154>

000005cc <CmdCfgLis>:
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	00 d0       	rcall	.+0      	; 0x5da <CmdCfgLis+0xe>
 5da:	00 d0       	rcall	.+0      	; 0x5dc <CmdCfgLis+0x10>
 5dc:	00 d0       	rcall	.+0      	; 0x5de <CmdCfgLis+0x12>
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 5e6:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 5ea:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 5ee:	09 95       	icall
 5f0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 5f4:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 5f8:	09 95       	icall
 5fa:	88 23       	and	r24, r24
 5fc:	09 f4       	brne	.+2      	; 0x600 <CmdCfgLis+0x34>
 5fe:	c2 c0       	rjmp	.+388    	; 0x784 <CmdCfgLis+0x1b8>
 600:	00 e0       	ldi	r16, 0x00	; 0
 602:	10 e0       	ldi	r17, 0x00	; 0
 604:	ce 01       	movw	r24, r28
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	7c 01       	movw	r14, r24
 60a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtRead>
 60e:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtRead+0x1>
 612:	c7 01       	movw	r24, r14
 614:	80 0f       	add	r24, r16
 616:	91 1f       	adc	r25, r17
 618:	09 95       	icall
 61a:	81 11       	cpse	r24, r1
 61c:	7e c0       	rjmp	.+252    	; 0x71a <CmdCfgLis+0x14e>
 61e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 622:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 626:	09 95       	icall
 628:	8d ef       	ldi	r24, 0xFD	; 253
 62a:	8d 83       	std	Y+5, r24	; 0x05
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	8e 83       	std	Y+6, r24	; 0x06
 630:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 634:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 638:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 63c:	09 95       	icall
 63e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 642:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 646:	09 95       	icall
 648:	88 23       	and	r24, r24
 64a:	09 f4       	brne	.+2      	; 0x64e <CmdCfgLis+0x82>
 64c:	b4 c0       	rjmp	.+360    	; 0x7b6 <CmdCfgLis+0x1ea>
 64e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 652:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 656:	ce 01       	movw	r24, r28
 658:	05 96       	adiw	r24, 0x05	; 5
 65a:	09 95       	icall
 65c:	88 23       	and	r24, r24
 65e:	39 f0       	breq	.+14     	; 0x66e <CmdCfgLis+0xa2>
 660:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 664:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 668:	ce 01       	movw	r24, r28
 66a:	06 96       	adiw	r24, 0x06	; 6
 66c:	09 95       	icall
 66e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 672:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 676:	09 95       	icall
 678:	c7 01       	movw	r24, r14
 67a:	0e 94 09 02 	call	0x412	; 0x412 <CfgBytesAreValid>
 67e:	88 23       	and	r24, r24
 680:	09 f4       	brne	.+2      	; 0x684 <CmdCfgLis+0xb8>
 682:	5d c0       	rjmp	.+186    	; 0x73e <CmdCfgLis+0x172>
 684:	1d 82       	std	Y+5, r1	; 0x05
 686:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <FtCmd_Write>
 68a:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 68e:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 692:	81 2f       	mov	r24, r17
 694:	09 95       	icall
 696:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 69a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 69e:	09 95       	icall
 6a0:	88 23       	and	r24, r24
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <CmdCfgLis+0xda>
 6a4:	7d c0       	rjmp	.+250    	; 0x7a0 <CmdCfgLis+0x1d4>
 6a6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 6aa:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 6ae:	ce 01       	movw	r24, r28
 6b0:	05 96       	adiw	r24, 0x05	; 5
 6b2:	09 95       	icall
 6b4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 6b8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 6bc:	09 95       	icall
 6be:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 6c2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 6c6:	81 2f       	mov	r24, r17
 6c8:	09 95       	icall
 6ca:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 6ce:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 6d2:	09 95       	icall
 6d4:	88 23       	and	r24, r24
 6d6:	41 f1       	breq	.+80     	; 0x728 <CmdCfgLis+0x15c>
 6d8:	c7 01       	movw	r24, r14
 6da:	7e 01       	movw	r14, r28
 6dc:	25 e0       	ldi	r18, 0x05	; 5
 6de:	e2 0e       	add	r14, r18
 6e0:	f1 1c       	adc	r15, r1
 6e2:	8c 01       	movw	r16, r24
 6e4:	0f 5f       	subi	r16, 0xFF	; 255
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 6ec:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 6f0:	09 95       	icall
 6f2:	81 11       	cpse	r24, r1
 6f4:	1f c0       	rjmp	.+62     	; 0x734 <CmdCfgLis+0x168>
 6f6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 6fa:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 6fe:	09 95       	icall
 700:	26 96       	adiw	r28, 0x06	; 6
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	08 95       	ret
 71a:	0f 5f       	subi	r16, 0xFF	; 255
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	04 30       	cpi	r16, 0x04	; 4
 720:	11 05       	cpc	r17, r1
 722:	09 f0       	breq	.+2      	; 0x726 <CmdCfgLis+0x15a>
 724:	72 cf       	rjmp	.-284    	; 0x60a <CmdCfgLis+0x3e>
 726:	a3 cf       	rjmp	.-186    	; 0x66e <CmdCfgLis+0xa2>
 728:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 72c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 730:	09 95       	icall
 732:	e1 cf       	rjmp	.-62     	; 0x6f6 <CmdCfgLis+0x12a>
 734:	c8 01       	movw	r24, r16
 736:	0e 15       	cp	r16, r14
 738:	1f 05       	cpc	r17, r15
 73a:	99 f6       	brne	.-90     	; 0x6e2 <CmdCfgLis+0x116>
 73c:	dc cf       	rjmp	.-72     	; 0x6f6 <CmdCfgLis+0x12a>
 73e:	8e ef       	ldi	r24, 0xFE	; 254
 740:	8d 83       	std	Y+5, r24	; 0x05
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	8e 83       	std	Y+6, r24	; 0x06
 746:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 74a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 74e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 752:	09 95       	icall
 754:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 758:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 75c:	09 95       	icall
 75e:	88 23       	and	r24, r24
 760:	19 f3       	breq	.-58     	; 0x728 <CmdCfgLis+0x15c>
 762:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 766:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 76a:	ce 01       	movw	r24, r28
 76c:	05 96       	adiw	r24, 0x05	; 5
 76e:	09 95       	icall
 770:	88 23       	and	r24, r24
 772:	09 f2       	breq	.-126    	; 0x6f6 <CmdCfgLis+0x12a>
 774:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 778:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 77c:	ce 01       	movw	r24, r28
 77e:	06 96       	adiw	r24, 0x06	; 6
 780:	09 95       	icall
 782:	b9 cf       	rjmp	.-142    	; 0x6f6 <CmdCfgLis+0x12a>
 784:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 788:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 78c:	09 95       	icall
 78e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 792:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 796:	09 95       	icall
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	7c 01       	movw	r14, r24
 79e:	44 cf       	rjmp	.-376    	; 0x628 <CmdCfgLis+0x5c>
 7a0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 7a4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 7a8:	09 95       	icall
 7aa:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 7ae:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 7b2:	09 95       	icall
 7b4:	84 cf       	rjmp	.-248    	; 0x6be <CmdCfgLis+0xf2>
 7b6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 7ba:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 7be:	09 95       	icall
 7c0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 7c4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 7c8:	09 95       	icall
 7ca:	56 cf       	rjmp	.-340    	; 0x678 <CmdCfgLis+0xac>

000007cc <LookupCmd>:
 7cc:	83 30       	cpi	r24, 0x03	; 3
 7ce:	48 f4       	brcc	.+18     	; 0x7e2 <LookupCmd+0x16>
 7d0:	e8 2f       	mov	r30, r24
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	ee 0f       	add	r30, r30
 7d6:	ff 1f       	adc	r31, r31
 7d8:	e4 5d       	subi	r30, 0xD4	; 212
 7da:	fe 4f       	sbci	r31, 0xFE	; 254
 7dc:	80 81       	ld	r24, Z
 7de:	91 81       	ldd	r25, Z+1	; 0x01
 7e0:	08 95       	ret
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <UsbReadOneByte>:
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	ec 01       	movw	r28, r24
 7ee:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 7f2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 7f6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 7fa:	09 95       	icall
 7fc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 800:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 804:	09 95       	icall
 806:	88 23       	and	r24, r24
 808:	79 f0       	breq	.+30     	; 0x828 <UsbReadOneByte+0x40>
 80a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtRead>
 80e:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtRead+0x1>
 812:	ce 01       	movw	r24, r28
 814:	09 95       	icall
 816:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 81a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 81e:	09 95       	icall
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	08 95       	ret
 828:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 82c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 830:	09 95       	icall
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	00 d0       	rcall	.+0      	; 0x842 <UsbWriteStatusInvalid+0x8>
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	99 83       	std	Y+1, r25	; 0x01
 84a:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 84c:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 850:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 854:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 858:	09 95       	icall
    if (!FtBusTurnaround())
 85a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 85e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 862:	09 95       	icall
 864:	88 23       	and	r24, r24
 866:	19 f1       	breq	.+70     	; 0x8ae <UsbWriteStatusInvalid+0x74>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 868:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 86c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 870:	ce 01       	movw	r24, r28
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 876:	81 11       	cpse	r24, r1
 878:	0d c0       	rjmp	.+26     	; 0x894 <UsbWriteStatusInvalid+0x5a>
 87a:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 87c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 880:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 884:	09 95       	icall
 886:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 888:	0f 90       	pop	r0
 88a:	0f 90       	pop	r0
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 894:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 898:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 89c:	ce 01       	movw	r24, r28
 89e:	02 96       	adiw	r24, 0x02	; 2
 8a0:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 8a2:	88 23       	and	r24, r24
 8a4:	11 f0       	breq	.+4      	; 0x8aa <UsbWriteStatusInvalid+0x70>
 8a6:	12 e0       	ldi	r17, 0x02	; 2
 8a8:	e9 cf       	rjmp	.-46     	; 0x87c <UsbWriteStatusInvalid+0x42>
 8aa:	11 e0       	ldi	r17, 0x01	; 1
 8ac:	e7 cf       	rjmp	.-50     	; 0x87c <UsbWriteStatusInvalid+0x42>
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        DebugLedTurnRedToShowError();
 8ae:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 8b2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 8b6:	09 95       	icall
        FtDeactivateInterface();
 8b8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 8bc:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 8c0:	09 95       	icall
 8c2:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	08 95       	ret

000008d0 <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 8d0:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiStatusRegister>
 8d4:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiStatusRegister+0x1>
 8d8:	09 95       	icall
 8da:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ReadSpiDataRegister>
 8de:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ReadSpiDataRegister+0x1>
 8e2:	09 94       	ijmp

000008e4 <ReadSpiStatusRegister_Implementation>:
 8e4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spsr>
 8e8:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spsr+0x1>
 8ec:	80 81       	ld	r24, Z
 8ee:	08 95       	ret

000008f0 <ReadSpiDataRegister_Implementation>:
 8f0:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spdr>
 8f4:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spdr+0x1>
 8f8:	80 81       	ld	r24, Z
 8fa:	08 95       	ret

000008fc <EnableSpi_Implementation>:
 8fc:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <Spi_Enable>
 900:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Spi_spcr>
 904:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Spi_spcr+0x1>
 908:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000090c <SpiMasterCloseSpi_Implementation>:
 90c:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_Ss>
 910:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Spi_port>
 914:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Spi_port+0x1>
 918:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000091c <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 91c:	1f 93       	push	r17
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
    SlaveSelectIdleHigh();
 922:	0e 94 86 04 	call	0x90c	; 0x90c <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 926:	10 91 38 01 	lds	r17, 0x0138	; 0x800138 <Spi_Miso>
 92a:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <Spi_ddr>
 92e:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <Spi_ddr+0x1>
 932:	61 2f       	mov	r22, r17
 934:	ce 01       	movw	r24, r28
 936:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 93a:	61 2f       	mov	r22, r17
 93c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Spi_port>
 940:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Spi_port+0x1>
 944:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 948:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Spi_Ss>
 94c:	ce 01       	movw	r24, r28
 94e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 952:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Spi_Mosi>
 956:	ce 01       	movw	r24, r28
 958:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 95c:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Spi_Sck>
 960:	ce 01       	movw	r24, r28
 962:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 966:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <Spi_spcr>
 96a:	d0 91 40 01 	lds	r29, 0x0140	; 0x800140 <Spi_spcr+0x1>
 96e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Spi_MasterSlaveSelect>
 972:	ce 01       	movw	r24, r28
 974:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 978:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <Spi_ClockRateBit0>
 97c:	ce 01       	movw	r24, r28
 97e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 982:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <Spi_ClockRateBit1>
 986:	ce 01       	movw	r24, r28
 988:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 98c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <Spi_DoubleClockRate>
 990:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Spi_spsr>
 994:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Spi_spsr+0x1>
 998:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 99c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <EnableSpi>
 9a0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <EnableSpi+0x1>
 9a4:	09 95       	icall
    ClearPendingSpiInterrupt();
 9a6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ClearPendingSpiInterrupt>
 9aa:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ClearPendingSpiInterrupt+0x1>
}
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
    ClearPendingSpiInterrupt();
 9b4:	09 94       	ijmp

000009b6 <main>:
} while (0)
#define DebugPinLow()  MacroClearBit(&PORTC, PC5)
#define DebugPinHigh() MacroSetBit(&PORTC, PC5)

int main()
{
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	1f 92       	push	r1
 9bc:	cd b7       	in	r28, 0x3d	; 61
 9be:	de b7       	in	r29, 0x3e	; 62
uint16_t nbytes_in_frame;

/* =====[ Helper function for main setup ]===== */
void SetupDebugLed(void)
{
    DebugLedInit(
 9c0:	23 e0       	ldi	r18, 0x03	; 3
 9c2:	46 e2       	ldi	r20, 0x26	; 38
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	68 e2       	ldi	r22, 0x28	; 40
 9c8:	70 e0       	ldi	r23, 0x00	; 0
 9ca:	87 e2       	ldi	r24, 0x27	; 39
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	0e 94 90 00 	call	0x120	; 0x120 <DebugLedInit>

int main()
{
    /* =====[ Setup ]===== */
    SetupDebugLed();
    SpiMasterInit();
 9d2:	0e 94 8e 04 	call	0x91c	; 0x91c <SpiMasterInit>
    UsbInit();
 9d6:	0e 94 07 02 	call	0x40e	; 0x40e <UsbInit>
    DebugPinInit();
 9da:	3d 9a       	sbi	0x07, 5	; 7
 9dc:	45 9a       	sbi	0x08, 5	; 8
    nbytes_in_frame = sizeof_full_frame;
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	96 e0       	ldi	r25, 0x06	; 6
 9e2:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <nbytes_in_frame+0x1>
 9e6:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <nbytes_in_frame>
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    /* uint8_t cmd; */
    jump_index cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 9ea:	ce 01       	movw	r24, r28
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <UsbReadOneByte>
 9f2:	88 23       	and	r24, r24
 9f4:	d1 f3       	breq	.-12     	; 0x9ea <main+0x34>
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <LookupCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 9fc:	00 97       	sbiw	r24, 0x00	; 0
 9fe:	19 f0       	breq	.+6      	; 0xa06 <main+0x50>
        /* Do command if it is valid. */
        else CmdFn();
 a00:	fc 01       	movw	r30, r24
 a02:	09 95       	icall
 a04:	f2 cf       	rjmp	.-28     	; 0x9ea <main+0x34>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 a06:	89 81       	ldd	r24, Y+1	; 0x01
 a08:	0e 94 1d 04 	call	0x83a	; 0x83a <UsbWriteStatusInvalid>
 a0c:	ee cf       	rjmp	.-36     	; 0x9ea <main+0x34>

00000a0e <_exit>:
 a0e:	f8 94       	cli

00000a10 <__stop_program>:
 a10:	ff cf       	rjmp	.-2      	; 0xa10 <__stop_program>
