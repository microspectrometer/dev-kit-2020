
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000402  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800130  00800130  000004c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001795  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c46  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000991  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  000034ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa9  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054d  00000000  00000000  00004361  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000048ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 33       	cpi	r26, 0x37	; 55
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
  9e:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
    *port ^= (1<<bit);
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
}
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <BitIsClear+0xc>
  e0:	95 95       	asr	r25
  e2:	87 95       	ror	r24
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <BitIsClear+0x8>
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	8f 27       	eor	r24, r31
}
  ec:	81 70       	andi	r24, 0x01	; 1
  ee:	08 95       	ret

000000f0 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
  f0:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
  f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <ddr_register_>
  f8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <ddr_register_+0x1>
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 100:	08 95       	ret

00000102 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 102:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 106:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <port_register_>
 10a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <port_register_+0x1>
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 112:	08 95       	ret

00000114 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 114:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
 118:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <port_register_>
 11c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <port_register_+0x1>
 120:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 124:	08 95       	ret

00000126 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 126:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <ddr_register_+0x1>
 12a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <ddr_register_>
    port_register_ = port_register;
 12e:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <port_register_+0x1>
 132:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <port_register_>
    pin_register_ = pin_register;
 136:	50 93 32 01 	sts	0x0132, r21	; 0x800132 <pin_register_+0x1>
 13a:	40 93 31 01 	sts	0x0131, r20	; 0x800131 <pin_register_>
    debug_led_ = debug_led;
 13e:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__data_end>
    DebugLedTurnOn();
 142:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 146:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 14a:	09 95       	icall
    DebugLedTurnGreen();
 14c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 150:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 154:	09 95       	icall
 156:	08 95       	ret

00000158 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 158:	cf 93       	push	r28
 15a:	c8 2f       	mov	r28, r24
 15c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtActivateInterface>
 160:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtActivateInterface+0x1>
 164:	09 95       	icall
 166:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 16a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 16e:	09 95       	icall
 170:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 174:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 178:	09 95       	icall
 17a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtOutputByte>
 17e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtOutputByte+0x1>
 182:	8c 2f       	mov	r24, r28
 184:	09 95       	icall
 186:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 18a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 18e:	09 95       	icall
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <FtBusTurnaround_Implementation>:
 194:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetSlaveDriveBus>
 198:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetSlaveDriveBus+0x1>
 19c:	09 95       	icall
 19e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 1a2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 1a6:	09 95       	icall
 1a8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1ac:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1b6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1ba:	09 95       	icall
 1bc:	08 95       	ret

000001be <FtRead_Implementation>:
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	8c 01       	movw	r16, r24
 1c6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 1ca:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 1ce:	09 95       	icall
 1d0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1d4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1d8:	09 95       	icall
 1da:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1de:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1e2:	09 95       	icall
 1e4:	c8 2f       	mov	r28, r24
 1e6:	88 23       	and	r24, r24
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <FtRead_Implementation+0x3a>
 1ea:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtReadData>
 1ee:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtReadData+0x1>
 1f2:	09 95       	icall
 1f4:	f8 01       	movw	r30, r16
 1f6:	80 83       	st	Z, r24
 1f8:	8c 2f       	mov	r24, r28
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <FtOutputByte_Implementation>:
 202:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <FtMiosio_port>
 206:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <FtMiosio_port+0x1>
 20a:	80 83       	st	Z, r24
 20c:	08 95       	ret

0000020e <FtLetMasterDriveBus_Implementation>:
 20e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <FtMiosio_ddr>
 212:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <FtMiosio_ddr+0x1>
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <FtLetSlaveDriveBus_Implementation>:
 21c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <FtMiosio_ddr>
 220:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <FtMiosio_ddr+0x1>
 224:	10 82       	st	Z, r1
 226:	08 95       	ret

00000228 <FtReadData_Implementation>:
 228:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <FtMiosio_pin>
 22c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <FtMiosio_pin+0x1>
 230:	80 81       	ld	r24, Z
 232:	08 95       	ret

00000234 <FtActivateInterface_Implementation>:
 234:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <Ft1248_Ss>
 238:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 23c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 240:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 244:	08 95       	ret

00000246 <FtPullData_Implementation>:
 246:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <Ft1248_Sck>
 24a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 24e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 252:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 256:	08 95       	ret

00000258 <FtDeactivateInterface_Implementation>:
 258:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <Ft1248_Ss>
 25c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 260:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 264:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 268:	08 95       	ret

0000026a <FtPushData_Implementation>:
 26a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <Ft1248_Sck>
 26e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 272:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 276:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 27a:	08 95       	ret

0000027c <FtIsBusOk_Implementation>:
 27c:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <Ft1248_Miso>
 280:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Ft1248_pin>
 284:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <Ft1248_pin+0x1>
 288:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsClear>
 28c:	08 95       	ret

0000028e <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 28e:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <Ft1248_Miso>
 292:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ft1248_ddr>
 296:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ft1248_ddr+0x1>
 29a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 29e:	08 95       	ret

000002a0 <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a0:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <Ft1248_Miso>
 2a4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 2a8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 2ac:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2b0:	08 95       	ret

000002b2 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <FtMiosio_ddr>
 2b6:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <FtMiosio_ddr+0x1>
 2ba:	10 82       	st	Z, r1
 2bc:	08 95       	ret

000002be <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2be:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <FtMiosio_port>
 2c2:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <FtMiosio_port+0x1>
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret

000002cc <FtSckLow>:
}
void FtSckLow(void)
{
 2cc:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ce:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <Ft1248_Sck>
 2d2:	6c 2f       	mov	r22, r28
 2d4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 2d8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 2dc:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2e0:	6c 2f       	mov	r22, r28
 2e2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ft1248_ddr>
 2e6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ft1248_ddr+0x1>
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <FtSsHigh>:
void FtSsHigh(void)
{
 2f2:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 2f4:	c0 91 23 01 	lds	r28, 0x0123	; 0x800123 <Ft1248_Ss>
 2f8:	6c 2f       	mov	r22, r28
 2fa:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Ft1248_port>
 2fe:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Ft1248_port+0x1>
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 306:	6c 2f       	mov	r22, r28
 308:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ft1248_ddr>
 30c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ft1248_ddr+0x1>
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 318:	0e 94 47 01 	call	0x28e	; 0x28e <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 31c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 320:	0e 94 59 01 	call	0x2b2	; 0x2b2 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 324:	0e 94 5f 01 	call	0x2be	; 0x2be <FtEnablePullupsOnMiosio>
    FtSckLow();
 328:	0e 94 66 01 	call	0x2cc	; 0x2cc <FtSckLow>
    FtSsHigh();
 32c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <FtSsHigh>
 330:	08 95       	ret

00000332 <UsbInit>:
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 332:	0e 94 8c 01 	call	0x318	; 0x318 <FtInit>
 336:	08 95       	ret

00000338 <UsbRead>:
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	8c 01       	movw	r16, r24
 342:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtSendCommand>
 346:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtSendCommand+0x1>
 34a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <FtCmd_Read>
 34e:	09 95       	icall
 350:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtBusTurnaround>
 354:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtBusTurnaround+0x1>
 358:	09 95       	icall
 35a:	81 11       	cpse	r24, r1
 35c:	0f c0       	rjmp	.+30     	; 0x37c <UsbRead+0x44>
 35e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 362:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 366:	09 95       	icall
 368:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 36c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 370:	09 95       	icall
 372:	c0 e0       	ldi	r28, 0x00	; 0
 374:	d0 e0       	ldi	r29, 0x00	; 0
 376:	13 c0       	rjmp	.+38     	; 0x39e <UsbRead+0x66>
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	02 c0       	rjmp	.+4      	; 0x380 <UsbRead+0x48>
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtRead>
 384:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtRead+0x1>
 388:	c8 01       	movw	r24, r16
 38a:	8c 0f       	add	r24, r28
 38c:	9d 1f       	adc	r25, r29
 38e:	09 95       	icall
 390:	81 11       	cpse	r24, r1
 392:	f2 cf       	rjmp	.-28     	; 0x378 <UsbRead+0x40>
 394:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 398:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 39c:	09 95       	icall
 39e:	ce 01       	movw	r24, r28
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <UsbHasDataToRead>:
bool UsbHasDataToRead(void) { return FtHasDataToRead(); }
 3aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtHasDataToRead>
 3ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtHasDataToRead+0x1>
 3b2:	09 95       	icall
 3b4:	08 95       	ret

000003b6 <Turn_debug_led_red_when_rx_byte_is_0x01>:
    // Pick one test to run.
    // Uncomment that test.
    // Leave the other tests commented out.
    //
    /* Turn_debug_led_red_when_there_is_a_byte_to_read(); // PASS 2018-07-27 */
    Turn_debug_led_red_when_rx_byte_is_0x01();
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	0e 94 99 01 	call	0x332	; 0x332 <UsbInit>
 3c4:	19 82       	std	Y+1, r1	; 0x01
 3c6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <UsbHasDataToRead>
 3ca:	88 23       	and	r24, r24
 3cc:	e1 f3       	breq	.-8      	; 0x3c6 <Turn_debug_led_red_when_rx_byte_is_0x01+0x10>
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	0e 94 9c 01 	call	0x338	; 0x338 <UsbRead>
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	a9 f7       	brne	.-22     	; 0x3c6 <Turn_debug_led_red_when_rx_byte_is_0x01+0x10>
 3dc:	0e 94 81 00 	call	0x102	; 0x102 <DebugLedTurnRed>
 3e0:	f2 cf       	rjmp	.-28     	; 0x3c6 <Turn_debug_led_red_when_rx_byte_is_0x01+0x10>

000003e2 <SetupDebugLed>:
}
//
void SetupDebugLed(void)
{
    DebugLedInit(
 3e2:	23 e0       	ldi	r18, 0x03	; 3
 3e4:	46 e2       	ldi	r20, 0x26	; 38
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	68 e2       	ldi	r22, 0x28	; 40
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	87 e2       	ldi	r24, 0x27	; 39
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 93 00 	call	0x126	; 0x126 <DebugLedInit>
 3f4:	08 95       	ret

000003f6 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 3f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SetupDebugLed>
    // Pick one test to run.
    // Uncomment that test.
    // Leave the other tests commented out.
    //
    /* Turn_debug_led_red_when_there_is_a_byte_to_read(); // PASS 2018-07-27 */
    Turn_debug_led_red_when_rx_byte_is_0x01();
 3fa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Turn_debug_led_red_when_rx_byte_is_0x01>

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
