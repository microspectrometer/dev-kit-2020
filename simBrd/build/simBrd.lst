
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000348  00800100  000011ce  00001262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800448  00800448  000015aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dbf  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001005  00000000  00000000  00004757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129c  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000084c  00000000  00000000  000069f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013af  00000000  00000000  00007244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001274  00000000  00000000  000085f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00009867  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ec       	ldi	r30, 0xCE	; 206
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 34       	cpi	r26, 0x48	; 72
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	24 e0       	ldi	r18, 0x04	; 4
      8c:	a8 e4       	ldi	r26, 0x48	; 72
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 34       	cpi	r26, 0x4F	; 79
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
      9e:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
      a6:	fc 01       	movw	r30, r24
      a8:	40 81       	ld	r20, Z
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
      b0:	22 0f       	add	r18, r18
      b2:	33 1f       	adc	r19, r19
      b4:	6a 95       	dec	r22
      b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
      b8:	24 2b       	or	r18, r20
      ba:	20 83       	st	Z, r18
      bc:	08 95       	ret

000000be <ClearBit>:
      be:	fc 01       	movw	r30, r24
      c0:	90 81       	ld	r25, Z
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
      c8:	22 0f       	add	r18, r18
      ca:	33 1f       	adc	r19, r19
      cc:	6a 95       	dec	r22
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
      d0:	20 95       	com	r18
      d2:	29 23       	and	r18, r25
      d4:	20 83       	st	Z, r18
      d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
      d8:	fc 01       	movw	r30, r24
      da:	80 81       	ld	r24, Z
      dc:	21 e0       	ldi	r18, 0x01	; 1
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
      e2:	22 0f       	add	r18, r18
      e4:	33 1f       	adc	r19, r19
      e6:	6a 95       	dec	r22
      e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	28 23       	and	r18, r24
      ee:	39 23       	and	r19, r25
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	23 2b       	or	r18, r19
      f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
      f6:	80 e0       	ldi	r24, 0x00	; 0
}
      f8:	08 95       	ret

000000fa <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
      fa:	fc 01       	movw	r30, r24
      fc:	80 81       	ld	r24, Z
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
     102:	95 95       	asr	r25
     104:	87 95       	ror	r24
     106:	6a 95       	dec	r22
     108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	8f 27       	eor	r24, r31
}
     10e:	81 70       	andi	r24, 0x01	; 1
     110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
     112:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <__data_end>
     116:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <ddr_register_>
     11a:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <ddr_register_+0x1>
     11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
     124:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <__data_end>
     128:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <port_register_>
     12c:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <port_register_+0x1>
     130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
     136:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <__data_end>
     13a:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <port_register_>
     13e:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <port_register_+0x1>
     142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
     146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
     148:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <ddr_register_+0x1>
     14c:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <ddr_register_>
    port_register_ = port_register;
     150:	70 93 4c 04 	sts	0x044C, r23	; 0x80044c <port_register_+0x1>
     154:	60 93 4b 04 	sts	0x044B, r22	; 0x80044b <port_register_>
    pin_register_ = pin_register;
     158:	50 93 4a 04 	sts	0x044A, r21	; 0x80044a <pin_register_+0x1>
     15c:	40 93 49 04 	sts	0x0449, r20	; 0x800449 <pin_register_>
    debug_led_ = debug_led;
     160:	20 93 48 04 	sts	0x0448, r18	; 0x800448 <__data_end>
    DebugLedTurnOn();
     164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
     168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
     16c:	09 95       	icall
    DebugLedTurnGreen();
     16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
     172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
     176:	09 95       	icall
     178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
     17a:	cf 93       	push	r28
     17c:	c8 2f       	mov	r28, r24
     17e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtActivateInterface>
     182:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtActivateInterface+0x1>
     186:	09 95       	icall
     188:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
     18c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
     190:	09 95       	icall
     192:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
     196:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
     19a:	09 95       	icall
     19c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtOutputByte>
     1a0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtOutputByte+0x1>
     1a4:	8c 2f       	mov	r24, r28
     1a6:	09 95       	icall
     1a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
     1ac:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
     1b0:	09 95       	icall
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
     1b6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtLetSlaveDriveBus>
     1ba:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtLetSlaveDriveBus+0x1>
     1be:	09 95       	icall
     1c0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
     1c4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
     1c8:	09 95       	icall
     1ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
     1ce:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
     1d2:	09 95       	icall
     1d4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
     1d8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
     1dc:	09 95       	icall
     1de:	08 95       	ret

000001e0 <FtWrite_Implementation>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetMasterDriveBus>
     1ea:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetMasterDriveBus+0x1>
     1ee:	09 95       	icall
     1f0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPushData>
     1f4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPushData+0x1>
     1f8:	09 95       	icall
     1fa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
     1fe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
     202:	88 81       	ld	r24, Y
     204:	09 95       	icall
     206:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPullData>
     20a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPullData+0x1>
     20e:	09 95       	icall
     210:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtIsBusOk>
     214:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtIsBusOk+0x1>
     218:	09 95       	icall
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <FtOutputByte_Implementation>:
     220:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <FtMiosio_port>
     224:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <FtMiosio_port+0x1>
     228:	80 83       	st	Z, r24
     22a:	08 95       	ret

0000022c <FtLetMasterDriveBus_Implementation>:
     22c:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <FtMiosio_ddr>
     230:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <FtMiosio_ddr+0x1>
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	80 83       	st	Z, r24
     238:	08 95       	ret

0000023a <FtLetSlaveDriveBus_Implementation>:
     23a:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <FtMiosio_ddr>
     23e:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <FtMiosio_ddr+0x1>
     242:	10 82       	st	Z, r1
     244:	08 95       	ret

00000246 <FtWriteData_Implementation>:
     246:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <FtMiosio_port>
     24a:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <FtMiosio_port+0x1>
     24e:	80 83       	st	Z, r24
     250:	08 95       	ret

00000252 <FtActivateInterface_Implementation>:
     252:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <Ft1248_Ss>
     256:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     25a:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     25e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
     262:	08 95       	ret

00000264 <FtPullData_Implementation>:
     264:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <Ft1248_Sck>
     268:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     26c:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     270:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
     274:	08 95       	ret

00000276 <FtDeactivateInterface_Implementation>:
     276:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <Ft1248_Ss>
     27a:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     27e:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     282:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     286:	08 95       	ret

00000288 <FtPushData_Implementation>:
     288:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <Ft1248_Sck>
     28c:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     290:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     294:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     298:	08 95       	ret

0000029a <FtIsBusOk_Implementation>:
     29a:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <Ft1248_Miso>
     29e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <Ft1248_pin>
     2a2:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <Ft1248_pin+0x1>
     2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
     2aa:	08 95       	ret

000002ac <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
     2ac:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <Ft1248_Miso>
     2b0:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <Ft1248_ddr>
     2b4:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <Ft1248_ddr+0x1>
     2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
     2bc:	08 95       	ret

000002be <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
     2be:	60 91 3b 04 	lds	r22, 0x043B	; 0x80043b <Ft1248_Miso>
     2c2:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     2c6:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     2ce:	08 95       	ret

000002d0 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
     2d0:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <FtMiosio_ddr>
     2d4:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <FtMiosio_ddr+0x1>
     2d8:	10 82       	st	Z, r1
     2da:	08 95       	ret

000002dc <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
     2dc:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <FtMiosio_port>
     2e0:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <FtMiosio_port+0x1>
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	80 83       	st	Z, r24
     2e8:	08 95       	ret

000002ea <FtSckLow>:
}
void FtSckLow(void)
{
     2ea:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
     2ec:	c0 91 3c 04 	lds	r28, 0x043C	; 0x80043c <Ft1248_Sck>
     2f0:	6c 2f       	mov	r22, r28
     2f2:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     2f6:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     2fa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
     2fe:	6c 2f       	mov	r22, r28
     300:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <Ft1248_ddr>
     304:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <Ft1248_ddr+0x1>
     308:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <FtSsHigh>:
void FtSsHigh(void)
{
     310:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
     312:	c0 91 3d 04 	lds	r28, 0x043D	; 0x80043d <Ft1248_Ss>
     316:	6c 2f       	mov	r22, r28
     318:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <Ft1248_port>
     31c:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <Ft1248_port+0x1>
     320:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
     324:	6c 2f       	mov	r22, r28
     326:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <Ft1248_ddr>
     32a:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <Ft1248_ddr+0x1>
     32e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
     336:	0e 94 56 01 	call	0x2ac	; 0x2ac <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
     33a:	0e 94 5f 01 	call	0x2be	; 0x2be <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
     33e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
     342:	0e 94 6e 01 	call	0x2dc	; 0x2dc <FtEnablePullupsOnMiosio>
    FtSckLow();
     346:	0e 94 75 01 	call	0x2ea	; 0x2ea <FtSckLow>
    FtSsHigh();
     34a:	0e 94 88 01 	call	0x310	; 0x310 <FtSsHigh>
     34e:	08 95       	ret

00000350 <UsbInit>:
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
     350:	0e 94 9b 01 	call	0x336	; 0x336 <FtInit>
     354:	08 95       	ret

00000356 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8c 01       	movw	r16, r24
     364:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
     366:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtSendCommand>
     36a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtSendCommand+0x1>
     36e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <FtCmd_Write>
     372:	09 95       	icall
    if (!FtBusTurnaround())
     374:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtBusTurnaround>
     378:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtBusTurnaround+0x1>
     37c:	09 95       	icall
     37e:	81 11       	cpse	r24, r1
     380:	0d c0       	rjmp	.+26     	; 0x39c <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
     382:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
     386:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
     38a:	09 95       	icall
        FtDeactivateInterface();
     38c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
     390:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
     394:	09 95       	icall
        return num_bytes_sent;
     396:	c0 e0       	ldi	r28, 0x00	; 0
     398:	d0 e0       	ldi	r29, 0x00	; 0
     39a:	15 c0       	rjmp	.+42     	; 0x3c6 <UsbWrite+0x70>
     39c:	c0 e0       	ldi	r28, 0x00	; 0
     39e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
     3a0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtWrite>
     3a4:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtWrite+0x1>
     3a8:	c8 01       	movw	r24, r16
     3aa:	8c 0f       	add	r24, r28
     3ac:	9d 1f       	adc	r25, r29
     3ae:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
     3b0:	88 23       	and	r24, r24
     3b2:	21 f0       	breq	.+8      	; 0x3bc <UsbWrite+0x66>
     3b4:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
     3b6:	ce 15       	cp	r28, r14
     3b8:	df 05       	cpc	r29, r15
     3ba:	90 f3       	brcs	.-28     	; 0x3a0 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
     3bc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtDeactivateInterface>
     3c0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtDeactivateInterface+0x1>
     3c4:	09 95       	icall
    return num_bytes_sent;
}
     3c6:	ce 01       	movw	r24, r28
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	08 95       	ret

000003d6 <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
     3d6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <ReadSpiStatusRegister>
     3da:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <ReadSpiStatusRegister+0x1>
     3de:	09 95       	icall
     3e0:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
     3e4:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
     3e8:	09 95       	icall
     3ea:	08 95       	ret

000003ec <ReadSpiStatusRegister_Implementation>:
     3ec:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <Spi_spsr>
     3f0:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <Spi_spsr+0x1>
     3f4:	80 81       	ld	r24, Z
     3f6:	08 95       	ret

000003f8 <ReadSpiDataRegister_Implementation>:
     3f8:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <Spi_spdr>
     3fc:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <Spi_spdr+0x1>
     400:	80 81       	ld	r24, Z
     402:	08 95       	ret

00000404 <SpiMasterOpenSpi_Implementation>:
     404:	60 91 2e 04 	lds	r22, 0x042E	; 0x80042e <Spi_Ss>
     408:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <Spi_port>
     40c:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <Spi_port+0x1>
     410:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
     414:	08 95       	ret

00000416 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
     416:	60 91 27 04 	lds	r22, 0x0427	; 0x800427 <Spi_Enable>
     41a:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <Spi_spcr>
     41e:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <Spi_spcr+0x1>
     422:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     426:	08 95       	ret

00000428 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
     428:	60 91 2e 04 	lds	r22, 0x042E	; 0x80042e <Spi_Ss>
     42c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <Spi_port>
     430:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <Spi_port+0x1>
     434:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
     438:	08 95       	ret

0000043a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
     43a:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <Spi_InterruptFlag>
     43e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <Spi_spsr>
     442:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <Spi_spsr+0x1>
     446:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
     44a:	08 95       	ret

0000044c <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
     44c:	60 91 2c 04 	lds	r22, 0x042C	; 0x80042c <Spi_Miso>
     450:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <Spi_pin>
     454:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <Spi_pin+0x1>
     458:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
     45c:	08 95       	ret

0000045e <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
    SlaveSelectIdleHigh();
     464:	0e 94 14 02 	call	0x428	; 0x428 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
     468:	10 91 2c 04 	lds	r17, 0x042C	; 0x80042c <Spi_Miso>
     46c:	c0 91 39 04 	lds	r28, 0x0439	; 0x800439 <Spi_ddr>
     470:	d0 91 3a 04 	lds	r29, 0x043A	; 0x80043a <Spi_ddr+0x1>
     474:	61 2f       	mov	r22, r17
     476:	ce 01       	movw	r24, r28
     478:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
     47c:	61 2f       	mov	r22, r17
     47e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <Spi_port>
     482:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <Spi_port+0x1>
     486:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
     48a:	60 91 2e 04 	lds	r22, 0x042E	; 0x80042e <Spi_Ss>
     48e:	ce 01       	movw	r24, r28
     490:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
     494:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <Spi_Mosi>
     498:	ce 01       	movw	r24, r28
     49a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
     49e:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <Spi_Sck>
     4a2:	ce 01       	movw	r24, r28
     4a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
     4a8:	c0 91 33 04 	lds	r28, 0x0433	; 0x800433 <Spi_spcr>
     4ac:	d0 91 34 04 	lds	r29, 0x0434	; 0x800434 <Spi_spcr+0x1>
     4b0:	60 91 2a 04 	lds	r22, 0x042A	; 0x80042a <Spi_MasterSlaveSelect>
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
     4ba:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <Spi_ClockRateBit0>
     4be:	ce 01       	movw	r24, r28
     4c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
     4c4:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <Spi_ClockRateBit1>
     4c8:	ce 01       	movw	r24, r28
     4ca:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
     4ce:	60 91 26 04 	lds	r22, 0x0426	; 0x800426 <Spi_DoubleClockRate>
     4d2:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <Spi_spsr>
     4d6:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <Spi_spsr+0x1>
     4da:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
     4de:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <EnableSpi>
     4e2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <EnableSpi+0x1>
     4e6:	09 95       	icall
    ClearPendingSpiInterrupt();
     4e8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <ClearPendingSpiInterrupt>
     4ec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <ClearPendingSpiInterrupt+0x1>
     4f0:	09 95       	icall
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	08 95       	ret

000004fa <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
     4fa:	cf 93       	push	r28
     4fc:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
     4fe:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <SpiMasterOpenSpi>
     502:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <SpiMasterOpenSpi+0x1>
     506:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
     508:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <Spi_spdr>
     50c:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <Spi_spdr+0x1>
     510:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
     512:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <SpiTransferIsDone>
     516:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <SpiTransferIsDone+0x1>
     51a:	09 95       	icall
     51c:	88 23       	and	r24, r24
     51e:	c9 f3       	breq	.-14     	; 0x512 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
     520:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiMasterCloseSpi>
     524:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiMasterCloseSpi+0x1>
     528:	09 95       	icall
}
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <SpiMasterRead>:
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    return ReadSpiDataRegister();
     534:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
     538:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
     53c:	09 95       	icall
}
     53e:	08 95       	ret

00000540 <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
     540:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <SpiResponseIsReady>
     544:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <SpiResponseIsReady+0x1>
     548:	09 95       	icall
     54a:	88 23       	and	r24, r24
     54c:	c9 f3       	breq	.-14     	; 0x540 <SpiMasterWaitForResponse>
}
     54e:	08 95       	ret

00000550 <AddTestResultStringLengths>:
    };
    this_test.passed = (nbytes == sizeof_dummy_frame);
    PrintTestResultInColor(this_test);
    // If test fails, report number of bytes.
    if (!this_test.passed) PrintSizeOfSpiSlaveResponse(nbytes);
}
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	e5 e0       	ldi	r30, 0x05	; 5
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	ec 0f       	add	r30, r28
     55e:	fd 1f       	adc	r31, r29
     560:	01 90       	ld	r0, Z+
     562:	00 20       	and	r0, r0
     564:	e9 f7       	brne	.-6      	; 0x560 <AddTestResultStringLengths+0x10>
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	cf 01       	movw	r24, r30
     56a:	25 e0       	ldi	r18, 0x05	; 5
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	2c 0f       	add	r18, r28
     570:	3d 1f       	adc	r19, r29
     572:	82 1b       	sub	r24, r18
     574:	93 0b       	sbc	r25, r19
     576:	de 01       	movw	r26, r28
     578:	1c 96       	adiw	r26, 0x0c	; 12
     57a:	fd 01       	movw	r30, r26
     57c:	01 90       	ld	r0, Z+
     57e:	00 20       	and	r0, r0
     580:	e9 f7       	brne	.-6      	; 0x57c <AddTestResultStringLengths+0x2c>
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	ea 1b       	sub	r30, r26
     586:	fb 0b       	sbc	r31, r27
     588:	8e 0f       	add	r24, r30
     58a:	8c 5f       	subi	r24, 0xFC	; 252
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <PrintTestResultInColor>:
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	cb 57       	subi	r28, 0x7B	; 123
     59c:	d1 09       	sbc	r29, r1
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	2d b7       	in	r18, 0x3d	; 61
     5aa:	3e b7       	in	r19, 0x3e	; 62
     5ac:	29 55       	subi	r18, 0x59	; 89
     5ae:	31 09       	sbc	r19, r1
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	3e bf       	out	0x3e, r19	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	2d bf       	out	0x3d, r18	; 61
     5ba:	ad b7       	in	r26, 0x3d	; 61
     5bc:	be b7       	in	r27, 0x3e	; 62
     5be:	11 96       	adiw	r26, 0x01	; 1
     5c0:	89 e5       	ldi	r24, 0x59	; 89
     5c2:	fe 01       	movw	r30, r28
     5c4:	e0 58       	subi	r30, 0x80	; 128
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	01 90       	ld	r0, Z+
     5ca:	0d 92       	st	X+, r0
     5cc:	8a 95       	dec	r24
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <PrintTestResultInColor+0x36>
     5d0:	0e 94 a8 02 	call	0x550	; 0x550 <AddTestResultStringLengths>
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	4e 96       	adiw	r24, 0x1e	; 30
     5e2:	8c 37       	cpi	r24, 0x7C	; 124
     5e4:	91 05       	cpc	r25, r1
     5e6:	98 f0       	brcs	.+38     	; 0x60e <PrintTestResultInColor+0x7c>
     5e8:	2f e2       	ldi	r18, 0x2F	; 47
     5ea:	33 e0       	ldi	r19, 0x03	; 3
     5ec:	3f 93       	push	r19
     5ee:	2f 93       	push	r18
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	0e 94 ed 05 	call	0xbda	; 0xbda <snprintf>
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	3c c0       	rjmp	.+120    	; 0x686 <PrintTestResultInColor+0xf4>
     60e:	c8 52       	subi	r28, 0x28	; 40
     610:	df 4f       	sbci	r29, 0xFF	; 255
     612:	28 81       	ld	r18, Y
     614:	c8 5d       	subi	r28, 0xD8	; 216
     616:	d0 40       	sbci	r29, 0x00	; 0
     618:	21 11       	cpse	r18, r1
     61a:	05 c0       	rjmp	.+10     	; 0x626 <PrintTestResultInColor+0x94>
     61c:	4a e2       	ldi	r20, 0x2A	; 42
     61e:	53 e0       	ldi	r21, 0x03	; 3
     620:	2d e0       	ldi	r18, 0x0D	; 13
     622:	34 e0       	ldi	r19, 0x04	; 4
     624:	04 c0       	rjmp	.+8      	; 0x62e <PrintTestResultInColor+0x9c>
     626:	45 e2       	ldi	r20, 0x25	; 37
     628:	53 e0       	ldi	r21, 0x03	; 3
     62a:	23 e1       	ldi	r18, 0x13	; 19
     62c:	34 e0       	ldi	r19, 0x04	; 4
     62e:	6f e1       	ldi	r22, 0x1F	; 31
     630:	74 e0       	ldi	r23, 0x04	; 4
     632:	7f 93       	push	r23
     634:	6f 93       	push	r22
     636:	5f 93       	push	r21
     638:	4f 93       	push	r20
     63a:	3f 93       	push	r19
     63c:	2f 93       	push	r18
     63e:	9e 01       	movw	r18, r28
     640:	29 57       	subi	r18, 0x79	; 121
     642:	3f 4f       	sbci	r19, 0xFF	; 255
     644:	3f 93       	push	r19
     646:	2f 93       	push	r18
     648:	29 e1       	ldi	r18, 0x19	; 25
     64a:	34 e0       	ldi	r19, 0x04	; 4
     64c:	3f 93       	push	r19
     64e:	2f 93       	push	r18
     650:	20 e8       	ldi	r18, 0x80	; 128
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	2c 0f       	add	r18, r28
     656:	3d 1f       	adc	r19, r29
     658:	3f 93       	push	r19
     65a:	2f 93       	push	r18
     65c:	23 e1       	ldi	r18, 0x13	; 19
     65e:	34 e0       	ldi	r19, 0x04	; 4
     660:	3f 93       	push	r19
     662:	2f 93       	push	r18
     664:	23 e6       	ldi	r18, 0x63	; 99
     666:	33 e0       	ldi	r19, 0x03	; 3
     668:	3f 93       	push	r19
     66a:	2f 93       	push	r18
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	0e 94 ed 05 	call	0xbda	; 0xbda <snprintf>
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	fc 01       	movw	r30, r24
     68c:	01 90       	ld	r0, Z+
     68e:	00 20       	and	r0, r0
     690:	e9 f7       	brne	.-6      	; 0x68c <PrintTestResultInColor+0xfa>
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	bf 01       	movw	r22, r30
     696:	68 1b       	sub	r22, r24
     698:	79 0b       	sbc	r23, r25
     69a:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
     69e:	c5 58       	subi	r28, 0x85	; 133
     6a0:	df 4f       	sbci	r29, 0xFF	; 255
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <RunTest>:
     6b2:	fc 01       	movw	r30, r24
     6b4:	dc 01       	movw	r26, r24
     6b6:	a8 5a       	subi	r26, 0xA8	; 168
     6b8:	bf 4f       	sbci	r27, 0xFF	; 255
     6ba:	6c 93       	st	X, r22
     6bc:	8d b7       	in	r24, 0x3d	; 61
     6be:	9e b7       	in	r25, 0x3e	; 62
     6c0:	89 55       	subi	r24, 0x59	; 89
     6c2:	91 09       	sbc	r25, r1
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	9e bf       	out	0x3e, r25	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	8d bf       	out	0x3d, r24	; 61
     6ce:	ad b7       	in	r26, 0x3d	; 61
     6d0:	be b7       	in	r27, 0x3e	; 62
     6d2:	11 96       	adiw	r26, 0x01	; 1
     6d4:	99 e5       	ldi	r25, 0x59	; 89
     6d6:	01 90       	ld	r0, Z+
     6d8:	0d 92       	st	X+, r0
     6da:	9a 95       	dec	r25
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <RunTest+0x24>
     6de:	0e 94 c9 02 	call	0x592	; 0x592 <PrintTestResultInColor>
     6e2:	8d b7       	in	r24, 0x3d	; 61
     6e4:	9e b7       	in	r25, 0x3e	; 62
     6e6:	87 5a       	subi	r24, 0xA7	; 167
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	9e bf       	out	0x3e, r25	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	8d bf       	out	0x3d, r24	; 61
     6f4:	08 95       	ret

000006f6 <PrintSizeOfSpiSlaveResponse>:
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	ee 97       	sbiw	r28, 0x3e	; 62
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	2f e1       	ldi	r18, 0x1F	; 31
     710:	34 e0       	ldi	r19, 0x04	; 4
     712:	3f 93       	push	r19
     714:	2f 93       	push	r18
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	83 e1       	ldi	r24, 0x13	; 19
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	9f 93       	push	r25
     720:	8f 93       	push	r24
     722:	89 e1       	ldi	r24, 0x19	; 25
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	8a e9       	ldi	r24, 0x9A	; 154
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	1f 92       	push	r1
     734:	8e e3       	ldi	r24, 0x3E	; 62
     736:	8f 93       	push	r24
     738:	8e 01       	movw	r16, r28
     73a:	0f 5f       	subi	r16, 0xFF	; 255
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	1f 93       	push	r17
     740:	0f 93       	push	r16
     742:	0e 94 ed 05 	call	0xbda	; 0xbda <snprintf>
     746:	f8 01       	movw	r30, r16
     748:	01 90       	ld	r0, Z+
     74a:	00 20       	and	r0, r0
     74c:	e9 f7       	brne	.-6      	; 0x748 <PrintSizeOfSpiSlaveResponse+0x52>
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	bf 01       	movw	r22, r30
     752:	60 1b       	sub	r22, r16
     754:	71 0b       	sbc	r23, r17
     756:	c8 01       	movw	r24, r16
     758:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	ee 96       	adiw	r28, 0x3e	; 62
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <PrintAdcReading>:
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	a5 97       	sbiw	r28, 0x25	; 37
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	2f e1       	ldi	r18, 0x1F	; 31
     796:	34 e0       	ldi	r19, 0x04	; 4
     798:	3f 93       	push	r19
     79a:	2f 93       	push	r18
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	83 e1       	ldi	r24, 0x13	; 19
     7a2:	94 e0       	ldi	r25, 0x04	; 4
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	89 e1       	ldi	r24, 0x19	; 25
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	85 ec       	ldi	r24, 0xC5	; 197
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	1f 92       	push	r1
     7ba:	85 e2       	ldi	r24, 0x25	; 37
     7bc:	8f 93       	push	r24
     7be:	8e 01       	movw	r16, r28
     7c0:	0f 5f       	subi	r16, 0xFF	; 255
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	1f 93       	push	r17
     7c6:	0f 93       	push	r16
     7c8:	0e 94 ed 05 	call	0xbda	; 0xbda <snprintf>
     7cc:	f8 01       	movw	r30, r16
     7ce:	01 90       	ld	r0, Z+
     7d0:	00 20       	and	r0, r0
     7d2:	e9 f7       	brne	.-6      	; 0x7ce <PrintAdcReading+0x52>
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	bf 01       	movw	r22, r30
     7d8:	60 1b       	sub	r22, r16
     7da:	71 0b       	sbc	r23, r17
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	a5 96       	adiw	r28, 0x25	; 37
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	08 95       	ret

00000802 <PrintSpiSlaveResponseInColor>:
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	ad 97       	sbiw	r28, 0x2d	; 45
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	2f e1       	ldi	r18, 0x1F	; 31
     81c:	34 e0       	ldi	r19, 0x04	; 4
     81e:	3f 93       	push	r19
     820:	2f 93       	push	r18
     822:	1f 92       	push	r1
     824:	8f 93       	push	r24
     826:	83 e1       	ldi	r24, 0x13	; 19
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	89 e1       	ldi	r24, 0x19	; 25
     830:	94 e0       	ldi	r25, 0x04	; 4
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	81 ee       	ldi	r24, 0xE1	; 225
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	1f 92       	push	r1
     840:	8d e2       	ldi	r24, 0x2D	; 45
     842:	8f 93       	push	r24
     844:	8e 01       	movw	r16, r28
     846:	0f 5f       	subi	r16, 0xFF	; 255
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	1f 93       	push	r17
     84c:	0f 93       	push	r16
     84e:	0e 94 ed 05 	call	0xbda	; 0xbda <snprintf>
     852:	f8 01       	movw	r30, r16
     854:	01 90       	ld	r0, Z+
     856:	00 20       	and	r0, r0
     858:	e9 f7       	brne	.-6      	; 0x854 <PrintSpiSlaveResponseInColor+0x52>
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	bf 01       	movw	r22, r30
     85e:	60 1b       	sub	r22, r16
     860:	71 0b       	sbc	r23, r17
     862:	c8 01       	movw	r24, r16
     864:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	ad 96       	adiw	r28, 0x2d	; 45
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <SetupDebugLed>:
     888:	23 e0       	ldi	r18, 0x03	; 3
     88a:	46 e2       	ldi	r20, 0x26	; 38
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	68 e2       	ldi	r22, 0x28	; 40
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	87 e2       	ldi	r24, 0x27	; 39
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
     89a:	08 95       	ret

0000089c <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host>:
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	c9 55       	subi	r28, 0x59	; 89
     8a8:	d1 09       	sbc	r29, r1
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
     8b8:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
     8c2:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
     8c6:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     8ca:	18 2f       	mov	r17, r24
     8cc:	de 01       	movw	r26, r28
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	89 e5       	ldi	r24, 0x59	; 89
     8d2:	fd 01       	movw	r30, r26
     8d4:	11 92       	st	Z+, r1
     8d6:	8a 95       	dec	r24
     8d8:	e9 f7       	brne	.-6      	; 0x8d4 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x38>
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	e6 e0       	ldi	r30, 0x06	; 6
     8de:	f4 e0       	ldi	r31, 0x04	; 4
     8e0:	01 90       	ld	r0, Z+
     8e2:	0d 92       	st	X+, r0
     8e4:	8a 95       	dec	r24
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x44>
     8e8:	85 e4       	ldi	r24, 0x45	; 69
     8ea:	e0 ee       	ldi	r30, 0xE0	; 224
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	de 01       	movw	r26, r28
     8f0:	18 96       	adiw	r26, 0x08	; 8
     8f2:	01 90       	ld	r0, Z+
     8f4:	0d 92       	st	X+, r0
     8f6:	8a 95       	dec	r24
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host+0x56>
     8fa:	fe 01       	movw	r30, r28
     8fc:	e3 5b       	subi	r30, 0xB3	; 179
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	8c e0       	ldi	r24, 0x0C	; 12
     902:	df 01       	movw	r26, r30
     904:	1d 92       	st	X+, r1
     906:	8a 95       	dec	r24
     908:	e9 f7       	brne	.-6      	; 0x904 <__stack+0x5>
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	11 30       	cpi	r17, 0x01	; 1
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RunTest>
     91a:	6a 96       	adiw	r28, 0x1a	; 26
     91c:	8f ad       	ldd	r24, Y+63	; 0x3f
     91e:	6a 97       	sbiw	r28, 0x1a	; 26
     920:	81 11       	cpse	r24, r1
     922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
     924:	81 2f       	mov	r24, r17
     926:	0e 94 01 04 	call	0x802	; 0x802 <PrintSpiSlaveResponseInColor>
     92a:	c7 5a       	subi	r28, 0xA7	; 167
     92c:	df 4f       	sbci	r29, 0xFF	; 255
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	08 95       	ret

00000940 <SpiMasterPassFakeSensorData>:
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	1f 92       	push	r1
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
     954:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
     958:	03 e0       	ldi	r16, 0x03	; 3
     95a:	16 e0       	ldi	r17, 0x06	; 6
     95c:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
     972:	01 50       	subi	r16, 0x01	; 1
     974:	11 09       	sbc	r17, r1
     976:	91 f7       	brne	.-28     	; 0x95c <SpiMasterPassFakeSensorData+0x1c>
     978:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	0e 94 ab 01 	call	0x356	; 0x356 <UsbWrite>
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	96 e0       	ldi	r25, 0x06	; 6
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host>:
    byte_buffer = SpiMasterRead(); // read last byte
    UsbWrite(&byte_buffer, 1); // send last byte out
    return byte_counter;
}
void SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host(void)
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	c9 55       	subi	r28, 0x59	; 89
     9a8:	d1 09       	sbc	r29, r1
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
     9b4:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
    UsbInit();
     9b8:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
    /* =====[ Operate ]===== */
    uint16_t nbytes = SpiMasterPassFakeSensorData();
     9bc:	0e 94 a0 04 	call	0x940	; 0x940 <SpiMasterPassFakeSensorData>
     9c0:	8c 01       	movw	r16, r24
    /* =====[ Test ]===== */
    // USB host reads the frame.
    // ```python REPL
    // a = s.read(s.inWaiting())
    // ```
    TestResult this_test = {
     9c2:	de 01       	movw	r26, r28
     9c4:	11 96       	adiw	r26, 0x01	; 1
     9c6:	89 e5       	ldi	r24, 0x59	; 89
     9c8:	fd 01       	movw	r30, r26
     9ca:	11 92       	st	Z+, r1
     9cc:	8a 95       	dec	r24
     9ce:	e9 f7       	brne	.-6      	; 0x9ca <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x30>
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	e6 e0       	ldi	r30, 0x06	; 6
     9d4:	f4 e0       	ldi	r31, 0x04	; 4
     9d6:	01 90       	ld	r0, Z+
     9d8:	0d 92       	st	X+, r0
     9da:	8a 95       	dec	r24
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x3c>
     9de:	83 e3       	ldi	r24, 0x33	; 51
     9e0:	e1 e3       	ldi	r30, 0x31	; 49
     9e2:	f2 e0       	ldi	r31, 0x02	; 2
     9e4:	de 01       	movw	r26, r28
     9e6:	18 96       	adiw	r26, 0x08	; 8
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	8a 95       	dec	r24
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x4e>
     9f0:	fe 01       	movw	r30, r28
     9f2:	fb 96       	adiw	r30, 0x3b	; 59
     9f4:	8e e1       	ldi	r24, 0x1E	; 30
     9f6:	df 01       	movw	r26, r30
     9f8:	1d 92       	st	X+, r1
     9fa:	8a 95       	dec	r24
     9fc:	e9 f7       	brne	.-6      	; 0x9f8 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x5e>
        .pcb_name = "simBrd",
        .test_name = "Get_a_frame_from_slave_and_write_frame_to_USB_host"
    };
    bool assert_true = (nbytes == sizeof_dummy_frame);
    TestResult *result = &this_test; RunTest(result, assert_true);
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	04 30       	cpi	r16, 0x04	; 4
     a02:	b6 e0       	ldi	r27, 0x06	; 6
     a04:	1b 07       	cpc	r17, r27
     a06:	09 f0       	breq	.+2      	; 0xa0a <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x70>
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RunTest>
    // Expect 1540 bytes of repeated ABCs, ending in letter `F`
    if (Failed(result)) PrintSizeOfSpiSlaveResponse(nbytes);
     a12:	6a 96       	adiw	r28, 0x1a	; 26
     a14:	8f ad       	ldd	r24, Y+63	; 0x3f
     a16:	6a 97       	sbiw	r28, 0x1a	; 26
     a18:	81 11       	cpse	r24, r1
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host+0x88>
     a1c:	c8 01       	movw	r24, r16
     a1e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <PrintSizeOfSpiSlaveResponse>
}
     a22:	c7 5a       	subi	r28, 0xA7	; 167
     a24:	df 4f       	sbci	r29, 0xFF	; 255
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host>:
void SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host(void)
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	cb 55       	subi	r28, 0x5B	; 91
     a48:	d1 09       	sbc	r29, r1
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
     a54:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
    UsbInit();
     a58:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
    /* =====[ Operate ]===== */
    SpiMasterWrite(cmd_send_adc_reading);
     a5c:	84 e0       	ldi	r24, 0x04	; 4
     a5e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    uint8_t adc_bytes[2]; uint8_t * padc_bytes = adc_bytes;
    uint16_t nbytes = sizeof(adc_bytes);
    uint16_t byte_counter = 0;
    while (byte_counter++ < nbytes)
    {
        SpiMasterWaitForResponse(); // Slave signals when the response is ready.
     a62:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
        *(padc_bytes++) = SpiMasterRead();
     a66:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     a6a:	89 83       	std	Y+1, r24	; 0x01
    uint8_t adc_bytes[2]; uint8_t * padc_bytes = adc_bytes;
    uint16_t nbytes = sizeof(adc_bytes);
    uint16_t byte_counter = 0;
    while (byte_counter++ < nbytes)
    {
        SpiMasterWaitForResponse(); // Slave signals when the response is ready.
     a6c:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
        *(padc_bytes++) = SpiMasterRead();
     a70:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     a74:	8a 83       	std	Y+2, r24	; 0x02
    }
    uint16_t adc_reading = (adc_bytes[0] << 8) + adc_bytes[1];
     a76:	09 81       	ldd	r16, Y+1	; 0x01
     a78:	10 e0       	ldi	r17, 0x00	; 0
     a7a:	10 2f       	mov	r17, r16
     a7c:	00 27       	eor	r16, r16
     a7e:	08 0f       	add	r16, r24
     a80:	11 1d       	adc	r17, r1
    PrintAdcReading(adc_reading);
     a82:	c8 01       	movw	r24, r16
     a84:	0e 94 be 03 	call	0x77c	; 0x77c <PrintAdcReading>
    DebugLedTurnRed();
     a88:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>

    TestResult this_test = {
     a8c:	ce 01       	movw	r24, r28
     a8e:	03 96       	adiw	r24, 0x03	; 3
     a90:	29 e5       	ldi	r18, 0x59	; 89
     a92:	dc 01       	movw	r26, r24
     a94:	1d 92       	st	X+, r1
     a96:	2a 95       	dec	r18
     a98:	e9 f7       	brne	.-6      	; 0xa94 <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host+0x5a>
     a9a:	27 e0       	ldi	r18, 0x07	; 7
     a9c:	e6 e0       	ldi	r30, 0x06	; 6
     a9e:	f4 e0       	ldi	r31, 0x04	; 4
     aa0:	dc 01       	movw	r26, r24
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	2a 95       	dec	r18
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host+0x68>
     aaa:	2b e3       	ldi	r18, 0x3B	; 59
     aac:	e2 e8       	ldi	r30, 0x82	; 130
     aae:	f2 e0       	ldi	r31, 0x02	; 2
     ab0:	de 01       	movw	r26, r28
     ab2:	1a 96       	adiw	r26, 0x0a	; 10
     ab4:	01 90       	ld	r0, Z+
     ab6:	0d 92       	st	X+, r0
     ab8:	2a 95       	dec	r18
     aba:	e1 f7       	brne	.-8      	; 0xab4 <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host+0x7a>
     abc:	fe 01       	movw	r30, r28
     abe:	eb 5b       	subi	r30, 0xBB	; 187
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	26 e1       	ldi	r18, 0x16	; 22
     ac4:	df 01       	movw	r26, r30
     ac6:	1d 92       	st	X+, r1
     ac8:	2a 95       	dec	r18
     aca:	e9 f7       	brne	.-6      	; 0xac6 <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host+0x8c>
        .pcb_name = "simBrd",
        .test_name = "SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host"
    };
    bool assert_true = (nbytes == 2);
    TestResult *result = &this_test; RunTest(result, assert_true);
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RunTest>
    if (Failed(result)) PrintAdcReading(adc_reading);
     ad2:	6c 96       	adiw	r28, 0x1c	; 28
     ad4:	8f ad       	ldd	r24, Y+63	; 0x3f
     ad6:	6c 97       	sbiw	r28, 0x1c	; 28
     ad8:	81 11       	cpse	r24, r1
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host+0xa8>
     adc:	c8 01       	movw	r24, r16
     ade:	0e 94 be 03 	call	0x77c	; 0x77c <PrintAdcReading>
}
     ae2:	c5 5a       	subi	r28, 0xA5	; 165
     ae4:	df 4f       	sbci	r29, 0xFF	; 255
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host>:
void SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host(void)
{
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	cb 55       	subi	r28, 0x5B	; 91
     b08:	d1 09       	sbc	r29, r1
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
     b14:	0e 94 2f 02 	call	0x45e	; 0x45e <SpiMasterInit>
    UsbInit();
     b18:	0e 94 a8 01 	call	0x350	; 0x350 <UsbInit>
    /* =====[ Operate ]===== */
    SpiMasterWrite(cmd_send_fake_adc_reading);
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SpiMasterWrite>
    uint8_t adc_bytes[2]; uint8_t * padc_bytes = adc_bytes;
    uint16_t nbytes = sizeof(adc_bytes);
    uint16_t byte_counter = 0;
    while (byte_counter++ < nbytes)
    {
        SpiMasterWaitForResponse(); // Slave signals when the response is ready.
     b22:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
        *(padc_bytes++) = SpiMasterRead();
     b26:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     b2a:	89 83       	std	Y+1, r24	; 0x01
    uint8_t adc_bytes[2]; uint8_t * padc_bytes = adc_bytes;
    uint16_t nbytes = sizeof(adc_bytes);
    uint16_t byte_counter = 0;
    while (byte_counter++ < nbytes)
    {
        SpiMasterWaitForResponse(); // Slave signals when the response is ready.
     b2c:	0e 94 a0 02 	call	0x540	; 0x540 <SpiMasterWaitForResponse>
        *(padc_bytes++) = SpiMasterRead();
     b30:	0e 94 97 02 	call	0x52e	; 0x52e <SpiMasterRead>
     b34:	8a 83       	std	Y+2, r24	; 0x02
    }
    uint16_t adc_reading = (adc_bytes[0] << 8) + adc_bytes[1];
     b36:	09 81       	ldd	r16, Y+1	; 0x01
     b38:	10 e0       	ldi	r17, 0x00	; 0
     b3a:	10 2f       	mov	r17, r16
     b3c:	00 27       	eor	r16, r16
     b3e:	08 0f       	add	r16, r24
     b40:	11 1d       	adc	r17, r1
    DebugLedTurnRed();
     b42:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>

    TestResult this_test = {
     b46:	de 01       	movw	r26, r28
     b48:	13 96       	adiw	r26, 0x03	; 3
     b4a:	89 e5       	ldi	r24, 0x59	; 89
     b4c:	fd 01       	movw	r30, r26
     b4e:	11 92       	st	Z+, r1
     b50:	8a 95       	dec	r24
     b52:	e9 f7       	brne	.-6      	; 0xb4e <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host+0x54>
     b54:	87 e0       	ldi	r24, 0x07	; 7
     b56:	e6 e0       	ldi	r30, 0x06	; 6
     b58:	f4 e0       	ldi	r31, 0x04	; 4
     b5a:	01 90       	ld	r0, Z+
     b5c:	0d 92       	st	X+, r0
     b5e:	8a 95       	dec	r24
     b60:	e1 f7       	brne	.-8      	; 0xb5a <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host+0x60>
     b62:	80 e4       	ldi	r24, 0x40	; 64
     b64:	e3 ed       	ldi	r30, 0xD3	; 211
     b66:	f2 e0       	ldi	r31, 0x02	; 2
     b68:	de 01       	movw	r26, r28
     b6a:	1a 96       	adiw	r26, 0x0a	; 10
     b6c:	01 90       	ld	r0, Z+
     b6e:	0d 92       	st	X+, r0
     b70:	8a 95       	dec	r24
     b72:	e1 f7       	brne	.-8      	; 0xb6c <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host+0x72>
     b74:	fe 01       	movw	r30, r28
     b76:	e6 5b       	subi	r30, 0xB6	; 182
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	81 e1       	ldi	r24, 0x11	; 17
     b7c:	df 01       	movw	r26, r30
     b7e:	1d 92       	st	X+, r1
     b80:	8a 95       	dec	r24
     b82:	e9 f7       	brne	.-6      	; 0xb7e <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host+0x84>
        .pcb_name = "simBrd",
        .test_name = "SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host"
    };
    bool assert_true = (adc_reading == fake_adc_reading);
    TestResult *result = &this_test; RunTest(result, assert_true);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	04 33       	cpi	r16, 0x34	; 52
     b88:	b2 e1       	ldi	r27, 0x12	; 18
     b8a:	1b 07       	cpc	r17, r27
     b8c:	09 f0       	breq	.+2      	; 0xb90 <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host+0x96>
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	ce 01       	movw	r24, r28
     b92:	03 96       	adiw	r24, 0x03	; 3
     b94:	0e 94 59 03 	call	0x6b2	; 0x6b2 <RunTest>
    if (Failed(result)) PrintAdcReading(adc_reading);
     b98:	6c 96       	adiw	r28, 0x1c	; 28
     b9a:	8f ad       	ldd	r24, Y+63	; 0x3f
     b9c:	6c 97       	sbiw	r28, 0x1c	; 28
     b9e:	81 11       	cpse	r24, r1
     ba0:	03 c0       	rjmp	.+6      	; 0xba8 <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host+0xae>
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 be 03 	call	0x77c	; 0x77c <PrintAdcReading>
}
     ba8:	c5 5a       	subi	r28, 0xA5	; 165
     baa:	df 4f       	sbci	r29, 0xFF	; 255
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
     bc0:	0e 94 44 04 	call	0x888	; 0x888 <SetupDebugLed>
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    /* test_SpiMaster(); // All test pass 2018-08-15 */
    SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host(); // prints a lot
     bc4:	0e 94 cd 04 	call	0x99a	; 0x99a <SpiMaster_get_a_frame_from_slave_and_write_frame_to_USB_host>
    SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host();
     bc8:	0e 94 4e 04 	call	0x89c	; 0x89c <SpiMaster_get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host>
    SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host();
     bcc:	0e 94 7d 05 	call	0xafa	; 0xafa <SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host>
    SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host();
     bd0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host>

}
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <snprintf>:
     bda:	ae e0       	ldi	r26, 0x0E	; 14
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 ef       	ldi	r30, 0xF3	; 243
     be0:	f5 e0       	ldi	r31, 0x05	; 5
     be2:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__prologue_saves__+0x1c>
     be6:	0d 89       	ldd	r16, Y+21	; 0x15
     be8:	1e 89       	ldd	r17, Y+22	; 0x16
     bea:	8f 89       	ldd	r24, Y+23	; 0x17
     bec:	98 8d       	ldd	r25, Y+24	; 0x18
     bee:	26 e0       	ldi	r18, 0x06	; 6
     bf0:	2c 83       	std	Y+4, r18	; 0x04
     bf2:	1a 83       	std	Y+2, r17	; 0x02
     bf4:	09 83       	std	Y+1, r16	; 0x01
     bf6:	97 ff       	sbrs	r25, 7
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <snprintf+0x24>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e8       	ldi	r25, 0x80	; 128
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	ae 01       	movw	r20, r28
     c06:	45 5e       	subi	r20, 0xE5	; 229
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	69 8d       	ldd	r22, Y+25	; 0x19
     c0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0e:	ce 01       	movw	r24, r28
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 1d 06 	call	0xc3a	; 0xc3a <vfprintf>
     c16:	4d 81       	ldd	r20, Y+5	; 0x05
     c18:	5e 81       	ldd	r21, Y+6	; 0x06
     c1a:	57 fd       	sbrc	r21, 7
     c1c:	0a c0       	rjmp	.+20     	; 0xc32 <snprintf+0x58>
     c1e:	2f 81       	ldd	r18, Y+7	; 0x07
     c20:	38 85       	ldd	r19, Y+8	; 0x08
     c22:	42 17       	cp	r20, r18
     c24:	53 07       	cpc	r21, r19
     c26:	0c f4       	brge	.+2      	; 0xc2a <snprintf+0x50>
     c28:	9a 01       	movw	r18, r20
     c2a:	f8 01       	movw	r30, r16
     c2c:	e2 0f       	add	r30, r18
     c2e:	f3 1f       	adc	r31, r19
     c30:	10 82       	st	Z, r1
     c32:	2e 96       	adiw	r28, 0x0e	; 14
     c34:	e4 e0       	ldi	r30, 0x04	; 4
     c36:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__epilogue_restores__+0x1c>

00000c3a <vfprintf>:
     c3a:	ab e0       	ldi	r26, 0x0B	; 11
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e3 e2       	ldi	r30, 0x23	; 35
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__prologue_saves__>
     c46:	6c 01       	movw	r12, r24
     c48:	7b 01       	movw	r14, r22
     c4a:	8a 01       	movw	r16, r20
     c4c:	fc 01       	movw	r30, r24
     c4e:	17 82       	std	Z+7, r1	; 0x07
     c50:	16 82       	std	Z+6, r1	; 0x06
     c52:	83 81       	ldd	r24, Z+3	; 0x03
     c54:	81 ff       	sbrs	r24, 1
     c56:	cc c1       	rjmp	.+920    	; 0xff0 <vfprintf+0x3b6>
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	3c 01       	movw	r6, r24
     c5e:	f6 01       	movw	r30, r12
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	f7 01       	movw	r30, r14
     c64:	93 fd       	sbrc	r25, 3
     c66:	85 91       	lpm	r24, Z+
     c68:	93 ff       	sbrs	r25, 3
     c6a:	81 91       	ld	r24, Z+
     c6c:	7f 01       	movw	r14, r30
     c6e:	88 23       	and	r24, r24
     c70:	09 f4       	brne	.+2      	; 0xc74 <vfprintf+0x3a>
     c72:	ba c1       	rjmp	.+884    	; 0xfe8 <vfprintf+0x3ae>
     c74:	85 32       	cpi	r24, 0x25	; 37
     c76:	39 f4       	brne	.+14     	; 0xc86 <vfprintf+0x4c>
     c78:	93 fd       	sbrc	r25, 3
     c7a:	85 91       	lpm	r24, Z+
     c7c:	93 ff       	sbrs	r25, 3
     c7e:	81 91       	ld	r24, Z+
     c80:	7f 01       	movw	r14, r30
     c82:	85 32       	cpi	r24, 0x25	; 37
     c84:	29 f4       	brne	.+10     	; 0xc90 <vfprintf+0x56>
     c86:	b6 01       	movw	r22, r12
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     c8e:	e7 cf       	rjmp	.-50     	; 0xc5e <vfprintf+0x24>
     c90:	91 2c       	mov	r9, r1
     c92:	21 2c       	mov	r2, r1
     c94:	31 2c       	mov	r3, r1
     c96:	ff e1       	ldi	r31, 0x1F	; 31
     c98:	f3 15       	cp	r31, r3
     c9a:	d8 f0       	brcs	.+54     	; 0xcd2 <vfprintf+0x98>
     c9c:	8b 32       	cpi	r24, 0x2B	; 43
     c9e:	79 f0       	breq	.+30     	; 0xcbe <vfprintf+0x84>
     ca0:	38 f4       	brcc	.+14     	; 0xcb0 <vfprintf+0x76>
     ca2:	80 32       	cpi	r24, 0x20	; 32
     ca4:	79 f0       	breq	.+30     	; 0xcc4 <vfprintf+0x8a>
     ca6:	83 32       	cpi	r24, 0x23	; 35
     ca8:	a1 f4       	brne	.+40     	; 0xcd2 <vfprintf+0x98>
     caa:	23 2d       	mov	r18, r3
     cac:	20 61       	ori	r18, 0x10	; 16
     cae:	1d c0       	rjmp	.+58     	; 0xcea <vfprintf+0xb0>
     cb0:	8d 32       	cpi	r24, 0x2D	; 45
     cb2:	61 f0       	breq	.+24     	; 0xccc <vfprintf+0x92>
     cb4:	80 33       	cpi	r24, 0x30	; 48
     cb6:	69 f4       	brne	.+26     	; 0xcd2 <vfprintf+0x98>
     cb8:	23 2d       	mov	r18, r3
     cba:	21 60       	ori	r18, 0x01	; 1
     cbc:	16 c0       	rjmp	.+44     	; 0xcea <vfprintf+0xb0>
     cbe:	83 2d       	mov	r24, r3
     cc0:	82 60       	ori	r24, 0x02	; 2
     cc2:	38 2e       	mov	r3, r24
     cc4:	e3 2d       	mov	r30, r3
     cc6:	e4 60       	ori	r30, 0x04	; 4
     cc8:	3e 2e       	mov	r3, r30
     cca:	2a c0       	rjmp	.+84     	; 0xd20 <vfprintf+0xe6>
     ccc:	f3 2d       	mov	r31, r3
     cce:	f8 60       	ori	r31, 0x08	; 8
     cd0:	1d c0       	rjmp	.+58     	; 0xd0c <vfprintf+0xd2>
     cd2:	37 fc       	sbrc	r3, 7
     cd4:	2d c0       	rjmp	.+90     	; 0xd30 <vfprintf+0xf6>
     cd6:	20 ed       	ldi	r18, 0xD0	; 208
     cd8:	28 0f       	add	r18, r24
     cda:	2a 30       	cpi	r18, 0x0A	; 10
     cdc:	40 f0       	brcs	.+16     	; 0xcee <vfprintf+0xb4>
     cde:	8e 32       	cpi	r24, 0x2E	; 46
     ce0:	b9 f4       	brne	.+46     	; 0xd10 <vfprintf+0xd6>
     ce2:	36 fc       	sbrc	r3, 6
     ce4:	81 c1       	rjmp	.+770    	; 0xfe8 <vfprintf+0x3ae>
     ce6:	23 2d       	mov	r18, r3
     ce8:	20 64       	ori	r18, 0x40	; 64
     cea:	32 2e       	mov	r3, r18
     cec:	19 c0       	rjmp	.+50     	; 0xd20 <vfprintf+0xe6>
     cee:	36 fe       	sbrs	r3, 6
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <vfprintf+0xc4>
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	98 9e       	mul	r9, r24
     cf6:	20 0d       	add	r18, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	92 2e       	mov	r9, r18
     cfc:	11 c0       	rjmp	.+34     	; 0xd20 <vfprintf+0xe6>
     cfe:	ea e0       	ldi	r30, 0x0A	; 10
     d00:	2e 9e       	mul	r2, r30
     d02:	20 0d       	add	r18, r0
     d04:	11 24       	eor	r1, r1
     d06:	22 2e       	mov	r2, r18
     d08:	f3 2d       	mov	r31, r3
     d0a:	f0 62       	ori	r31, 0x20	; 32
     d0c:	3f 2e       	mov	r3, r31
     d0e:	08 c0       	rjmp	.+16     	; 0xd20 <vfprintf+0xe6>
     d10:	8c 36       	cpi	r24, 0x6C	; 108
     d12:	21 f4       	brne	.+8      	; 0xd1c <vfprintf+0xe2>
     d14:	83 2d       	mov	r24, r3
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	38 2e       	mov	r3, r24
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0xe6>
     d1c:	88 36       	cpi	r24, 0x68	; 104
     d1e:	41 f4       	brne	.+16     	; 0xd30 <vfprintf+0xf6>
     d20:	f7 01       	movw	r30, r14
     d22:	93 fd       	sbrc	r25, 3
     d24:	85 91       	lpm	r24, Z+
     d26:	93 ff       	sbrs	r25, 3
     d28:	81 91       	ld	r24, Z+
     d2a:	7f 01       	movw	r14, r30
     d2c:	81 11       	cpse	r24, r1
     d2e:	b3 cf       	rjmp	.-154    	; 0xc96 <vfprintf+0x5c>
     d30:	98 2f       	mov	r25, r24
     d32:	9f 7d       	andi	r25, 0xDF	; 223
     d34:	95 54       	subi	r25, 0x45	; 69
     d36:	93 30       	cpi	r25, 0x03	; 3
     d38:	28 f4       	brcc	.+10     	; 0xd44 <vfprintf+0x10a>
     d3a:	0c 5f       	subi	r16, 0xFC	; 252
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	9f e3       	ldi	r25, 0x3F	; 63
     d40:	99 83       	std	Y+1, r25	; 0x01
     d42:	0d c0       	rjmp	.+26     	; 0xd5e <vfprintf+0x124>
     d44:	83 36       	cpi	r24, 0x63	; 99
     d46:	31 f0       	breq	.+12     	; 0xd54 <vfprintf+0x11a>
     d48:	83 37       	cpi	r24, 0x73	; 115
     d4a:	71 f0       	breq	.+28     	; 0xd68 <vfprintf+0x12e>
     d4c:	83 35       	cpi	r24, 0x53	; 83
     d4e:	09 f0       	breq	.+2      	; 0xd52 <vfprintf+0x118>
     d50:	59 c0       	rjmp	.+178    	; 0xe04 <vfprintf+0x1ca>
     d52:	21 c0       	rjmp	.+66     	; 0xd96 <vfprintf+0x15c>
     d54:	f8 01       	movw	r30, r16
     d56:	80 81       	ld	r24, Z
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	0e 5f       	subi	r16, 0xFE	; 254
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	88 24       	eor	r8, r8
     d60:	83 94       	inc	r8
     d62:	91 2c       	mov	r9, r1
     d64:	53 01       	movw	r10, r6
     d66:	13 c0       	rjmp	.+38     	; 0xd8e <vfprintf+0x154>
     d68:	28 01       	movw	r4, r16
     d6a:	f2 e0       	ldi	r31, 0x02	; 2
     d6c:	4f 0e       	add	r4, r31
     d6e:	51 1c       	adc	r5, r1
     d70:	f8 01       	movw	r30, r16
     d72:	a0 80       	ld	r10, Z
     d74:	b1 80       	ldd	r11, Z+1	; 0x01
     d76:	36 fe       	sbrs	r3, 6
     d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x146>
     d7a:	69 2d       	mov	r22, r9
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <vfprintf+0x14a>
     d80:	6f ef       	ldi	r22, 0xFF	; 255
     d82:	7f ef       	ldi	r23, 0xFF	; 255
     d84:	c5 01       	movw	r24, r10
     d86:	0e 94 09 08 	call	0x1012	; 0x1012 <strnlen>
     d8a:	4c 01       	movw	r8, r24
     d8c:	82 01       	movw	r16, r4
     d8e:	f3 2d       	mov	r31, r3
     d90:	ff 77       	andi	r31, 0x7F	; 127
     d92:	3f 2e       	mov	r3, r31
     d94:	16 c0       	rjmp	.+44     	; 0xdc2 <vfprintf+0x188>
     d96:	28 01       	movw	r4, r16
     d98:	22 e0       	ldi	r18, 0x02	; 2
     d9a:	42 0e       	add	r4, r18
     d9c:	51 1c       	adc	r5, r1
     d9e:	f8 01       	movw	r30, r16
     da0:	a0 80       	ld	r10, Z
     da2:	b1 80       	ldd	r11, Z+1	; 0x01
     da4:	36 fe       	sbrs	r3, 6
     da6:	03 c0       	rjmp	.+6      	; 0xdae <vfprintf+0x174>
     da8:	69 2d       	mov	r22, r9
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0x178>
     dae:	6f ef       	ldi	r22, 0xFF	; 255
     db0:	7f ef       	ldi	r23, 0xFF	; 255
     db2:	c5 01       	movw	r24, r10
     db4:	0e 94 fe 07 	call	0xffc	; 0xffc <strnlen_P>
     db8:	4c 01       	movw	r8, r24
     dba:	f3 2d       	mov	r31, r3
     dbc:	f0 68       	ori	r31, 0x80	; 128
     dbe:	3f 2e       	mov	r3, r31
     dc0:	82 01       	movw	r16, r4
     dc2:	33 fc       	sbrc	r3, 3
     dc4:	1b c0       	rjmp	.+54     	; 0xdfc <vfprintf+0x1c2>
     dc6:	82 2d       	mov	r24, r2
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	88 16       	cp	r8, r24
     dcc:	99 06       	cpc	r9, r25
     dce:	b0 f4       	brcc	.+44     	; 0xdfc <vfprintf+0x1c2>
     dd0:	b6 01       	movw	r22, r12
     dd2:	80 e2       	ldi	r24, 0x20	; 32
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     dda:	2a 94       	dec	r2
     ddc:	f4 cf       	rjmp	.-24     	; 0xdc6 <vfprintf+0x18c>
     dde:	f5 01       	movw	r30, r10
     de0:	37 fc       	sbrc	r3, 7
     de2:	85 91       	lpm	r24, Z+
     de4:	37 fe       	sbrs	r3, 7
     de6:	81 91       	ld	r24, Z+
     de8:	5f 01       	movw	r10, r30
     dea:	b6 01       	movw	r22, r12
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     df2:	21 10       	cpse	r2, r1
     df4:	2a 94       	dec	r2
     df6:	21 e0       	ldi	r18, 0x01	; 1
     df8:	82 1a       	sub	r8, r18
     dfa:	91 08       	sbc	r9, r1
     dfc:	81 14       	cp	r8, r1
     dfe:	91 04       	cpc	r9, r1
     e00:	71 f7       	brne	.-36     	; 0xdde <vfprintf+0x1a4>
     e02:	e8 c0       	rjmp	.+464    	; 0xfd4 <vfprintf+0x39a>
     e04:	84 36       	cpi	r24, 0x64	; 100
     e06:	11 f0       	breq	.+4      	; 0xe0c <vfprintf+0x1d2>
     e08:	89 36       	cpi	r24, 0x69	; 105
     e0a:	41 f5       	brne	.+80     	; 0xe5c <vfprintf+0x222>
     e0c:	f8 01       	movw	r30, r16
     e0e:	37 fe       	sbrs	r3, 7
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <vfprintf+0x1e6>
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	0c 5f       	subi	r16, 0xFC	; 252
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	08 c0       	rjmp	.+16     	; 0xe30 <vfprintf+0x1f6>
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	07 2e       	mov	r0, r23
     e26:	00 0c       	add	r0, r0
     e28:	88 0b       	sbc	r24, r24
     e2a:	99 0b       	sbc	r25, r25
     e2c:	0e 5f       	subi	r16, 0xFE	; 254
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	f3 2d       	mov	r31, r3
     e32:	ff 76       	andi	r31, 0x6F	; 111
     e34:	3f 2e       	mov	r3, r31
     e36:	97 ff       	sbrs	r25, 7
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <vfprintf+0x212>
     e3a:	90 95       	com	r25
     e3c:	80 95       	com	r24
     e3e:	70 95       	com	r23
     e40:	61 95       	neg	r22
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	8f 4f       	sbci	r24, 0xFF	; 255
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	f0 68       	ori	r31, 0x80	; 128
     e4a:	3f 2e       	mov	r3, r31
     e4c:	2a e0       	ldi	r18, 0x0A	; 10
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	a3 01       	movw	r20, r6
     e52:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__ultoa_invert>
     e56:	88 2e       	mov	r8, r24
     e58:	86 18       	sub	r8, r6
     e5a:	45 c0       	rjmp	.+138    	; 0xee6 <vfprintf+0x2ac>
     e5c:	85 37       	cpi	r24, 0x75	; 117
     e5e:	31 f4       	brne	.+12     	; 0xe6c <vfprintf+0x232>
     e60:	23 2d       	mov	r18, r3
     e62:	2f 7e       	andi	r18, 0xEF	; 239
     e64:	b2 2e       	mov	r11, r18
     e66:	2a e0       	ldi	r18, 0x0A	; 10
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	25 c0       	rjmp	.+74     	; 0xeb6 <vfprintf+0x27c>
     e6c:	93 2d       	mov	r25, r3
     e6e:	99 7f       	andi	r25, 0xF9	; 249
     e70:	b9 2e       	mov	r11, r25
     e72:	8f 36       	cpi	r24, 0x6F	; 111
     e74:	c1 f0       	breq	.+48     	; 0xea6 <vfprintf+0x26c>
     e76:	18 f4       	brcc	.+6      	; 0xe7e <vfprintf+0x244>
     e78:	88 35       	cpi	r24, 0x58	; 88
     e7a:	79 f0       	breq	.+30     	; 0xe9a <vfprintf+0x260>
     e7c:	b5 c0       	rjmp	.+362    	; 0xfe8 <vfprintf+0x3ae>
     e7e:	80 37       	cpi	r24, 0x70	; 112
     e80:	19 f0       	breq	.+6      	; 0xe88 <vfprintf+0x24e>
     e82:	88 37       	cpi	r24, 0x78	; 120
     e84:	21 f0       	breq	.+8      	; 0xe8e <vfprintf+0x254>
     e86:	b0 c0       	rjmp	.+352    	; 0xfe8 <vfprintf+0x3ae>
     e88:	e9 2f       	mov	r30, r25
     e8a:	e0 61       	ori	r30, 0x10	; 16
     e8c:	be 2e       	mov	r11, r30
     e8e:	b4 fe       	sbrs	r11, 4
     e90:	0d c0       	rjmp	.+26     	; 0xeac <vfprintf+0x272>
     e92:	fb 2d       	mov	r31, r11
     e94:	f4 60       	ori	r31, 0x04	; 4
     e96:	bf 2e       	mov	r11, r31
     e98:	09 c0       	rjmp	.+18     	; 0xeac <vfprintf+0x272>
     e9a:	34 fe       	sbrs	r3, 4
     e9c:	0a c0       	rjmp	.+20     	; 0xeb2 <vfprintf+0x278>
     e9e:	29 2f       	mov	r18, r25
     ea0:	26 60       	ori	r18, 0x06	; 6
     ea2:	b2 2e       	mov	r11, r18
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <vfprintf+0x278>
     ea6:	28 e0       	ldi	r18, 0x08	; 8
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <vfprintf+0x27c>
     eac:	20 e1       	ldi	r18, 0x10	; 16
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <vfprintf+0x27c>
     eb2:	20 e1       	ldi	r18, 0x10	; 16
     eb4:	32 e0       	ldi	r19, 0x02	; 2
     eb6:	f8 01       	movw	r30, r16
     eb8:	b7 fe       	sbrs	r11, 7
     eba:	07 c0       	rjmp	.+14     	; 0xeca <vfprintf+0x290>
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	0c 5f       	subi	r16, 0xFC	; 252
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <vfprintf+0x29c>
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 5f       	subi	r16, 0xFE	; 254
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	a3 01       	movw	r20, r6
     ed8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__ultoa_invert>
     edc:	88 2e       	mov	r8, r24
     ede:	86 18       	sub	r8, r6
     ee0:	fb 2d       	mov	r31, r11
     ee2:	ff 77       	andi	r31, 0x7F	; 127
     ee4:	3f 2e       	mov	r3, r31
     ee6:	36 fe       	sbrs	r3, 6
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <vfprintf+0x2ca>
     eea:	23 2d       	mov	r18, r3
     eec:	2e 7f       	andi	r18, 0xFE	; 254
     eee:	a2 2e       	mov	r10, r18
     ef0:	89 14       	cp	r8, r9
     ef2:	58 f4       	brcc	.+22     	; 0xf0a <vfprintf+0x2d0>
     ef4:	34 fe       	sbrs	r3, 4
     ef6:	0b c0       	rjmp	.+22     	; 0xf0e <vfprintf+0x2d4>
     ef8:	32 fc       	sbrc	r3, 2
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <vfprintf+0x2d4>
     efc:	83 2d       	mov	r24, r3
     efe:	8e 7e       	andi	r24, 0xEE	; 238
     f00:	a8 2e       	mov	r10, r24
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <vfprintf+0x2d4>
     f04:	b8 2c       	mov	r11, r8
     f06:	a3 2c       	mov	r10, r3
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <vfprintf+0x2d6>
     f0a:	b8 2c       	mov	r11, r8
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <vfprintf+0x2d6>
     f0e:	b9 2c       	mov	r11, r9
     f10:	a4 fe       	sbrs	r10, 4
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <vfprintf+0x2f8>
     f14:	fe 01       	movw	r30, r28
     f16:	e8 0d       	add	r30, r8
     f18:	f1 1d       	adc	r31, r1
     f1a:	80 81       	ld	r24, Z
     f1c:	80 33       	cpi	r24, 0x30	; 48
     f1e:	21 f4       	brne	.+8      	; 0xf28 <vfprintf+0x2ee>
     f20:	9a 2d       	mov	r25, r10
     f22:	99 7e       	andi	r25, 0xE9	; 233
     f24:	a9 2e       	mov	r10, r25
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <vfprintf+0x300>
     f28:	a2 fe       	sbrs	r10, 2
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <vfprintf+0x2fe>
     f2c:	b3 94       	inc	r11
     f2e:	b3 94       	inc	r11
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <vfprintf+0x300>
     f32:	8a 2d       	mov	r24, r10
     f34:	86 78       	andi	r24, 0x86	; 134
     f36:	09 f0       	breq	.+2      	; 0xf3a <vfprintf+0x300>
     f38:	b3 94       	inc	r11
     f3a:	a3 fc       	sbrc	r10, 3
     f3c:	11 c0       	rjmp	.+34     	; 0xf60 <vfprintf+0x326>
     f3e:	a0 fe       	sbrs	r10, 0
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0x314>
     f42:	b2 14       	cp	r11, r2
     f44:	88 f4       	brcc	.+34     	; 0xf68 <vfprintf+0x32e>
     f46:	28 0c       	add	r2, r8
     f48:	92 2c       	mov	r9, r2
     f4a:	9b 18       	sub	r9, r11
     f4c:	0e c0       	rjmp	.+28     	; 0xf6a <vfprintf+0x330>
     f4e:	b2 14       	cp	r11, r2
     f50:	60 f4       	brcc	.+24     	; 0xf6a <vfprintf+0x330>
     f52:	b6 01       	movw	r22, r12
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     f5c:	b3 94       	inc	r11
     f5e:	f7 cf       	rjmp	.-18     	; 0xf4e <vfprintf+0x314>
     f60:	b2 14       	cp	r11, r2
     f62:	18 f4       	brcc	.+6      	; 0xf6a <vfprintf+0x330>
     f64:	2b 18       	sub	r2, r11
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0x332>
     f68:	98 2c       	mov	r9, r8
     f6a:	21 2c       	mov	r2, r1
     f6c:	a4 fe       	sbrs	r10, 4
     f6e:	10 c0       	rjmp	.+32     	; 0xf90 <vfprintf+0x356>
     f70:	b6 01       	movw	r22, r12
     f72:	80 e3       	ldi	r24, 0x30	; 48
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     f7a:	a2 fe       	sbrs	r10, 2
     f7c:	17 c0       	rjmp	.+46     	; 0xfac <vfprintf+0x372>
     f7e:	a1 fc       	sbrc	r10, 1
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <vfprintf+0x34e>
     f82:	88 e7       	ldi	r24, 0x78	; 120
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x352>
     f88:	88 e5       	ldi	r24, 0x58	; 88
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	b6 01       	movw	r22, r12
     f8e:	0c c0       	rjmp	.+24     	; 0xfa8 <vfprintf+0x36e>
     f90:	8a 2d       	mov	r24, r10
     f92:	86 78       	andi	r24, 0x86	; 134
     f94:	59 f0       	breq	.+22     	; 0xfac <vfprintf+0x372>
     f96:	a1 fe       	sbrs	r10, 1
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <vfprintf+0x364>
     f9a:	8b e2       	ldi	r24, 0x2B	; 43
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <vfprintf+0x366>
     f9e:	80 e2       	ldi	r24, 0x20	; 32
     fa0:	a7 fc       	sbrc	r10, 7
     fa2:	8d e2       	ldi	r24, 0x2D	; 45
     fa4:	b6 01       	movw	r22, r12
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     fac:	89 14       	cp	r8, r9
     fae:	38 f4       	brcc	.+14     	; 0xfbe <vfprintf+0x384>
     fb0:	b6 01       	movw	r22, r12
     fb2:	80 e3       	ldi	r24, 0x30	; 48
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     fba:	9a 94       	dec	r9
     fbc:	f7 cf       	rjmp	.-18     	; 0xfac <vfprintf+0x372>
     fbe:	8a 94       	dec	r8
     fc0:	f3 01       	movw	r30, r6
     fc2:	e8 0d       	add	r30, r8
     fc4:	f1 1d       	adc	r31, r1
     fc6:	80 81       	ld	r24, Z
     fc8:	b6 01       	movw	r22, r12
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     fd0:	81 10       	cpse	r8, r1
     fd2:	f5 cf       	rjmp	.-22     	; 0xfbe <vfprintf+0x384>
     fd4:	22 20       	and	r2, r2
     fd6:	09 f4       	brne	.+2      	; 0xfda <vfprintf+0x3a0>
     fd8:	42 ce       	rjmp	.-892    	; 0xc5e <vfprintf+0x24>
     fda:	b6 01       	movw	r22, r12
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 14 08 	call	0x1028	; 0x1028 <fputc>
     fe4:	2a 94       	dec	r2
     fe6:	f6 cf       	rjmp	.-20     	; 0xfd4 <vfprintf+0x39a>
     fe8:	f6 01       	movw	r30, r12
     fea:	86 81       	ldd	r24, Z+6	; 0x06
     fec:	97 81       	ldd	r25, Z+7	; 0x07
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x3ba>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	9f ef       	ldi	r25, 0xFF	; 255
     ff4:	2b 96       	adiw	r28, 0x0b	; 11
     ff6:	e2 e1       	ldi	r30, 0x12	; 18
     ff8:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__epilogue_restores__>

00000ffc <strnlen_P>:
     ffc:	fc 01       	movw	r30, r24
     ffe:	05 90       	lpm	r0, Z+
    1000:	61 50       	subi	r22, 0x01	; 1
    1002:	70 40       	sbci	r23, 0x00	; 0
    1004:	01 10       	cpse	r0, r1
    1006:	d8 f7       	brcc	.-10     	; 0xffe <strnlen_P+0x2>
    1008:	80 95       	com	r24
    100a:	90 95       	com	r25
    100c:	8e 0f       	add	r24, r30
    100e:	9f 1f       	adc	r25, r31
    1010:	08 95       	ret

00001012 <strnlen>:
    1012:	fc 01       	movw	r30, r24
    1014:	61 50       	subi	r22, 0x01	; 1
    1016:	70 40       	sbci	r23, 0x00	; 0
    1018:	01 90       	ld	r0, Z+
    101a:	01 10       	cpse	r0, r1
    101c:	d8 f7       	brcc	.-10     	; 0x1014 <strnlen+0x2>
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	8e 0f       	add	r24, r30
    1024:	9f 1f       	adc	r25, r31
    1026:	08 95       	ret

00001028 <fputc>:
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	fb 01       	movw	r30, r22
    1032:	23 81       	ldd	r18, Z+3	; 0x03
    1034:	21 fd       	sbrc	r18, 1
    1036:	03 c0       	rjmp	.+6      	; 0x103e <fputc+0x16>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	9f ef       	ldi	r25, 0xFF	; 255
    103c:	2c c0       	rjmp	.+88     	; 0x1096 <fputc+0x6e>
    103e:	22 ff       	sbrs	r18, 2
    1040:	16 c0       	rjmp	.+44     	; 0x106e <fputc+0x46>
    1042:	46 81       	ldd	r20, Z+6	; 0x06
    1044:	57 81       	ldd	r21, Z+7	; 0x07
    1046:	24 81       	ldd	r18, Z+4	; 0x04
    1048:	35 81       	ldd	r19, Z+5	; 0x05
    104a:	42 17       	cp	r20, r18
    104c:	53 07       	cpc	r21, r19
    104e:	44 f4       	brge	.+16     	; 0x1060 <fputc+0x38>
    1050:	a0 81       	ld	r26, Z
    1052:	b1 81       	ldd	r27, Z+1	; 0x01
    1054:	9d 01       	movw	r18, r26
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3f 4f       	sbci	r19, 0xFF	; 255
    105a:	31 83       	std	Z+1, r19	; 0x01
    105c:	20 83       	st	Z, r18
    105e:	8c 93       	st	X, r24
    1060:	26 81       	ldd	r18, Z+6	; 0x06
    1062:	37 81       	ldd	r19, Z+7	; 0x07
    1064:	2f 5f       	subi	r18, 0xFF	; 255
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	37 83       	std	Z+7, r19	; 0x07
    106a:	26 83       	std	Z+6, r18	; 0x06
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <fputc+0x6e>
    106e:	8b 01       	movw	r16, r22
    1070:	ec 01       	movw	r28, r24
    1072:	fb 01       	movw	r30, r22
    1074:	00 84       	ldd	r0, Z+8	; 0x08
    1076:	f1 85       	ldd	r31, Z+9	; 0x09
    1078:	e0 2d       	mov	r30, r0
    107a:	09 95       	icall
    107c:	89 2b       	or	r24, r25
    107e:	e1 f6       	brne	.-72     	; 0x1038 <fputc+0x10>
    1080:	d8 01       	movw	r26, r16
    1082:	16 96       	adiw	r26, 0x06	; 6
    1084:	8d 91       	ld	r24, X+
    1086:	9c 91       	ld	r25, X
    1088:	17 97       	sbiw	r26, 0x07	; 7
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	17 96       	adiw	r26, 0x07	; 7
    108e:	9c 93       	st	X, r25
    1090:	8e 93       	st	-X, r24
    1092:	16 97       	sbiw	r26, 0x06	; 6
    1094:	ce 01       	movw	r24, r28
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <__ultoa_invert>:
    10a0:	fa 01       	movw	r30, r20
    10a2:	aa 27       	eor	r26, r26
    10a4:	28 30       	cpi	r18, 0x08	; 8
    10a6:	51 f1       	breq	.+84     	; 0x10fc <__ultoa_invert+0x5c>
    10a8:	20 31       	cpi	r18, 0x10	; 16
    10aa:	81 f1       	breq	.+96     	; 0x110c <__ultoa_invert+0x6c>
    10ac:	e8 94       	clt
    10ae:	6f 93       	push	r22
    10b0:	6e 7f       	andi	r22, 0xFE	; 254
    10b2:	6e 5f       	subi	r22, 0xFE	; 254
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	8f 4f       	sbci	r24, 0xFF	; 255
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	af 4f       	sbci	r26, 0xFF	; 255
    10bc:	b1 e0       	ldi	r27, 0x01	; 1
    10be:	3e d0       	rcall	.+124    	; 0x113c <__ultoa_invert+0x9c>
    10c0:	b4 e0       	ldi	r27, 0x04	; 4
    10c2:	3c d0       	rcall	.+120    	; 0x113c <__ultoa_invert+0x9c>
    10c4:	67 0f       	add	r22, r23
    10c6:	78 1f       	adc	r23, r24
    10c8:	89 1f       	adc	r24, r25
    10ca:	9a 1f       	adc	r25, r26
    10cc:	a1 1d       	adc	r26, r1
    10ce:	68 0f       	add	r22, r24
    10d0:	79 1f       	adc	r23, r25
    10d2:	8a 1f       	adc	r24, r26
    10d4:	91 1d       	adc	r25, r1
    10d6:	a1 1d       	adc	r26, r1
    10d8:	6a 0f       	add	r22, r26
    10da:	71 1d       	adc	r23, r1
    10dc:	81 1d       	adc	r24, r1
    10de:	91 1d       	adc	r25, r1
    10e0:	a1 1d       	adc	r26, r1
    10e2:	20 d0       	rcall	.+64     	; 0x1124 <__ultoa_invert+0x84>
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__ultoa_invert+0x48>
    10e6:	68 94       	set
    10e8:	3f 91       	pop	r19
    10ea:	2a e0       	ldi	r18, 0x0A	; 10
    10ec:	26 9f       	mul	r18, r22
    10ee:	11 24       	eor	r1, r1
    10f0:	30 19       	sub	r19, r0
    10f2:	30 5d       	subi	r19, 0xD0	; 208
    10f4:	31 93       	st	Z+, r19
    10f6:	de f6       	brtc	.-74     	; 0x10ae <__ultoa_invert+0xe>
    10f8:	cf 01       	movw	r24, r30
    10fa:	08 95       	ret
    10fc:	46 2f       	mov	r20, r22
    10fe:	47 70       	andi	r20, 0x07	; 7
    1100:	40 5d       	subi	r20, 0xD0	; 208
    1102:	41 93       	st	Z+, r20
    1104:	b3 e0       	ldi	r27, 0x03	; 3
    1106:	0f d0       	rcall	.+30     	; 0x1126 <__ultoa_invert+0x86>
    1108:	c9 f7       	brne	.-14     	; 0x10fc <__ultoa_invert+0x5c>
    110a:	f6 cf       	rjmp	.-20     	; 0x10f8 <__ultoa_invert+0x58>
    110c:	46 2f       	mov	r20, r22
    110e:	4f 70       	andi	r20, 0x0F	; 15
    1110:	40 5d       	subi	r20, 0xD0	; 208
    1112:	4a 33       	cpi	r20, 0x3A	; 58
    1114:	18 f0       	brcs	.+6      	; 0x111c <__ultoa_invert+0x7c>
    1116:	49 5d       	subi	r20, 0xD9	; 217
    1118:	31 fd       	sbrc	r19, 1
    111a:	40 52       	subi	r20, 0x20	; 32
    111c:	41 93       	st	Z+, r20
    111e:	02 d0       	rcall	.+4      	; 0x1124 <__ultoa_invert+0x84>
    1120:	a9 f7       	brne	.-22     	; 0x110c <__ultoa_invert+0x6c>
    1122:	ea cf       	rjmp	.-44     	; 0x10f8 <__ultoa_invert+0x58>
    1124:	b4 e0       	ldi	r27, 0x04	; 4
    1126:	a6 95       	lsr	r26
    1128:	97 95       	ror	r25
    112a:	87 95       	ror	r24
    112c:	77 95       	ror	r23
    112e:	67 95       	ror	r22
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__ultoa_invert+0x86>
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 05       	cpc	r22, r1
    1138:	71 05       	cpc	r23, r1
    113a:	08 95       	ret
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	0a 2e       	mov	r0, r26
    1142:	06 94       	lsr	r0
    1144:	57 95       	ror	r21
    1146:	47 95       	ror	r20
    1148:	37 95       	ror	r19
    114a:	27 95       	ror	r18
    114c:	ba 95       	dec	r27
    114e:	c9 f7       	brne	.-14     	; 0x1142 <__ultoa_invert+0xa2>
    1150:	62 0f       	add	r22, r18
    1152:	73 1f       	adc	r23, r19
    1154:	84 1f       	adc	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	a0 1d       	adc	r26, r0
    115a:	08 95       	ret

0000115c <__prologue_saves__>:
    115c:	2f 92       	push	r2
    115e:	3f 92       	push	r3
    1160:	4f 92       	push	r4
    1162:	5f 92       	push	r5
    1164:	6f 92       	push	r6
    1166:	7f 92       	push	r7
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	ca 1b       	sub	r28, r26
    1186:	db 0b       	sbc	r29, r27
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	09 94       	ijmp

00001194 <__epilogue_restores__>:
    1194:	2a 88       	ldd	r2, Y+18	; 0x12
    1196:	39 88       	ldd	r3, Y+17	; 0x11
    1198:	48 88       	ldd	r4, Y+16	; 0x10
    119a:	5f 84       	ldd	r5, Y+15	; 0x0f
    119c:	6e 84       	ldd	r6, Y+14	; 0x0e
    119e:	7d 84       	ldd	r7, Y+13	; 0x0d
    11a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a6:	b9 84       	ldd	r11, Y+9	; 0x09
    11a8:	c8 84       	ldd	r12, Y+8	; 0x08
    11aa:	df 80       	ldd	r13, Y+7	; 0x07
    11ac:	ee 80       	ldd	r14, Y+6	; 0x06
    11ae:	fd 80       	ldd	r15, Y+5	; 0x05
    11b0:	0c 81       	ldd	r16, Y+4	; 0x04
    11b2:	1b 81       	ldd	r17, Y+3	; 0x03
    11b4:	aa 81       	ldd	r26, Y+2	; 0x02
    11b6:	b9 81       	ldd	r27, Y+1	; 0x01
    11b8:	ce 0f       	add	r28, r30
    11ba:	d1 1d       	adc	r29, r1
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	ed 01       	movw	r28, r26
    11c8:	08 95       	ret

000011ca <_exit>:
    11ca:	f8 94       	cli

000011cc <__stop_program>:
    11cc:	ff cf       	rjmp	.-2      	; 0x11cc <__stop_program>
