
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000c60  00000cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800160  00800160  00000d54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003761  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112e  00000000  00000000  000048f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bdc  00000000  00000000  00005a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e4  00000000  00000000  00007600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017c6  00000000  00000000  00007fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000188f  00000000  00000000  000097aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000b039  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 38       	cpi	r26, 0x89	; 137
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1b 06 	call	0xc36	; 0xc36 <main>
  9e:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <BitIsClear>:

inline bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <BitIsClear+0xc>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <BitIsClear+0x8>
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	8f 27       	eor	r24, r31
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	08 95       	ret

00000112 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
 112:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__data_end>
 116:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ddr_register_>
 11a:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <ddr_register_+0x1>
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	08 95       	ret

00000124 <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 124:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__data_end>
 128:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <port_register_>
 12c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <port_register_+0x1>
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 134:	08 95       	ret

00000136 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 136:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__data_end>
 13a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <port_register_>
 13e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <port_register_+0x1>
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 146:	08 95       	ret

00000148 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 148:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <ddr_register_+0x1>
 14c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <ddr_register_>
    port_register_ = port_register;
 150:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <port_register_+0x1>
 154:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <port_register_>
    pin_register_ = pin_register;
 158:	50 93 62 01 	sts	0x0162, r21	; 0x800162 <pin_register_+0x1>
 15c:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <pin_register_>
    debug_led_ = debug_led;
 160:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <__data_end>
    DebugLedTurnOn();
 164:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 168:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 16c:	09 95       	icall
    DebugLedTurnGreen();
 16e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 172:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtActivateInterface>
 182:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtActivateInterface+0x1>
 186:	09 95       	icall
 188:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 18c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 190:	09 95       	icall
 192:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 196:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 19a:	09 95       	icall
 19c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtOutputByte>
 1a0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtOutputByte+0x1>
 1a4:	8c 2f       	mov	r24, r28
 1a6:	09 95       	icall
 1a8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1ac:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1b0:	09 95       	icall
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <FtBusTurnaround_Implementation>:
 1b6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetSlaveDriveBus>
 1ba:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetSlaveDriveBus+0x1>
 1be:	09 95       	icall
 1c0:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1c4:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1c8:	09 95       	icall
 1ca:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1ce:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 1d8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 1dc:	09 95       	icall
 1de:	08 95       	ret

000001e0 <FtRead_Implementation>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	8c 01       	movw	r16, r24
 1e8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 1ec:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 1f0:	09 95       	icall
 1f2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 1f6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 1fa:	09 95       	icall
 1fc:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 200:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 204:	09 95       	icall
 206:	c8 2f       	mov	r28, r24
 208:	88 23       	and	r24, r24
 20a:	39 f0       	breq	.+14     	; 0x21a <FtRead_Implementation+0x3a>
 20c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 210:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 214:	09 95       	icall
 216:	f8 01       	movw	r30, r16
 218:	80 83       	st	Z, r24
 21a:	8c 2f       	mov	r24, r28
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <FtWrite_Implementation>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
 22a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtLetMasterDriveBus>
 22e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtLetMasterDriveBus+0x1>
 232:	09 95       	icall
 234:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtPushData>
 238:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtPushData+0x1>
 23c:	09 95       	icall
 23e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 242:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 246:	88 81       	ld	r24, Y
 248:	09 95       	icall
 24a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtPullData>
 24e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtPullData+0x1>
 252:	09 95       	icall
 254:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtIsBusOk>
 258:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtIsBusOk+0x1>
 25c:	09 95       	icall
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <FtOutputByte_Implementation>:
 264:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_port>
 268:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_port+0x1>
 26c:	80 83       	st	Z, r24
 26e:	08 95       	ret

00000270 <FtLetMasterDriveBus_Implementation>:
 270:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <FtMiosio_ddr>
 274:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <FtMiosio_ddr+0x1>
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <FtLetSlaveDriveBus_Implementation>:
 27e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <FtMiosio_ddr>
 282:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <FtMiosio_ddr+0x1>
 286:	10 82       	st	Z, r1
 288:	08 95       	ret

0000028a <FtReadData_Implementation>:
 28a:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <FtMiosio_pin>
 28e:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <FtMiosio_pin+0x1>
 292:	80 81       	ld	r24, Z
 294:	08 95       	ret

00000296 <FtWriteData_Implementation>:
 296:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_port>
 29a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_port+0x1>
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <FtActivateInterface_Implementation>:
 2a2:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Ft1248_Ss>
 2a6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 2aa:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 2ae:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2b2:	08 95       	ret

000002b4 <FtPullData_Implementation>:
 2b4:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <Ft1248_Sck>
 2b8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 2bc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 2c0:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2c4:	08 95       	ret

000002c6 <FtDeactivateInterface_Implementation>:
 2c6:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <Ft1248_Ss>
 2ca:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 2ce:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2d6:	08 95       	ret

000002d8 <FtPushData_Implementation>:
 2d8:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <Ft1248_Sck>
 2dc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 2e0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 2e8:	08 95       	ret

000002ea <FtIsBusOk_Implementation>:
 2ea:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Miso>
 2ee:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Ft1248_pin>
 2f2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <Ft1248_pin+0x1>
 2f6:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
 2fa:	08 95       	ret

000002fc <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 2fc:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Miso>
 300:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Ft1248_ddr>
 304:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Ft1248_ddr+0x1>
 308:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 30c:	08 95       	ret

0000030e <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 30e:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <Ft1248_Miso>
 312:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 316:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 31a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 31e:	08 95       	ret

00000320 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 320:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <FtMiosio_ddr>
 324:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <FtMiosio_ddr+0x1>
 328:	10 82       	st	Z, r1
 32a:	08 95       	ret

0000032c <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 32c:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <FtMiosio_port>
 330:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <FtMiosio_port+0x1>
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	80 83       	st	Z, r24
 338:	08 95       	ret

0000033a <FtSckLow>:
}
void FtSckLow(void)
{
 33a:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 33c:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <Ft1248_Sck>
 340:	6c 2f       	mov	r22, r28
 342:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 346:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 34a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 34e:	6c 2f       	mov	r22, r28
 350:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Ft1248_ddr>
 354:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Ft1248_ddr+0x1>
 358:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <FtSsHigh>:
void FtSsHigh(void)
{
 360:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 362:	c0 91 53 01 	lds	r28, 0x0153	; 0x800153 <Ft1248_Ss>
 366:	6c 2f       	mov	r22, r28
 368:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <Ft1248_port>
 36c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <Ft1248_port+0x1>
 370:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 374:	6c 2f       	mov	r22, r28
 376:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Ft1248_ddr>
 37a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Ft1248_ddr+0x1>
 37e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 386:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 38a:	0e 94 87 01 	call	0x30e	; 0x30e <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 38e:	0e 94 90 01 	call	0x320	; 0x320 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 392:	0e 94 96 01 	call	0x32c	; 0x32c <FtEnablePullupsOnMiosio>
    FtSckLow();
 396:	0e 94 9d 01 	call	0x33a	; 0x33a <FtSckLow>
    FtSsHigh();
 39a:	0e 94 b0 01 	call	0x360	; 0x360 <FtSsHigh>
 39e:	08 95       	ret

000003a0 <UsbInit>:
#include "Ft1248.h"
#include "DebugLed.h"

void UsbInit(void)
{
    FtInit();
 3a0:	0e 94 c3 01 	call	0x386	; 0x386 <FtInit>
 3a4:	08 95       	ret

000003a6 <UsbRead>:
}
uint16_t UsbRead(uint8_t *read_buffer)
{
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	8c 01       	movw	r16, r24
    uint16_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3b0:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 3b4:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 3b8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <FtCmd_Read>
 3bc:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3be:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 3c2:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 3c6:	09 95       	icall
    if (!has_data_to_read)
 3c8:	81 11       	cpse	r24, r1
 3ca:	0f c0       	rjmp	.+30     	; 0x3ea <UsbRead+0x44>
    {
        // sad path
        DebugLedTurnRedToShowError();
 3cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3d4:	09 95       	icall
        FtDeactivateInterface();
 3d6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 3da:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 3de:	09 95       	icall
        return num_bytes_read;
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
    }
    while (FtRead(read_buffer++))
    {
        num_bytes_read++;
 3e6:	21 96       	adiw	r28, 0x01	; 1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <UsbRead+0x48>
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
        // sad path
        DebugLedTurnRedToShowError();
        FtDeactivateInterface();
        return num_bytes_read;
    }
    while (FtRead(read_buffer++))
 3ee:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtRead>
 3f2:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtRead+0x1>
 3f6:	c8 01       	movw	r24, r16
 3f8:	8c 0f       	add	r24, r28
 3fa:	9d 1f       	adc	r25, r29
 3fc:	09 95       	icall
 3fe:	81 11       	cpse	r24, r1
 400:	f2 cf       	rjmp	.-28     	; 0x3e6 <UsbRead+0x40>
    {
        num_bytes_read++;
    }

    FtDeactivateInterface();
 402:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 406:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 40a:	09 95       	icall
    return num_bytes_read;
}
 40c:	ce 01       	movw	r24, r28
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <UsbWrite>:
uint16_t UsbWrite(uint8_t *write_buffer, uint16_t nbytes)
{
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	8c 01       	movw	r16, r24
 426:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 428:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <FtSendCommand>
 42c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <FtSendCommand+0x1>
 430:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FtCmd_Write>
 434:	09 95       	icall
    if (!FtBusTurnaround())
 436:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtBusTurnaround>
 43a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtBusTurnaround+0x1>
 43e:	09 95       	icall
 440:	81 11       	cpse	r24, r1
 442:	0d c0       	rjmp	.+26     	; 0x45e <UsbWrite+0x46>
    {
        DebugLedTurnRedToShowError();
 444:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 448:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 44c:	09 95       	icall
        FtDeactivateInterface();
 44e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 452:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 456:	09 95       	icall
        return num_bytes_sent;
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	d0 e0       	ldi	r29, 0x00	; 0
 45c:	15 c0       	rjmp	.+42     	; 0x488 <UsbWrite+0x70>
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 462:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtWrite>
 466:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtWrite+0x1>
 46a:	c8 01       	movw	r24, r16
 46c:	8c 0f       	add	r24, r28
 46e:	9d 1f       	adc	r25, r29
 470:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 472:	88 23       	and	r24, r24
 474:	21 f0       	breq	.+8      	; 0x47e <UsbWrite+0x66>
 476:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 478:	ce 15       	cp	r28, r14
 47a:	df 05       	cpc	r29, r15
 47c:	90 f3       	brcs	.-28     	; 0x462 <UsbWrite+0x4a>
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 47e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtDeactivateInterface>
 482:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtDeactivateInterface+0x1>
 486:	09 95       	icall
    return num_bytes_sent;
}
 488:	ce 01       	movw	r24, r28
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	08 95       	ret

00000498 <UsbHasDataToRead>:
bool UsbHasDataToRead(void) { return FtHasDataToRead(); }
 498:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtHasDataToRead>
 49c:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtHasDataToRead+0x1>
 4a0:	09 95       	icall
 4a2:	08 95       	ret

000004a4 <ClearPendingSpiInterrupt_Implementation>:
}
static void SpiSlaveSignalDataIsReady_Implementation(void)
{
    ClearBit(Spi_port, Spi_Miso);
    DisableSpi();
    EnableSpi();
 4a4:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <ReadSpiStatusRegister>
 4a8:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <ReadSpiStatusRegister+0x1>
 4ac:	09 95       	icall
 4ae:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 4b2:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 4b6:	09 95       	icall
 4b8:	08 95       	ret

000004ba <ReadSpiStatusRegister_Implementation>:
 4ba:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <Spi_spsr>
 4be:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <Spi_spsr+0x1>
 4c2:	80 81       	ld	r24, Z
 4c4:	08 95       	ret

000004c6 <ReadSpiDataRegister_Implementation>:
 4c6:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_spdr>
 4ca:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_spdr+0x1>
 4ce:	80 81       	ld	r24, Z
 4d0:	08 95       	ret

000004d2 <DisableSpi_Implementation>:
 4d2:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Spi_Enable>
 4d6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Spi_spcr>
 4da:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Spi_spcr+0x1>
 4de:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 4e2:	08 95       	ret

000004e4 <SpiMasterOpenSpi_Implementation>:
 4e4:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <Spi_Ss>
 4e8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Spi_port>
 4ec:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Spi_port+0x1>
 4f0:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 4f4:	08 95       	ret

000004f6 <EnableSpi_Implementation>:
}
void (*DisableSpi)(void) = DisableSpi_Implementation;
//
static void EnableSpi_Implementation(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 4f6:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Spi_Enable>
 4fa:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Spi_spcr>
 4fe:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Spi_spcr+0x1>
 502:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 506:	08 95       	ret

00000508 <SpiMasterCloseSpi_Implementation>:
}
void (*SpiMasterOpenSpi)(void) = SpiMasterOpenSpi_Implementation;
//
static void SpiMasterCloseSpi_Implementation(void)
{
    SetBit(Spi_port, Spi_Ss);
 508:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <Spi_Ss>
 50c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Spi_port>
 510:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Spi_port+0x1>
 514:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 518:	08 95       	ret

0000051a <SpiTransferIsDone_Implementation>:
}
void (*SpiMasterCloseSpi)(void) = SpiMasterCloseSpi_Implementation;
//
static bool SpiTransferIsDone_Implementation(void)
{
    return BitIsSet(Spi_spsr, Spi_InterruptFlag);
 51a:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Spi_InterruptFlag>
 51e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Spi_spsr>
 522:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Spi_spsr+0x1>
 526:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
}
 52a:	08 95       	ret

0000052c <SpiResponseIsReady_Implementation>:
    SpiMasterWrite(slave_ignore);
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
 52c:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <Spi_Miso>
 530:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Spi_pin>
 534:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Spi_pin+0x1>
 538:	0e 94 7d 00 	call	0xfa	; 0xfa <BitIsClear>
}
 53c:	08 95       	ret

0000053e <SpiClearFlagTransferIsDone>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 53e:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_spdr>
 542:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_spdr+0x1>
 546:	80 81       	ld	r24, Z
 548:	08 95       	ret

0000054a <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
    SlaveSelectIdleHigh();
 550:	0e 94 84 02 	call	0x508	; 0x508 <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 554:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <Spi_Miso>
 558:	c0 91 4f 01 	lds	r28, 0x014F	; 0x80014f <Spi_ddr>
 55c:	d0 91 50 01 	lds	r29, 0x0150	; 0x800150 <Spi_ddr+0x1>
 560:	61 2f       	mov	r22, r17
 562:	ce 01       	movw	r24, r28
 564:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 568:	61 2f       	mov	r22, r17
 56a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Spi_port>
 56e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Spi_port+0x1>
 572:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 576:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <Spi_Ss>
 57a:	ce 01       	movw	r24, r28
 57c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 580:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <Spi_Mosi>
 584:	ce 01       	movw	r24, r28
 586:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 58a:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Spi_Sck>
 58e:	ce 01       	movw	r24, r28
 590:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 594:	c0 91 49 01 	lds	r28, 0x0149	; 0x800149 <Spi_spcr>
 598:	d0 91 4a 01 	lds	r29, 0x014A	; 0x80014a <Spi_spcr+0x1>
 59c:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <Spi_MasterSlaveSelect>
 5a0:	ce 01       	movw	r24, r28
 5a2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 5a6:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Spi_ClockRateBit0>
 5aa:	ce 01       	movw	r24, r28
 5ac:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 5b0:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Spi_ClockRateBit1>
 5b4:	ce 01       	movw	r24, r28
 5b6:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5ba:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Spi_DoubleClockRate>
 5be:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Spi_spsr>
 5c2:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Spi_spsr+0x1>
 5c6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5ca:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <EnableSpi>
 5ce:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <EnableSpi+0x1>
 5d2:	09 95       	icall
    ClearPendingSpiInterrupt();
 5d4:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <ClearPendingSpiInterrupt>
 5d8:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <ClearPendingSpiInterrupt+0x1>
 5dc:	09 95       	icall
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	08 95       	ret

000005e6 <SpiMasterDisable>:
void SpiMasterDisable(void)
{
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
    // Release control of all SPI lines to let another SPI master take control.
    /* Undo SlaveSelectIdleHigh(); */
    ClearBit(Spi_ddr, Spi_Ss); ClearBit(Spi_port, Spi_Ss);
 5ec:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <Spi_Ss>
 5f0:	c0 91 4f 01 	lds	r28, 0x014F	; 0x80014f <Spi_ddr>
 5f4:	d0 91 50 01 	lds	r29, 0x0150	; 0x800150 <Spi_ddr+0x1>
 5f8:	61 2f       	mov	r22, r17
 5fa:	ce 01       	movw	r24, r28
 5fc:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 600:	61 2f       	mov	r22, r17
 602:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <Spi_port>
 606:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <Spi_port+0x1>
 60a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    /* SetMisoAsPullupInput(); // protect against false SpiResponseIsReady signals */
    /* SetSlaveSelectAsOutput();  // pin-direction is user-defined */
    /* Undo SetMosiAsOutput();         // pin-direction is user-defined */
    ClearBit(Spi_ddr, Spi_Mosi);
 60e:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <Spi_Mosi>
 612:	ce 01       	movw	r24, r28
 614:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    /* Undo SetSckAsOutput();          // pin-direction is user-defined */
    ClearBit(Spi_ddr, Spi_Sck);
 618:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Spi_Sck>
 61c:	ce 01       	movw	r24, r28
 61e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    /* MakeMeTheMaster(); */
    /* SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz */
    /* Undo EnableSpi(); */
    DisableSpi();
 622:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <DisableSpi>
 626:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <DisableSpi+0x1>
 62a:	09 95       	icall
    /* ClearPendingSpiInterrupt(); */
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	08 95       	ret

00000634 <SpiMasterWrite>:

void SpiMasterWrite(uint8_t byte_to_send)
{
 634:	cf 93       	push	r28
 636:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 638:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SpiMasterOpenSpi>
 63c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SpiMasterOpenSpi+0x1>
 640:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 642:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_spdr>
 646:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_spdr+0x1>
 64a:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 64c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SpiTransferIsDone>
 650:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SpiTransferIsDone+0x1>
 654:	09 95       	icall
 656:	88 23       	and	r24, r24
 658:	c9 f3       	breq	.-14     	; 0x64c <SpiMasterWrite+0x18>
    // You need to now access SPDR to clear the flag!
    // I do not think the reads are destructive.
    // Add code here to clear the flag:
    SpiClearFlagTransferIsDone();  // TODO: add unit tests for this
 65a:	0e 94 9f 02 	call	0x53e	; 0x53e <SpiClearFlagTransferIsDone>
    SpiMasterCloseSpi();
 65e:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiMasterCloseSpi>
 662:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiMasterCloseSpi+0x1>
 666:	09 95       	icall
}
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <SpiMasterRead>:
uint8_t (*ReadSpiDataRegister)(void) = ReadSpiDataRegister_Implementation;
uint8_t const slave_ignore     = 0xFF;  // slave ignores 0xFF from the master
uint8_t const test_unknown_cmd = 0xFE;  // guarantee 0xFE to be an unknown cmd
uint8_t SpiMasterRead(void)
{
    SpiMasterWrite(slave_ignore);
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	0e 94 1a 03 	call	0x634	; 0x634 <SpiMasterWrite>
    return ReadSpiDataRegister();
 672:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiDataRegister>
 676:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiDataRegister+0x1>
 67a:	09 95       	icall
}
 67c:	08 95       	ret

0000067e <SpiMasterWaitForResponse>:
    return BitIsClear(Spi_pin, Spi_Miso);
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
 67e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <SpiResponseIsReady>
 682:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <SpiResponseIsReady+0x1>
 686:	09 95       	icall
 688:	88 23       	and	r24, r24
 68a:	c9 f3       	breq	.-14     	; 0x67e <SpiMasterWaitForResponse>
}
 68c:	08 95       	ret

0000068e <SetupDebugLed>:
    /* Pairs with App_version_of_Slave_RespondToRequestsForData */
    /* =====[ Setup ]===== */
    SpiMasterInit();
    UsbInit();
    /* =====[ Operate ]===== */
    SpiMasterPassLisFrame();
 68e:	23 e0       	ldi	r18, 0x03	; 3
 690:	46 e2       	ldi	r20, 0x26	; 38
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	68 e2       	ldi	r22, 0x28	; 40
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	87 e2       	ldi	r24, 0x27	; 39
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 a4 00 	call	0x148	; 0x148 <DebugLedInit>
 6a0:	08 95       	ret

000006a2 <DoCmdSendFourDummyBytes>:
 6a2:	ef 92       	push	r14
 6a4:	ff 92       	push	r15
 6a6:	0f 93       	push	r16
 6a8:	1f 93       	push	r17
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <DoCmdSendFourDummyBytes+0xe>
 6b0:	00 d0       	rcall	.+0      	; 0x6b2 <DoCmdSendFourDummyBytes+0x10>
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	82 ef       	ldi	r24, 0xF2	; 242
 6b8:	0e 94 1a 03 	call	0x634	; 0x634 <SpiMasterWrite>
 6bc:	8e 01       	movw	r16, r28
 6be:	0f 5f       	subi	r16, 0xFF	; 255
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	7e 01       	movw	r14, r28
 6c4:	85 e0       	ldi	r24, 0x05	; 5
 6c6:	e8 0e       	add	r14, r24
 6c8:	f1 1c       	adc	r15, r1
 6ca:	0e 94 3f 03 	call	0x67e	; 0x67e <SpiMasterWaitForResponse>
 6ce:	0e 94 36 03 	call	0x66c	; 0x66c <SpiMasterRead>
 6d2:	f8 01       	movw	r30, r16
 6d4:	81 93       	st	Z+, r24
 6d6:	8f 01       	movw	r16, r30
 6d8:	ee 15       	cp	r30, r14
 6da:	ff 05       	cpc	r31, r15
 6dc:	b1 f7       	brne	.-20     	; 0x6ca <DoCmdSendFourDummyBytes+0x28>
 6de:	64 e0       	ldi	r22, 0x04	; 4
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0e 94 0c 02 	call	0x418	; 0x418 <UsbWrite>
 6ea:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedTurnRed>
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	08 95       	ret

00000704 <SetExposureTime>:
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	ec 01       	movw	r28, r24
 70a:	2a 98       	cbi	0x05, 2	; 5
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	8e bd       	out	0x2e, r24	; 46
 710:	0d b4       	in	r0, 0x2d	; 45
 712:	07 fe       	sbrs	r0, 7
 714:	fd cf       	rjmp	.-6      	; 0x710 <SetExposureTime+0xc>
 716:	8e b5       	in	r24, 0x2e	; 46
 718:	2a 9a       	sbi	0x05, 2	; 5
 71a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 71e:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 722:	82 e3       	ldi	r24, 0x32	; 50
 724:	09 95       	icall
 726:	2a 98       	cbi	0x05, 2	; 5
 728:	88 81       	ld	r24, Y
 72a:	8e bd       	out	0x2e, r24	; 46
 72c:	0d b4       	in	r0, 0x2d	; 45
 72e:	07 fe       	sbrs	r0, 7
 730:	fd cf       	rjmp	.-6      	; 0x72c <SetExposureTime+0x28>
 732:	8e b5       	in	r24, 0x2e	; 46
 734:	2a 9a       	sbi	0x05, 2	; 5
 736:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 73a:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 73e:	82 e3       	ldi	r24, 0x32	; 50
 740:	09 95       	icall
 742:	2a 98       	cbi	0x05, 2	; 5
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	8e bd       	out	0x2e, r24	; 46
 748:	0d b4       	in	r0, 0x2d	; 45
 74a:	07 fe       	sbrs	r0, 7
 74c:	fd cf       	rjmp	.-6      	; 0x748 <SetExposureTime+0x44>
 74e:	8e b5       	in	r24, 0x2e	; 46
 750:	2a 9a       	sbi	0x05, 2	; 5
 752:	1c 9b       	sbis	0x03, 4	; 3
 754:	fe cf       	rjmp	.-4      	; 0x752 <SetExposureTime+0x4e>
 756:	1c 99       	sbic	0x03, 4	; 3
 758:	fe cf       	rjmp	.-4      	; 0x756 <SetExposureTime+0x52>
 75a:	1c 9b       	sbis	0x03, 4	; 3
 75c:	fe cf       	rjmp	.-4      	; 0x75a <SetExposureTime+0x56>
 75e:	2a 98       	cbi	0x05, 2	; 5
 760:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <slave_ignore>
 764:	8e bd       	out	0x2e, r24	; 46
 766:	0d b4       	in	r0, 0x2d	; 45
 768:	07 fe       	sbrs	r0, 7
 76a:	fd cf       	rjmp	.-6      	; 0x766 <SetExposureTime+0x62>
 76c:	8e b5       	in	r24, 0x2e	; 46
 76e:	2a 9a       	sbi	0x05, 2	; 5
 770:	8e b5       	in	r24, 0x2e	; 46
 772:	88 83       	st	Y, r24
 774:	1c 9b       	sbis	0x03, 4	; 3
 776:	fe cf       	rjmp	.-4      	; 0x774 <SetExposureTime+0x70>
 778:	1c 99       	sbic	0x03, 4	; 3
 77a:	fe cf       	rjmp	.-4      	; 0x778 <SetExposureTime+0x74>
 77c:	1c 9b       	sbis	0x03, 4	; 3
 77e:	fe cf       	rjmp	.-4      	; 0x77c <SetExposureTime+0x78>
 780:	2a 98       	cbi	0x05, 2	; 5
 782:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <slave_ignore>
 786:	8e bd       	out	0x2e, r24	; 46
 788:	0d b4       	in	r0, 0x2d	; 45
 78a:	07 fe       	sbrs	r0, 7
 78c:	fd cf       	rjmp	.-6      	; 0x788 <SetExposureTime+0x84>
 78e:	8e b5       	in	r24, 0x2e	; 46
 790:	2a 9a       	sbi	0x05, 2	; 5
 792:	8e b5       	in	r24, 0x2e	; 46
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	62 e0       	ldi	r22, 0x02	; 2
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	ce 01       	movw	r24, r28
 79c:	0e 94 0c 02 	call	0x418	; 0x418 <UsbWrite>
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <SpiMasterPassLisFrame>:
 7a6:	ef 92       	push	r14
 7a8:	ff 92       	push	r15
 7aa:	0f 93       	push	r16
 7ac:	1f 93       	push	r17
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	45 98       	cbi	0x08, 5	; 8
 7b4:	2a 98       	cbi	0x05, 2	; 5
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	8e bd       	out	0x2e, r24	; 46
 7ba:	0d b4       	in	r0, 0x2d	; 45
 7bc:	07 fe       	sbrs	r0, 7
 7be:	fd cf       	rjmp	.-6      	; 0x7ba <SpiMasterPassLisFrame+0x14>
 7c0:	8e b5       	in	r24, 0x2e	; 46
 7c2:	2a 9a       	sbi	0x05, 2	; 5
 7c4:	45 9a       	sbi	0x08, 5	; 8
 7c6:	1c 9b       	sbis	0x03, 4	; 3
 7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <SpiMasterPassLisFrame+0x20>
 7ca:	1c 99       	sbic	0x03, 4	; 3
 7cc:	fe cf       	rjmp	.-4      	; 0x7ca <SpiMasterPassLisFrame+0x24>
 7ce:	1c 9b       	sbis	0x03, 4	; 3
 7d0:	fe cf       	rjmp	.-4      	; 0x7ce <SpiMasterPassLisFrame+0x28>
 7d2:	45 98       	cbi	0x08, 5	; 8
 7d4:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <nbytes_in_frame>
 7d8:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <nbytes_in_frame+0x1>
 7dc:	02 97       	sbiw	r24, 0x02	; 2
 7de:	c0 f1       	brcs	.+112    	; 0x850 <SpiMasterPassLisFrame+0xaa>
 7e0:	c1 e0       	ldi	r28, 0x01	; 1
 7e2:	d0 e0       	ldi	r29, 0x00	; 0
 7e4:	e0 90 3a 01 	lds	r14, 0x013A	; 0x80013a <slave_ignore>
 7e8:	1f ef       	ldi	r17, 0xFF	; 255
 7ea:	f0 90 38 01 	lds	r15, 0x0138	; 0x800138 <FtCmd_Write>
 7ee:	2a 98       	cbi	0x05, 2	; 5
 7f0:	ee bc       	out	0x2e, r14	; 46
 7f2:	0d b4       	in	r0, 0x2d	; 45
 7f4:	07 fe       	sbrs	r0, 7
 7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <SpiMasterPassLisFrame+0x4c>
 7f8:	8e b5       	in	r24, 0x2e	; 46
 7fa:	2a 9a       	sbi	0x05, 2	; 5
 7fc:	0e b5       	in	r16, 0x2e	; 46
 7fe:	1c 9b       	sbis	0x03, 4	; 3
 800:	fe cf       	rjmp	.-4      	; 0x7fe <SpiMasterPassLisFrame+0x58>
 802:	1c 99       	sbic	0x03, 4	; 3
 804:	fe cf       	rjmp	.-4      	; 0x802 <SpiMasterPassLisFrame+0x5c>
 806:	1c 9b       	sbis	0x03, 4	; 3
 808:	fe cf       	rjmp	.-4      	; 0x806 <SpiMasterPassLisFrame+0x60>
 80a:	45 9a       	sbi	0x08, 5	; 8
 80c:	40 98       	cbi	0x08, 0	; 8
 80e:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 812:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	09 95       	icall
 81a:	41 9a       	sbi	0x08, 1	; 8
 81c:	1a b9       	out	0x0a, r17	; 10
 81e:	fb b8       	out	0x0b, r15	; 11
 820:	41 98       	cbi	0x08, 1	; 8
 822:	1a b8       	out	0x0a, r1	; 10
 824:	41 9a       	sbi	0x08, 1	; 8
 826:	41 98       	cbi	0x08, 1	; 8
 828:	32 9b       	sbis	0x06, 2	; 6
 82a:	02 c0       	rjmp	.+4      	; 0x830 <SpiMasterPassLisFrame+0x8a>
 82c:	43 9a       	sbi	0x08, 3	; 8
 82e:	06 c0       	rjmp	.+12     	; 0x83c <SpiMasterPassLisFrame+0x96>
 830:	1a b9       	out	0x0a, r17	; 10
 832:	41 9a       	sbi	0x08, 1	; 8
 834:	0b b9       	out	0x0b, r16	; 11
 836:	41 98       	cbi	0x08, 1	; 8
 838:	32 99       	sbic	0x06, 2	; 6
 83a:	43 9a       	sbi	0x08, 3	; 8
 83c:	40 9a       	sbi	0x08, 0	; 8
 83e:	21 96       	adiw	r28, 0x01	; 1
 840:	80 91 87 07 	lds	r24, 0x0787	; 0x800787 <nbytes_in_frame>
 844:	90 91 88 07 	lds	r25, 0x0788	; 0x800788 <nbytes_in_frame+0x1>
 848:	c8 17       	cp	r28, r24
 84a:	d9 07       	cpc	r29, r25
 84c:	80 f2       	brcs	.-96     	; 0x7ee <SpiMasterPassLisFrame+0x48>
 84e:	02 c0       	rjmp	.+4      	; 0x854 <SpiMasterPassLisFrame+0xae>
 850:	c1 e0       	ldi	r28, 0x01	; 1
 852:	d0 e0       	ldi	r29, 0x00	; 0
 854:	2a 98       	cbi	0x05, 2	; 5
 856:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <slave_ignore>
 85a:	8e bd       	out	0x2e, r24	; 46
 85c:	0d b4       	in	r0, 0x2d	; 45
 85e:	07 fe       	sbrs	r0, 7
 860:	fd cf       	rjmp	.-6      	; 0x85c <SpiMasterPassLisFrame+0xb6>
 862:	8e b5       	in	r24, 0x2e	; 46
 864:	2a 9a       	sbi	0x05, 2	; 5
 866:	1e b5       	in	r17, 0x2e	; 46
 868:	40 98       	cbi	0x08, 0	; 8
 86a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 86e:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	09 95       	icall
 876:	41 9a       	sbi	0x08, 1	; 8
 878:	8f ef       	ldi	r24, 0xFF	; 255
 87a:	8a b9       	out	0x0a, r24	; 10
 87c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <FtCmd_Write>
 880:	8b b9       	out	0x0b, r24	; 11
 882:	41 98       	cbi	0x08, 1	; 8
 884:	1a b8       	out	0x0a, r1	; 10
 886:	41 9a       	sbi	0x08, 1	; 8
 888:	41 98       	cbi	0x08, 1	; 8
 88a:	32 9b       	sbis	0x06, 2	; 6
 88c:	02 c0       	rjmp	.+4      	; 0x892 <SpiMasterPassLisFrame+0xec>
 88e:	43 9a       	sbi	0x08, 3	; 8
 890:	07 c0       	rjmp	.+14     	; 0x8a0 <SpiMasterPassLisFrame+0xfa>
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	8a b9       	out	0x0a, r24	; 10
 896:	41 9a       	sbi	0x08, 1	; 8
 898:	1b b9       	out	0x0b, r17	; 11
 89a:	41 98       	cbi	0x08, 1	; 8
 89c:	32 99       	sbic	0x06, 2	; 6
 89e:	43 9a       	sbi	0x08, 3	; 8
 8a0:	40 9a       	sbi	0x08, 0	; 8
 8a2:	ce 01       	movw	r24, r28
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	ff 90       	pop	r15
 8ae:	ef 90       	pop	r14
 8b0:	08 95       	ret

000008b2 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>:
    *(pnticks--) = *Spi_spdr;               // store lsb
    // Debug: echo the bytes back.
    UsbWrite(pnticks, 2);
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	00 d0       	rcall	.+0      	; 0x8b8 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x6>
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave+0x8>
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
                else if (rowselect == cmd_cfg_lis_rowselect_12)     MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12);
                else if (rowselect == cmd_cfg_lis_rowselect_123)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_123);
                else if (rowselect == cmd_cfg_lis_rowselect_1234)   MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1234);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12345);
                if (cmd == cmd_write_cfg_to_lis) MacroSpiMasterWriteAndDelay(cmd_write_cfg_to_lis);
 8be:	0f 2e       	mov	r0, r31
 8c0:	f7 e0       	ldi	r31, 0x07	; 7
 8c2:	bf 2e       	mov	r11, r31
 8c4:	f0 2d       	mov	r31, r0
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
                else if (rowselect == cmd_cfg_lis_rowselect_12)     MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12);
                else if (rowselect == cmd_cfg_lis_rowselect_123)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_123);
                else if (rowselect == cmd_cfg_lis_rowselect_1234)   MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1234);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12345);
 8c6:	0f 2e       	mov	r0, r31
 8c8:	fc e0       	ldi	r31, 0x0C	; 12
 8ca:	2f 2e       	mov	r2, r31
 8cc:	f0 2d       	mov	r31, r0
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
                else if (rowselect == cmd_cfg_lis_rowselect_12)     MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12);
                else if (rowselect == cmd_cfg_lis_rowselect_123)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_123);
                else if (rowselect == cmd_cfg_lis_rowselect_1234)   MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1234);
 8ce:	0f 2e       	mov	r0, r31
 8d0:	f4 e1       	ldi	r31, 0x14	; 20
 8d2:	3f 2e       	mov	r3, r31
 8d4:	f0 2d       	mov	r31, r0
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
                else if (rowselect == cmd_cfg_lis_rowselect_12)     MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12);
                else if (rowselect == cmd_cfg_lis_rowselect_123)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_123);
 8d6:	0f 2e       	mov	r0, r31
 8d8:	f3 e1       	ldi	r31, 0x13	; 19
 8da:	4f 2e       	mov	r4, r31
 8dc:	f0 2d       	mov	r31, r0
                if      (rowselect == cmd_cfg_lis_rowselect_1)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1);
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
                else if (rowselect == cmd_cfg_lis_rowselect_12)     MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12);
 8de:	0f 2e       	mov	r0, r31
 8e0:	f2 e1       	ldi	r31, 0x12	; 18
 8e2:	5f 2e       	mov	r5, r31
 8e4:	f0 2d       	mov	r31, r0
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
                if      (rowselect == cmd_cfg_lis_rowselect_1)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1);
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
 8e6:	0f 2e       	mov	r0, r31
 8e8:	f1 e1       	ldi	r31, 0x11	; 17
 8ea:	6f 2e       	mov	r6, r31
 8ec:	f0 2d       	mov	r31, r0
                else if (gain_setting == cmd_cfg_lis_gain_2pt5x)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_2pt5x);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
                if      (rowselect == cmd_cfg_lis_rowselect_1)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1);
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
 8ee:	68 94       	set
 8f0:	77 24       	eor	r7, r7
 8f2:	74 f8       	bld	r7, 4
                else if (gain_setting == cmd_cfg_lis_gain_4x)       MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_4x);
                else if (gain_setting == cmd_cfg_lis_gain_2pt5x)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_2pt5x);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
                if      (rowselect == cmd_cfg_lis_rowselect_1)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1);
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
 8f4:	0f 2e       	mov	r0, r31
 8f6:	ff e0       	ldi	r31, 0x0F	; 15
 8f8:	8f 2e       	mov	r8, r31
 8fa:	f0 2d       	mov	r31, r0
                if      (gain_setting == cmd_cfg_lis_gain_5x)       MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_5x);
                else if (gain_setting == cmd_cfg_lis_gain_4x)       MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_4x);
                else if (gain_setting == cmd_cfg_lis_gain_2pt5x)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_2pt5x);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
                if      (rowselect == cmd_cfg_lis_rowselect_1)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1);
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
 8fc:	0f 2e       	mov	r0, r31
 8fe:	fe e0       	ldi	r31, 0x0E	; 14
 900:	9f 2e       	mov	r9, r31
 902:	f0 2d       	mov	r31, r0
                uint8_t gain_setting    = read_buffer[2];
                uint8_t rowselect       = read_buffer[3];
                if      (summing_mode == cmd_cfg_summing_mode_on)   MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_off);
                if      (summing_mode == cmd_cfg_summing_mode_on)   nbytes_in_frame = sizeof_half_frame;
                else                                                nbytes_in_frame = sizeof_full_frame;
 904:	0f 2e       	mov	r0, r31
 906:	f0 e2       	ldi	r31, 0x20	; 32
 908:	ef 2e       	mov	r14, r31
 90a:	f6 e0       	ldi	r31, 0x06	; 6
 90c:	ff 2e       	mov	r15, r31
 90e:	f0 2d       	mov	r31, r0
                uint8_t summing_mode    = read_buffer[1];
                uint8_t gain_setting    = read_buffer[2];
                uint8_t rowselect       = read_buffer[3];
                if      (summing_mode == cmd_cfg_summing_mode_on)   MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_off);
                if      (summing_mode == cmd_cfg_summing_mode_on)   nbytes_in_frame = sizeof_half_frame;
 910:	0f 2e       	mov	r0, r31
 912:	f0 e1       	ldi	r31, 0x10	; 16
 914:	cf 2e       	mov	r12, r31
 916:	f3 e0       	ldi	r31, 0x03	; 3
 918:	df 2e       	mov	r13, r31
 91a:	f0 2d       	mov	r31, r0
}
void SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave(void)
{
    while(1) // loop forever responding to the USB host
    {
        if (UsbHasDataToRead())
 91c:	0e 94 4c 02 	call	0x498	; 0x498 <UsbHasDataToRead>
 920:	88 23       	and	r24, r24
 922:	e1 f3       	breq	.-8      	; 0x91c <__stack+0x1d>
        {
            /* MacroDebugLedToggleColor(); */
            /* MacroDebugLedRed(); */
            uint8_t read_buffer[4];
            uint8_t nbytes_in_cmd = UsbRead(read_buffer);
 924:	ce 01       	movw	r24, r28
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UsbRead>
            uint8_t cmd = read_buffer[0];
 92c:	19 81       	ldd	r17, Y+1	; 0x01
            if (1 == nbytes_in_cmd)
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	c1 f4       	brne	.+48     	; 0x962 <__stack+0x63>
            {
                if      (cmd == cmd_send_lis_frame) { MacroDebugLedRed(); SpiMasterPassLisFrame(); MacroDebugLedGreen(); }
 932:	11 30       	cpi	r17, 0x01	; 1
 934:	29 f4       	brne	.+10     	; 0x940 <__stack+0x41>
 936:	43 9a       	sbi	0x08, 3	; 8
 938:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <SpiMasterPassLisFrame>
 93c:	43 98       	cbi	0x08, 3	; 8
 93e:	ee cf       	rjmp	.-36     	; 0x91c <__stack+0x1d>
                // for using Arduino as the SPI master via the ISP header:
                else if (cmd == cmd_disable_spi_master) { SpiMasterDisable(); MacroDebugLedRed(); }
 940:	13 30       	cpi	r17, 0x03	; 3
 942:	21 f4       	brne	.+8      	; 0x94c <__stack+0x4d>
 944:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SpiMasterDisable>
 948:	43 9a       	sbi	0x08, 3	; 8
 94a:	e8 cf       	rjmp	.-48     	; 0x91c <__stack+0x1d>
                else if (cmd == cmd_enable_spi_master)  { SpiMasterInit(); MacroDebugLedGreen(); }
 94c:	14 30       	cpi	r17, 0x04	; 4
 94e:	21 f4       	brne	.+8      	; 0x958 <__stack+0x59>
 950:	0e 94 a5 02 	call	0x54a	; 0x54a <SpiMasterInit>
 954:	43 98       	cbi	0x08, 3	; 8
 956:	e2 cf       	rjmp	.-60     	; 0x91c <__stack+0x1d>
                // test commands
                else if (cmd == cmd_send_four_dummy_bytes) DoCmdSendFourDummyBytes();
 958:	12 3f       	cpi	r17, 0xF2	; 242
 95a:	01 f7       	brne	.-64     	; 0x91c <__stack+0x1d>
 95c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <DoCmdSendFourDummyBytes>
 960:	dd cf       	rjmp	.-70     	; 0x91c <__stack+0x1d>
            }
            else if (2 == nbytes_in_cmd)
 962:	82 30       	cpi	r24, 0x02	; 2
 964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
 966:	51 c0       	rjmp	.+162    	; 0xa0a <__stack+0x10b>
            {
                uint8_t gain_setting = read_buffer[1];
 968:	8a 81       	ldd	r24, Y+2	; 0x02
                if      (gain_setting == cmd_cfg_lis_gain_5x)  MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_5x);
 96a:	88 30       	cpi	r24, 0x08	; 8
 96c:	71 f4       	brne	.+28     	; 0x98a <__stack+0x8b>
 96e:	2a 98       	cbi	0x05, 2	; 5
 970:	8e bd       	out	0x2e, r24	; 46
 972:	0d b4       	in	r0, 0x2d	; 45
 974:	07 fe       	sbrs	r0, 7
 976:	fd cf       	rjmp	.-6      	; 0x972 <__stack+0x73>
 978:	8e b5       	in	r24, 0x2e	; 46
 97a:	2a 9a       	sbi	0x05, 2	; 5
 97c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 980:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 984:	82 e3       	ldi	r24, 0x32	; 50
 986:	09 95       	icall
 988:	2f c0       	rjmp	.+94     	; 0x9e8 <__stack+0xe9>
                else if (gain_setting == cmd_cfg_lis_gain_4x)  MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_4x);
 98a:	89 30       	cpi	r24, 0x09	; 9
 98c:	71 f4       	brne	.+28     	; 0x9aa <__stack+0xab>
 98e:	2a 98       	cbi	0x05, 2	; 5
 990:	8e bd       	out	0x2e, r24	; 46
 992:	0d b4       	in	r0, 0x2d	; 45
 994:	07 fe       	sbrs	r0, 7
 996:	fd cf       	rjmp	.-6      	; 0x992 <__stack+0x93>
 998:	8e b5       	in	r24, 0x2e	; 46
 99a:	2a 9a       	sbi	0x05, 2	; 5
 99c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 9a0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 9a4:	82 e3       	ldi	r24, 0x32	; 50
 9a6:	09 95       	icall
 9a8:	1f c0       	rjmp	.+62     	; 0x9e8 <__stack+0xe9>
                else if (gain_setting == cmd_cfg_lis_gain_2pt5x)  MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_2pt5x);
 9aa:	8a 30       	cpi	r24, 0x0A	; 10
 9ac:	71 f4       	brne	.+28     	; 0x9ca <__stack+0xcb>
 9ae:	2a 98       	cbi	0x05, 2	; 5
 9b0:	8e bd       	out	0x2e, r24	; 46
 9b2:	0d b4       	in	r0, 0x2d	; 45
 9b4:	07 fe       	sbrs	r0, 7
 9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <__stack+0xb3>
 9b8:	8e b5       	in	r24, 0x2e	; 46
 9ba:	2a 9a       	sbi	0x05, 2	; 5
 9bc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 9c0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 9c4:	82 e3       	ldi	r24, 0x32	; 50
 9c6:	09 95       	icall
 9c8:	0f c0       	rjmp	.+30     	; 0x9e8 <__stack+0xe9>
                else if (gain_setting == cmd_cfg_lis_gain_1x)  MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
 9ca:	8b 30       	cpi	r24, 0x0B	; 11
 9cc:	69 f4       	brne	.+26     	; 0x9e8 <__stack+0xe9>
 9ce:	2a 98       	cbi	0x05, 2	; 5
 9d0:	8e bd       	out	0x2e, r24	; 46
 9d2:	0d b4       	in	r0, 0x2d	; 45
 9d4:	07 fe       	sbrs	r0, 7
 9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <__stack+0xd3>
 9d8:	8e b5       	in	r24, 0x2e	; 46
 9da:	2a 9a       	sbi	0x05, 2	; 5
 9dc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 9e0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 9e4:	82 e3       	ldi	r24, 0x32	; 50
 9e6:	09 95       	icall
                if (cmd == cmd_write_cfg_to_lis) MacroSpiMasterWriteAndDelay(cmd_write_cfg_to_lis);
 9e8:	17 30       	cpi	r17, 0x07	; 7
 9ea:	09 f0       	breq	.+2      	; 0x9ee <__stack+0xef>
 9ec:	97 cf       	rjmp	.-210    	; 0x91c <__stack+0x1d>
 9ee:	2a 98       	cbi	0x05, 2	; 5
 9f0:	be bc       	out	0x2e, r11	; 46
 9f2:	0d b4       	in	r0, 0x2d	; 45
 9f4:	07 fe       	sbrs	r0, 7
 9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <__stack+0xf3>
 9f8:	8e b5       	in	r24, 0x2e	; 46
 9fa:	2a 9a       	sbi	0x05, 2	; 5
 9fc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 a00:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 a04:	82 e3       	ldi	r24, 0x32	; 50
 a06:	09 95       	icall
 a08:	89 cf       	rjmp	.-238    	; 0x91c <__stack+0x1d>
            }
            else if (3 == nbytes_in_cmd)
 a0a:	83 30       	cpi	r24, 0x03	; 3
 a0c:	41 f4       	brne	.+16     	; 0xa1e <__stack+0x11f>
            {
                uint8_t *pnticks = &read_buffer[1]; // two bytes of nticks_exposure
                if      (cmd == cmd_set_exposure_time) SetExposureTime(pnticks);
 a0e:	12 30       	cpi	r17, 0x02	; 2
 a10:	09 f0       	breq	.+2      	; 0xa14 <__stack+0x115>
 a12:	84 cf       	rjmp	.-248    	; 0x91c <__stack+0x1d>
 a14:	ce 01       	movw	r24, r28
 a16:	02 96       	adiw	r24, 0x02	; 2
 a18:	0e 94 82 03 	call	0x704	; 0x704 <SetExposureTime>
 a1c:	7f cf       	rjmp	.-258    	; 0x91c <__stack+0x1d>
            }
            else if (4 == nbytes_in_cmd)
 a1e:	84 30       	cpi	r24, 0x04	; 4
 a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x125>
 a22:	7c cf       	rjmp	.-264    	; 0x91c <__stack+0x1d>
            {
                uint8_t summing_mode    = read_buffer[1];
                uint8_t gain_setting    = read_buffer[2];
 a24:	ab 80       	ldd	r10, Y+3	; 0x03
                uint8_t rowselect       = read_buffer[3];
 a26:	0c 81       	ldd	r16, Y+4	; 0x04
                if      (summing_mode == cmd_cfg_summing_mode_on)   MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
 a28:	8a 81       	ldd	r24, Y+2	; 0x02
 a2a:	86 30       	cpi	r24, 0x06	; 6
 a2c:	91 f4       	brne	.+36     	; 0xa52 <__stack+0x153>
 a2e:	2a 98       	cbi	0x05, 2	; 5
 a30:	8e bd       	out	0x2e, r24	; 46
 a32:	0d b4       	in	r0, 0x2d	; 45
 a34:	07 fe       	sbrs	r0, 7
 a36:	fd cf       	rjmp	.-6      	; 0xa32 <__stack+0x133>
 a38:	8e b5       	in	r24, 0x2e	; 46
 a3a:	2a 9a       	sbi	0x05, 2	; 5
 a3c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 a40:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 a44:	82 e3       	ldi	r24, 0x32	; 50
 a46:	09 95       	icall
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_off);
                if      (summing_mode == cmd_cfg_summing_mode_on)   nbytes_in_frame = sizeof_half_frame;
 a48:	d0 92 88 07 	sts	0x0788, r13	; 0x800788 <nbytes_in_frame+0x1>
 a4c:	c0 92 87 07 	sts	0x0787, r12	; 0x800787 <nbytes_in_frame>
 a50:	12 c0       	rjmp	.+36     	; 0xa76 <__stack+0x177>
            {
                uint8_t summing_mode    = read_buffer[1];
                uint8_t gain_setting    = read_buffer[2];
                uint8_t rowselect       = read_buffer[3];
                if      (summing_mode == cmd_cfg_summing_mode_on)   MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_on);
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_summing_mode_off);
 a52:	2a 98       	cbi	0x05, 2	; 5
 a54:	85 e0       	ldi	r24, 0x05	; 5
 a56:	8e bd       	out	0x2e, r24	; 46
 a58:	0d b4       	in	r0, 0x2d	; 45
 a5a:	07 fe       	sbrs	r0, 7
 a5c:	fd cf       	rjmp	.-6      	; 0xa58 <__stack+0x159>
 a5e:	8e b5       	in	r24, 0x2e	; 46
 a60:	2a 9a       	sbi	0x05, 2	; 5
 a62:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 a66:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 a6a:	82 e3       	ldi	r24, 0x32	; 50
 a6c:	09 95       	icall
                if      (summing_mode == cmd_cfg_summing_mode_on)   nbytes_in_frame = sizeof_half_frame;
                else                                                nbytes_in_frame = sizeof_full_frame;
 a6e:	f0 92 88 07 	sts	0x0788, r15	; 0x800788 <nbytes_in_frame+0x1>
 a72:	e0 92 87 07 	sts	0x0787, r14	; 0x800787 <nbytes_in_frame>
                if      (gain_setting == cmd_cfg_lis_gain_5x)       MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_5x);
 a76:	88 e0       	ldi	r24, 0x08	; 8
 a78:	a8 12       	cpse	r10, r24
 a7a:	0e c0       	rjmp	.+28     	; 0xa98 <__stack+0x199>
 a7c:	2a 98       	cbi	0x05, 2	; 5
 a7e:	8e bd       	out	0x2e, r24	; 46
 a80:	0d b4       	in	r0, 0x2d	; 45
 a82:	07 fe       	sbrs	r0, 7
 a84:	fd cf       	rjmp	.-6      	; 0xa80 <__stack+0x181>
 a86:	8e b5       	in	r24, 0x2e	; 46
 a88:	2a 9a       	sbi	0x05, 2	; 5
 a8a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 a8e:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 a92:	82 e3       	ldi	r24, 0x32	; 50
 a94:	09 95       	icall
 a96:	30 c0       	rjmp	.+96     	; 0xaf8 <__stack+0x1f9>
                else if (gain_setting == cmd_cfg_lis_gain_4x)       MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_4x);
 a98:	89 e0       	ldi	r24, 0x09	; 9
 a9a:	a8 12       	cpse	r10, r24
 a9c:	0e c0       	rjmp	.+28     	; 0xaba <__stack+0x1bb>
 a9e:	2a 98       	cbi	0x05, 2	; 5
 aa0:	8e bd       	out	0x2e, r24	; 46
 aa2:	0d b4       	in	r0, 0x2d	; 45
 aa4:	07 fe       	sbrs	r0, 7
 aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <__stack+0x1a3>
 aa8:	8e b5       	in	r24, 0x2e	; 46
 aaa:	2a 9a       	sbi	0x05, 2	; 5
 aac:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 ab0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 ab4:	82 e3       	ldi	r24, 0x32	; 50
 ab6:	09 95       	icall
 ab8:	1f c0       	rjmp	.+62     	; 0xaf8 <__stack+0x1f9>
                else if (gain_setting == cmd_cfg_lis_gain_2pt5x)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_2pt5x);
 aba:	8a e0       	ldi	r24, 0x0A	; 10
 abc:	a8 12       	cpse	r10, r24
 abe:	0e c0       	rjmp	.+28     	; 0xadc <__stack+0x1dd>
 ac0:	2a 98       	cbi	0x05, 2	; 5
 ac2:	8e bd       	out	0x2e, r24	; 46
 ac4:	0d b4       	in	r0, 0x2d	; 45
 ac6:	07 fe       	sbrs	r0, 7
 ac8:	fd cf       	rjmp	.-6      	; 0xac4 <__stack+0x1c5>
 aca:	8e b5       	in	r24, 0x2e	; 46
 acc:	2a 9a       	sbi	0x05, 2	; 5
 ace:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 ad2:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 ad6:	82 e3       	ldi	r24, 0x32	; 50
 ad8:	09 95       	icall
 ada:	0e c0       	rjmp	.+28     	; 0xaf8 <__stack+0x1f9>
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_gain_1x);
 adc:	2a 98       	cbi	0x05, 2	; 5
 ade:	8b e0       	ldi	r24, 0x0B	; 11
 ae0:	8e bd       	out	0x2e, r24	; 46
 ae2:	0d b4       	in	r0, 0x2d	; 45
 ae4:	07 fe       	sbrs	r0, 7
 ae6:	fd cf       	rjmp	.-6      	; 0xae2 <__stack+0x1e3>
 ae8:	8e b5       	in	r24, 0x2e	; 46
 aea:	2a 9a       	sbi	0x05, 2	; 5
 aec:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 af0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 af4:	82 e3       	ldi	r24, 0x32	; 50
 af6:	09 95       	icall
                if      (rowselect == cmd_cfg_lis_rowselect_1)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1);
 af8:	0d 30       	cpi	r16, 0x0D	; 13
 afa:	79 f4       	brne	.+30     	; 0xb1a <__stack+0x21b>
 afc:	2a 98       	cbi	0x05, 2	; 5
 afe:	8d e0       	ldi	r24, 0x0D	; 13
 b00:	8e bd       	out	0x2e, r24	; 46
 b02:	0d b4       	in	r0, 0x2d	; 45
 b04:	07 fe       	sbrs	r0, 7
 b06:	fd cf       	rjmp	.-6      	; 0xb02 <__stack+0x203>
 b08:	8e b5       	in	r24, 0x2e	; 46
 b0a:	2a 9a       	sbi	0x05, 2	; 5
 b0c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 b10:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 b14:	82 e3       	ldi	r24, 0x32	; 50
 b16:	09 95       	icall
 b18:	7d c0       	rjmp	.+250    	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_2)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_2);
 b1a:	0e 30       	cpi	r16, 0x0E	; 14
 b1c:	71 f4       	brne	.+28     	; 0xb3a <__stack+0x23b>
 b1e:	2a 98       	cbi	0x05, 2	; 5
 b20:	9e bc       	out	0x2e, r9	; 46
 b22:	0d b4       	in	r0, 0x2d	; 45
 b24:	07 fe       	sbrs	r0, 7
 b26:	fd cf       	rjmp	.-6      	; 0xb22 <__stack+0x223>
 b28:	8e b5       	in	r24, 0x2e	; 46
 b2a:	2a 9a       	sbi	0x05, 2	; 5
 b2c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 b30:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 b34:	82 e3       	ldi	r24, 0x32	; 50
 b36:	09 95       	icall
 b38:	6d c0       	rjmp	.+218    	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_3)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_3);
 b3a:	0f 30       	cpi	r16, 0x0F	; 15
 b3c:	71 f4       	brne	.+28     	; 0xb5a <__stack+0x25b>
 b3e:	2a 98       	cbi	0x05, 2	; 5
 b40:	8e bc       	out	0x2e, r8	; 46
 b42:	0d b4       	in	r0, 0x2d	; 45
 b44:	07 fe       	sbrs	r0, 7
 b46:	fd cf       	rjmp	.-6      	; 0xb42 <__stack+0x243>
 b48:	8e b5       	in	r24, 0x2e	; 46
 b4a:	2a 9a       	sbi	0x05, 2	; 5
 b4c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 b50:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 b54:	82 e3       	ldi	r24, 0x32	; 50
 b56:	09 95       	icall
 b58:	5d c0       	rjmp	.+186    	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_4)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_4);
 b5a:	00 31       	cpi	r16, 0x10	; 16
 b5c:	71 f4       	brne	.+28     	; 0xb7a <__stack+0x27b>
 b5e:	2a 98       	cbi	0x05, 2	; 5
 b60:	7e bc       	out	0x2e, r7	; 46
 b62:	0d b4       	in	r0, 0x2d	; 45
 b64:	07 fe       	sbrs	r0, 7
 b66:	fd cf       	rjmp	.-6      	; 0xb62 <__stack+0x263>
 b68:	8e b5       	in	r24, 0x2e	; 46
 b6a:	2a 9a       	sbi	0x05, 2	; 5
 b6c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 b70:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 b74:	82 e3       	ldi	r24, 0x32	; 50
 b76:	09 95       	icall
 b78:	4d c0       	rjmp	.+154    	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_5)      MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_5);
 b7a:	01 31       	cpi	r16, 0x11	; 17
 b7c:	71 f4       	brne	.+28     	; 0xb9a <__stack+0x29b>
 b7e:	2a 98       	cbi	0x05, 2	; 5
 b80:	6e bc       	out	0x2e, r6	; 46
 b82:	0d b4       	in	r0, 0x2d	; 45
 b84:	07 fe       	sbrs	r0, 7
 b86:	fd cf       	rjmp	.-6      	; 0xb82 <__stack+0x283>
 b88:	8e b5       	in	r24, 0x2e	; 46
 b8a:	2a 9a       	sbi	0x05, 2	; 5
 b8c:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 b90:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 b94:	82 e3       	ldi	r24, 0x32	; 50
 b96:	09 95       	icall
 b98:	3d c0       	rjmp	.+122    	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_12)     MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12);
 b9a:	02 31       	cpi	r16, 0x12	; 18
 b9c:	71 f4       	brne	.+28     	; 0xbba <__stack+0x2bb>
 b9e:	2a 98       	cbi	0x05, 2	; 5
 ba0:	5e bc       	out	0x2e, r5	; 46
 ba2:	0d b4       	in	r0, 0x2d	; 45
 ba4:	07 fe       	sbrs	r0, 7
 ba6:	fd cf       	rjmp	.-6      	; 0xba2 <__stack+0x2a3>
 ba8:	8e b5       	in	r24, 0x2e	; 46
 baa:	2a 9a       	sbi	0x05, 2	; 5
 bac:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 bb0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 bb4:	82 e3       	ldi	r24, 0x32	; 50
 bb6:	09 95       	icall
 bb8:	2d c0       	rjmp	.+90     	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_123)    MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_123);
 bba:	03 31       	cpi	r16, 0x13	; 19
 bbc:	71 f4       	brne	.+28     	; 0xbda <__stack+0x2db>
 bbe:	2a 98       	cbi	0x05, 2	; 5
 bc0:	4e bc       	out	0x2e, r4	; 46
 bc2:	0d b4       	in	r0, 0x2d	; 45
 bc4:	07 fe       	sbrs	r0, 7
 bc6:	fd cf       	rjmp	.-6      	; 0xbc2 <__stack+0x2c3>
 bc8:	8e b5       	in	r24, 0x2e	; 46
 bca:	2a 9a       	sbi	0x05, 2	; 5
 bcc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 bd0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 bd4:	82 e3       	ldi	r24, 0x32	; 50
 bd6:	09 95       	icall
 bd8:	1d c0       	rjmp	.+58     	; 0xc14 <__stack+0x315>
                else if (rowselect == cmd_cfg_lis_rowselect_1234)   MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_1234);
 bda:	04 31       	cpi	r16, 0x14	; 20
 bdc:	71 f4       	brne	.+28     	; 0xbfa <__stack+0x2fb>
 bde:	2a 98       	cbi	0x05, 2	; 5
 be0:	3e bc       	out	0x2e, r3	; 46
 be2:	0d b4       	in	r0, 0x2d	; 45
 be4:	07 fe       	sbrs	r0, 7
 be6:	fd cf       	rjmp	.-6      	; 0xbe2 <__stack+0x2e3>
 be8:	8e b5       	in	r24, 0x2e	; 46
 bea:	2a 9a       	sbi	0x05, 2	; 5
 bec:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 bf0:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 bf4:	82 e3       	ldi	r24, 0x32	; 50
 bf6:	09 95       	icall
 bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__stack+0x315>
                else                                                MacroSpiMasterWriteAndDelay(cmd_cfg_lis_rowselect_12345);
 bfa:	2a 98       	cbi	0x05, 2	; 5
 bfc:	2e bc       	out	0x2e, r2	; 46
 bfe:	0d b4       	in	r0, 0x2d	; 45
 c00:	07 fe       	sbrs	r0, 7
 c02:	fd cf       	rjmp	.-6      	; 0xbfe <__stack+0x2ff>
 c04:	8e b5       	in	r24, 0x2e	; 46
 c06:	2a 9a       	sbi	0x05, 2	; 5
 c08:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 c0c:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 c10:	82 e3       	ldi	r24, 0x32	; 50
 c12:	09 95       	icall
                if (cmd == cmd_write_cfg_to_lis) MacroSpiMasterWriteAndDelay(cmd_write_cfg_to_lis);
 c14:	17 30       	cpi	r17, 0x07	; 7
 c16:	09 f0       	breq	.+2      	; 0xc1a <__stack+0x31b>
 c18:	81 ce       	rjmp	.-766    	; 0x91c <__stack+0x1d>
 c1a:	2a 98       	cbi	0x05, 2	; 5
 c1c:	be bc       	out	0x2e, r11	; 46
 c1e:	0d b4       	in	r0, 0x2d	; 45
 c20:	07 fe       	sbrs	r0, 7
 c22:	fd cf       	rjmp	.-6      	; 0xc1e <__stack+0x31f>
 c24:	8e b5       	in	r24, 0x2e	; 46
 c26:	2a 9a       	sbi	0x05, 2	; 5
 c28:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick>
 c2c:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Delay3CpuCyclesPerTick+0x1>
 c30:	82 e3       	ldi	r24, 0x32	; 50
 c32:	09 95       	icall
 c34:	73 ce       	rjmp	.-794    	; 0x91c <__stack+0x1d>

00000c36 <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 c36:	0e 94 47 03 	call	0x68e	; 0x68e <SetupDebugLed>
    /* SpiMaster_get_fake_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_adc_reading_from_slave_and_write_to_USB_host(); */
    /* SpiMaster_get_frame_of_adc_readings_and_write_to_USB_host(); */
    /* SpiMaster_get_Lis_frame_and_write_to_USB_host(); */
    /* =====[ Setup ]===== */
    SpiMasterInit();
 c3a:	0e 94 a5 02 	call	0x54a	; 0x54a <SpiMasterInit>
    UsbInit();
 c3e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UsbInit>
    DebugPinInit();
 c42:	3d 9a       	sbi	0x07, 5	; 7
 c44:	45 9a       	sbi	0x08, 5	; 8
    nbytes_in_frame = sizeof_full_frame; // initialize global `nbytes_in_frame`
 c46:	80 e2       	ldi	r24, 0x20	; 32
 c48:	96 e0       	ldi	r25, 0x06	; 6
 c4a:	90 93 88 07 	sts	0x0788, r25	; 0x800788 <nbytes_in_frame+0x1>
 c4e:	80 93 87 07 	sts	0x0787, r24	; 0x800787 <nbytes_in_frame>
    SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave();
 c52:	0e 94 59 04 	call	0x8b2	; 0x8b2 <SpiMaster_pass_commands_from_USB_Host_pass_data_from_slave>

00000c56 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 c56:	8a 95       	dec	r24
 c58:	f1 f7       	brne	.-4      	; 0xc56 <Delay3CpuCyclesPerTick_Implementation>
 c5a:	08 95       	ret

00000c5c <_exit>:
 c5c:	f8 94       	cli

00000c5e <__stop_program>:
 c5e:	ff cf       	rjmp	.-2      	; 0xc5e <__stop_program>
