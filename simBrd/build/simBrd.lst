
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800132  00800132  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028ff  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001023  00000000  00000000  000030fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d3  00000000  00000000  0000411e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  000051f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012bb  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000db1  00000000  00000000  00006c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  000079f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  9e:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
  fa:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
  fe:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ddr_register_>
 102:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <ddr_register_+0x1>
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10a:	08 95       	ret

0000010c <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
 10c:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 110:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <port_register_>
 114:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <port_register_+0x1>
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 11c:	08 95       	ret

0000011e <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
 11e:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end>
 122:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <port_register_>
 126:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <port_register_+0x1>
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 12e:	08 95       	ret

00000130 <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 130:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <ddr_register_+0x1>
 134:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <ddr_register_>
    port_register_ = port_register;
 138:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <port_register_+0x1>
 13c:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <port_register_>
    pin_register_ = pin_register;
 140:	50 93 34 01 	sts	0x0134, r21	; 0x800134 <pin_register_+0x1>
 144:	40 93 33 01 	sts	0x0133, r20	; 0x800133 <pin_register_>
    debug_led_ = debug_led;
 148:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__data_end>
    DebugLedTurnOn();
 14c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnOn>
 150:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnOn+0x1>
 154:	09 95       	icall
    DebugLedTurnGreen();
 156:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnGreen>
 15a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnGreen+0x1>
 15e:	09 95       	icall
 160:	08 95       	ret

00000162 <FtSetMisoAsInput>:
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 162:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Ft1248_Miso>
 166:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Ft1248_ddr>
 16a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Ft1248_ddr+0x1>
 16e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 172:	08 95       	ret

00000174 <FtEnablePullupOnMiso>:
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 174:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Ft1248_Miso>
 178:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ft1248_port>
 17c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ft1248_port+0x1>
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 184:	08 95       	ret

00000186 <FtSetMiosioAsInputs>:
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 186:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <FtMiosio_ddr>
 18a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <FtMiosio_ddr+0x1>
 18e:	10 82       	st	Z, r1
 190:	08 95       	ret

00000192 <FtEnablePullupsOnMiosio>:
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 192:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <FtMiosio_port>
 196:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <FtMiosio_port+0x1>
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <FtSckLow>:
}
void FtSckLow(void)
{
 1a0:	cf 93       	push	r28
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 1a2:	c0 91 28 01 	lds	r28, 0x0128	; 0x800128 <Ft1248_Sck>
 1a6:	6c 2f       	mov	r22, r28
 1a8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ft1248_port>
 1ac:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ft1248_port+0x1>
 1b0:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 1b4:	6c 2f       	mov	r22, r28
 1b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Ft1248_ddr>
 1ba:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Ft1248_ddr+0x1>
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <FtSsHigh>:
void FtSsHigh(void)
{
 1c6:	cf 93       	push	r28
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 1c8:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <Ft1248_Ss>
 1cc:	6c 2f       	mov	r22, r28
 1ce:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Ft1248_port>
 1d2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Ft1248_port+0x1>
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 1da:	6c 2f       	mov	r22, r28
 1dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Ft1248_ddr>
 1e0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Ft1248_ddr+0x1>
 1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <FtInit>:

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
    FtSetMisoAsInput();
 1ec:	0e 94 b1 00 	call	0x162	; 0x162 <FtSetMisoAsInput>
    FtEnablePullupOnMiso();
 1f0:	0e 94 ba 00 	call	0x174	; 0x174 <FtEnablePullupOnMiso>
    FtSetMiosioAsInputs();
 1f4:	0e 94 c3 00 	call	0x186	; 0x186 <FtSetMiosioAsInputs>
    FtEnablePullupsOnMiosio();
 1f8:	0e 94 c9 00 	call	0x192	; 0x192 <FtEnablePullupsOnMiosio>
    FtSckLow();
 1fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <FtSckLow>
    FtSsHigh();
 200:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <FtSsHigh>
 204:	08 95       	ret

00000206 <UsbInit>:
#include "Ft1248.h"
#include "DebugLed.h"

void UsbInit(void)
{
    FtInit();
 206:	0e 94 f6 00 	call	0x1ec	; 0x1ec <FtInit>
 20a:	08 95       	ret

0000020c <ClearPendingSpiInterrupt_Implementation>:
    return ReadSpiDataRegister();
}
static bool SpiResponseIsReady_Implementation(void)
{
    return BitIsClear(Spi_pin, Spi_Miso);
}
 20c:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ReadSpiStatusRegister>
 210:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ReadSpiStatusRegister+0x1>
 214:	09 95       	icall
 216:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 21a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 21e:	09 95       	icall
 220:	08 95       	ret

00000222 <ReadSpiStatusRegister_Implementation>:
 222:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <Spi_spsr>
 226:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <Spi_spsr+0x1>
 22a:	80 81       	ld	r24, Z
 22c:	08 95       	ret

0000022e <ReadSpiDataRegister_Implementation>:
 22e:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <Spi_spdr>
 232:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <Spi_spdr+0x1>
 236:	80 81       	ld	r24, Z
 238:	08 95       	ret

0000023a <SpiMasterOpenSpi_Implementation>:
 23a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Spi_Ss>
 23e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Spi_port>
 242:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Spi_port+0x1>
 246:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 24a:	08 95       	ret

0000024c <EnableSpi_Implementation>:
 24c:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Spi_Enable>
 250:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Spi_spcr>
 254:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <Spi_spcr+0x1>
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 25c:	08 95       	ret

0000025e <SpiMasterCloseSpi_Implementation>:
 25e:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Spi_Ss>
 262:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Spi_port>
 266:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Spi_port+0x1>
 26a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 26e:	08 95       	ret

00000270 <SpiTransferIsDone_Implementation>:
 270:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Spi_InterruptFlag>
 274:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Spi_spsr>
 278:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Spi_spsr+0x1>
 27c:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 280:	08 95       	ret

00000282 <SpiMasterInit>:
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
    SlaveSelectIdleHigh();
 288:	0e 94 2f 01 	call	0x25e	; 0x25e <SpiMasterCloseSpi_Implementation>
// Instead, it prevents the SPI master from ever receiving `DataIsReady`.
// It behaves like MISO is always high, but I have not measured it.
//
static void SetMisoAsPullupInput(void)
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 28c:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <Spi_Miso>
 290:	c0 91 25 01 	lds	r28, 0x0125	; 0x800125 <Spi_ddr>
 294:	d0 91 26 01 	lds	r29, 0x0126	; 0x800126 <Spi_ddr+0x1>
 298:	61 2f       	mov	r22, r17
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 2a0:	61 2f       	mov	r22, r17
 2a2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Spi_port>
 2a6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <Spi_port+0x1>
 2aa:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
bool (*SpiTransferIsDone)(void) = SpiTransferIsDone_Implementation;

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 2ae:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Spi_Ss>
 2b2:	ce 01       	movw	r24, r28
 2b4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 2b8:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Spi_Mosi>
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 2c2:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <Spi_Sck>
 2c6:	ce 01       	movw	r24, r28
 2c8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 2cc:	c0 91 21 01 	lds	r28, 0x0121	; 0x800121 <Spi_spcr>
 2d0:	d0 91 22 01 	lds	r29, 0x0122	; 0x800122 <Spi_spcr+0x1>
 2d4:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Spi_MasterSlaveSelect>
 2d8:	ce 01       	movw	r24, r28
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 2de:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <Spi_ClockRateBit0>
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 2e8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <Spi_ClockRateBit1>
 2ec:	ce 01       	movw	r24, r28
 2ee:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 2f2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Spi_DoubleClockRate>
 2f6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Spi_spsr>
 2fa:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Spi_spsr+0x1>
 2fe:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 302:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <EnableSpi>
 306:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <EnableSpi+0x1>
 30a:	09 95       	icall
    ClearPendingSpiInterrupt();
 30c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <ClearPendingSpiInterrupt>
 310:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <ClearPendingSpiInterrupt+0x1>
 314:	09 95       	icall
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	08 95       	ret

0000031e <SpiMasterWrite>:
void SpiMasterWrite(uint8_t byte_to_send)
{
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
    SpiMasterOpenSpi();
 322:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <SpiMasterOpenSpi>
 326:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <SpiMasterOpenSpi+0x1>
 32a:	09 95       	icall
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
 32c:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <Spi_spdr>
 330:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <Spi_spdr+0x1>
 334:	c0 83       	st	Z, r28
    while (!SpiTransferIsDone()) ;
 336:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 33a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 33e:	09 95       	icall
 340:	88 23       	and	r24, r24
 342:	c9 f3       	breq	.-14     	; 0x336 <SpiMasterWrite+0x18>
    SpiMasterCloseSpi();
 344:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <SpiMasterCloseSpi>
 348:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <SpiMasterCloseSpi+0x1>
 34c:	09 95       	icall
}
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <SetupDebugLed>:
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-08 */
    /* Get_several_bytes_from_slave_and_write_bytes_to_USB_host(); // PASS 2018-08-08 */
    /* Get_a_frame_from_slave_and_write_frame_to_USB_host(); // PASS 2018-08-09 */
    /* Slave_ignores_cmd_slave_ignore();  // PASS 2018-08-09 */
    Slave_indicates_unknown_cmd_on_led_4();
 352:	23 e0       	ldi	r18, 0x03	; 3
 354:	46 e2       	ldi	r20, 0x26	; 38
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	68 e2       	ldi	r22, 0x28	; 40
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	87 e2       	ldi	r24, 0x27	; 39
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 98 00 	call	0x130	; 0x130 <DebugLedInit>
 364:	08 95       	ret

00000366 <Slave_indicates_unknown_cmd_on_led_4>:
 366:	0e 94 41 01 	call	0x282	; 0x282 <SpiMasterInit>
 36a:	0e 94 03 01 	call	0x206	; 0x206 <UsbInit>
 36e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <test_unknown_cmd>
 372:	0e 94 8f 01 	call	0x31e	; 0x31e <SpiMasterWrite>
 376:	0e 94 86 00 	call	0x10c	; 0x10c <DebugLedTurnRed>
 37a:	08 95       	ret

0000037c <main>:
    //
    // Pick one test group to run.
    // Uncomment that test group.
    // Leave the other test groups commented out.
    //
    SetupDebugLed();
 37c:	0e 94 a9 01 	call	0x352	; 0x352 <SetupDebugLed>
    /* SpiMaster_detects_when_slave_is_ready_to_send_data();  // PASS 2018-08-03 */
    /* Get_dummy_byte_from_slave_and_write_dummy_byte_to_USB_host(); // PASS 2018-08-08 */
    /* Get_several_bytes_from_slave_and_write_bytes_to_USB_host(); // PASS 2018-08-08 */
    /* Get_a_frame_from_slave_and_write_frame_to_USB_host(); // PASS 2018-08-09 */
    /* Slave_ignores_cmd_slave_ignore();  // PASS 2018-08-09 */
    Slave_indicates_unknown_cmd_on_led_4();
 380:	0e 94 b3 01 	call	0x366	; 0x366 <Slave_indicates_unknown_cmd_on_led_4>
    SetupDebugLed();
    /* test_UsbRead(); // All test pass 2018-07-28 */
    /* test_UsbWrite();   // All tests pass 2018-07-28 */
    /* test_EchoByte(); // All tests pass 2018-07-30 */
    test_SpiMaster(); // All test pass 2018-08-03
}
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
