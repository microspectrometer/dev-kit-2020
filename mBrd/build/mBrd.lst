
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000a70  00000b04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800242  00800242  00000c46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003844  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001249  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000200f  00000000  00000000  00005b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  00007b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000189d  00000000  00000000  00008464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8d  00000000  00000000  00009d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000a88e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_14>
  3c:	0c 94 28 05 	jmp	0xa50	; 0xa50 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <main>
  9e:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <BitIsSet+0xe>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <BitIsSet+0xa>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	28 23       	and	r18, r24
  ea:	39 23       	and	r19, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	23 2b       	or	r18, r19
  f0:	09 f4       	brne	.+2      	; 0xf4 <BitIsSet+0x20>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c0 91 40 02 	lds	r28, 0x0240	; 0x800240 <DebugLeds_ddr>
  fe:	d0 91 41 02 	lds	r29, 0x0241	; 0x800241 <DebugLeds_ddr+0x1>
 102:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10c:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 116:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 120:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 124:	ce 01       	movw	r24, r28
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000012e <DebugLedsTurnRed>:
 12e:	68 2f       	mov	r22, r24
 130:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <DebugLeds_port>
 134:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 138:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000013c <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 140:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <DebugLeds_port>
 144:	d0 91 3f 02 	lds	r29, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 148:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 152:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 156:	ce 01       	movw	r24, r28
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 15c:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 166:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 16a:	ce 01       	movw	r24, r28
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 170:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000174 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 174:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiStatusRegister>
 178:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiStatusRegister+0x1>
 17c:	09 95       	icall
 17e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 182:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 186:	09 94       	ijmp

00000188 <ReadSpiStatusRegister_Implementation>:
 188:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <Spi_spsr>
 18c:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <Spi_spsr+0x1>
 190:	80 81       	ld	r24, Z
 192:	08 95       	ret

00000194 <ReadSpiDataRegister_Implementation>:
 194:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Spi_spdr>
 198:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Spi_spdr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <EnableSpi_Implementation>:
 1a0:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <Spi_Enable>
 1a4:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <Spi_spcr>
 1a8:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <Spi_spcr+0x1>
 1ac:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001b0 <SpiTransferIsDone_Implementation>:
 1b0:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <Spi_InterruptFlag>
 1b4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <Spi_spsr>
 1b8:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <Spi_spsr+0x1>
 1bc:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000001c0 <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 1c0:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <Spi_Miso>
 1c4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <Spi_ddr>
 1c8:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <Spi_ddr+0x1>
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 1d4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 1d8:	09 95       	icall
    ClearPendingSpiInterrupt();
 1da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ClearPendingSpiInterrupt>
 1de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ClearPendingSpiInterrupt+0x1>
 1e2:	09 94       	ijmp

000001e4 <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 1e4:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <UartSpi_AdcConv>
 1e8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <UartSpi_port>
 1ec:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <UartSpi_port+0x1>
 1f0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001f4 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 1fc:	00 91 25 02 	lds	r16, 0x0225	; 0x800225 <UartSpi_br>
 200:	10 91 26 02 	lds	r17, 0x0226	; 0x800226 <UartSpi_br+0x1>
 204:	f8 01       	movw	r30, r16
 206:	11 82       	std	Z+1, r1	; 0x01
 208:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 20a:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <UartSpi_ddr>
 20e:	d0 91 2e 02 	lds	r29, 0x022E	; 0x80022e <UartSpi_ddr+0x1>
 212:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <UartSpi_Sck>
 216:	ce 01       	movw	r24, r28
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 21c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 220:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <UartSpi_AdcConv>
 224:	ce 01       	movw	r24, r28
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 22a:	c0 91 27 02 	lds	r28, 0x0227	; 0x800227 <UartSpi_csrc>
 22e:	d0 91 28 02 	lds	r29, 0x0228	; 0x800228 <UartSpi_csrc+0x1>
 232:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <UartSpi_ModeSelect0>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 23c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <UartSpi_ModeSelect1>
 240:	ce 01       	movw	r24, r28
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 246:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <UartSpi_ClockPolarity>
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 250:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <UartSpi_ClockPhase>
 254:	ce 01       	movw	r24, r28
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 25a:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <UartSpi_DataOrder>
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 264:	c0 91 29 02 	lds	r28, 0x0229	; 0x800229 <UartSpi_csrb>
 268:	d0 91 2a 02 	lds	r29, 0x022A	; 0x80022a <UartSpi_csrb+0x1>
 26c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <UartSpi_RxEnable>
 270:	ce 01       	movw	r24, r28
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 276:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <UartSpi_TxEnable>
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 280:	f8 01       	movw	r30, r16
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 290:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmResetCounterAtTop>
 294:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmResetCounterAtTop+0x1>
 298:	09 95       	icall
    PwmTopIsOcr0a();
 29a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmTopIsOcr0a>
 29e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmTopIsOcr0a+0x1>
 2a2:	09 95       	icall
    PwmClkIsCpuClk();
 2a4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmClkIsCpuClk>
 2a8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmClkIsCpuClk+0x1>
 2ac:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 2ae:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <Lis_clktop>
 2b2:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <Lis_clktop+0x1>
 2b6:	88 ec       	ldi	r24, 0xC8	; 200
 2b8:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 2ba:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Lis_clkth>
 2be:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Lis_clkth+0x1>
 2c2:	20 81       	ld	r18, Z
 2c4:	26 95       	lsr	r18
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	08 95       	ret

000002cc <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 2cc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmEnableOutputSetUntilMatch>
 2d0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmEnableOutputSetUntilMatch+0x1>
 2d4:	09 94       	ijmp

000002d6 <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 2dc:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <Lis_PixSelect>
 2e0:	6c 2f       	mov	r22, r28
 2e2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <Lis_ddr2>
 2e6:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <Lis_ddr2+0x1>
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 2ee:	6c 2f       	mov	r22, r28
 2f0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Lis_port2>
 2f4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Lis_port2+0x1>
 2f8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 2fc:	c0 91 1a 02 	lds	r28, 0x021A	; 0x80021a <Lis_ddr1>
 300:	d0 91 1b 02 	lds	r29, 0x021B	; 0x80021b <Lis_ddr1+0x1>
 304:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <Lis_Clk>
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 30e:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <Lis_Rst>
 312:	61 2f       	mov	r22, r17
 314:	ce 01       	movw	r24, r28
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 31a:	61 2f       	mov	r22, r17
 31c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Lis_port1>
 320:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Lis_port1+0x1>
 324:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 328:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <Lis_Sync>
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 332:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <LisRunClkAt50kHz>
 336:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <LisRunClkAt50kHz+0x1>
 33a:	09 95       	icall
    LisClkOn();
 33c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisClkOn>
 340:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisClkOn+0x1>
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 34a:	09 94       	ijmp

0000034c <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 350:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <Pwm_tccr0a>
 354:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <Pwm_tccr0a+0x1>
 358:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <Pwm_Wgm00>
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 362:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Pwm_Wgm01>
 366:	ce 01       	movw	r24, r28
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 36c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000370 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 370:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Pwm_Wgm02>
 374:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Pwm_tccr0b>
 378:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Pwm_tccr0b+0x1>
 37c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000380 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 384:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <Pwm_tccr0b>
 388:	d0 91 09 02 	lds	r29, 0x0209	; 0x800209 <Pwm_tccr0b+0x1>
 38c:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <Pwm_Cs00>
 390:	ce 01       	movw	r24, r28
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 396:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Pwm_Cs01>
 39a:	ce 01       	movw	r24, r28
 39c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3a0:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <Pwm_Cs02>
 3a4:	ce 01       	movw	r24, r28
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3aa:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000003ae <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 3b2:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <Pwm_tccr0a>
 3b6:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <Pwm_tccr0a+0x1>
 3ba:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <Pwm_Com0b0>
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3c4:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <Pwm_Com0b1>
 3c8:	ce 01       	movw	r24, r28
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3ce:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003d2 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

000003d8 <LisFrameReadout>:
 3d8:	aa 9a       	sbi	0x15, 2	; 21
 3da:	aa 9b       	sbis	0x15, 2	; 21
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <LisFrameReadout+0x2>
 3de:	aa 9a       	sbi	0x15, 2	; 21
 3e0:	5e 9a       	sbi	0x0b, 6	; 11
 3e2:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <Lis_nticks_counter+0x1>
 3e6:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <Lis_nticks_counter>
 3ea:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <Lis_nticks_counter>
 3ee:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <Lis_nticks_counter+0x1>
 3f2:	9c 01       	movw	r18, r24
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <Lis_nticks_counter+0x1>
 3fc:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <Lis_nticks_counter>
 400:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 404:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 408:	82 17       	cp	r24, r18
 40a:	93 07       	cpc	r25, r19
 40c:	28 f4       	brcc	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	aa 9a       	sbi	0x15, 2	; 21
 410:	aa 9b       	sbis	0x15, 2	; 21
 412:	fe cf       	rjmp	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	aa 9a       	sbi	0x15, 2	; 21
 416:	e9 cf       	rjmp	.-46     	; 0x3ea <LisFrameReadout+0x12>
 418:	5e 98       	cbi	0x0b, 6	; 11
 41a:	8b e4       	ldi	r24, 0x4B	; 75
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 422:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 426:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <Lis_npixels_counter+0x1>
 42a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <Lis_npixels_counter>
 42e:	4f 9b       	sbis	0x09, 7	; 9
 430:	fe cf       	rjmp	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 432:	4f 99       	sbic	0x09, 7	; 9
 434:	fe cf       	rjmp	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <Lis_npixels_counter>
 43a:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <Lis_npixels_counter+0x1>
 43e:	9c 01       	movw	r18, r24
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	30 93 46 02 	sts	0x0246, r19	; 0x800246 <Lis_npixels_counter+0x1>
 448:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <Lis_npixels_counter>
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	93 40       	sbci	r25, 0x03	; 3
 450:	b8 f5       	brcc	.+110    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 452:	a9 9a       	sbi	0x15, 1	; 21
 454:	a9 9b       	sbis	0x15, 1	; 21
 456:	fe cf       	rjmp	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	a9 9a       	sbi	0x15, 1	; 21
 45a:	5a 9a       	sbi	0x0b, 2	; 11
 45c:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 460:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	09 95       	icall
 468:	5a 98       	cbi	0x0b, 2	; 11
 46a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 46e:	85 ff       	sbrs	r24, 5
 470:	fc cf       	rjmp	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 476:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 47a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 47e:	87 ff       	sbrs	r24, 7
 480:	fc cf       	rjmp	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 486:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 48a:	cf 01       	movw	r24, r30
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 492:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 49a:	80 83       	st	Z, r24
 49c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4a0:	87 ff       	sbrs	r24, 7
 4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 4a8:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 4ac:	cf 01       	movw	r24, r30
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 4b4:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 4b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4bc:	80 83       	st	Z, r24
 4be:	bb cf       	rjmp	.-138    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 4c0:	08 95       	ret

000004c2 <WriteCfgToLis>:
 4c2:	98 b1       	in	r25, 0x08	; 8
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	89 27       	eor	r24, r25
 4c8:	88 b9       	out	0x08, r24	; 8
 4ca:	98 b1       	in	r25, 0x08	; 8
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	89 27       	eor	r24, r25
 4d0:	88 b9       	out	0x08, r24	; 8
 4d2:	aa 9a       	sbi	0x15, 2	; 21
 4d4:	aa 9b       	sbis	0x15, 2	; 21
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <WriteCfgToLis+0x12>
 4d8:	aa 9a       	sbi	0x15, 2	; 21
 4da:	28 9a       	sbi	0x05, 0	; 5
 4dc:	5e 98       	cbi	0x0b, 6	; 11
 4de:	a9 9a       	sbi	0x15, 1	; 21
 4e0:	a9 9b       	sbis	0x15, 1	; 21
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <WriteCfgToLis+0x1e>
 4e4:	a9 9a       	sbi	0x15, 1	; 21
 4e6:	aa 9a       	sbi	0x15, 2	; 21
 4e8:	aa 9b       	sbis	0x15, 2	; 21
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <WriteCfgToLis+0x26>
 4ec:	aa 9a       	sbi	0x15, 2	; 21
 4ee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <lis_sum_mode>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	49 f4       	brne	.+18     	; 0x508 <WriteCfgToLis+0x46>
 4f6:	5e 9a       	sbi	0x0b, 6	; 11
 4f8:	a9 9a       	sbi	0x15, 1	; 21
 4fa:	a9 9b       	sbis	0x15, 1	; 21
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <WriteCfgToLis+0x38>
 4fe:	a9 9a       	sbi	0x15, 1	; 21
 500:	aa 9a       	sbi	0x15, 2	; 21
 502:	aa 9b       	sbis	0x15, 2	; 21
 504:	fe cf       	rjmp	.-4      	; 0x502 <WriteCfgToLis+0x40>
 506:	08 c0       	rjmp	.+16     	; 0x518 <WriteCfgToLis+0x56>
 508:	5e 98       	cbi	0x0b, 6	; 11
 50a:	a9 9a       	sbi	0x15, 1	; 21
 50c:	a9 9b       	sbis	0x15, 1	; 21
 50e:	fe cf       	rjmp	.-4      	; 0x50c <WriteCfgToLis+0x4a>
 510:	a9 9a       	sbi	0x15, 1	; 21
 512:	aa 9a       	sbi	0x15, 2	; 21
 514:	aa 9b       	sbis	0x15, 2	; 21
 516:	fe cf       	rjmp	.-4      	; 0x514 <WriteCfgToLis+0x52>
 518:	aa 9a       	sbi	0x15, 2	; 21
 51a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <lis_gain>
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	91 f4       	brne	.+36     	; 0x546 <WriteCfgToLis+0x84>
 522:	5e 9a       	sbi	0x0b, 6	; 11
 524:	a9 9a       	sbi	0x15, 1	; 21
 526:	a9 9b       	sbis	0x15, 1	; 21
 528:	fe cf       	rjmp	.-4      	; 0x526 <WriteCfgToLis+0x64>
 52a:	a9 9a       	sbi	0x15, 1	; 21
 52c:	aa 9a       	sbi	0x15, 2	; 21
 52e:	aa 9b       	sbis	0x15, 2	; 21
 530:	fe cf       	rjmp	.-4      	; 0x52e <WriteCfgToLis+0x6c>
 532:	aa 9a       	sbi	0x15, 2	; 21
 534:	5e 98       	cbi	0x0b, 6	; 11
 536:	a9 9a       	sbi	0x15, 1	; 21
 538:	a9 9b       	sbis	0x15, 1	; 21
 53a:	fe cf       	rjmp	.-4      	; 0x538 <WriteCfgToLis+0x76>
 53c:	a9 9a       	sbi	0x15, 1	; 21
 53e:	aa 9a       	sbi	0x15, 2	; 21
 540:	aa 9b       	sbis	0x15, 2	; 21
 542:	fe cf       	rjmp	.-4      	; 0x540 <WriteCfgToLis+0x7e>
 544:	39 c0       	rjmp	.+114    	; 0x5b8 <WriteCfgToLis+0xf6>
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	91 f4       	brne	.+36     	; 0x56e <WriteCfgToLis+0xac>
 54a:	5e 98       	cbi	0x0b, 6	; 11
 54c:	a9 9a       	sbi	0x15, 1	; 21
 54e:	a9 9b       	sbis	0x15, 1	; 21
 550:	fe cf       	rjmp	.-4      	; 0x54e <WriteCfgToLis+0x8c>
 552:	a9 9a       	sbi	0x15, 1	; 21
 554:	aa 9a       	sbi	0x15, 2	; 21
 556:	aa 9b       	sbis	0x15, 2	; 21
 558:	fe cf       	rjmp	.-4      	; 0x556 <WriteCfgToLis+0x94>
 55a:	aa 9a       	sbi	0x15, 2	; 21
 55c:	5e 9a       	sbi	0x0b, 6	; 11
 55e:	a9 9a       	sbi	0x15, 1	; 21
 560:	a9 9b       	sbis	0x15, 1	; 21
 562:	fe cf       	rjmp	.-4      	; 0x560 <WriteCfgToLis+0x9e>
 564:	a9 9a       	sbi	0x15, 1	; 21
 566:	aa 9a       	sbi	0x15, 2	; 21
 568:	aa 9b       	sbis	0x15, 2	; 21
 56a:	fe cf       	rjmp	.-4      	; 0x568 <WriteCfgToLis+0xa6>
 56c:	25 c0       	rjmp	.+74     	; 0x5b8 <WriteCfgToLis+0xf6>
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	91 f4       	brne	.+36     	; 0x596 <WriteCfgToLis+0xd4>
 572:	5e 98       	cbi	0x0b, 6	; 11
 574:	a9 9a       	sbi	0x15, 1	; 21
 576:	a9 9b       	sbis	0x15, 1	; 21
 578:	fe cf       	rjmp	.-4      	; 0x576 <WriteCfgToLis+0xb4>
 57a:	a9 9a       	sbi	0x15, 1	; 21
 57c:	aa 9a       	sbi	0x15, 2	; 21
 57e:	aa 9b       	sbis	0x15, 2	; 21
 580:	fe cf       	rjmp	.-4      	; 0x57e <WriteCfgToLis+0xbc>
 582:	aa 9a       	sbi	0x15, 2	; 21
 584:	5e 98       	cbi	0x0b, 6	; 11
 586:	a9 9a       	sbi	0x15, 1	; 21
 588:	a9 9b       	sbis	0x15, 1	; 21
 58a:	fe cf       	rjmp	.-4      	; 0x588 <WriteCfgToLis+0xc6>
 58c:	a9 9a       	sbi	0x15, 1	; 21
 58e:	aa 9a       	sbi	0x15, 2	; 21
 590:	aa 9b       	sbis	0x15, 2	; 21
 592:	fe cf       	rjmp	.-4      	; 0x590 <WriteCfgToLis+0xce>
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <WriteCfgToLis+0xf6>
 596:	5e 9a       	sbi	0x0b, 6	; 11
 598:	a9 9a       	sbi	0x15, 1	; 21
 59a:	a9 9b       	sbis	0x15, 1	; 21
 59c:	fe cf       	rjmp	.-4      	; 0x59a <WriteCfgToLis+0xd8>
 59e:	a9 9a       	sbi	0x15, 1	; 21
 5a0:	aa 9a       	sbi	0x15, 2	; 21
 5a2:	aa 9b       	sbis	0x15, 2	; 21
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <WriteCfgToLis+0xe0>
 5a6:	aa 9a       	sbi	0x15, 2	; 21
 5a8:	5e 9a       	sbi	0x0b, 6	; 11
 5aa:	a9 9a       	sbi	0x15, 1	; 21
 5ac:	a9 9b       	sbis	0x15, 1	; 21
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <WriteCfgToLis+0xea>
 5b0:	a9 9a       	sbi	0x15, 1	; 21
 5b2:	aa 9a       	sbi	0x15, 2	; 21
 5b4:	aa 9b       	sbis	0x15, 2	; 21
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <WriteCfgToLis+0xf2>
 5b8:	aa 9a       	sbi	0x15, 2	; 21
 5ba:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 5be:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <progbit_i>
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	e9 f4       	brne	.+58     	; 0x600 <WriteCfgToLis+0x13e>
 5c6:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 5ca:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 5ce:	e8 17       	cp	r30, r24
 5d0:	f8 f4       	brcc	.+62     	; 0x610 <WriteCfgToLis+0x14e>
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	e9 5e       	subi	r30, 0xE9	; 233
 5d6:	fe 4f       	sbci	r31, 0xFE	; 254
 5d8:	80 81       	ld	r24, Z
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <WriteCfgToLis+0x120>
 5de:	5e 9a       	sbi	0x0b, 6	; 11
 5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <WriteCfgToLis+0x122>
 5e2:	5e 98       	cbi	0x0b, 6	; 11
 5e4:	a9 9a       	sbi	0x15, 1	; 21
 5e6:	a9 9b       	sbis	0x15, 1	; 21
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <WriteCfgToLis+0x124>
 5ea:	a9 9a       	sbi	0x15, 1	; 21
 5ec:	aa 9a       	sbi	0x15, 2	; 21
 5ee:	aa 9b       	sbis	0x15, 2	; 21
 5f0:	fe cf       	rjmp	.-4      	; 0x5ee <WriteCfgToLis+0x12c>
 5f2:	aa 9a       	sbi	0x15, 2	; 21
 5f4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 5fe:	e3 cf       	rjmp	.-58     	; 0x5c6 <WriteCfgToLis+0x104>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	01 f5       	brne	.+64     	; 0x644 <WriteCfgToLis+0x182>
 604:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 608:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 60c:	e8 17       	cp	r30, r24
 60e:	18 f0       	brcs	.+6      	; 0x616 <WriteCfgToLis+0x154>
 610:	5e 98       	cbi	0x0b, 6	; 11
 612:	28 98       	cbi	0x05, 0	; 5
 614:	08 95       	ret
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	e0 5d       	subi	r30, 0xD0	; 208
 61a:	fe 4f       	sbci	r31, 0xFE	; 254
 61c:	80 81       	ld	r24, Z
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	11 f4       	brne	.+4      	; 0x626 <WriteCfgToLis+0x164>
 622:	5e 9a       	sbi	0x0b, 6	; 11
 624:	01 c0       	rjmp	.+2      	; 0x628 <WriteCfgToLis+0x166>
 626:	5e 98       	cbi	0x0b, 6	; 11
 628:	a9 9a       	sbi	0x15, 1	; 21
 62a:	a9 9b       	sbis	0x15, 1	; 21
 62c:	fe cf       	rjmp	.-4      	; 0x62a <WriteCfgToLis+0x168>
 62e:	a9 9a       	sbi	0x15, 1	; 21
 630:	aa 9a       	sbi	0x15, 2	; 21
 632:	aa 9b       	sbis	0x15, 2	; 21
 634:	fe cf       	rjmp	.-4      	; 0x632 <WriteCfgToLis+0x170>
 636:	aa 9a       	sbi	0x15, 2	; 21
 638:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 63c:	8f 5f       	subi	r24, 0xFF	; 255
 63e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 642:	e0 cf       	rjmp	.-64     	; 0x604 <WriteCfgToLis+0x142>
 644:	83 30       	cpi	r24, 0x03	; 3
 646:	e9 f4       	brne	.+58     	; 0x682 <WriteCfgToLis+0x1c0>
 648:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 64c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 650:	e8 17       	cp	r30, r24
 652:	f0 f6       	brcc	.-68     	; 0x610 <WriteCfgToLis+0x14e>
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	e7 5b       	subi	r30, 0xB7	; 183
 658:	fe 4f       	sbci	r31, 0xFE	; 254
 65a:	80 81       	ld	r24, Z
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	11 f4       	brne	.+4      	; 0x664 <WriteCfgToLis+0x1a2>
 660:	5e 9a       	sbi	0x0b, 6	; 11
 662:	01 c0       	rjmp	.+2      	; 0x666 <WriteCfgToLis+0x1a4>
 664:	5e 98       	cbi	0x0b, 6	; 11
 666:	a9 9a       	sbi	0x15, 1	; 21
 668:	a9 9b       	sbis	0x15, 1	; 21
 66a:	fe cf       	rjmp	.-4      	; 0x668 <WriteCfgToLis+0x1a6>
 66c:	a9 9a       	sbi	0x15, 1	; 21
 66e:	aa 9a       	sbi	0x15, 2	; 21
 670:	aa 9b       	sbis	0x15, 2	; 21
 672:	fe cf       	rjmp	.-4      	; 0x670 <WriteCfgToLis+0x1ae>
 674:	aa 9a       	sbi	0x15, 2	; 21
 676:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 680:	e3 cf       	rjmp	.-58     	; 0x648 <WriteCfgToLis+0x186>
 682:	84 30       	cpi	r24, 0x04	; 4
 684:	f1 f4       	brne	.+60     	; 0x6c2 <WriteCfgToLis+0x200>
 686:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 68a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 68e:	e8 17       	cp	r30, r24
 690:	08 f0       	brcs	.+2      	; 0x694 <WriteCfgToLis+0x1d2>
 692:	be cf       	rjmp	.-132    	; 0x610 <WriteCfgToLis+0x14e>
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	ee 59       	subi	r30, 0x9E	; 158
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	80 81       	ld	r24, Z
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	11 f4       	brne	.+4      	; 0x6a4 <WriteCfgToLis+0x1e2>
 6a0:	5e 9a       	sbi	0x0b, 6	; 11
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <WriteCfgToLis+0x1e4>
 6a4:	5e 98       	cbi	0x0b, 6	; 11
 6a6:	a9 9a       	sbi	0x15, 1	; 21
 6a8:	a9 9b       	sbis	0x15, 1	; 21
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <WriteCfgToLis+0x1e6>
 6ac:	a9 9a       	sbi	0x15, 1	; 21
 6ae:	aa 9a       	sbi	0x15, 2	; 21
 6b0:	aa 9b       	sbis	0x15, 2	; 21
 6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <WriteCfgToLis+0x1ee>
 6b4:	aa 9a       	sbi	0x15, 2	; 21
 6b6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 6c0:	e2 cf       	rjmp	.-60     	; 0x686 <WriteCfgToLis+0x1c4>
 6c2:	85 30       	cpi	r24, 0x05	; 5
 6c4:	f1 f4       	brne	.+60     	; 0x702 <WriteCfgToLis+0x240>
 6c6:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 6ca:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 6ce:	e8 17       	cp	r30, r24
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <WriteCfgToLis+0x212>
 6d2:	9e cf       	rjmp	.-196    	; 0x610 <WriteCfgToLis+0x14e>
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	e5 58       	subi	r30, 0x85	; 133
 6d8:	fe 4f       	sbci	r31, 0xFE	; 254
 6da:	80 81       	ld	r24, Z
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	11 f4       	brne	.+4      	; 0x6e4 <WriteCfgToLis+0x222>
 6e0:	5e 9a       	sbi	0x0b, 6	; 11
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <WriteCfgToLis+0x224>
 6e4:	5e 98       	cbi	0x0b, 6	; 11
 6e6:	a9 9a       	sbi	0x15, 1	; 21
 6e8:	a9 9b       	sbis	0x15, 1	; 21
 6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <WriteCfgToLis+0x226>
 6ec:	a9 9a       	sbi	0x15, 1	; 21
 6ee:	aa 9a       	sbi	0x15, 2	; 21
 6f0:	aa 9b       	sbis	0x15, 2	; 21
 6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <WriteCfgToLis+0x22e>
 6f4:	aa 9a       	sbi	0x15, 2	; 21
 6f6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 6fa:	8f 5f       	subi	r24, 0xFF	; 255
 6fc:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 700:	e2 cf       	rjmp	.-60     	; 0x6c6 <WriteCfgToLis+0x204>
 702:	86 30       	cpi	r24, 0x06	; 6
 704:	f1 f4       	brne	.+60     	; 0x742 <WriteCfgToLis+0x280>
 706:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 70a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 70e:	e8 17       	cp	r30, r24
 710:	08 f0       	brcs	.+2      	; 0x714 <WriteCfgToLis+0x252>
 712:	7e cf       	rjmp	.-260    	; 0x610 <WriteCfgToLis+0x14e>
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	ea 53       	subi	r30, 0x3A	; 58
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	80 81       	ld	r24, Z
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	11 f4       	brne	.+4      	; 0x724 <WriteCfgToLis+0x262>
 720:	5e 9a       	sbi	0x0b, 6	; 11
 722:	01 c0       	rjmp	.+2      	; 0x726 <WriteCfgToLis+0x264>
 724:	5e 98       	cbi	0x0b, 6	; 11
 726:	a9 9a       	sbi	0x15, 1	; 21
 728:	a9 9b       	sbis	0x15, 1	; 21
 72a:	fe cf       	rjmp	.-4      	; 0x728 <WriteCfgToLis+0x266>
 72c:	a9 9a       	sbi	0x15, 1	; 21
 72e:	aa 9a       	sbi	0x15, 2	; 21
 730:	aa 9b       	sbis	0x15, 2	; 21
 732:	fe cf       	rjmp	.-4      	; 0x730 <WriteCfgToLis+0x26e>
 734:	aa 9a       	sbi	0x15, 2	; 21
 736:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 73a:	8f 5f       	subi	r24, 0xFF	; 255
 73c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 740:	e2 cf       	rjmp	.-60     	; 0x706 <WriteCfgToLis+0x244>
 742:	87 30       	cpi	r24, 0x07	; 7
 744:	f1 f4       	brne	.+60     	; 0x782 <WriteCfgToLis+0x2c0>
 746:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 74a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 74e:	e8 17       	cp	r30, r24
 750:	08 f0       	brcs	.+2      	; 0x754 <WriteCfgToLis+0x292>
 752:	5e cf       	rjmp	.-324    	; 0x610 <WriteCfgToLis+0x14e>
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	e3 55       	subi	r30, 0x53	; 83
 758:	fe 4f       	sbci	r31, 0xFE	; 254
 75a:	80 81       	ld	r24, Z
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	11 f4       	brne	.+4      	; 0x764 <WriteCfgToLis+0x2a2>
 760:	5e 9a       	sbi	0x0b, 6	; 11
 762:	01 c0       	rjmp	.+2      	; 0x766 <WriteCfgToLis+0x2a4>
 764:	5e 98       	cbi	0x0b, 6	; 11
 766:	a9 9a       	sbi	0x15, 1	; 21
 768:	a9 9b       	sbis	0x15, 1	; 21
 76a:	fe cf       	rjmp	.-4      	; 0x768 <WriteCfgToLis+0x2a6>
 76c:	a9 9a       	sbi	0x15, 1	; 21
 76e:	aa 9a       	sbi	0x15, 2	; 21
 770:	aa 9b       	sbis	0x15, 2	; 21
 772:	fe cf       	rjmp	.-4      	; 0x770 <WriteCfgToLis+0x2ae>
 774:	aa 9a       	sbi	0x15, 2	; 21
 776:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 780:	e2 cf       	rjmp	.-60     	; 0x746 <WriteCfgToLis+0x284>
 782:	88 30       	cpi	r24, 0x08	; 8
 784:	91 f5       	brne	.+100    	; 0x7ea <WriteCfgToLis+0x328>
 786:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 78a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 78e:	e8 17       	cp	r30, r24
 790:	08 f0       	brcs	.+2      	; 0x794 <WriteCfgToLis+0x2d2>
 792:	3e cf       	rjmp	.-388    	; 0x610 <WriteCfgToLis+0x14e>
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ec 56       	subi	r30, 0x6C	; 108
 798:	fe 4f       	sbci	r31, 0xFE	; 254
 79a:	80 81       	ld	r24, Z
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	11 f4       	brne	.+4      	; 0x7a4 <WriteCfgToLis+0x2e2>
 7a0:	5e 9a       	sbi	0x0b, 6	; 11
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <WriteCfgToLis+0x2e4>
 7a4:	5e 98       	cbi	0x0b, 6	; 11
 7a6:	a9 9a       	sbi	0x15, 1	; 21
 7a8:	a9 9b       	sbis	0x15, 1	; 21
 7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <WriteCfgToLis+0x2e6>
 7ac:	a9 9a       	sbi	0x15, 1	; 21
 7ae:	aa 9a       	sbi	0x15, 2	; 21
 7b0:	aa 9b       	sbis	0x15, 2	; 21
 7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <WriteCfgToLis+0x2ee>
 7b4:	aa 9a       	sbi	0x15, 2	; 21
 7b6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 7c0:	e2 cf       	rjmp	.-60     	; 0x786 <WriteCfgToLis+0x2c4>
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	e1 52       	subi	r30, 0x21	; 33
 7c6:	fe 4f       	sbci	r31, 0xFE	; 254
 7c8:	80 81       	ld	r24, Z
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	a9 f4       	brne	.+42     	; 0x7f8 <WriteCfgToLis+0x336>
 7ce:	5e 9a       	sbi	0x0b, 6	; 11
 7d0:	a9 9a       	sbi	0x15, 1	; 21
 7d2:	a9 9b       	sbis	0x15, 1	; 21
 7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <WriteCfgToLis+0x310>
 7d6:	a9 9a       	sbi	0x15, 1	; 21
 7d8:	aa 9a       	sbi	0x15, 2	; 21
 7da:	aa 9b       	sbis	0x15, 2	; 21
 7dc:	fe cf       	rjmp	.-4      	; 0x7da <WriteCfgToLis+0x318>
 7de:	aa 9a       	sbi	0x15, 2	; 21
 7e0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <progbit_i>
 7e4:	8f 5f       	subi	r24, 0xFF	; 255
 7e6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <progbit_i>
 7ea:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <progbit_i>
 7ee:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <nprogbits_rowselect>
 7f2:	e8 17       	cp	r30, r24
 7f4:	30 f3       	brcs	.-52     	; 0x7c2 <WriteCfgToLis+0x300>
 7f6:	0c cf       	rjmp	.-488    	; 0x610 <WriteCfgToLis+0x14e>
 7f8:	5e 98       	cbi	0x0b, 6	; 11
 7fa:	ea cf       	rjmp	.-44     	; 0x7d0 <WriteCfgToLis+0x30e>

000007fc <SendLisFrame>:
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	40 9a       	sbi	0x08, 0	; 8
 802:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LisFrameReadout>
 806:	40 98       	cbi	0x08, 0	; 8
 808:	41 9a       	sbi	0x08, 1	; 8
 80a:	cb e4       	ldi	r28, 0x4B	; 75
 80c:	d2 e0       	ldi	r29, 0x02	; 2
 80e:	89 91       	ld	r24, Y+
 810:	8e bd       	out	0x2e, r24	; 46
 812:	2c 98       	cbi	0x05, 4	; 5
 814:	8c b5       	in	r24, 0x2c	; 44
 816:	8f 7b       	andi	r24, 0xBF	; 191
 818:	8c bd       	out	0x2c, r24	; 44
 81a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 81e:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 822:	8a e0       	ldi	r24, 0x0A	; 10
 824:	09 95       	icall
 826:	8c b5       	in	r24, 0x2c	; 44
 828:	80 64       	ori	r24, 0x40	; 64
 82a:	8c bd       	out	0x2c, r24	; 44
 82c:	0d b4       	in	r0, 0x2d	; 45
 82e:	07 fe       	sbrs	r0, 7
 830:	fd cf       	rjmp	.-6      	; 0x82c <SendLisFrame+0x30>
 832:	8e b5       	in	r24, 0x2e	; 46
 834:	88 e0       	ldi	r24, 0x08	; 8
 836:	cb 36       	cpi	r28, 0x6B	; 107
 838:	d8 07       	cpc	r29, r24
 83a:	49 f7       	brne	.-46     	; 0x80e <SendLisFrame+0x12>
 83c:	41 98       	cbi	0x08, 1	; 8
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <SendDataMasterAskedFor>:
 844:	ef 92       	push	r14
 846:	ff 92       	push	r15
 848:	0f 93       	push	r16
 84a:	1f 93       	push	r17
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	00 d0       	rcall	.+0      	; 0x852 <SendDataMasterAskedFor+0xe>
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	98 b1       	in	r25, 0x08	; 8
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	89 27       	eor	r24, r25
 85c:	88 b9       	out	0x08, r24	; 8
 85e:	0d b4       	in	r0, 0x2d	; 45
 860:	07 fe       	sbrs	r0, 7
 862:	fd cf       	rjmp	.-6      	; 0x85e <SendDataMasterAskedFor+0x1a>
 864:	8e b5       	in	r24, 0x2e	; 46
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	51 f4       	brne	.+20     	; 0x87e <SendDataMasterAskedFor+0x3a>
 86a:	0f 90       	pop	r0
 86c:	0f 90       	pop	r0
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	1f 91       	pop	r17
 874:	0f 91       	pop	r16
 876:	ff 90       	pop	r15
 878:	ef 90       	pop	r14
 87a:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <SendLisFrame>
 87e:	82 30       	cpi	r24, 0x02	; 2
 880:	b1 f5       	brne	.+108    	; 0x8ee <SendDataMasterAskedFor+0xaa>
 882:	0d b4       	in	r0, 0x2d	; 45
 884:	07 fe       	sbrs	r0, 7
 886:	fd cf       	rjmp	.-6      	; 0x882 <SendDataMasterAskedFor+0x3e>
 888:	3e b5       	in	r19, 0x2e	; 46
 88a:	0d b4       	in	r0, 0x2d	; 45
 88c:	07 fe       	sbrs	r0, 7
 88e:	fd cf       	rjmp	.-6      	; 0x88a <SendDataMasterAskedFor+0x46>
 890:	2e b5       	in	r18, 0x2e	; 46
 892:	82 2f       	mov	r24, r18
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	93 2b       	or	r25, r19
 898:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Lis_nticks_exposure+0x1>
 89c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Lis_nticks_exposure>
 8a0:	98 b1       	in	r25, 0x08	; 8
 8a2:	84 e0       	ldi	r24, 0x04	; 4
 8a4:	89 27       	eor	r24, r25
 8a6:	88 b9       	out	0x08, r24	; 8
 8a8:	39 83       	std	Y+1, r19	; 0x01
 8aa:	2a 83       	std	Y+2, r18	; 0x02
 8ac:	8e 01       	movw	r16, r28
 8ae:	0f 5f       	subi	r16, 0xFF	; 255
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	7e 01       	movw	r14, r28
 8b4:	83 e0       	ldi	r24, 0x03	; 3
 8b6:	e8 0e       	add	r14, r24
 8b8:	f1 1c       	adc	r15, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	81 91       	ld	r24, Z+
 8be:	8f 01       	movw	r16, r30
 8c0:	8e bd       	out	0x2e, r24	; 46
 8c2:	2c 98       	cbi	0x05, 4	; 5
 8c4:	8c b5       	in	r24, 0x2c	; 44
 8c6:	8f 7b       	andi	r24, 0xBF	; 191
 8c8:	8c bd       	out	0x2c, r24	; 44
 8ca:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 8ce:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 8d2:	8a e0       	ldi	r24, 0x0A	; 10
 8d4:	09 95       	icall
 8d6:	8c b5       	in	r24, 0x2c	; 44
 8d8:	80 64       	ori	r24, 0x40	; 64
 8da:	8c bd       	out	0x2c, r24	; 44
 8dc:	0d b4       	in	r0, 0x2d	; 45
 8de:	07 fe       	sbrs	r0, 7
 8e0:	fd cf       	rjmp	.-6      	; 0x8dc <SendDataMasterAskedFor+0x98>
 8e2:	8e b5       	in	r24, 0x2e	; 46
 8e4:	0e 15       	cp	r16, r14
 8e6:	1f 05       	cpc	r17, r15
 8e8:	09 f4       	brne	.+2      	; 0x8ec <SendDataMasterAskedFor+0xa8>
 8ea:	5f c0       	rjmp	.+190    	; 0x9aa <__stack+0xab>
 8ec:	e6 cf       	rjmp	.-52     	; 0x8ba <SendDataMasterAskedFor+0x76>
 8ee:	86 30       	cpi	r24, 0x06	; 6
 8f0:	21 f4       	brne	.+8      	; 0x8fa <SendDataMasterAskedFor+0xb6>
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <lis_sum_mode>
 8f8:	58 c0       	rjmp	.+176    	; 0x9aa <__stack+0xab>
 8fa:	85 30       	cpi	r24, 0x05	; 5
 8fc:	19 f4       	brne	.+6      	; 0x904 <__stack+0x5>
 8fe:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <lis_sum_mode>
 902:	53 c0       	rjmp	.+166    	; 0x9aa <__stack+0xab>
 904:	88 30       	cpi	r24, 0x08	; 8
 906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xd>
 908:	85 e0       	ldi	r24, 0x05	; 5
 90a:	03 c0       	rjmp	.+6      	; 0x912 <__stack+0x13>
 90c:	89 30       	cpi	r24, 0x09	; 9
 90e:	21 f4       	brne	.+8      	; 0x918 <__stack+0x19>
 910:	84 e0       	ldi	r24, 0x04	; 4
 912:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <lis_gain>
 916:	49 c0       	rjmp	.+146    	; 0x9aa <__stack+0xab>
 918:	8a 30       	cpi	r24, 0x0A	; 10
 91a:	11 f4       	brne	.+4      	; 0x920 <__stack+0x21>
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	f9 cf       	rjmp	.-14     	; 0x912 <__stack+0x13>
 920:	8b 30       	cpi	r24, 0x0B	; 11
 922:	11 f4       	brne	.+4      	; 0x928 <__stack+0x29>
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	f5 cf       	rjmp	.-22     	; 0x912 <__stack+0x13>
 928:	8c 30       	cpi	r24, 0x0C	; 12
 92a:	19 f4       	brne	.+6      	; 0x932 <__stack+0x33>
 92c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__data_end>
 930:	3c c0       	rjmp	.+120    	; 0x9aa <__stack+0xab>
 932:	8d 30       	cpi	r24, 0x0D	; 13
 934:	11 f4       	brne	.+4      	; 0x93a <__stack+0x3b>
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	1b c0       	rjmp	.+54     	; 0x970 <__stack+0x71>
 93a:	8e 30       	cpi	r24, 0x0E	; 14
 93c:	11 f4       	brne	.+4      	; 0x942 <__stack+0x43>
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	17 c0       	rjmp	.+46     	; 0x970 <__stack+0x71>
 942:	8f 30       	cpi	r24, 0x0F	; 15
 944:	11 f4       	brne	.+4      	; 0x94a <__stack+0x4b>
 946:	83 e0       	ldi	r24, 0x03	; 3
 948:	13 c0       	rjmp	.+38     	; 0x970 <__stack+0x71>
 94a:	80 31       	cpi	r24, 0x10	; 16
 94c:	11 f4       	brne	.+4      	; 0x952 <__stack+0x53>
 94e:	84 e0       	ldi	r24, 0x04	; 4
 950:	0f c0       	rjmp	.+30     	; 0x970 <__stack+0x71>
 952:	81 31       	cpi	r24, 0x11	; 17
 954:	11 f4       	brne	.+4      	; 0x95a <__stack+0x5b>
 956:	85 e0       	ldi	r24, 0x05	; 5
 958:	0b c0       	rjmp	.+22     	; 0x970 <__stack+0x71>
 95a:	82 31       	cpi	r24, 0x12	; 18
 95c:	11 f4       	brne	.+4      	; 0x962 <__stack+0x63>
 95e:	86 e0       	ldi	r24, 0x06	; 6
 960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x71>
 962:	83 31       	cpi	r24, 0x13	; 19
 964:	11 f4       	brne	.+4      	; 0x96a <__stack+0x6b>
 966:	87 e0       	ldi	r24, 0x07	; 7
 968:	03 c0       	rjmp	.+6      	; 0x970 <__stack+0x71>
 96a:	84 31       	cpi	r24, 0x14	; 20
 96c:	21 f4       	brne	.+8      	; 0x976 <__stack+0x77>
 96e:	88 e0       	ldi	r24, 0x08	; 8
 970:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 974:	1a c0       	rjmp	.+52     	; 0x9aa <__stack+0xab>
 976:	87 30       	cpi	r24, 0x07	; 7
 978:	51 f4       	brne	.+20     	; 0x98e <__stack+0x8f>
 97a:	0f 90       	pop	r0
 97c:	0f 90       	pop	r0
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	1f 91       	pop	r17
 984:	0f 91       	pop	r16
 986:	ff 90       	pop	r15
 988:	ef 90       	pop	r14
 98a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <WriteCfgToLis>
 98e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <slave_ignore>
 992:	89 17       	cp	r24, r25
 994:	51 f0       	breq	.+20     	; 0x9aa <__stack+0xab>
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	1f 91       	pop	r17
 9a0:	0f 91       	pop	r16
 9a2:	ff 90       	pop	r15
 9a4:	ef 90       	pop	r14
 9a6:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <IndicateUnknownCommand>
 9aa:	0f 90       	pop	r0
 9ac:	0f 90       	pop	r0
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	ff 90       	pop	r15
 9b8:	ef 90       	pop	r14
 9ba:	08 95       	ret

000009bc <RespondToRequestsForData>:
 9bc:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 9c0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 9c4:	09 95       	icall
 9c6:	81 11       	cpse	r24, r1
 9c8:	0c 94 22 04 	jmp	0x844	; 0x844 <SendDataMasterAskedFor>
 9cc:	08 95       	ret

000009ce <All_debug_leds_turn_on_and_turn_green>:
 9ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <DebugLedsTurnAllOn>
 9d2:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

000009d6 <main>:
 9d6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <All_debug_leds_turn_on_and_turn_green>
 9da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SpiSlaveInit>
 9de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <UartSpiInit>
 9e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LisInit>
 9e6:	0e 94 de 04 	call	0x9bc	; 0x9bc <RespondToRequestsForData>
 9ea:	fd cf       	rjmp	.-6      	; 0x9e6 <main+0x10>

000009ec <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	11 24       	eor	r1, r1
 9f6:	2f 93       	push	r18
 9f8:	3f 93       	push	r19
 9fa:	4f 93       	push	r20
 9fc:	5f 93       	push	r21
 9fe:	6f 93       	push	r22
 a00:	7f 93       	push	r23
 a02:	8f 93       	push	r24
 a04:	9f 93       	push	r25
 a06:	af 93       	push	r26
 a08:	bf 93       	push	r27
 a0a:	ef 93       	push	r30
 a0c:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 a0e:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <DoTaskForThisTest>
 a12:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <DoTaskForThisTest+0x1>
 a16:	09 95       	icall
}
 a18:	ff 91       	pop	r31
 a1a:	ef 91       	pop	r30
 a1c:	bf 91       	pop	r27
 a1e:	af 91       	pop	r26
 a20:	9f 91       	pop	r25
 a22:	8f 91       	pop	r24
 a24:	7f 91       	pop	r23
 a26:	6f 91       	pop	r22
 a28:	5f 91       	pop	r21
 a2a:	4f 91       	pop	r20
 a2c:	3f 91       	pop	r19
 a2e:	2f 91       	pop	r18
 a30:	0f 90       	pop	r0
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	0f 90       	pop	r0
 a36:	1f 90       	pop	r1
 a38:	18 95       	reti

00000a3a <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 a3a:	1f 92       	push	r1
 a3c:	0f 92       	push	r0
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	0f 92       	push	r0
 a42:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 a44:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 a46:	0f 90       	pop	r0
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	0f 90       	pop	r0
 a4c:	1f 90       	pop	r1
 a4e:	18 95       	reti

00000a50 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 a50:	1f 92       	push	r1
 a52:	0f 92       	push	r0
 a54:	0f b6       	in	r0, 0x3f	; 63
 a56:	0f 92       	push	r0
 a58:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 a5a:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 a5c:	0f 90       	pop	r0
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	0f 90       	pop	r0
 a62:	1f 90       	pop	r1
 a64:	18 95       	reti

00000a66 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 a66:	8a 95       	dec	r24
 a68:	f1 f7       	brne	.-4      	; 0xa66 <Delay3CpuCyclesPerTick_Implementation>
 a6a:	08 95       	ret

00000a6c <_exit>:
 a6c:	f8 94       	cli

00000a6e <__stop_program>:
 a6e:	ff cf       	rjmp	.-2      	; 0xa6e <__stop_program>
