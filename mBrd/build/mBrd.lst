
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000694  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000626  00800160  00800160  00000788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003505  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000127f  00000000  00000000  000040cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e8  00000000  00000000  0000534c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  00006a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000156c  00000000  00000000  000072d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab7  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  000092f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_14>
  3c:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <main>
  9e:	0c 94 48 03 	jmp	0x690	; 0x690 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <BitIsSet+0xe>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <BitIsSet+0xa>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	28 23       	and	r18, r24
  ea:	39 23       	and	r19, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	23 2b       	or	r18, r19
  f0:	09 f4       	brne	.+2      	; 0xf4 <BitIsSet+0x20>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c0 91 5d 01 	lds	r28, 0x015D	; 0x80015d <DebugLeds_ddr>
  fe:	d0 91 5e 01 	lds	r29, 0x015E	; 0x80015e <DebugLeds_ddr+0x1>
 102:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <debug_led1>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10c:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <debug_led2>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 116:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <debug_led3>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 120:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <debug_led4>
 124:	ce 01       	movw	r24, r28
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000012e <DebugLedsTurnRed>:
 12e:	68 2f       	mov	r22, r24
 130:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <DebugLeds_port>
 134:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <DebugLeds_port+0x1>
 138:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000013c <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 140:	c0 91 5b 01 	lds	r28, 0x015B	; 0x80015b <DebugLeds_port>
 144:	d0 91 5c 01 	lds	r29, 0x015C	; 0x80015c <DebugLeds_port+0x1>
 148:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <debug_led1>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 152:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <debug_led2>
 156:	ce 01       	movw	r24, r28
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 15c:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <debug_led3>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 166:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <debug_led4>
 16a:	ce 01       	movw	r24, r28
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 170:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000174 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 174:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiStatusRegister>
 178:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiStatusRegister+0x1>
 17c:	09 95       	icall
 17e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 182:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 186:	09 94       	ijmp

00000188 <ReadSpiStatusRegister_Implementation>:
 188:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <Spi_spsr>
 18c:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <Spi_spsr+0x1>
 190:	80 81       	ld	r24, Z
 192:	08 95       	ret

00000194 <ReadSpiDataRegister_Implementation>:
 194:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Spi_spdr>
 198:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <Spi_spdr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <EnableSpi_Implementation>:
 1a0:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <Spi_Enable>
 1a4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Spi_spcr>
 1a8:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <Spi_spcr+0x1>
 1ac:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001b0 <SpiTransferIsDone_Implementation>:
 1b0:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <Spi_InterruptFlag>
 1b4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Spi_spsr>
 1b8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <Spi_spsr+0x1>
 1bc:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000001c0 <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 1c0:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <Spi_Miso>
 1c4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <Spi_ddr>
 1c8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <Spi_ddr+0x1>
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 1d4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 1d8:	09 95       	icall
    ClearPendingSpiInterrupt();
 1da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ClearPendingSpiInterrupt>
 1de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ClearPendingSpiInterrupt+0x1>
 1e2:	09 94       	ijmp

000001e4 <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 1e4:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <UartSpi_AdcConv>
 1e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <UartSpi_port>
 1ec:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <UartSpi_port+0x1>
 1f0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001f4 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 1fc:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <UartSpi_br>
 200:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <UartSpi_br+0x1>
 204:	f8 01       	movw	r30, r16
 206:	11 82       	std	Z+1, r1	; 0x01
 208:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 20a:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <UartSpi_ddr>
 20e:	d0 91 4b 01 	lds	r29, 0x014B	; 0x80014b <UartSpi_ddr+0x1>
 212:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <UartSpi_Sck>
 216:	ce 01       	movw	r24, r28
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 21c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 220:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <UartSpi_AdcConv>
 224:	ce 01       	movw	r24, r28
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 22a:	c0 91 44 01 	lds	r28, 0x0144	; 0x800144 <UartSpi_csrc>
 22e:	d0 91 45 01 	lds	r29, 0x0145	; 0x800145 <UartSpi_csrc+0x1>
 232:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <UartSpi_ModeSelect0>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 23c:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <UartSpi_ModeSelect1>
 240:	ce 01       	movw	r24, r28
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 246:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <UartSpi_ClockPolarity>
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 250:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <UartSpi_ClockPhase>
 254:	ce 01       	movw	r24, r28
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 25a:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <UartSpi_DataOrder>
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 264:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <UartSpi_csrb>
 268:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <UartSpi_csrb+0x1>
 26c:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <UartSpi_RxEnable>
 270:	ce 01       	movw	r24, r28
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 276:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <UartSpi_TxEnable>
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 280:	f8 01       	movw	r30, r16
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 290:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmResetCounterAtTop>
 294:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmResetCounterAtTop+0x1>
 298:	09 95       	icall
    PwmTopIsOcr0a();
 29a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmTopIsOcr0a>
 29e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmTopIsOcr0a+0x1>
 2a2:	09 95       	icall
    PwmClkIsCpuClk();
 2a4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmClkIsCpuClk>
 2a8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmClkIsCpuClk+0x1>
 2ac:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 2ae:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <Lis_clktop>
 2b2:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <Lis_clktop+0x1>
 2b6:	88 ec       	ldi	r24, 0xC8	; 200
 2b8:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 2ba:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Lis_clkth>
 2be:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Lis_clkth+0x1>
 2c2:	20 81       	ld	r18, Z
 2c4:	26 95       	lsr	r18
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	08 95       	ret

000002cc <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 2cc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmEnableOutputSetUntilMatch>
 2d0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmEnableOutputSetUntilMatch+0x1>
 2d4:	09 94       	ijmp

000002d6 <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 2dc:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <Lis_PixSelect>
 2e0:	6c 2f       	mov	r22, r28
 2e2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Lis_ddr2>
 2e6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Lis_ddr2+0x1>
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 2ee:	6c 2f       	mov	r22, r28
 2f0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Lis_port2>
 2f4:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Lis_port2+0x1>
 2f8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 2fc:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <Lis_ddr1>
 300:	d0 91 38 01 	lds	r29, 0x0138	; 0x800138 <Lis_ddr1+0x1>
 304:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <Lis_Clk>
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 30e:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <Lis_Rst>
 312:	61 2f       	mov	r22, r17
 314:	ce 01       	movw	r24, r28
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 31a:	61 2f       	mov	r22, r17
 31c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Lis_port1>
 320:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Lis_port1+0x1>
 324:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 328:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <Lis_Sync>
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 332:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <LisRunClkAt50kHz>
 336:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <LisRunClkAt50kHz+0x1>
 33a:	09 95       	icall
    LisClkOn();
 33c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisClkOn>
 340:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisClkOn+0x1>
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 34a:	09 94       	ijmp

0000034c <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 350:	c0 91 27 01 	lds	r28, 0x0127	; 0x800127 <Pwm_tccr0a>
 354:	d0 91 28 01 	lds	r29, 0x0128	; 0x800128 <Pwm_tccr0a+0x1>
 358:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <Pwm_Wgm00>
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 362:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <Pwm_Wgm01>
 366:	ce 01       	movw	r24, r28
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 36c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000370 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 370:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <Pwm_Wgm02>
 374:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Pwm_tccr0b>
 378:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Pwm_tccr0b+0x1>
 37c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000380 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 384:	c0 91 25 01 	lds	r28, 0x0125	; 0x800125 <Pwm_tccr0b>
 388:	d0 91 26 01 	lds	r29, 0x0126	; 0x800126 <Pwm_tccr0b+0x1>
 38c:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <Pwm_Cs00>
 390:	ce 01       	movw	r24, r28
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 396:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <Pwm_Cs01>
 39a:	ce 01       	movw	r24, r28
 39c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3a0:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <Pwm_Cs02>
 3a4:	ce 01       	movw	r24, r28
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3aa:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000003ae <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 3b2:	c0 91 27 01 	lds	r28, 0x0127	; 0x800127 <Pwm_tccr0a>
 3b6:	d0 91 28 01 	lds	r29, 0x0128	; 0x800128 <Pwm_tccr0a+0x1>
 3ba:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <Pwm_Com0b0>
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3c4:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <Pwm_Com0b1>
 3c8:	ce 01       	movw	r24, r28
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3ce:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003d2 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

000003d8 <LisFrameReadout>:
 3d8:	aa 9a       	sbi	0x15, 2	; 21
 3da:	aa 9b       	sbis	0x15, 2	; 21
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <LisFrameReadout+0x2>
 3de:	aa 9a       	sbi	0x15, 2	; 21
 3e0:	5e 9a       	sbi	0x0b, 6	; 11
 3e2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <Lis_nticks_counter+0x1>
 3e6:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <Lis_nticks_counter>
 3ea:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <Lis_nticks_counter>
 3ee:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <Lis_nticks_counter+0x1>
 3f2:	9c 01       	movw	r18, r24
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <Lis_nticks_counter+0x1>
 3fc:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <Lis_nticks_counter>
 400:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <Lis_nticks_exposure>
 404:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <Lis_nticks_exposure+0x1>
 408:	82 17       	cp	r24, r18
 40a:	93 07       	cpc	r25, r19
 40c:	28 f4       	brcc	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	aa 9a       	sbi	0x15, 2	; 21
 410:	aa 9b       	sbis	0x15, 2	; 21
 412:	fe cf       	rjmp	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	aa 9a       	sbi	0x15, 2	; 21
 416:	e9 cf       	rjmp	.-46     	; 0x3ea <LisFrameReadout+0x12>
 418:	5e 98       	cbi	0x0b, 6	; 11
 41a:	86 e6       	ldi	r24, 0x66	; 102
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <pframe+0x1>
 422:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pframe>
 426:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__data_end+0x1>
 42a:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
 42e:	4f 9b       	sbis	0x09, 7	; 9
 430:	fe cf       	rjmp	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 432:	4f 99       	sbic	0x09, 7	; 9
 434:	fe cf       	rjmp	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 43a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
 43e:	9c 01       	movw	r18, r24
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <__data_end+0x1>
 448:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <__data_end>
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	93 40       	sbci	r25, 0x03	; 3
 450:	b8 f5       	brcc	.+110    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 452:	a9 9a       	sbi	0x15, 1	; 21
 454:	a9 9b       	sbis	0x15, 1	; 21
 456:	fe cf       	rjmp	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	a9 9a       	sbi	0x15, 1	; 21
 45a:	5a 9a       	sbi	0x0b, 2	; 11
 45c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Delay3CpuCyclesPerTick>
 460:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <Delay3CpuCyclesPerTick+0x1>
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	09 95       	icall
 468:	5a 98       	cbi	0x0b, 2	; 11
 46a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 46e:	85 ff       	sbrs	r24, 5
 470:	fc cf       	rjmp	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 476:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 47a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 47e:	87 ff       	sbrs	r24, 7
 480:	fc cf       	rjmp	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <pframe>
 486:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <pframe+0x1>
 48a:	cf 01       	movw	r24, r30
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <pframe+0x1>
 492:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pframe>
 496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 49a:	80 83       	st	Z, r24
 49c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4a0:	87 ff       	sbrs	r24, 7
 4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <pframe>
 4a8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <pframe+0x1>
 4ac:	cf 01       	movw	r24, r30
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <pframe+0x1>
 4b4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pframe>
 4b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4bc:	80 83       	st	Z, r24
 4be:	bb cf       	rjmp	.-138    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 4c0:	08 95       	ret

000004c2 <SendLisFrame>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	40 9a       	sbi	0x08, 0	; 8
 4c8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LisFrameReadout>
 4cc:	40 98       	cbi	0x08, 0	; 8
 4ce:	41 9a       	sbi	0x08, 1	; 8
 4d0:	c6 e6       	ldi	r28, 0x66	; 102
 4d2:	d1 e0       	ldi	r29, 0x01	; 1
 4d4:	89 91       	ld	r24, Y+
 4d6:	8e bd       	out	0x2e, r24	; 46
 4d8:	2c 98       	cbi	0x05, 4	; 5
 4da:	8c b5       	in	r24, 0x2c	; 44
 4dc:	8f 7b       	andi	r24, 0xBF	; 191
 4de:	8c bd       	out	0x2c, r24	; 44
 4e0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Delay3CpuCyclesPerTick>
 4e4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <Delay3CpuCyclesPerTick+0x1>
 4e8:	8a e0       	ldi	r24, 0x0A	; 10
 4ea:	09 95       	icall
 4ec:	8c b5       	in	r24, 0x2c	; 44
 4ee:	80 64       	ori	r24, 0x40	; 64
 4f0:	8c bd       	out	0x2c, r24	; 44
 4f2:	0d b4       	in	r0, 0x2d	; 45
 4f4:	07 fe       	sbrs	r0, 7
 4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <SendLisFrame+0x30>
 4f8:	8e b5       	in	r24, 0x2e	; 46
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	c6 38       	cpi	r28, 0x86	; 134
 4fe:	d8 07       	cpc	r29, r24
 500:	49 f7       	brne	.-46     	; 0x4d4 <SendLisFrame+0x12>
 502:	41 98       	cbi	0x08, 1	; 8
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <SendDataMasterAskedFor>:
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	00 d0       	rcall	.+0      	; 0x518 <SendDataMasterAskedFor+0xe>
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	98 b1       	in	r25, 0x08	; 8
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	89 27       	eor	r24, r25
 522:	88 b9       	out	0x08, r24	; 8
 524:	0d b4       	in	r0, 0x2d	; 45
 526:	07 fe       	sbrs	r0, 7
 528:	fd cf       	rjmp	.-6      	; 0x524 <SendDataMasterAskedFor+0x1a>
 52a:	8e b5       	in	r24, 0x2e	; 46
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	51 f4       	brne	.+20     	; 0x544 <SendDataMasterAskedFor+0x3a>
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <SendLisFrame>
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	a9 f5       	brne	.+106    	; 0x5b2 <SendDataMasterAskedFor+0xa8>
 548:	0d b4       	in	r0, 0x2d	; 45
 54a:	07 fe       	sbrs	r0, 7
 54c:	fd cf       	rjmp	.-6      	; 0x548 <SendDataMasterAskedFor+0x3e>
 54e:	3e b5       	in	r19, 0x2e	; 46
 550:	0d b4       	in	r0, 0x2d	; 45
 552:	07 fe       	sbrs	r0, 7
 554:	fd cf       	rjmp	.-6      	; 0x550 <SendDataMasterAskedFor+0x46>
 556:	2e b5       	in	r18, 0x2e	; 46
 558:	82 2f       	mov	r24, r18
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	93 2b       	or	r25, r19
 55e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Lis_nticks_exposure+0x1>
 562:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Lis_nticks_exposure>
 566:	98 b1       	in	r25, 0x08	; 8
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	89 27       	eor	r24, r25
 56c:	88 b9       	out	0x08, r24	; 8
 56e:	39 83       	std	Y+1, r19	; 0x01
 570:	2a 83       	std	Y+2, r18	; 0x02
 572:	8e 01       	movw	r16, r28
 574:	0f 5f       	subi	r16, 0xFF	; 255
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	7e 01       	movw	r14, r28
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	e8 0e       	add	r14, r24
 57e:	f1 1c       	adc	r15, r1
 580:	f8 01       	movw	r30, r16
 582:	81 91       	ld	r24, Z+
 584:	8f 01       	movw	r16, r30
 586:	8e bd       	out	0x2e, r24	; 46
 588:	2c 98       	cbi	0x05, 4	; 5
 58a:	8c b5       	in	r24, 0x2c	; 44
 58c:	8f 7b       	andi	r24, 0xBF	; 191
 58e:	8c bd       	out	0x2c, r24	; 44
 590:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Delay3CpuCyclesPerTick>
 594:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <Delay3CpuCyclesPerTick+0x1>
 598:	8a e0       	ldi	r24, 0x0A	; 10
 59a:	09 95       	icall
 59c:	8c b5       	in	r24, 0x2c	; 44
 59e:	80 64       	ori	r24, 0x40	; 64
 5a0:	8c bd       	out	0x2c, r24	; 44
 5a2:	0d b4       	in	r0, 0x2d	; 45
 5a4:	07 fe       	sbrs	r0, 7
 5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <SendDataMasterAskedFor+0x98>
 5a8:	8e b5       	in	r24, 0x2e	; 46
 5aa:	0e 15       	cp	r16, r14
 5ac:	1f 05       	cpc	r17, r15
 5ae:	79 f0       	breq	.+30     	; 0x5ce <SendDataMasterAskedFor+0xc4>
 5b0:	e7 cf       	rjmp	.-50     	; 0x580 <SendDataMasterAskedFor+0x76>
 5b2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <slave_ignore>
 5b6:	89 17       	cp	r24, r25
 5b8:	51 f0       	breq	.+20     	; 0x5ce <SendDataMasterAskedFor+0xc4>
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <IndicateUnknownCommand>
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	ff 90       	pop	r15
 5dc:	ef 90       	pop	r14
 5de:	08 95       	ret

000005e0 <RespondToRequestsForData>:
 5e0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 5e4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 5e8:	09 95       	icall
 5ea:	81 11       	cpse	r24, r1
 5ec:	0c 94 85 02 	jmp	0x50a	; 0x50a <SendDataMasterAskedFor>
 5f0:	08 95       	ret

000005f2 <All_debug_leds_turn_on_and_turn_green>:
 5f2:	0e 94 7b 00 	call	0xf6	; 0xf6 <DebugLedsTurnAllOn>
 5f6:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

000005fa <main>:
 5fa:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <All_debug_leds_turn_on_and_turn_green>
 5fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SpiSlaveInit>
 602:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <UartSpiInit>
 606:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LisInit>
 60a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <RespondToRequestsForData>
 60e:	fd cf       	rjmp	.-6      	; 0x60a <main+0x10>

00000610 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	3f 93       	push	r19
 61e:	4f 93       	push	r20
 620:	5f 93       	push	r21
 622:	6f 93       	push	r22
 624:	7f 93       	push	r23
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	af 93       	push	r26
 62c:	bf 93       	push	r27
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 632:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <DoTaskForThisTest>
 636:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <DoTaskForThisTest+0x1>
 63a:	09 95       	icall
}
 63c:	ff 91       	pop	r31
 63e:	ef 91       	pop	r30
 640:	bf 91       	pop	r27
 642:	af 91       	pop	r26
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	7f 91       	pop	r23
 64a:	6f 91       	pop	r22
 64c:	5f 91       	pop	r21
 64e:	4f 91       	pop	r20
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 668:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 67e:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 68a:	8a 95       	dec	r24
 68c:	f1 f7       	brne	.-4      	; 0x68a <Delay3CpuCyclesPerTick_Implementation>
 68e:	08 95       	ret

00000690 <_exit>:
 690:	f8 94       	cli

00000692 <__stop_program>:
 692:	ff cf       	rjmp	.-2      	; 0x692 <__stop_program>
