
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000d58  00000dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800242  00800242  00000f2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b0e  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012bd  00000000  00000000  00004ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021be  00000000  00000000  0000618b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009cc  00000000  00000000  0000834c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001990  00000000  00000000  00008d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4f  00000000  00000000  0000a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0000b5f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_14>
  3c:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <main>
  9e:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

inline void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
}

inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  bc:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <ToggleBit>:
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	40 81       	ld	r20, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <ToggleBit+0xc>
  de:	22 0f       	add	r18, r18
  e0:	6a 95       	dec	r22
  e2:	ea f7       	brpl	.-6      	; 0xde <ToggleBit+0xa>
  e4:	24 27       	eor	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <BitIsSet+0xe>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <BitIsSet+0xa>
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	28 23       	and	r18, r24
 100:	39 23       	and	r19, r25
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	23 2b       	or	r18, r19
 106:	09 f4       	brne	.+2      	; 0x10a <BitIsSet+0x20>
 108:	80 e0       	ldi	r24, 0x00	; 0
}
 10a:	08 95       	ret

0000010c <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c0 91 40 02 	lds	r28, 0x0240	; 0x800240 <DebugLeds_ddr>
 114:	d0 91 41 02 	lds	r29, 0x0241	; 0x800241 <DebugLeds_ddr+0x1>
 118:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12c:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 136:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000144 <DebugLedsTurnRed>:
 144:	68 2f       	mov	r22, r24
 146:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <DebugLeds_port>
 14a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 14e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000152 <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 156:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <DebugLeds_port>
 15a:	d0 91 3f 02 	lds	r29, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 15e:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 168:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 172:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 17c:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 180:	ce 01       	movw	r24, r28
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 186:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

0000018a <DebugLedsToggleAll>:
}

void DebugLedsToggleAll(void)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
    ToggleBit(DebugLeds_port, debug_led1);
 18e:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <DebugLeds_port>
 192:	d0 91 3f 02 	lds	r29, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 196:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ToggleBit>
    ToggleBit(DebugLeds_port, debug_led2);
 1a0:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <ToggleBit>
    ToggleBit(DebugLeds_port, debug_led3);
 1aa:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 6a 00 	call	0xd4	; 0xd4 <ToggleBit>
    ToggleBit(DebugLeds_port, debug_led4);
 1b4:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 1b8:	ce 01       	movw	r24, r28
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
void DebugLedsToggleAll(void)
{
    ToggleBit(DebugLeds_port, debug_led1);
    ToggleBit(DebugLeds_port, debug_led2);
    ToggleBit(DebugLeds_port, debug_led3);
    ToggleBit(DebugLeds_port, debug_led4);
 1be:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <ToggleBit>

000001c2 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 1c2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiStatusRegister>
 1c6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiStatusRegister+0x1>
 1ca:	09 95       	icall
 1cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 1d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 1d4:	09 94       	ijmp

000001d6 <ReadSpiStatusRegister_Implementation>:
 1d6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <Spi_spsr>
 1da:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <Spi_spsr+0x1>
 1de:	80 81       	ld	r24, Z
 1e0:	08 95       	ret

000001e2 <ReadSpiDataRegister_Implementation>:
 1e2:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Spi_spdr>
 1e6:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Spi_spdr+0x1>
 1ea:	80 81       	ld	r24, Z
 1ec:	08 95       	ret

000001ee <EnableSpi_Implementation>:
 1ee:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <Spi_Enable>
 1f2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <Spi_spcr>
 1f6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <Spi_spcr+0x1>
 1fa:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001fe <SpiTransferIsDone_Implementation>:
 1fe:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <Spi_InterruptFlag>
 202:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <Spi_spsr>
 206:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <Spi_spsr+0x1>
 20a:	0c 94 75 00 	jmp	0xea	; 0xea <BitIsSet>

0000020e <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 20e:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <Spi_Miso>
 212:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <Spi_ddr>
 216:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <Spi_ddr+0x1>
 21a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 21e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 222:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 226:	09 95       	icall
    ClearPendingSpiInterrupt();
 228:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ClearPendingSpiInterrupt>
 22c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ClearPendingSpiInterrupt+0x1>
 230:	09 94       	ijmp

00000232 <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 232:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <UartSpi_AdcConv>
 236:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <UartSpi_port>
 23a:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <UartSpi_port+0x1>
 23e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000242 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 24a:	00 91 25 02 	lds	r16, 0x0225	; 0x800225 <UartSpi_br>
 24e:	10 91 26 02 	lds	r17, 0x0226	; 0x800226 <UartSpi_br+0x1>
 252:	f8 01       	movw	r30, r16
 254:	11 82       	std	Z+1, r1	; 0x01
 256:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 258:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <UartSpi_ddr>
 25c:	d0 91 2e 02 	lds	r29, 0x022E	; 0x80022e <UartSpi_ddr+0x1>
 260:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <UartSpi_Sck>
 264:	ce 01       	movw	r24, r28
 266:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 26a:	0e 94 19 01 	call	0x232	; 0x232 <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 26e:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <UartSpi_AdcConv>
 272:	ce 01       	movw	r24, r28
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 278:	c0 91 27 02 	lds	r28, 0x0227	; 0x800227 <UartSpi_csrc>
 27c:	d0 91 28 02 	lds	r29, 0x0228	; 0x800228 <UartSpi_csrc+0x1>
 280:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <UartSpi_ModeSelect0>
 284:	ce 01       	movw	r24, r28
 286:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 28a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <UartSpi_ModeSelect1>
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 294:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <UartSpi_ClockPolarity>
 298:	ce 01       	movw	r24, r28
 29a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 29e:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <UartSpi_ClockPhase>
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 2a8:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <UartSpi_DataOrder>
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 2b2:	c0 91 29 02 	lds	r28, 0x0229	; 0x800229 <UartSpi_csrb>
 2b6:	d0 91 2a 02 	lds	r29, 0x022A	; 0x80022a <UartSpi_csrb+0x1>
 2ba:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <UartSpi_RxEnable>
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 2c4:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <UartSpi_TxEnable>
 2c8:	ce 01       	movw	r24, r28
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 2ce:	f8 01       	movw	r30, r16
 2d0:	11 82       	std	Z+1, r1	; 0x01
 2d2:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 2de:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmResetCounterAtTop>
 2e2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmResetCounterAtTop+0x1>
 2e6:	09 95       	icall
    PwmTopIsOcr0a();
 2e8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmTopIsOcr0a>
 2ec:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmTopIsOcr0a+0x1>
 2f0:	09 95       	icall
    PwmClkIsCpuClk();
 2f2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmClkIsCpuClk>
 2f6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmClkIsCpuClk+0x1>
 2fa:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 2fc:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <Lis_clktop>
 300:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <Lis_clktop+0x1>
 304:	88 ec       	ldi	r24, 0xC8	; 200
 306:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 308:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Lis_clkth>
 30c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Lis_clkth+0x1>
 310:	20 81       	ld	r18, Z
 312:	26 95       	lsr	r18
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
 318:	08 95       	ret

0000031a <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 31a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmEnableOutputSetUntilMatch>
 31e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmEnableOutputSetUntilMatch+0x1>
 322:	09 94       	ijmp

00000324 <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 32a:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <Lis_PixSelect>
 32e:	6c 2f       	mov	r22, r28
 330:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <Lis_ddr2>
 334:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <Lis_ddr2+0x1>
 338:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 33c:	6c 2f       	mov	r22, r28
 33e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Lis_port2>
 342:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Lis_port2+0x1>
 346:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 34a:	c0 91 1a 02 	lds	r28, 0x021A	; 0x80021a <Lis_ddr1>
 34e:	d0 91 1b 02 	lds	r29, 0x021B	; 0x80021b <Lis_ddr1+0x1>
 352:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <Lis_Clk>
 356:	ce 01       	movw	r24, r28
 358:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 35c:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <Lis_Rst>
 360:	61 2f       	mov	r22, r17
 362:	ce 01       	movw	r24, r28
 364:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 368:	61 2f       	mov	r22, r17
 36a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Lis_port1>
 36e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Lis_port1+0x1>
 372:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 376:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <Lis_Sync>
 37a:	ce 01       	movw	r24, r28
 37c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 380:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <LisRunClkAt50kHz>
 384:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <LisRunClkAt50kHz+0x1>
 388:	09 95       	icall
    LisClkOn();
 38a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisClkOn>
 38e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisClkOn+0x1>
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 398:	09 94       	ijmp

0000039a <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 39e:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <Pwm_tccr0a>
 3a2:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <Pwm_tccr0a+0x1>
 3a6:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <Pwm_Wgm00>
 3aa:	ce 01       	movw	r24, r28
 3ac:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 3b0:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Pwm_Wgm01>
 3b4:	ce 01       	movw	r24, r28
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 3ba:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003be <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 3be:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Pwm_Wgm02>
 3c2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Pwm_tccr0b>
 3c6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Pwm_tccr0b+0x1>
 3ca:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003ce <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 3d2:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <Pwm_tccr0b>
 3d6:	d0 91 09 02 	lds	r29, 0x0209	; 0x800209 <Pwm_tccr0b+0x1>
 3da:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <Pwm_Cs00>
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 3e4:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Pwm_Cs01>
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3ee:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <Pwm_Cs02>
 3f2:	ce 01       	movw	r24, r28
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3f8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000003fc <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 400:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <Pwm_tccr0a>
 404:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <Pwm_tccr0a+0x1>
 408:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <Pwm_Com0b0>
 40c:	ce 01       	movw	r24, r28
 40e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 412:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <Pwm_Com0b1>
 416:	ce 01       	movw	r24, r28
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 41c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000420 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0c 94 a2 00 	jmp	0x144	; 0x144 <DebugLedsTurnRed>

00000426 <LisFrameReadout>:
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	aa 9a       	sbi	0x15, 2	; 21
 42c:	aa 9b       	sbis	0x15, 2	; 21
 42e:	fe cf       	rjmp	.-4      	; 0x42c <LisFrameReadout+0x6>
 430:	aa 9a       	sbi	0x15, 2	; 21
 432:	5e 9a       	sbi	0x0b, 6	; 11
 434:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <Lis_nticks_counter+0x1>
 438:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <Lis_nticks_counter>
 43c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <Lis_nticks_counter>
 440:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <Lis_nticks_counter+0x1>
 444:	9c 01       	movw	r18, r24
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <Lis_nticks_counter+0x1>
 44e:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <Lis_nticks_counter>
 452:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 456:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 45a:	82 17       	cp	r24, r18
 45c:	93 07       	cpc	r25, r19
 45e:	28 f4       	brcc	.+10     	; 0x46a <LisFrameReadout+0x44>
 460:	aa 9a       	sbi	0x15, 2	; 21
 462:	aa 9b       	sbis	0x15, 2	; 21
 464:	fe cf       	rjmp	.-4      	; 0x462 <LisFrameReadout+0x3c>
 466:	aa 9a       	sbi	0x15, 2	; 21
 468:	e9 cf       	rjmp	.-46     	; 0x43c <LisFrameReadout+0x16>
 46a:	5e 98       	cbi	0x0b, 6	; 11
 46c:	8b e4       	ldi	r24, 0x4B	; 75
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 474:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 478:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <Lis_npixels_counter+0x1>
 47c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <Lis_npixels_counter>
 480:	4f 9b       	sbis	0x09, 7	; 9
 482:	fe cf       	rjmp	.-4      	; 0x480 <LisFrameReadout+0x5a>
 484:	4f 99       	sbic	0x09, 7	; 9
 486:	fe cf       	rjmp	.-4      	; 0x484 <LisFrameReadout+0x5e>
 488:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	19 f0       	breq	.+6      	; 0x496 <LisFrameReadout+0x70>
 490:	c0 e1       	ldi	r28, 0x10	; 16
 492:	d3 e0       	ldi	r29, 0x03	; 3
 494:	38 c0       	rjmp	.+112    	; 0x506 <LisFrameReadout+0xe0>
 496:	c8 e8       	ldi	r28, 0x88	; 136
 498:	d1 e0       	ldi	r29, 0x01	; 1
 49a:	35 c0       	rjmp	.+106    	; 0x506 <LisFrameReadout+0xe0>
 49c:	a9 9b       	sbis	0x15, 1	; 21
 49e:	fe cf       	rjmp	.-4      	; 0x49c <LisFrameReadout+0x76>
 4a0:	a9 9a       	sbi	0x15, 1	; 21
 4a2:	5a 9a       	sbi	0x0b, 2	; 11
 4a4:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 4a8:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 4ac:	8b e0       	ldi	r24, 0x0B	; 11
 4ae:	09 95       	icall
 4b0:	5a 98       	cbi	0x0b, 2	; 11
 4b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4b6:	85 ff       	sbrs	r24, 5
 4b8:	fc cf       	rjmp	.-8      	; 0x4b2 <LisFrameReadout+0x8c>
 4ba:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4be:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4c6:	87 ff       	sbrs	r24, 7
 4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <LisFrameReadout+0x9c>
 4ca:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 4ce:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 4d2:	cf 01       	movw	r24, r30
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 4da:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 4de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4e2:	80 83       	st	Z, r24
 4e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4e8:	87 ff       	sbrs	r24, 7
 4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <LisFrameReadout+0xbe>
 4ec:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 4f0:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 4f4:	cf 01       	movw	r24, r30
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 4fc:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 500:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 504:	80 83       	st	Z, r24
 506:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <Lis_npixels_counter>
 50a:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <Lis_npixels_counter+0x1>
 50e:	9c 01       	movw	r18, r24
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	30 93 46 02 	sts	0x0246, r19	; 0x800246 <Lis_npixels_counter+0x1>
 518:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <Lis_npixels_counter>
 51c:	8c 17       	cp	r24, r28
 51e:	9d 07       	cpc	r25, r29
 520:	10 f4       	brcc	.+4      	; 0x526 <LisFrameReadout+0x100>
 522:	a9 9a       	sbi	0x15, 1	; 21
 524:	bb cf       	rjmp	.-138    	; 0x49c <LisFrameReadout+0x76>
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <PeakCounts_Implementation>:
 52c:	40 9a       	sbi	0x08, 0	; 8
 52e:	0e 94 13 02 	call	0x426	; 0x426 <LisFrameReadout>
 532:	40 98       	cbi	0x08, 0	; 8
 534:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	19 f0       	breq	.+6      	; 0x542 <PeakCounts_Implementation+0x16>
 53c:	40 e1       	ldi	r20, 0x10	; 16
 53e:	53 e0       	ldi	r21, 0x03	; 3
 540:	02 c0       	rjmp	.+4      	; 0x546 <PeakCounts_Implementation+0x1a>
 542:	48 e8       	ldi	r20, 0x88	; 136
 544:	51 e0       	ldi	r21, 0x01	; 1
 546:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <Lis_npixels_counter+0x1>
 54a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <Lis_npixels_counter>
 54e:	8b e4       	ldi	r24, 0x4B	; 75
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 556:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <Lis_npixels_counter>
 562:	30 91 46 02 	lds	r19, 0x0246	; 0x800246 <Lis_npixels_counter+0x1>
 566:	b9 01       	movw	r22, r18
 568:	6f 5f       	subi	r22, 0xFF	; 255
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <Lis_npixels_counter+0x1>
 570:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <Lis_npixels_counter>
 574:	24 17       	cp	r18, r20
 576:	35 07       	cpc	r19, r21
 578:	e8 f4       	brcc	.+58     	; 0x5b4 <PeakCounts_Implementation+0x88>
 57a:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 57e:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 582:	9f 01       	movw	r18, r30
 584:	2f 5f       	subi	r18, 0xFF	; 255
 586:	3f 4f       	sbci	r19, 0xFF	; 255
 588:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <pframe+0x1>
 58c:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <pframe>
 590:	20 81       	ld	r18, Z
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	32 2f       	mov	r19, r18
 596:	22 27       	eor	r18, r18
 598:	bf 01       	movw	r22, r30
 59a:	6e 5f       	subi	r22, 0xFE	; 254
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <pframe+0x1>
 5a2:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <pframe>
 5a6:	61 81       	ldd	r22, Z+1	; 0x01
 5a8:	26 2b       	or	r18, r22
 5aa:	82 17       	cp	r24, r18
 5ac:	93 07       	cpc	r25, r19
 5ae:	b8 f6       	brcc	.-82     	; 0x55e <PeakCounts_Implementation+0x32>
 5b0:	c9 01       	movw	r24, r18
 5b2:	d5 cf       	rjmp	.-86     	; 0x55e <PeakCounts_Implementation+0x32>
 5b4:	08 95       	ret

000005b6 <WriteCfgToLis>:
 5b6:	98 b1       	in	r25, 0x08	; 8
 5b8:	84 e0       	ldi	r24, 0x04	; 4
 5ba:	89 27       	eor	r24, r25
 5bc:	88 b9       	out	0x08, r24	; 8
 5be:	98 b1       	in	r25, 0x08	; 8
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	89 27       	eor	r24, r25
 5c4:	88 b9       	out	0x08, r24	; 8
 5c6:	aa 9a       	sbi	0x15, 2	; 21
 5c8:	aa 9b       	sbis	0x15, 2	; 21
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <WriteCfgToLis+0x12>
 5cc:	aa 9a       	sbi	0x15, 2	; 21
 5ce:	28 9a       	sbi	0x05, 0	; 5
 5d0:	5e 98       	cbi	0x0b, 6	; 11
 5d2:	a9 9a       	sbi	0x15, 1	; 21
 5d4:	a9 9b       	sbis	0x15, 1	; 21
 5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <WriteCfgToLis+0x1e>
 5d8:	a9 9a       	sbi	0x15, 1	; 21
 5da:	aa 9a       	sbi	0x15, 2	; 21
 5dc:	aa 9b       	sbis	0x15, 2	; 21
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <WriteCfgToLis+0x26>
 5e0:	aa 9a       	sbi	0x15, 2	; 21
 5e2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	49 f4       	brne	.+18     	; 0x5fc <WriteCfgToLis+0x46>
 5ea:	5e 9a       	sbi	0x0b, 6	; 11
 5ec:	a9 9a       	sbi	0x15, 1	; 21
 5ee:	a9 9b       	sbis	0x15, 1	; 21
 5f0:	fe cf       	rjmp	.-4      	; 0x5ee <WriteCfgToLis+0x38>
 5f2:	a9 9a       	sbi	0x15, 1	; 21
 5f4:	aa 9a       	sbi	0x15, 2	; 21
 5f6:	aa 9b       	sbis	0x15, 2	; 21
 5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <WriteCfgToLis+0x40>
 5fa:	08 c0       	rjmp	.+16     	; 0x60c <WriteCfgToLis+0x56>
 5fc:	5e 98       	cbi	0x0b, 6	; 11
 5fe:	a9 9a       	sbi	0x15, 1	; 21
 600:	a9 9b       	sbis	0x15, 1	; 21
 602:	fe cf       	rjmp	.-4      	; 0x600 <WriteCfgToLis+0x4a>
 604:	a9 9a       	sbi	0x15, 1	; 21
 606:	aa 9a       	sbi	0x15, 2	; 21
 608:	aa 9b       	sbis	0x15, 2	; 21
 60a:	fe cf       	rjmp	.-4      	; 0x608 <WriteCfgToLis+0x52>
 60c:	aa 9a       	sbi	0x15, 2	; 21
 60e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <lis_gain>
 612:	84 30       	cpi	r24, 0x04	; 4
 614:	91 f4       	brne	.+36     	; 0x63a <WriteCfgToLis+0x84>
 616:	5e 9a       	sbi	0x0b, 6	; 11
 618:	a9 9a       	sbi	0x15, 1	; 21
 61a:	a9 9b       	sbis	0x15, 1	; 21
 61c:	fe cf       	rjmp	.-4      	; 0x61a <WriteCfgToLis+0x64>
 61e:	a9 9a       	sbi	0x15, 1	; 21
 620:	aa 9a       	sbi	0x15, 2	; 21
 622:	aa 9b       	sbis	0x15, 2	; 21
 624:	fe cf       	rjmp	.-4      	; 0x622 <WriteCfgToLis+0x6c>
 626:	aa 9a       	sbi	0x15, 2	; 21
 628:	5e 98       	cbi	0x0b, 6	; 11
 62a:	a9 9a       	sbi	0x15, 1	; 21
 62c:	a9 9b       	sbis	0x15, 1	; 21
 62e:	fe cf       	rjmp	.-4      	; 0x62c <WriteCfgToLis+0x76>
 630:	a9 9a       	sbi	0x15, 1	; 21
 632:	aa 9a       	sbi	0x15, 2	; 21
 634:	aa 9b       	sbis	0x15, 2	; 21
 636:	fe cf       	rjmp	.-4      	; 0x634 <WriteCfgToLis+0x7e>
 638:	39 c0       	rjmp	.+114    	; 0x6ac <WriteCfgToLis+0xf6>
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	91 f4       	brne	.+36     	; 0x662 <WriteCfgToLis+0xac>
 63e:	5e 98       	cbi	0x0b, 6	; 11
 640:	a9 9a       	sbi	0x15, 1	; 21
 642:	a9 9b       	sbis	0x15, 1	; 21
 644:	fe cf       	rjmp	.-4      	; 0x642 <WriteCfgToLis+0x8c>
 646:	a9 9a       	sbi	0x15, 1	; 21
 648:	aa 9a       	sbi	0x15, 2	; 21
 64a:	aa 9b       	sbis	0x15, 2	; 21
 64c:	fe cf       	rjmp	.-4      	; 0x64a <WriteCfgToLis+0x94>
 64e:	aa 9a       	sbi	0x15, 2	; 21
 650:	5e 9a       	sbi	0x0b, 6	; 11
 652:	a9 9a       	sbi	0x15, 1	; 21
 654:	a9 9b       	sbis	0x15, 1	; 21
 656:	fe cf       	rjmp	.-4      	; 0x654 <WriteCfgToLis+0x9e>
 658:	a9 9a       	sbi	0x15, 1	; 21
 65a:	aa 9a       	sbi	0x15, 2	; 21
 65c:	aa 9b       	sbis	0x15, 2	; 21
 65e:	fe cf       	rjmp	.-4      	; 0x65c <WriteCfgToLis+0xa6>
 660:	25 c0       	rjmp	.+74     	; 0x6ac <WriteCfgToLis+0xf6>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	91 f4       	brne	.+36     	; 0x68a <WriteCfgToLis+0xd4>
 666:	5e 98       	cbi	0x0b, 6	; 11
 668:	a9 9a       	sbi	0x15, 1	; 21
 66a:	a9 9b       	sbis	0x15, 1	; 21
 66c:	fe cf       	rjmp	.-4      	; 0x66a <WriteCfgToLis+0xb4>
 66e:	a9 9a       	sbi	0x15, 1	; 21
 670:	aa 9a       	sbi	0x15, 2	; 21
 672:	aa 9b       	sbis	0x15, 2	; 21
 674:	fe cf       	rjmp	.-4      	; 0x672 <WriteCfgToLis+0xbc>
 676:	aa 9a       	sbi	0x15, 2	; 21
 678:	5e 98       	cbi	0x0b, 6	; 11
 67a:	a9 9a       	sbi	0x15, 1	; 21
 67c:	a9 9b       	sbis	0x15, 1	; 21
 67e:	fe cf       	rjmp	.-4      	; 0x67c <WriteCfgToLis+0xc6>
 680:	a9 9a       	sbi	0x15, 1	; 21
 682:	aa 9a       	sbi	0x15, 2	; 21
 684:	aa 9b       	sbis	0x15, 2	; 21
 686:	fe cf       	rjmp	.-4      	; 0x684 <WriteCfgToLis+0xce>
 688:	11 c0       	rjmp	.+34     	; 0x6ac <WriteCfgToLis+0xf6>
 68a:	5e 9a       	sbi	0x0b, 6	; 11
 68c:	a9 9a       	sbi	0x15, 1	; 21
 68e:	a9 9b       	sbis	0x15, 1	; 21
 690:	fe cf       	rjmp	.-4      	; 0x68e <WriteCfgToLis+0xd8>
 692:	a9 9a       	sbi	0x15, 1	; 21
 694:	aa 9a       	sbi	0x15, 2	; 21
 696:	aa 9b       	sbis	0x15, 2	; 21
 698:	fe cf       	rjmp	.-4      	; 0x696 <WriteCfgToLis+0xe0>
 69a:	aa 9a       	sbi	0x15, 2	; 21
 69c:	5e 9a       	sbi	0x0b, 6	; 11
 69e:	a9 9a       	sbi	0x15, 1	; 21
 6a0:	a9 9b       	sbis	0x15, 1	; 21
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <WriteCfgToLis+0xea>
 6a4:	a9 9a       	sbi	0x15, 1	; 21
 6a6:	aa 9a       	sbi	0x15, 2	; 21
 6a8:	aa 9b       	sbis	0x15, 2	; 21
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <WriteCfgToLis+0xf2>
 6ac:	aa 9a       	sbi	0x15, 2	; 21
 6ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <lis_rowselect>
 6b2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__data_end>
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	e9 f4       	brne	.+58     	; 0x6f4 <WriteCfgToLis+0x13e>
 6ba:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 6be:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 6c2:	e8 17       	cp	r30, r24
 6c4:	f8 f4       	brcc	.+62     	; 0x704 <WriteCfgToLis+0x14e>
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	ea 5e       	subi	r30, 0xEA	; 234
 6ca:	fe 4f       	sbci	r31, 0xFE	; 254
 6cc:	80 81       	ld	r24, Z
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <WriteCfgToLis+0x120>
 6d2:	5e 9a       	sbi	0x0b, 6	; 11
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <WriteCfgToLis+0x122>
 6d6:	5e 98       	cbi	0x0b, 6	; 11
 6d8:	a9 9a       	sbi	0x15, 1	; 21
 6da:	a9 9b       	sbis	0x15, 1	; 21
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <WriteCfgToLis+0x124>
 6de:	a9 9a       	sbi	0x15, 1	; 21
 6e0:	aa 9a       	sbi	0x15, 2	; 21
 6e2:	aa 9b       	sbis	0x15, 2	; 21
 6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <WriteCfgToLis+0x12c>
 6e6:	aa 9a       	sbi	0x15, 2	; 21
 6e8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 6f2:	e3 cf       	rjmp	.-58     	; 0x6ba <WriteCfgToLis+0x104>
 6f4:	82 30       	cpi	r24, 0x02	; 2
 6f6:	01 f5       	brne	.+64     	; 0x738 <WriteCfgToLis+0x182>
 6f8:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 6fc:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 700:	e8 17       	cp	r30, r24
 702:	18 f0       	brcs	.+6      	; 0x70a <WriteCfgToLis+0x154>
 704:	5e 98       	cbi	0x0b, 6	; 11
 706:	28 98       	cbi	0x05, 0	; 5
 708:	08 95       	ret
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	e1 5d       	subi	r30, 0xD1	; 209
 70e:	fe 4f       	sbci	r31, 0xFE	; 254
 710:	80 81       	ld	r24, Z
 712:	81 30       	cpi	r24, 0x01	; 1
 714:	11 f4       	brne	.+4      	; 0x71a <WriteCfgToLis+0x164>
 716:	5e 9a       	sbi	0x0b, 6	; 11
 718:	01 c0       	rjmp	.+2      	; 0x71c <WriteCfgToLis+0x166>
 71a:	5e 98       	cbi	0x0b, 6	; 11
 71c:	a9 9a       	sbi	0x15, 1	; 21
 71e:	a9 9b       	sbis	0x15, 1	; 21
 720:	fe cf       	rjmp	.-4      	; 0x71e <WriteCfgToLis+0x168>
 722:	a9 9a       	sbi	0x15, 1	; 21
 724:	aa 9a       	sbi	0x15, 2	; 21
 726:	aa 9b       	sbis	0x15, 2	; 21
 728:	fe cf       	rjmp	.-4      	; 0x726 <WriteCfgToLis+0x170>
 72a:	aa 9a       	sbi	0x15, 2	; 21
 72c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 730:	8f 5f       	subi	r24, 0xFF	; 255
 732:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 736:	e0 cf       	rjmp	.-64     	; 0x6f8 <WriteCfgToLis+0x142>
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	e9 f4       	brne	.+58     	; 0x776 <WriteCfgToLis+0x1c0>
 73c:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 740:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 744:	e8 17       	cp	r30, r24
 746:	f0 f6       	brcc	.-68     	; 0x704 <WriteCfgToLis+0x14e>
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	e8 5b       	subi	r30, 0xB8	; 184
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	80 81       	ld	r24, Z
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	11 f4       	brne	.+4      	; 0x758 <WriteCfgToLis+0x1a2>
 754:	5e 9a       	sbi	0x0b, 6	; 11
 756:	01 c0       	rjmp	.+2      	; 0x75a <WriteCfgToLis+0x1a4>
 758:	5e 98       	cbi	0x0b, 6	; 11
 75a:	a9 9a       	sbi	0x15, 1	; 21
 75c:	a9 9b       	sbis	0x15, 1	; 21
 75e:	fe cf       	rjmp	.-4      	; 0x75c <WriteCfgToLis+0x1a6>
 760:	a9 9a       	sbi	0x15, 1	; 21
 762:	aa 9a       	sbi	0x15, 2	; 21
 764:	aa 9b       	sbis	0x15, 2	; 21
 766:	fe cf       	rjmp	.-4      	; 0x764 <WriteCfgToLis+0x1ae>
 768:	aa 9a       	sbi	0x15, 2	; 21
 76a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 76e:	8f 5f       	subi	r24, 0xFF	; 255
 770:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 774:	e3 cf       	rjmp	.-58     	; 0x73c <WriteCfgToLis+0x186>
 776:	84 30       	cpi	r24, 0x04	; 4
 778:	f1 f4       	brne	.+60     	; 0x7b6 <WriteCfgToLis+0x200>
 77a:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 77e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 782:	e8 17       	cp	r30, r24
 784:	08 f0       	brcs	.+2      	; 0x788 <WriteCfgToLis+0x1d2>
 786:	be cf       	rjmp	.-132    	; 0x704 <WriteCfgToLis+0x14e>
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	ef 59       	subi	r30, 0x9F	; 159
 78c:	fe 4f       	sbci	r31, 0xFE	; 254
 78e:	80 81       	ld	r24, Z
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	11 f4       	brne	.+4      	; 0x798 <WriteCfgToLis+0x1e2>
 794:	5e 9a       	sbi	0x0b, 6	; 11
 796:	01 c0       	rjmp	.+2      	; 0x79a <WriteCfgToLis+0x1e4>
 798:	5e 98       	cbi	0x0b, 6	; 11
 79a:	a9 9a       	sbi	0x15, 1	; 21
 79c:	a9 9b       	sbis	0x15, 1	; 21
 79e:	fe cf       	rjmp	.-4      	; 0x79c <WriteCfgToLis+0x1e6>
 7a0:	a9 9a       	sbi	0x15, 1	; 21
 7a2:	aa 9a       	sbi	0x15, 2	; 21
 7a4:	aa 9b       	sbis	0x15, 2	; 21
 7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <WriteCfgToLis+0x1ee>
 7a8:	aa 9a       	sbi	0x15, 2	; 21
 7aa:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 7ae:	8f 5f       	subi	r24, 0xFF	; 255
 7b0:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 7b4:	e2 cf       	rjmp	.-60     	; 0x77a <WriteCfgToLis+0x1c4>
 7b6:	85 30       	cpi	r24, 0x05	; 5
 7b8:	f1 f4       	brne	.+60     	; 0x7f6 <WriteCfgToLis+0x240>
 7ba:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 7be:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 7c2:	e8 17       	cp	r30, r24
 7c4:	08 f0       	brcs	.+2      	; 0x7c8 <WriteCfgToLis+0x212>
 7c6:	9e cf       	rjmp	.-196    	; 0x704 <WriteCfgToLis+0x14e>
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	e6 58       	subi	r30, 0x86	; 134
 7cc:	fe 4f       	sbci	r31, 0xFE	; 254
 7ce:	80 81       	ld	r24, Z
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <WriteCfgToLis+0x222>
 7d4:	5e 9a       	sbi	0x0b, 6	; 11
 7d6:	01 c0       	rjmp	.+2      	; 0x7da <WriteCfgToLis+0x224>
 7d8:	5e 98       	cbi	0x0b, 6	; 11
 7da:	a9 9a       	sbi	0x15, 1	; 21
 7dc:	a9 9b       	sbis	0x15, 1	; 21
 7de:	fe cf       	rjmp	.-4      	; 0x7dc <WriteCfgToLis+0x226>
 7e0:	a9 9a       	sbi	0x15, 1	; 21
 7e2:	aa 9a       	sbi	0x15, 2	; 21
 7e4:	aa 9b       	sbis	0x15, 2	; 21
 7e6:	fe cf       	rjmp	.-4      	; 0x7e4 <WriteCfgToLis+0x22e>
 7e8:	aa 9a       	sbi	0x15, 2	; 21
 7ea:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 7ee:	8f 5f       	subi	r24, 0xFF	; 255
 7f0:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 7f4:	e2 cf       	rjmp	.-60     	; 0x7ba <WriteCfgToLis+0x204>
 7f6:	86 30       	cpi	r24, 0x06	; 6
 7f8:	f1 f4       	brne	.+60     	; 0x836 <WriteCfgToLis+0x280>
 7fa:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 7fe:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 802:	e8 17       	cp	r30, r24
 804:	08 f0       	brcs	.+2      	; 0x808 <WriteCfgToLis+0x252>
 806:	7e cf       	rjmp	.-260    	; 0x704 <WriteCfgToLis+0x14e>
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	eb 53       	subi	r30, 0x3B	; 59
 80c:	fe 4f       	sbci	r31, 0xFE	; 254
 80e:	80 81       	ld	r24, Z
 810:	81 30       	cpi	r24, 0x01	; 1
 812:	11 f4       	brne	.+4      	; 0x818 <WriteCfgToLis+0x262>
 814:	5e 9a       	sbi	0x0b, 6	; 11
 816:	01 c0       	rjmp	.+2      	; 0x81a <WriteCfgToLis+0x264>
 818:	5e 98       	cbi	0x0b, 6	; 11
 81a:	a9 9a       	sbi	0x15, 1	; 21
 81c:	a9 9b       	sbis	0x15, 1	; 21
 81e:	fe cf       	rjmp	.-4      	; 0x81c <WriteCfgToLis+0x266>
 820:	a9 9a       	sbi	0x15, 1	; 21
 822:	aa 9a       	sbi	0x15, 2	; 21
 824:	aa 9b       	sbis	0x15, 2	; 21
 826:	fe cf       	rjmp	.-4      	; 0x824 <WriteCfgToLis+0x26e>
 828:	aa 9a       	sbi	0x15, 2	; 21
 82a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 82e:	8f 5f       	subi	r24, 0xFF	; 255
 830:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 834:	e2 cf       	rjmp	.-60     	; 0x7fa <WriteCfgToLis+0x244>
 836:	87 30       	cpi	r24, 0x07	; 7
 838:	f1 f4       	brne	.+60     	; 0x876 <WriteCfgToLis+0x2c0>
 83a:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 83e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 842:	e8 17       	cp	r30, r24
 844:	08 f0       	brcs	.+2      	; 0x848 <WriteCfgToLis+0x292>
 846:	5e cf       	rjmp	.-324    	; 0x704 <WriteCfgToLis+0x14e>
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	e4 55       	subi	r30, 0x54	; 84
 84c:	fe 4f       	sbci	r31, 0xFE	; 254
 84e:	80 81       	ld	r24, Z
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	11 f4       	brne	.+4      	; 0x858 <WriteCfgToLis+0x2a2>
 854:	5e 9a       	sbi	0x0b, 6	; 11
 856:	01 c0       	rjmp	.+2      	; 0x85a <WriteCfgToLis+0x2a4>
 858:	5e 98       	cbi	0x0b, 6	; 11
 85a:	a9 9a       	sbi	0x15, 1	; 21
 85c:	a9 9b       	sbis	0x15, 1	; 21
 85e:	fe cf       	rjmp	.-4      	; 0x85c <WriteCfgToLis+0x2a6>
 860:	a9 9a       	sbi	0x15, 1	; 21
 862:	aa 9a       	sbi	0x15, 2	; 21
 864:	aa 9b       	sbis	0x15, 2	; 21
 866:	fe cf       	rjmp	.-4      	; 0x864 <WriteCfgToLis+0x2ae>
 868:	aa 9a       	sbi	0x15, 2	; 21
 86a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 86e:	8f 5f       	subi	r24, 0xFF	; 255
 870:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 874:	e2 cf       	rjmp	.-60     	; 0x83a <WriteCfgToLis+0x284>
 876:	88 30       	cpi	r24, 0x08	; 8
 878:	91 f5       	brne	.+100    	; 0x8de <WriteCfgToLis+0x328>
 87a:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 87e:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 882:	e8 17       	cp	r30, r24
 884:	08 f0       	brcs	.+2      	; 0x888 <WriteCfgToLis+0x2d2>
 886:	3e cf       	rjmp	.-388    	; 0x704 <WriteCfgToLis+0x14e>
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	ed 56       	subi	r30, 0x6D	; 109
 88c:	fe 4f       	sbci	r31, 0xFE	; 254
 88e:	80 81       	ld	r24, Z
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	11 f4       	brne	.+4      	; 0x898 <WriteCfgToLis+0x2e2>
 894:	5e 9a       	sbi	0x0b, 6	; 11
 896:	01 c0       	rjmp	.+2      	; 0x89a <WriteCfgToLis+0x2e4>
 898:	5e 98       	cbi	0x0b, 6	; 11
 89a:	a9 9a       	sbi	0x15, 1	; 21
 89c:	a9 9b       	sbis	0x15, 1	; 21
 89e:	fe cf       	rjmp	.-4      	; 0x89c <WriteCfgToLis+0x2e6>
 8a0:	a9 9a       	sbi	0x15, 1	; 21
 8a2:	aa 9a       	sbi	0x15, 2	; 21
 8a4:	aa 9b       	sbis	0x15, 2	; 21
 8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <WriteCfgToLis+0x2ee>
 8a8:	aa 9a       	sbi	0x15, 2	; 21
 8aa:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 8ae:	8f 5f       	subi	r24, 0xFF	; 255
 8b0:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 8b4:	e2 cf       	rjmp	.-60     	; 0x87a <WriteCfgToLis+0x2c4>
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	e2 52       	subi	r30, 0x22	; 34
 8ba:	fe 4f       	sbci	r31, 0xFE	; 254
 8bc:	80 81       	ld	r24, Z
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	a9 f4       	brne	.+42     	; 0x8ec <WriteCfgToLis+0x336>
 8c2:	5e 9a       	sbi	0x0b, 6	; 11
 8c4:	a9 9a       	sbi	0x15, 1	; 21
 8c6:	a9 9b       	sbis	0x15, 1	; 21
 8c8:	fe cf       	rjmp	.-4      	; 0x8c6 <WriteCfgToLis+0x310>
 8ca:	a9 9a       	sbi	0x15, 1	; 21
 8cc:	aa 9a       	sbi	0x15, 2	; 21
 8ce:	aa 9b       	sbis	0x15, 2	; 21
 8d0:	fe cf       	rjmp	.-4      	; 0x8ce <WriteCfgToLis+0x318>
 8d2:	aa 9a       	sbi	0x15, 2	; 21
 8d4:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 8d8:	8f 5f       	subi	r24, 0xFF	; 255
 8da:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 8de:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 8e2:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 8e6:	e8 17       	cp	r30, r24
 8e8:	30 f3       	brcs	.-52     	; 0x8b6 <WriteCfgToLis+0x300>
 8ea:	0c cf       	rjmp	.-488    	; 0x704 <WriteCfgToLis+0x14e>
 8ec:	5e 98       	cbi	0x0b, 6	; 11
 8ee:	ea cf       	rjmp	.-44     	; 0x8c4 <WriteCfgToLis+0x30e>

000008f0 <NticsExposureToHitTarget>:
 8f0:	9f 92       	push	r9
 8f2:	af 92       	push	r10
 8f4:	bf 92       	push	r11
 8f6:	cf 92       	push	r12
 8f8:	df 92       	push	r13
 8fa:	ef 92       	push	r14
 8fc:	ff 92       	push	r15
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	ec 01       	movw	r28, r24
 908:	7b 01       	movw	r14, r22
 90a:	8c 01       	movw	r16, r24
 90c:	08 57       	subi	r16, 0x78	; 120
 90e:	1c 4e       	sbci	r17, 0xEC	; 236
 910:	98 ea       	ldi	r25, 0xA8	; 168
 912:	c9 2e       	mov	r12, r25
 914:	91 e6       	ldi	r25, 0x61	; 97
 916:	d9 2e       	mov	r13, r25
 918:	2a e0       	ldi	r18, 0x0A	; 10
 91a:	92 2e       	mov	r9, r18
 91c:	0e 94 c5 00 	call	0x18a	; 0x18a <DebugLedsToggleAll>
 920:	f7 01       	movw	r30, r14
 922:	09 95       	icall
 924:	5c 01       	movw	r10, r24
 926:	0e 94 c5 00 	call	0x18a	; 0x18a <DebugLedsToggleAll>
 92a:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 92e:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 932:	a1 14       	cp	r10, r1
 934:	b1 04       	cpc	r11, r1
 936:	a9 f4       	brne	.+42     	; 0x962 <__stack+0x63>
 938:	28 3a       	cpi	r18, 0xA8	; 168
 93a:	f1 e6       	ldi	r31, 0x61	; 97
 93c:	3f 07       	cpc	r19, r31
 93e:	38 f0       	brcs	.+14     	; 0x94e <__stack+0x4f>
 940:	88 ea       	ldi	r24, 0xA8	; 168
 942:	91 e6       	ldi	r25, 0x61	; 97
 944:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Lis_nticks_exposure+0x1>
 948:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Lis_nticks_exposure>
 94c:	2f c0       	rjmp	.+94     	; 0x9ac <__stack+0xad>
 94e:	92 9e       	mul	r9, r18
 950:	c0 01       	movw	r24, r0
 952:	93 9e       	mul	r9, r19
 954:	90 0d       	add	r25, r0
 956:	11 24       	eor	r1, r1
 958:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Lis_nticks_exposure+0x1>
 95c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Lis_nticks_exposure>
 960:	dd cf       	rjmp	.-70     	; 0x91c <__stack+0x1d>
 962:	0a 15       	cp	r16, r10
 964:	1b 05       	cpc	r17, r11
 966:	18 f4       	brcc	.+6      	; 0x96e <__stack+0x6f>
 968:	36 95       	lsr	r19
 96a:	27 95       	ror	r18
 96c:	1a c0       	rjmp	.+52     	; 0x9a2 <__stack+0xa3>
 96e:	ac 16       	cp	r10, r28
 970:	bd 06       	cpc	r11, r29
 972:	e0 f4       	brcc	.+56     	; 0x9ac <__stack+0xad>
 974:	28 3a       	cpi	r18, 0xA8	; 168
 976:	81 e6       	ldi	r24, 0x61	; 97
 978:	38 07       	cpc	r19, r24
 97a:	10 f7       	brcc	.-60     	; 0x940 <__stack+0x41>
 97c:	de 01       	movw	r26, r28
 97e:	0e 94 9b 06 	call	0xd36	; 0xd36 <__umulhisi3>
 982:	95 01       	movw	r18, r10
 984:	40 e0       	ldi	r20, 0x00	; 0
 986:	50 e0       	ldi	r21, 0x00	; 0
 988:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__udivmodsi4>
 98c:	29 3a       	cpi	r18, 0xA9	; 169
 98e:	e1 e6       	ldi	r30, 0x61	; 97
 990:	3e 07       	cpc	r19, r30
 992:	41 05       	cpc	r20, r1
 994:	51 05       	cpc	r21, r1
 996:	28 f0       	brcs	.+10     	; 0x9a2 <__stack+0xa3>
 998:	d0 92 fc 01 	sts	0x01FC, r13	; 0x8001fc <Lis_nticks_exposure+0x1>
 99c:	c0 92 fb 01 	sts	0x01FB, r12	; 0x8001fb <Lis_nticks_exposure>
 9a0:	bd cf       	rjmp	.-134    	; 0x91c <__stack+0x1d>
 9a2:	30 93 fc 01 	sts	0x01FC, r19	; 0x8001fc <Lis_nticks_exposure+0x1>
 9a6:	20 93 fb 01 	sts	0x01FB, r18	; 0x8001fb <Lis_nticks_exposure>
 9aa:	b8 cf       	rjmp	.-144    	; 0x91c <__stack+0x1d>
 9ac:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 9b0:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	0f 91       	pop	r16
 9bc:	ff 90       	pop	r15
 9be:	ef 90       	pop	r14
 9c0:	df 90       	pop	r13
 9c2:	cf 90       	pop	r12
 9c4:	bf 90       	pop	r11
 9c6:	af 90       	pop	r10
 9c8:	9f 90       	pop	r9
 9ca:	08 95       	ret

000009cc <AutoExpose>:
 9cc:	ef 92       	push	r14
 9ce:	ff 92       	push	r15
 9d0:	0f 93       	push	r16
 9d2:	1f 93       	push	r17
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
 9d8:	00 d0       	rcall	.+0      	; 0x9da <AutoExpose+0xe>
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
 9de:	0e 94 c5 00 	call	0x18a	; 0x18a <DebugLedsToggleAll>
 9e2:	66 e9       	ldi	r22, 0x96	; 150
 9e4:	72 e0       	ldi	r23, 0x02	; 2
 9e6:	88 ea       	ldi	r24, 0xA8	; 168
 9e8:	91 e6       	ldi	r25, 0x61	; 97
 9ea:	0e 94 78 04 	call	0x8f0	; 0x8f0 <NticsExposureToHitTarget>
 9ee:	99 83       	std	Y+1, r25	; 0x01
 9f0:	8a 83       	std	Y+2, r24	; 0x02
 9f2:	8e 01       	movw	r16, r28
 9f4:	0f 5f       	subi	r16, 0xFF	; 255
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	7e 01       	movw	r14, r28
 9fa:	83 e0       	ldi	r24, 0x03	; 3
 9fc:	e8 0e       	add	r14, r24
 9fe:	f1 1c       	adc	r15, r1
 a00:	f8 01       	movw	r30, r16
 a02:	81 91       	ld	r24, Z+
 a04:	8f 01       	movw	r16, r30
 a06:	8e bd       	out	0x2e, r24	; 46
 a08:	2c 98       	cbi	0x05, 4	; 5
 a0a:	8c b5       	in	r24, 0x2c	; 44
 a0c:	8f 7b       	andi	r24, 0xBF	; 191
 a0e:	8c bd       	out	0x2c, r24	; 44
 a10:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 a14:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 a18:	8a e0       	ldi	r24, 0x0A	; 10
 a1a:	09 95       	icall
 a1c:	8c b5       	in	r24, 0x2c	; 44
 a1e:	80 64       	ori	r24, 0x40	; 64
 a20:	8c bd       	out	0x2c, r24	; 44
 a22:	0d b4       	in	r0, 0x2d	; 45
 a24:	07 fe       	sbrs	r0, 7
 a26:	fd cf       	rjmp	.-6      	; 0xa22 <AutoExpose+0x56>
 a28:	8e b5       	in	r24, 0x2e	; 46
 a2a:	0e 15       	cp	r16, r14
 a2c:	1f 05       	cpc	r17, r15
 a2e:	41 f7       	brne	.-48     	; 0xa00 <AutoExpose+0x34>
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	ff 90       	pop	r15
 a3e:	ef 90       	pop	r14
 a40:	08 95       	ret

00000a42 <SendLisFrame>:
 a42:	0f 93       	push	r16
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	40 9a       	sbi	0x08, 0	; 8
 a4c:	0e 94 13 02 	call	0x426	; 0x426 <LisFrameReadout>
 a50:	40 98       	cbi	0x08, 0	; 8
 a52:	41 9a       	sbi	0x08, 1	; 8
 a54:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	19 f0       	breq	.+6      	; 0xa62 <SendLisFrame+0x20>
 a5c:	80 e2       	ldi	r24, 0x20	; 32
 a5e:	96 e0       	ldi	r25, 0x06	; 6
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <SendLisFrame+0x24>
 a62:	80 e1       	ldi	r24, 0x10	; 16
 a64:	93 e0       	ldi	r25, 0x03	; 3
 a66:	0b e4       	ldi	r16, 0x4B	; 75
 a68:	12 e0       	ldi	r17, 0x02	; 2
 a6a:	ec 01       	movw	r28, r24
 a6c:	c5 5b       	subi	r28, 0xB5	; 181
 a6e:	dd 4f       	sbci	r29, 0xFD	; 253
 a70:	f8 01       	movw	r30, r16
 a72:	81 91       	ld	r24, Z+
 a74:	8f 01       	movw	r16, r30
 a76:	8e bd       	out	0x2e, r24	; 46
 a78:	2c 98       	cbi	0x05, 4	; 5
 a7a:	8c b5       	in	r24, 0x2c	; 44
 a7c:	8f 7b       	andi	r24, 0xBF	; 191
 a7e:	8c bd       	out	0x2c, r24	; 44
 a80:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 a84:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 a88:	8a e0       	ldi	r24, 0x0A	; 10
 a8a:	09 95       	icall
 a8c:	8c b5       	in	r24, 0x2c	; 44
 a8e:	80 64       	ori	r24, 0x40	; 64
 a90:	8c bd       	out	0x2c, r24	; 44
 a92:	0d b4       	in	r0, 0x2d	; 45
 a94:	07 fe       	sbrs	r0, 7
 a96:	fd cf       	rjmp	.-6      	; 0xa92 <SendLisFrame+0x50>
 a98:	8e b5       	in	r24, 0x2e	; 46
 a9a:	0c 17       	cp	r16, r28
 a9c:	1d 07       	cpc	r17, r29
 a9e:	41 f7       	brne	.-48     	; 0xa70 <SendLisFrame+0x2e>
 aa0:	41 98       	cbi	0x08, 1	; 8
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	08 95       	ret

00000aac <SendDataMasterAskedFor>:
 aac:	ef 92       	push	r14
 aae:	ff 92       	push	r15
 ab0:	0f 93       	push	r16
 ab2:	1f 93       	push	r17
 ab4:	cf 93       	push	r28
 ab6:	df 93       	push	r29
 ab8:	00 d0       	rcall	.+0      	; 0xaba <SendDataMasterAskedFor+0xe>
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	98 b1       	in	r25, 0x08	; 8
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	89 27       	eor	r24, r25
 ac4:	88 b9       	out	0x08, r24	; 8
 ac6:	0d b4       	in	r0, 0x2d	; 45
 ac8:	07 fe       	sbrs	r0, 7
 aca:	fd cf       	rjmp	.-6      	; 0xac6 <SendDataMasterAskedFor+0x1a>
 acc:	8e b5       	in	r24, 0x2e	; 46
 ace:	81 30       	cpi	r24, 0x01	; 1
 ad0:	51 f4       	brne	.+20     	; 0xae6 <SendDataMasterAskedFor+0x3a>
 ad2:	0f 90       	pop	r0
 ad4:	0f 90       	pop	r0
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	ff 90       	pop	r15
 ae0:	ef 90       	pop	r14
 ae2:	0c 94 21 05 	jmp	0xa42	; 0xa42 <SendLisFrame>
 ae6:	82 30       	cpi	r24, 0x02	; 2
 ae8:	c9 f5       	brne	.+114    	; 0xb5c <SendDataMasterAskedFor+0xb0>
 aea:	0d b4       	in	r0, 0x2d	; 45
 aec:	07 fe       	sbrs	r0, 7
 aee:	fd cf       	rjmp	.-6      	; 0xaea <SendDataMasterAskedFor+0x3e>
 af0:	2e b5       	in	r18, 0x2e	; 46
 af2:	0d b4       	in	r0, 0x2d	; 45
 af4:	07 fe       	sbrs	r0, 7
 af6:	fd cf       	rjmp	.-6      	; 0xaf2 <SendDataMasterAskedFor+0x46>
 af8:	8e b5       	in	r24, 0x2e	; 46
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	92 2b       	or	r25, r18
 afe:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Lis_nticks_exposure+0x1>
 b02:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Lis_nticks_exposure>
 b06:	98 b1       	in	r25, 0x08	; 8
 b08:	84 e0       	ldi	r24, 0x04	; 4
 b0a:	89 27       	eor	r24, r25
 b0c:	88 b9       	out	0x08, r24	; 8
 b0e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 b12:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 b16:	99 83       	std	Y+1, r25	; 0x01
 b18:	8a 83       	std	Y+2, r24	; 0x02
 b1a:	8e 01       	movw	r16, r28
 b1c:	0f 5f       	subi	r16, 0xFF	; 255
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	7e 01       	movw	r14, r28
 b22:	83 e0       	ldi	r24, 0x03	; 3
 b24:	e8 0e       	add	r14, r24
 b26:	f1 1c       	adc	r15, r1
 b28:	f8 01       	movw	r30, r16
 b2a:	81 91       	ld	r24, Z+
 b2c:	8f 01       	movw	r16, r30
 b2e:	8e bd       	out	0x2e, r24	; 46
 b30:	2c 98       	cbi	0x05, 4	; 5
 b32:	8c b5       	in	r24, 0x2c	; 44
 b34:	8f 7b       	andi	r24, 0xBF	; 191
 b36:	8c bd       	out	0x2c, r24	; 44
 b38:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 b3c:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 b40:	8a e0       	ldi	r24, 0x0A	; 10
 b42:	09 95       	icall
 b44:	8c b5       	in	r24, 0x2c	; 44
 b46:	80 64       	ori	r24, 0x40	; 64
 b48:	8c bd       	out	0x2c, r24	; 44
 b4a:	0d b4       	in	r0, 0x2d	; 45
 b4c:	07 fe       	sbrs	r0, 7
 b4e:	fd cf       	rjmp	.-6      	; 0xb4a <SendDataMasterAskedFor+0x9e>
 b50:	8e b5       	in	r24, 0x2e	; 46
 b52:	0e 15       	cp	r16, r14
 b54:	1f 05       	cpc	r17, r15
 b56:	09 f4       	brne	.+2      	; 0xb5a <SendDataMasterAskedFor+0xae>
 b58:	6b c0       	rjmp	.+214    	; 0xc30 <SendDataMasterAskedFor+0x184>
 b5a:	e6 cf       	rjmp	.-52     	; 0xb28 <SendDataMasterAskedFor+0x7c>
 b5c:	85 31       	cpi	r24, 0x15	; 21
 b5e:	51 f4       	brne	.+20     	; 0xb74 <SendDataMasterAskedFor+0xc8>
 b60:	0f 90       	pop	r0
 b62:	0f 90       	pop	r0
 b64:	df 91       	pop	r29
 b66:	cf 91       	pop	r28
 b68:	1f 91       	pop	r17
 b6a:	0f 91       	pop	r16
 b6c:	ff 90       	pop	r15
 b6e:	ef 90       	pop	r14
 b70:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <AutoExpose>
 b74:	86 30       	cpi	r24, 0x06	; 6
 b76:	21 f4       	brne	.+8      	; 0xb80 <SendDataMasterAskedFor+0xd4>
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <lis_sum_mode>
 b7e:	58 c0       	rjmp	.+176    	; 0xc30 <SendDataMasterAskedFor+0x184>
 b80:	85 30       	cpi	r24, 0x05	; 5
 b82:	19 f4       	brne	.+6      	; 0xb8a <SendDataMasterAskedFor+0xde>
 b84:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <lis_sum_mode>
 b88:	53 c0       	rjmp	.+166    	; 0xc30 <SendDataMasterAskedFor+0x184>
 b8a:	88 30       	cpi	r24, 0x08	; 8
 b8c:	11 f4       	brne	.+4      	; 0xb92 <SendDataMasterAskedFor+0xe6>
 b8e:	85 e0       	ldi	r24, 0x05	; 5
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <SendDataMasterAskedFor+0xec>
 b92:	89 30       	cpi	r24, 0x09	; 9
 b94:	21 f4       	brne	.+8      	; 0xb9e <SendDataMasterAskedFor+0xf2>
 b96:	84 e0       	ldi	r24, 0x04	; 4
 b98:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <lis_gain>
 b9c:	49 c0       	rjmp	.+146    	; 0xc30 <SendDataMasterAskedFor+0x184>
 b9e:	8a 30       	cpi	r24, 0x0A	; 10
 ba0:	11 f4       	brne	.+4      	; 0xba6 <SendDataMasterAskedFor+0xfa>
 ba2:	82 e0       	ldi	r24, 0x02	; 2
 ba4:	f9 cf       	rjmp	.-14     	; 0xb98 <SendDataMasterAskedFor+0xec>
 ba6:	8b 30       	cpi	r24, 0x0B	; 11
 ba8:	11 f4       	brne	.+4      	; 0xbae <SendDataMasterAskedFor+0x102>
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	f5 cf       	rjmp	.-22     	; 0xb98 <SendDataMasterAskedFor+0xec>
 bae:	8c 30       	cpi	r24, 0x0C	; 12
 bb0:	19 f4       	brne	.+6      	; 0xbb8 <SendDataMasterAskedFor+0x10c>
 bb2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <lis_rowselect>
 bb6:	3c c0       	rjmp	.+120    	; 0xc30 <SendDataMasterAskedFor+0x184>
 bb8:	8d 30       	cpi	r24, 0x0D	; 13
 bba:	11 f4       	brne	.+4      	; 0xbc0 <SendDataMasterAskedFor+0x114>
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	1b c0       	rjmp	.+54     	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 bc0:	8e 30       	cpi	r24, 0x0E	; 14
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <SendDataMasterAskedFor+0x11c>
 bc4:	82 e0       	ldi	r24, 0x02	; 2
 bc6:	17 c0       	rjmp	.+46     	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 bc8:	8f 30       	cpi	r24, 0x0F	; 15
 bca:	11 f4       	brne	.+4      	; 0xbd0 <SendDataMasterAskedFor+0x124>
 bcc:	83 e0       	ldi	r24, 0x03	; 3
 bce:	13 c0       	rjmp	.+38     	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 bd0:	80 31       	cpi	r24, 0x10	; 16
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <SendDataMasterAskedFor+0x12c>
 bd4:	84 e0       	ldi	r24, 0x04	; 4
 bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 bd8:	81 31       	cpi	r24, 0x11	; 17
 bda:	11 f4       	brne	.+4      	; 0xbe0 <SendDataMasterAskedFor+0x134>
 bdc:	85 e0       	ldi	r24, 0x05	; 5
 bde:	0b c0       	rjmp	.+22     	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 be0:	82 31       	cpi	r24, 0x12	; 18
 be2:	11 f4       	brne	.+4      	; 0xbe8 <SendDataMasterAskedFor+0x13c>
 be4:	86 e0       	ldi	r24, 0x06	; 6
 be6:	07 c0       	rjmp	.+14     	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 be8:	83 31       	cpi	r24, 0x13	; 19
 bea:	11 f4       	brne	.+4      	; 0xbf0 <SendDataMasterAskedFor+0x144>
 bec:	87 e0       	ldi	r24, 0x07	; 7
 bee:	03 c0       	rjmp	.+6      	; 0xbf6 <SendDataMasterAskedFor+0x14a>
 bf0:	84 31       	cpi	r24, 0x14	; 20
 bf2:	21 f4       	brne	.+8      	; 0xbfc <SendDataMasterAskedFor+0x150>
 bf4:	88 e0       	ldi	r24, 0x08	; 8
 bf6:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <lis_rowselect>
 bfa:	1a c0       	rjmp	.+52     	; 0xc30 <SendDataMasterAskedFor+0x184>
 bfc:	87 30       	cpi	r24, 0x07	; 7
 bfe:	51 f4       	brne	.+20     	; 0xc14 <SendDataMasterAskedFor+0x168>
 c00:	0f 90       	pop	r0
 c02:	0f 90       	pop	r0
 c04:	df 91       	pop	r29
 c06:	cf 91       	pop	r28
 c08:	1f 91       	pop	r17
 c0a:	0f 91       	pop	r16
 c0c:	ff 90       	pop	r15
 c0e:	ef 90       	pop	r14
 c10:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <WriteCfgToLis>
 c14:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <slave_ignore>
 c18:	89 17       	cp	r24, r25
 c1a:	51 f0       	breq	.+20     	; 0xc30 <SendDataMasterAskedFor+0x184>
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	0c 94 10 02 	jmp	0x420	; 0x420 <IndicateUnknownCommand>
 c30:	0f 90       	pop	r0
 c32:	0f 90       	pop	r0
 c34:	df 91       	pop	r29
 c36:	cf 91       	pop	r28
 c38:	1f 91       	pop	r17
 c3a:	0f 91       	pop	r16
 c3c:	ff 90       	pop	r15
 c3e:	ef 90       	pop	r14
 c40:	08 95       	ret

00000c42 <RespondToRequestsForData>:
 c42:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 c46:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 c4a:	09 95       	icall
 c4c:	81 11       	cpse	r24, r1
 c4e:	0c 94 56 05 	jmp	0xaac	; 0xaac <SendDataMasterAskedFor>
 c52:	08 95       	ret

00000c54 <All_debug_leds_turn_on_and_turn_green>:
 c54:	0e 94 86 00 	call	0x10c	; 0x10c <DebugLedsTurnAllOn>
 c58:	0c 94 a9 00 	jmp	0x152	; 0x152 <DebugLedsTurnAllGreen>

00000c5c <main>:
 c5c:	0e 94 2a 06 	call	0xc54	; 0xc54 <All_debug_leds_turn_on_and_turn_green>
 c60:	0e 94 07 01 	call	0x20e	; 0x20e <SpiSlaveInit>
 c64:	0e 94 21 01 	call	0x242	; 0x242 <UartSpiInit>
 c68:	0e 94 92 01 	call	0x324	; 0x324 <LisInit>
 c6c:	0e 94 21 06 	call	0xc42	; 0xc42 <RespondToRequestsForData>
 c70:	fd cf       	rjmp	.-6      	; 0xc6c <main+0x10>

00000c72 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 c72:	1f 92       	push	r1
 c74:	0f 92       	push	r0
 c76:	0f b6       	in	r0, 0x3f	; 63
 c78:	0f 92       	push	r0
 c7a:	11 24       	eor	r1, r1
 c7c:	2f 93       	push	r18
 c7e:	3f 93       	push	r19
 c80:	4f 93       	push	r20
 c82:	5f 93       	push	r21
 c84:	6f 93       	push	r22
 c86:	7f 93       	push	r23
 c88:	8f 93       	push	r24
 c8a:	9f 93       	push	r25
 c8c:	af 93       	push	r26
 c8e:	bf 93       	push	r27
 c90:	ef 93       	push	r30
 c92:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 c94:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <DoTaskForThisTest>
 c98:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <DoTaskForThisTest+0x1>
 c9c:	09 95       	icall
}
 c9e:	ff 91       	pop	r31
 ca0:	ef 91       	pop	r30
 ca2:	bf 91       	pop	r27
 ca4:	af 91       	pop	r26
 ca6:	9f 91       	pop	r25
 ca8:	8f 91       	pop	r24
 caa:	7f 91       	pop	r23
 cac:	6f 91       	pop	r22
 cae:	5f 91       	pop	r21
 cb0:	4f 91       	pop	r20
 cb2:	3f 91       	pop	r19
 cb4:	2f 91       	pop	r18
 cb6:	0f 90       	pop	r0
 cb8:	0f be       	out	0x3f, r0	; 63
 cba:	0f 90       	pop	r0
 cbc:	1f 90       	pop	r1
 cbe:	18 95       	reti

00000cc0 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 cc0:	1f 92       	push	r1
 cc2:	0f 92       	push	r0
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	0f 92       	push	r0
 cc8:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 cca:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 ccc:	0f 90       	pop	r0
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	0f 90       	pop	r0
 cd2:	1f 90       	pop	r1
 cd4:	18 95       	reti

00000cd6 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 cd6:	1f 92       	push	r1
 cd8:	0f 92       	push	r0
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	0f 92       	push	r0
 cde:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 ce0:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 ce2:	0f 90       	pop	r0
 ce4:	0f be       	out	0x3f, r0	; 63
 ce6:	0f 90       	pop	r0
 ce8:	1f 90       	pop	r1
 cea:	18 95       	reti

00000cec <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 cec:	8a 95       	dec	r24
 cee:	f1 f7       	brne	.-4      	; 0xcec <Delay3CpuCyclesPerTick_Implementation>
 cf0:	08 95       	ret

00000cf2 <__udivmodsi4>:
 cf2:	a1 e2       	ldi	r26, 0x21	; 33
 cf4:	1a 2e       	mov	r1, r26
 cf6:	aa 1b       	sub	r26, r26
 cf8:	bb 1b       	sub	r27, r27
 cfa:	fd 01       	movw	r30, r26
 cfc:	0d c0       	rjmp	.+26     	; 0xd18 <__udivmodsi4_ep>

00000cfe <__udivmodsi4_loop>:
 cfe:	aa 1f       	adc	r26, r26
 d00:	bb 1f       	adc	r27, r27
 d02:	ee 1f       	adc	r30, r30
 d04:	ff 1f       	adc	r31, r31
 d06:	a2 17       	cp	r26, r18
 d08:	b3 07       	cpc	r27, r19
 d0a:	e4 07       	cpc	r30, r20
 d0c:	f5 07       	cpc	r31, r21
 d0e:	20 f0       	brcs	.+8      	; 0xd18 <__udivmodsi4_ep>
 d10:	a2 1b       	sub	r26, r18
 d12:	b3 0b       	sbc	r27, r19
 d14:	e4 0b       	sbc	r30, r20
 d16:	f5 0b       	sbc	r31, r21

00000d18 <__udivmodsi4_ep>:
 d18:	66 1f       	adc	r22, r22
 d1a:	77 1f       	adc	r23, r23
 d1c:	88 1f       	adc	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	1a 94       	dec	r1
 d22:	69 f7       	brne	.-38     	; 0xcfe <__udivmodsi4_loop>
 d24:	60 95       	com	r22
 d26:	70 95       	com	r23
 d28:	80 95       	com	r24
 d2a:	90 95       	com	r25
 d2c:	9b 01       	movw	r18, r22
 d2e:	ac 01       	movw	r20, r24
 d30:	bd 01       	movw	r22, r26
 d32:	cf 01       	movw	r24, r30
 d34:	08 95       	ret

00000d36 <__umulhisi3>:
 d36:	a2 9f       	mul	r26, r18
 d38:	b0 01       	movw	r22, r0
 d3a:	b3 9f       	mul	r27, r19
 d3c:	c0 01       	movw	r24, r0
 d3e:	a3 9f       	mul	r26, r19
 d40:	70 0d       	add	r23, r0
 d42:	81 1d       	adc	r24, r1
 d44:	11 24       	eor	r1, r1
 d46:	91 1d       	adc	r25, r1
 d48:	b2 9f       	mul	r27, r18
 d4a:	70 0d       	add	r23, r0
 d4c:	81 1d       	adc	r24, r1
 d4e:	11 24       	eor	r1, r1
 d50:	91 1d       	adc	r25, r1
 d52:	08 95       	ret

00000d54 <_exit>:
 d54:	f8 94       	cli

00000d56 <__stop_program>:
 d56:	ff cf       	rjmp	.-2      	; 0xd56 <__stop_program>
