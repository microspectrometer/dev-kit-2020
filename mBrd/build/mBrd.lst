
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000008b0  00000944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000626  0080017e  0080017e  000009c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b8  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003435  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001201  00000000  00000000  00004221  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000168a  00000000  00000000  00005422  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  00006aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014f4  00000000  00000000  000072e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000955  00000000  00000000  000087d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000912d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_14>
  3c:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3a       	cpi	r26, 0xA4	; 164
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <main>
  9e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <BitIsSet+0xe>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <BitIsSet+0xa>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	28 23       	and	r18, r24
  ea:	39 23       	and	r19, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	23 2b       	or	r18, r19
  f0:	09 f4       	brne	.+2      	; 0xf4 <BitIsSet+0x20>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c0 91 7b 01 	lds	r28, 0x017B	; 0x80017b <DebugLeds_ddr>
  fe:	d0 91 7c 01 	lds	r29, 0x017C	; 0x80017c <DebugLeds_ddr+0x1>
 102:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <debug_led1>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10c:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <debug_led2>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 116:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <debug_led3>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 120:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <debug_led4>
 124:	ce 01       	movw	r24, r28
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000012e <DebugLedsTurnRed>:
 12e:	68 2f       	mov	r22, r24
 130:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <DebugLeds_port>
 134:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <DebugLeds_port+0x1>
 138:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000013c <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 140:	c0 91 79 01 	lds	r28, 0x0179	; 0x800179 <DebugLeds_port>
 144:	d0 91 7a 01 	lds	r29, 0x017A	; 0x80017a <DebugLeds_port+0x1>
 148:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <debug_led1>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 152:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <debug_led2>
 156:	ce 01       	movw	r24, r28
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 15c:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <debug_led3>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 166:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <debug_led4>
 16a:	ce 01       	movw	r24, r28
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 170:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000174 <ClearPendingSpiInterrupt_Implementation>:
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 174:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
 178:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
 17c:	09 95       	icall
 17e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 182:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 186:	09 94       	ijmp

00000188 <ReadSpiStatusRegister_Implementation>:
 188:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Spi_spsr>
 18c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Spi_spsr+0x1>
 190:	80 81       	ld	r24, Z
 192:	08 95       	ret

00000194 <ReadSpiDataRegister_Implementation>:
 194:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_spdr>
 198:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_spdr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <WriteSpiDataRegister_Implementation>:
 1a0:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_spdr>
 1a4:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_spdr+0x1>
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <DisableSpi_Implementation>:
 1ac:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Spi_Enable>
 1b0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Spi_spcr>
 1b4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <Spi_spcr+0x1>
 1b8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001bc <SpiSlaveSignalDataIsReady_Implementation>:
 1bc:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <Spi_Miso>
 1c0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Spi_port>
 1c4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Spi_port+0x1>
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
 1cc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 1d0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 1d4:	09 95       	icall
 1d6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 1da:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 1de:	09 94       	ijmp

000001e0 <EnableSpi_Implementation>:
 1e0:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Spi_Enable>
 1e4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Spi_spcr>
 1e8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <Spi_spcr+0x1>
 1ec:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001f0 <SpiTransferIsDone_Implementation>:
 1f0:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Spi_InterruptFlag>
 1f4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Spi_spsr>
 1f8:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <Spi_spsr+0x1>
 1fc:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

00000200 <SpiSlaveInit>:
 200:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <Spi_Miso>
 204:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Spi_ddr>
 208:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Spi_ddr+0x1>
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 210:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 214:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 218:	09 95       	icall
 21a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 21e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
 222:	09 94       	ijmp

00000224 <SpiSlaveRead>:
    EnableSpi();
}
void (*SpiSlaveSignalDataIsReady)(void) = SpiSlaveSignalDataIsReady_Implementation;
uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
 224:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 228:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 22c:	09 95       	icall
 22e:	88 23       	and	r24, r24
 230:	c9 f3       	breq	.-14     	; 0x224 <SpiSlaveRead>
    return ReadSpiDataRegister();
 232:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 236:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 23a:	09 94       	ijmp

0000023c <SpiSlaveSendBytes>:
}
void SpiSlaveSendBytes(uint8_t *bytes, uint16_t nbytes)
{
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	8c 01       	movw	r16, r24
 248:	06 0f       	add	r16, r22
 24a:	17 1f       	adc	r17, r23
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 24c:	c0 17       	cp	r28, r16
 24e:	d1 07       	cpc	r29, r17
 250:	99 f0       	breq	.+38     	; 0x278 <SpiSlaveSendBytes+0x3c>
    {
        /* *Spi_spdr = bytes[byte_index]; */
        WriteSpiDataRegister(bytes[byte_index]);
 252:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 256:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 25a:	89 91       	ld	r24, Y+
 25c:	09 95       	icall
        SpiSlaveSignalDataIsReady();
 25e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 262:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 266:	09 95       	icall
        while ( !SpiTransferIsDone() );
 268:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 26c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 270:	09 95       	icall
 272:	88 23       	and	r24, r24
 274:	c9 f3       	breq	.-14     	; 0x268 <SpiSlaveSendBytes+0x2c>
 276:	ea cf       	rjmp	.-44     	; 0x24c <SpiSlaveSendBytes+0x10>
    // The SPI master waits for MISO to go low after every read.
    // This gaurantees the next byte of data is ready.
    // The SPI master does not have to release SlaveSelect, but it can.
    // SlaveSelect being low should not impact the slave's ability to disable
    // SPI and pull MISO low.
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <ReadDataRegister>:
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
}
bool (*UartSpiTransferIsDone)(void) = Received8bits;
static uint8_t ReadDataRegister(void)
{
    return *UartSpi_data;
 282:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <UartSpi_data>
 286:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <UartSpi_data+0x1>
 28a:	80 81       	ld	r24, Z
}
 28c:	08 95       	ret

0000028e <Transfer16bits>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
 28e:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <UartSpi_data>
 292:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <UartSpi_data+0x1>
 296:	10 82       	st	Z, r1
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 298:	10 82       	st	Z, r1
 29a:	08 95       	ret

0000029c <StartAdcReadout>:
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
}
static void StartAdcReadout(void)
{
    ClearBit(UartSpi_port, UartSpi_AdcConv);
 29c:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_AdcConv>
 2a0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <UartSpi_port>
 2a4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UartSpi_port+0x1>
 2a8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000002ac <StartAdcConversion>:
}
void (*UartSpiStartAdcReadout)(void) = StartAdcReadout;
static void (*AdcConvIdleLow)(void) = StartAdcReadout;
static void StartAdcConversion(void)
{
    SetBit(UartSpi_port, UartSpi_AdcConv);
 2ac:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_AdcConv>
 2b0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <UartSpi_port>
 2b4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UartSpi_port+0x1>
 2b8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000002bc <TxBufferIsEmpty>:
/* =====[ UartSpiRead ]===== */
//
static bool TxBufferIsEmpty(void)
{
    // Check `data register empty` flag UDRE0
    return BitIsSet(UartSpi_csra, UartSpi_DataRegEmpty);
 2bc:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <UartSpi_DataRegEmpty>
 2c0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <UartSpi_csra>
 2c4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UartSpi_csra+0x1>
 2c8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000002cc <Received8bits>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 2cc:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <UartSpi_RxComplete>
 2d0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <UartSpi_csra>
 2d4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UartSpi_csra+0x1>
 2d8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000002dc <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 2e4:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <UartSpi_br>
 2e8:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <UartSpi_br+0x1>
 2ec:	f8 01       	movw	r30, r16
 2ee:	11 82       	std	Z+1, r1	; 0x01
 2f0:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 2f2:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <UartSpi_ddr>
 2f6:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <UartSpi_ddr+0x1>
 2fa:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <UartSpi_Sck>
 2fe:	ce 01       	movw	r24, r28
 300:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 304:	0e 94 4e 01 	call	0x29c	; 0x29c <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 308:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_AdcConv>
 30c:	ce 01       	movw	r24, r28
 30e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 312:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <UartSpi_csrc>
 316:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <UartSpi_csrc+0x1>
 31a:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <UartSpi_ModeSelect0>
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 324:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <UartSpi_ModeSelect1>
 328:	ce 01       	movw	r24, r28
 32a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 32e:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <UartSpi_ClockPolarity>
 332:	ce 01       	movw	r24, r28
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 338:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <UartSpi_ClockPhase>
 33c:	ce 01       	movw	r24, r28
 33e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 342:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <UartSpi_DataOrder>
 346:	ce 01       	movw	r24, r28
 348:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 34c:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <UartSpi_csrb>
 350:	d0 91 61 01 	lds	r29, 0x0161	; 0x800161 <UartSpi_csrb+0x1>
 354:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <UartSpi_RxEnable>
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 35e:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <UartSpi_TxEnable>
 362:	ce 01       	movw	r24, r28
 364:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 368:	f8 01       	movw	r30, r16
 36a:	11 82       	std	Z+1, r1	; 0x01
 36c:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <WaitForConversionToFinish>:
void (*UartSpiTransfer16bits)(void) = Transfer16bits;
void WaitForConversionToFinish(void)
{
    // conversion takes 4.66us max; one loop iter = 3 cpu
    uint8_t fifteen_ticks = 15;
    Delay3CpuCyclesPerTick(fifteen_ticks);
 378:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Delay3CpuCyclesPerTick>
 37c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Delay3CpuCyclesPerTick+0x1>
 380:	8f e0       	ldi	r24, 0x0F	; 15
 382:	09 94       	ijmp

00000384 <UartSpiRead>:
    // Adding in the overhead of function calls and setup, this should be well
    // over the 4.66us max.
    // TODO: measure actual AdcConv high-time on an oscilloscope.
}
void UartSpiRead(uint8_t *two_bytes)
{
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
    UartSpiStartAdcConversion();
 38a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <UartSpiStartAdcConversion>
 38e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <UartSpiStartAdcConversion+0x1>
 392:	09 95       	icall
    WaitForConversionToFinish();
 394:	0e 94 bc 01 	call	0x378	; 0x378 <WaitForConversionToFinish>
    UartSpiStartAdcReadout();
 398:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <UartSpiStartAdcReadout>
 39c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <UartSpiStartAdcReadout+0x1>
 3a0:	09 95       	icall
    while (!UartSpiTxBufferIsEmpty());
 3a2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <UartSpiTxBufferIsEmpty>
 3a6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <UartSpiTxBufferIsEmpty+0x1>
 3aa:	09 95       	icall
 3ac:	88 23       	and	r24, r24
 3ae:	c9 f3       	breq	.-14     	; 0x3a2 <UartSpiRead+0x1e>
    UartSpiTransfer16bits();
 3b0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <UartSpiTransfer16bits>
 3b4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <UartSpiTransfer16bits+0x1>
 3b8:	09 95       	icall
    while (!UartSpiTransferIsDone()) ;
 3ba:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UartSpiTransferIsDone>
 3be:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <UartSpiTransferIsDone+0x1>
 3c2:	09 95       	icall
 3c4:	88 23       	and	r24, r24
 3c6:	c9 f3       	breq	.-14     	; 0x3ba <UartSpiRead+0x36>
    *(two_bytes++)  = UartSpiReadDataRegister();   // MSB
 3c8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <UartSpiReadDataRegister>
 3cc:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <UartSpiReadDataRegister+0x1>
 3d0:	09 95       	icall
 3d2:	88 83       	st	Y, r24
    while (!UartSpiTransferIsDone()) ;
 3d4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UartSpiTransferIsDone>
 3d8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <UartSpiTransferIsDone+0x1>
 3dc:	09 95       	icall
 3de:	88 23       	and	r24, r24
 3e0:	c9 f3       	breq	.-14     	; 0x3d4 <UartSpiRead+0x50>
    *two_bytes      = UartSpiReadDataRegister();   // LSB
 3e2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <UartSpiReadDataRegister>
 3e6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <UartSpiReadDataRegister+0x1>
 3ea:	09 95       	icall
 3ec:	89 83       	std	Y+1, r24	; 0x01
    /* uint16_t adc_reading; */
    /* adc_reading = UartSpiReadDataRegister();    // MSB */
    /* adc_reading = adc_reading << 8; */
    /* adc_reading |= UartSpiReadDataRegister();   // LSB */
    /* return adc_reading; */
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 3f4:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <PwmResetCounterAtTop>
 3f8:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <PwmResetCounterAtTop+0x1>
 3fc:	09 95       	icall
    PwmTopIsOcr0a();
 3fe:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <PwmTopIsOcr0a>
 402:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <PwmTopIsOcr0a+0x1>
 406:	09 95       	icall
    PwmClkIsCpuClk();
 408:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <PwmClkIsCpuClk>
 40c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <PwmClkIsCpuClk+0x1>
 410:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 412:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Lis_clktop>
 416:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Lis_clktop+0x1>
 41a:	88 ec       	ldi	r24, 0xC8	; 200
 41c:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 41e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Lis_clkth>
 422:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <Lis_clkth+0x1>
 426:	20 81       	ld	r18, Z
 428:	26 95       	lsr	r18
 42a:	fc 01       	movw	r30, r24
 42c:	20 83       	st	Z, r18
 42e:	08 95       	ret

00000430 <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 430:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <PwmEnableOutputSetUntilMatch>
 434:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <PwmEnableOutputSetUntilMatch+0x1>
 438:	09 94       	ijmp

0000043a <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 440:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <Lis_PixSelect>
 444:	6c 2f       	mov	r22, r28
 446:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Lis_ddr2>
 44a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Lis_ddr2+0x1>
 44e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 452:	6c 2f       	mov	r22, r28
 454:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Lis_port2>
 458:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Lis_port2+0x1>
 45c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 460:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <Lis_ddr1>
 464:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <Lis_ddr1+0x1>
 468:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Lis_Clk>
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 472:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <Lis_Rst>
 476:	61 2f       	mov	r22, r17
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 47e:	61 2f       	mov	r22, r17
 480:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Lis_port1>
 484:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Lis_port1+0x1>
 488:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 48c:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Lis_Sync>
 490:	ce 01       	movw	r24, r28
 492:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 496:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <LisRunClkAt50kHz>
 49a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <LisRunClkAt50kHz+0x1>
 49e:	09 95       	icall
    LisClkOn();
 4a0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <LisClkOn>
 4a4:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <LisClkOn+0x1>
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 4ae:	09 94       	ijmp

000004b0 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 4b4:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <Pwm_tccr0a>
 4b8:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <Pwm_tccr0a+0x1>
 4bc:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Pwm_Wgm00>
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 4c6:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Pwm_Wgm01>
 4ca:	ce 01       	movw	r24, r28
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 4d0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000004d4 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 4d4:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <Pwm_Wgm02>
 4d8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Pwm_tccr0b>
 4dc:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Pwm_tccr0b+0x1>
 4e0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000004e4 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 4e8:	c0 91 3b 01 	lds	r28, 0x013B	; 0x80013b <Pwm_tccr0b>
 4ec:	d0 91 3c 01 	lds	r29, 0x013C	; 0x80013c <Pwm_tccr0b+0x1>
 4f0:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Pwm_Cs00>
 4f4:	ce 01       	movw	r24, r28
 4f6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 4fa:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Pwm_Cs01>
 4fe:	ce 01       	movw	r24, r28
 500:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 504:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <Pwm_Cs02>
 508:	ce 01       	movw	r24, r28
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 50e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000512 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 516:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <Pwm_tccr0a>
 51a:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <Pwm_tccr0a+0x1>
 51e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <Pwm_Com0b0>
 522:	ce 01       	movw	r24, r28
 524:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 528:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <Pwm_Com0b1>
 52c:	ce 01       	movw	r24, r28
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 532:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000536 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

0000053c <LisFrameReadout>:
 53c:	aa 9a       	sbi	0x15, 2	; 21
 53e:	aa 9b       	sbis	0x15, 2	; 21
 540:	fe cf       	rjmp	.-4      	; 0x53e <LisFrameReadout+0x2>
 542:	aa 9a       	sbi	0x15, 2	; 21
 544:	5e 9a       	sbi	0x0b, 6	; 11
 546:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <Lis_nticks_counter+0x1>
 54a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <Lis_nticks_counter>
 54e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Lis_nticks_counter>
 552:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Lis_nticks_counter+0x1>
 556:	9c 01       	movw	r18, r24
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <Lis_nticks_counter+0x1>
 560:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <Lis_nticks_counter>
 564:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <Lis_nticks_exposure>
 568:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <Lis_nticks_exposure+0x1>
 56c:	82 17       	cp	r24, r18
 56e:	93 07       	cpc	r25, r19
 570:	28 f4       	brcc	.+10     	; 0x57c <LisFrameReadout+0x40>
 572:	aa 9a       	sbi	0x15, 2	; 21
 574:	aa 9b       	sbis	0x15, 2	; 21
 576:	fe cf       	rjmp	.-4      	; 0x574 <LisFrameReadout+0x38>
 578:	aa 9a       	sbi	0x15, 2	; 21
 57a:	e9 cf       	rjmp	.-46     	; 0x54e <LisFrameReadout+0x12>
 57c:	5e 98       	cbi	0x0b, 6	; 11
 57e:	84 e8       	ldi	r24, 0x84	; 132
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pframe+0x1>
 586:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pframe>
 58a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 58e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
 592:	4f 9b       	sbis	0x09, 7	; 9
 594:	fe cf       	rjmp	.-4      	; 0x592 <LisFrameReadout+0x56>
 596:	4f 99       	sbic	0x09, 7	; 9
 598:	fe cf       	rjmp	.-4      	; 0x596 <LisFrameReadout+0x5a>
 59a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 59e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 5a2:	9c 01       	movw	r18, r24
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
 5ac:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
 5b0:	80 31       	cpi	r24, 0x10	; 16
 5b2:	93 40       	sbci	r25, 0x03	; 3
 5b4:	b8 f5       	brcc	.+110    	; 0x624 <LisFrameReadout+0xe8>
 5b6:	a9 9a       	sbi	0x15, 1	; 21
 5b8:	a9 9b       	sbis	0x15, 1	; 21
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <LisFrameReadout+0x7c>
 5bc:	a9 9a       	sbi	0x15, 1	; 21
 5be:	5a 9a       	sbi	0x0b, 2	; 11
 5c0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Delay3CpuCyclesPerTick>
 5c4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Delay3CpuCyclesPerTick+0x1>
 5c8:	8b e0       	ldi	r24, 0x0B	; 11
 5ca:	09 95       	icall
 5cc:	5a 98       	cbi	0x0b, 2	; 11
 5ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5d2:	85 ff       	sbrs	r24, 5
 5d4:	fc cf       	rjmp	.-8      	; 0x5ce <LisFrameReadout+0x92>
 5d6:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5da:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5e2:	87 ff       	sbrs	r24, 7
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <LisFrameReadout+0xa2>
 5e6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <pframe>
 5ea:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <pframe+0x1>
 5ee:	cf 01       	movw	r24, r30
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pframe+0x1>
 5f6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pframe>
 5fa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5fe:	80 83       	st	Z, r24
 600:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 604:	87 ff       	sbrs	r24, 7
 606:	fc cf       	rjmp	.-8      	; 0x600 <LisFrameReadout+0xc4>
 608:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <pframe>
 60c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <pframe+0x1>
 610:	cf 01       	movw	r24, r30
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pframe+0x1>
 618:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pframe>
 61c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 620:	80 83       	st	Z, r24
 622:	bb cf       	rjmp	.-138    	; 0x59a <LisFrameReadout+0x5e>
 624:	08 95       	ret

00000626 <SendDummyByte>:
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 62c:	81 ef       	ldi	r24, 0xF1	; 241
 62e:	8e bd       	out	0x2e, r24	; 46
 630:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 634:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 638:	09 94       	ijmp

0000063a <SendFourDummyBytes>:
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	00 d0       	rcall	.+0      	; 0x640 <SendFourDummyBytes+0x6>
 640:	00 d0       	rcall	.+0      	; 0x642 <SendFourDummyBytes+0x8>
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 64c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Delay3CpuCyclesPerTick+0x2>
 650:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Delay3CpuCyclesPerTick+0x3>
 654:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <Delay3CpuCyclesPerTick+0x4>
 658:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <Delay3CpuCyclesPerTick+0x5>
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	9a 83       	std	Y+2, r25	; 0x02
 660:	ab 83       	std	Y+3, r26	; 0x03
 662:	bc 83       	std	Y+4, r27	; 0x04
 664:	64 e0       	ldi	r22, 0x04	; 4
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	ce 01       	movw	r24, r28
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	0e 94 1e 01 	call	0x23c	; 0x23c <SpiSlaveSendBytes>
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <FillDummyFrameWithAlphabet>:
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	e4 e8       	ldi	r30, 0x84	; 132
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	ca e1       	ldi	r28, 0x1A	; 26
 68c:	d0 e0       	ldi	r29, 0x00	; 0
 68e:	c9 01       	movw	r24, r18
 690:	be 01       	movw	r22, r28
 692:	0e 94 42 04 	call	0x884	; 0x884 <__udivmodhi4>
 696:	8f 5b       	subi	r24, 0xBF	; 191
 698:	81 93       	st	Z+, r24
 69a:	2f 5f       	subi	r18, 0xFF	; 255
 69c:	3f 4f       	sbci	r19, 0xFF	; 255
 69e:	20 32       	cpi	r18, 0x20	; 32
 6a0:	86 e0       	ldi	r24, 0x06	; 6
 6a2:	38 07       	cpc	r19, r24
 6a4:	a1 f7       	brne	.-24     	; 0x68e <FillDummyFrameWithAlphabet+0x10>
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <FillDummyFrameWithAdcReadings>:
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	c4 e8       	ldi	r28, 0x84	; 132
 6b2:	d1 e0       	ldi	r29, 0x01	; 1
 6b4:	ce 01       	movw	r24, r28
 6b6:	0e 94 c2 01 	call	0x384	; 0x384 <UartSpiRead>
 6ba:	22 96       	adiw	r28, 0x02	; 2
 6bc:	87 e0       	ldi	r24, 0x07	; 7
 6be:	c4 3a       	cpi	r28, 0xA4	; 164
 6c0:	d8 07       	cpc	r29, r24
 6c2:	c1 f7       	brne	.-16     	; 0x6b4 <FillDummyFrameWithAdcReadings+0x8>
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <SendDummyFrame>:
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 6d0:	0e 94 3f 03 	call	0x67e	; 0x67e <FillDummyFrameWithAlphabet>
 6d4:	60 e2       	ldi	r22, 0x20	; 32
 6d6:	76 e0       	ldi	r23, 0x06	; 6
 6d8:	84 e8       	ldi	r24, 0x84	; 132
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0c 94 1e 01 	jmp	0x23c	; 0x23c <SpiSlaveSendBytes>

000006e0 <SendAdcReading>:
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	00 d0       	rcall	.+0      	; 0x6e6 <SendAdcReading+0x6>
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 6f0:	19 82       	std	Y+1, r1	; 0x01
 6f2:	1a 82       	std	Y+2, r1	; 0x02
 6f4:	ce 01       	movw	r24, r28
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	0e 94 c2 01 	call	0x384	; 0x384 <UartSpiRead>
 6fc:	62 e0       	ldi	r22, 0x02	; 2
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	ce 01       	movw	r24, r28
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	0e 94 1e 01 	call	0x23c	; 0x23c <SpiSlaveSendBytes>
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <SendFakeAdcReading>:
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	00 d0       	rcall	.+0      	; 0x718 <SendFakeAdcReading+0x6>
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 722:	82 e1       	ldi	r24, 0x12	; 18
 724:	89 83       	std	Y+1, r24	; 0x01
 726:	84 e3       	ldi	r24, 0x34	; 52
 728:	8a 83       	std	Y+2, r24	; 0x02
 72a:	62 e0       	ldi	r22, 0x02	; 2
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	ce 01       	movw	r24, r28
 730:	01 96       	adiw	r24, 0x01	; 1
 732:	0e 94 1e 01 	call	0x23c	; 0x23c <SpiSlaveSendBytes>
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <SendAdcFrame>:
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 746:	0e 94 56 03 	call	0x6ac	; 0x6ac <FillDummyFrameWithAdcReadings>
 74a:	60 e2       	ldi	r22, 0x20	; 32
 74c:	76 e0       	ldi	r23, 0x06	; 6
 74e:	84 e8       	ldi	r24, 0x84	; 132
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	0c 94 1e 01 	jmp	0x23c	; 0x23c <SpiSlaveSendBytes>

00000756 <SendLisFrame>:
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 75c:	83 e0       	ldi	r24, 0x03	; 3
 75e:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 762:	0e 94 9e 02 	call	0x53c	; 0x53c <LisFrameReadout>
 766:	60 e2       	ldi	r22, 0x20	; 32
 768:	76 e0       	ldi	r23, 0x06	; 6
 76a:	84 e8       	ldi	r24, 0x84	; 132
 76c:	91 e0       	ldi	r25, 0x01	; 1
 76e:	0c 94 1e 01 	jmp	0x23c	; 0x23c <SpiSlaveSendBytes>

00000772 <SendDataMasterAskedFor>:
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 778:	0e 94 12 01 	call	0x224	; 0x224 <SpiSlaveRead>
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	19 f4       	brne	.+6      	; 0x786 <SendDataMasterAskedFor+0x14>
 780:	0e 94 ab 03 	call	0x756	; 0x756 <SendLisFrame>
 784:	23 c0       	rjmp	.+70     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 786:	86 3f       	cpi	r24, 0xF6	; 246
 788:	19 f4       	brne	.+6      	; 0x790 <SendDataMasterAskedFor+0x1e>
 78a:	0e 94 a0 03 	call	0x740	; 0x740 <SendAdcFrame>
 78e:	1e c0       	rjmp	.+60     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 790:	81 3f       	cpi	r24, 0xF1	; 241
 792:	19 f4       	brne	.+6      	; 0x79a <SendDataMasterAskedFor+0x28>
 794:	0e 94 13 03 	call	0x626	; 0x626 <SendDummyByte>
 798:	19 c0       	rjmp	.+50     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 79a:	82 3f       	cpi	r24, 0xF2	; 242
 79c:	19 f4       	brne	.+6      	; 0x7a4 <SendDataMasterAskedFor+0x32>
 79e:	0e 94 1d 03 	call	0x63a	; 0x63a <SendFourDummyBytes>
 7a2:	14 c0       	rjmp	.+40     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 7a4:	83 3f       	cpi	r24, 0xF3	; 243
 7a6:	19 f4       	brne	.+6      	; 0x7ae <SendDataMasterAskedFor+0x3c>
 7a8:	0e 94 65 03 	call	0x6ca	; 0x6ca <SendDummyFrame>
 7ac:	0f c0       	rjmp	.+30     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 7ae:	84 3f       	cpi	r24, 0xF4	; 244
 7b0:	19 f4       	brne	.+6      	; 0x7b8 <SendDataMasterAskedFor+0x46>
 7b2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <SendAdcReading>
 7b6:	0a c0       	rjmp	.+20     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 7b8:	85 3f       	cpi	r24, 0xF5	; 245
 7ba:	19 f4       	brne	.+6      	; 0x7c2 <SendDataMasterAskedFor+0x50>
 7bc:	0e 94 89 03 	call	0x712	; 0x712 <SendFakeAdcReading>
 7c0:	05 c0       	rjmp	.+10     	; 0x7cc <SendDataMasterAskedFor+0x5a>
 7c2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <slave_ignore>
 7c6:	89 13       	cpse	r24, r25
 7c8:	0e 94 9b 02 	call	0x536	; 0x536 <IndicateUnknownCommand>
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

000007d2 <RespondToRequestsForData>:
 7d2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 7d6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 7da:	09 95       	icall
 7dc:	81 11       	cpse	r24, r1
 7de:	0e 94 b9 03 	call	0x772	; 0x772 <SendDataMasterAskedFor>
 7e2:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

000007e6 <All_debug_leds_turn_on_and_turn_green>:
 7e6:	0e 94 7b 00 	call	0xf6	; 0xf6 <DebugLedsTurnAllOn>
 7ea:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

000007ee <main>:
 7ee:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <All_debug_leds_turn_on_and_turn_green>
 7f2:	0e 94 00 01 	call	0x200	; 0x200 <SpiSlaveInit>
 7f6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <UartSpiInit>
 7fa:	0e 94 1d 02 	call	0x43a	; 0x43a <LisInit>
 7fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <RespondToRequestsForData>
 802:	fd cf       	rjmp	.-6      	; 0x7fe <main+0x10>

00000804 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
 80e:	2f 93       	push	r18
 810:	3f 93       	push	r19
 812:	4f 93       	push	r20
 814:	5f 93       	push	r21
 816:	6f 93       	push	r22
 818:	7f 93       	push	r23
 81a:	8f 93       	push	r24
 81c:	9f 93       	push	r25
 81e:	af 93       	push	r26
 820:	bf 93       	push	r27
 822:	ef 93       	push	r30
 824:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 826:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <DoTaskForThisTest>
 82a:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <DoTaskForThisTest+0x1>
 82e:	09 95       	icall
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 85c:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 872:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 87e:	8a 95       	dec	r24
 880:	f1 f7       	brne	.-4      	; 0x87e <Delay3CpuCyclesPerTick_Implementation>
 882:	08 95       	ret

00000884 <__udivmodhi4>:
 884:	aa 1b       	sub	r26, r26
 886:	bb 1b       	sub	r27, r27
 888:	51 e1       	ldi	r21, 0x11	; 17
 88a:	07 c0       	rjmp	.+14     	; 0x89a <__udivmodhi4_ep>

0000088c <__udivmodhi4_loop>:
 88c:	aa 1f       	adc	r26, r26
 88e:	bb 1f       	adc	r27, r27
 890:	a6 17       	cp	r26, r22
 892:	b7 07       	cpc	r27, r23
 894:	10 f0       	brcs	.+4      	; 0x89a <__udivmodhi4_ep>
 896:	a6 1b       	sub	r26, r22
 898:	b7 0b       	sbc	r27, r23

0000089a <__udivmodhi4_ep>:
 89a:	88 1f       	adc	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	5a 95       	dec	r21
 8a0:	a9 f7       	brne	.-22     	; 0x88c <__udivmodhi4_loop>
 8a2:	80 95       	com	r24
 8a4:	90 95       	com	r25
 8a6:	bc 01       	movw	r22, r24
 8a8:	cd 01       	movw	r24, r26
 8aa:	08 95       	ret

000008ac <_exit>:
 8ac:	f8 94       	cli

000008ae <__stop_program>:
 8ae:	ff cf       	rjmp	.-2      	; 0x8ae <__stop_program>
