
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800122  00800122  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af8  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00003674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c32  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c3  00000000  00000000  000046f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00004ab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  9e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c0 91 1f 01 	lds	r28, 0x011F	; 0x80011f <DebugLeds_ddr>
 102:	d0 91 20 01 	lds	r29, 0x0120	; 0x800120 <DebugLeds_ddr+0x1>
 106:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <debug_led1>
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 110:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <debug_led2>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 11a:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <debug_led3>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 124:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <debug_led4>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DebugLedsTurnRed>:
 134:	68 2f       	mov	r22, r24
 136:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <DebugLeds_port>
 13a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DebugLeds_port+0x1>
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 142:	08 95       	ret

00000144 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 1d 01 	lds	r28, 0x011D	; 0x80011d <DebugLeds_port>
 14c:	d0 91 1e 01 	lds	r29, 0x011E	; 0x80011e <DebugLeds_port+0x1>
 150:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <debug_led4>
 172:	ce 01       	movw	r24, r28
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <ClearPendingSpiInterrupt_Implementation>:
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 17e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ReadSpiStatusRegister>
 182:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ReadSpiStatusRegister+0x1>
 186:	09 95       	icall
 188:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 18c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 190:	09 95       	icall
 192:	08 95       	ret

00000194 <ReadSpiStatusRegister_Implementation>:
 194:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <Spi_spsr>
 198:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <Spi_spsr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <ReadSpiDataRegister_Implementation>:
 1a0:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <Spi_spdr>
 1a4:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <Spi_spdr+0x1>
 1a8:	80 81       	ld	r24, Z
 1aa:	08 95       	ret

000001ac <DisableSpi_Implementation>:
 1ac:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <Spi_Enable>
 1b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Spi_spcr>
 1b4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Spi_spcr+0x1>
 1b8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1bc:	08 95       	ret

000001be <EnableSpi_Implementation>:
 1be:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <Spi_Enable>
 1c2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Spi_spcr>
 1c6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Spi_spcr+0x1>
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1ce:	08 95       	ret

000001d0 <SpiTransferIsDone_Implementation>:
 1d0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Spi_InterruptFlag>
 1d4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Spi_spsr>
 1d8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <Spi_spsr+0x1>
 1dc:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 1e0:	08 95       	ret

000001e2 <SpiSlaveInit>:
 1e2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Spi_Miso>
 1e6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Spi_ddr>
 1ea:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Spi_ddr+0x1>
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1f2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 1f6:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 1fa:	09 95       	icall
 1fc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <ClearPendingSpiInterrupt>
 200:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <ClearPendingSpiInterrupt+0x1>
 204:	09 95       	icall
 206:	08 95       	ret

00000208 <SpiSlaveSignalDataIsReady>:
}
void SpiSlaveSignalDataIsReady(void)
{
    ClearBit(Spi_port, Spi_Miso);
 208:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Spi_Miso>
 20c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Spi_port>
 210:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Spi_port+0x1>
 214:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    DisableSpi();
 218:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <DisableSpi>
 21c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <DisableSpi+0x1>
 220:	09 95       	icall
    EnableSpi();
 222:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 226:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 22a:	09 95       	icall
 22c:	08 95       	ret

0000022e <SpiSlaveRead>:
}
uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
 22e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 232:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 236:	09 95       	icall
 238:	88 23       	and	r24, r24
 23a:	c9 f3       	breq	.-14     	; 0x22e <SpiSlaveRead>
    return ReadSpiDataRegister();
 23c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 240:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 244:	09 95       	icall
}
 246:	08 95       	ret

00000248 <__vector_17>:
    // This test only passes after flipping SW2 to SPI.
    /* SpiSlaveInit_should_make_Miso_output_a_hard_high(); // PASS 2018-08-03 */
    //
    // This test does not pass if the SPI master is enabled.
    /* SpiSlaveSignalDataIsReady_outputs_a_hard_low(); // FAIL 2018-08-03 */
    DebugLedsTurnRed(debug_led4);
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
 26a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <__data_end>
 26e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <__data_end+0x1>
 272:	09 95       	icall
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <App_version_of_Slave_receives_request_without_interrupts>:
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 29c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SpiSlaveInit>
 2a0:	0e 94 17 01 	call	0x22e	; 0x22e <SpiSlaveRead>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 2aa:	0e 94 04 01 	call	0x208	; 0x208 <SpiSlaveSignalDataIsReady>
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <App_version_of_Slave_receives_request_without_interrupts+0x1e>

000002b6 <main>:
    while (1);
}
int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 2b6:	0e 94 7d 00 	call	0xfa	; 0xfa <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 2ba:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    /* SPI_interrupt_routine_turns_debug_led1_red(); // PASS 2018-08-01 */
    /* SPI_read_in_ISR_and_show_data_on_debug_leds(); // PASS 2018-08-01 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    App_version_of_Slave_receives_request_without_interrupts();
 2be:	0e 94 4b 01 	call	0x296	; 0x296 <App_version_of_Slave_receives_request_without_interrupts>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
