
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000008f0  00000984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000626  0080017e  0080017e  00000a02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003461  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001219  00000000  00000000  00004295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ca  00000000  00000000  000054ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000854  00000000  00000000  00006b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000150f  00000000  00000000  000073cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d2  00000000  00000000  000088db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  000092ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_14>
  3c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3a       	cpi	r26, 0xA4	; 164
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 04 	call	0x82e	; 0x82e <main>
  9e:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <BitIsSet+0xe>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <BitIsSet+0xa>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	28 23       	and	r18, r24
  ea:	39 23       	and	r19, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	23 2b       	or	r18, r19
  f0:	09 f4       	brne	.+2      	; 0xf4 <BitIsSet+0x20>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c0 91 7b 01 	lds	r28, 0x017B	; 0x80017b <DebugLeds_ddr>
  fe:	d0 91 7c 01 	lds	r29, 0x017C	; 0x80017c <DebugLeds_ddr+0x1>
 102:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <debug_led1>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10c:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <debug_led2>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 116:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <debug_led3>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 120:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <debug_led4>
 124:	ce 01       	movw	r24, r28
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000012e <DebugLedsTurnRed>:
 12e:	68 2f       	mov	r22, r24
 130:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <DebugLeds_port>
 134:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <DebugLeds_port+0x1>
 138:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000013c <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 140:	c0 91 79 01 	lds	r28, 0x0179	; 0x800179 <DebugLeds_port>
 144:	d0 91 7a 01 	lds	r29, 0x017A	; 0x80017a <DebugLeds_port+0x1>
 148:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <debug_led1>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 152:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <debug_led2>
 156:	ce 01       	movw	r24, r28
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 15c:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <debug_led3>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 166:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <debug_led4>
 16a:	ce 01       	movw	r24, r28
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 170:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000174 <ClearPendingSpiInterrupt_Implementation>:
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 174:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
 178:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
 17c:	09 95       	icall
 17e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 182:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 186:	09 94       	ijmp

00000188 <ReadSpiStatusRegister_Implementation>:
 188:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Spi_spsr>
 18c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Spi_spsr+0x1>
 190:	80 81       	ld	r24, Z
 192:	08 95       	ret

00000194 <ReadSpiDataRegister_Implementation>:
 194:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_spdr>
 198:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_spdr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <WriteSpiDataRegister_Implementation>:
 1a0:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_spdr>
 1a4:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_spdr+0x1>
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <DisableSpi_Implementation>:
 1ac:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Spi_Enable>
 1b0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Spi_spcr>
 1b4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <Spi_spcr+0x1>
 1b8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001bc <SpiSlaveSignalDataIsReady_Implementation>:
 1bc:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <Spi_Miso>
 1c0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Spi_port>
 1c4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Spi_port+0x1>
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
 1cc:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 1d0:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 1d4:	09 95       	icall
 1d6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 1da:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 1de:	09 94       	ijmp

000001e0 <EnableSpi_Implementation>:
 1e0:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Spi_Enable>
 1e4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <Spi_spcr>
 1e8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <Spi_spcr+0x1>
 1ec:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001f0 <SpiTransferIsDone_Implementation>:
 1f0:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Spi_InterruptFlag>
 1f4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <Spi_spsr>
 1f8:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <Spi_spsr+0x1>
 1fc:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

00000200 <SpiClearFlagTransferIsDone>:
 200:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_spdr>
 204:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_spdr+0x1>
 208:	80 81       	ld	r24, Z
 20a:	08 95       	ret

0000020c <SpiSlaveInit>:
 20c:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <Spi_Miso>
 210:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Spi_ddr>
 214:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Spi_ddr+0x1>
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 21c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 220:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 224:	09 95       	icall
 226:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 22a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
 22e:	09 94       	ijmp

00000230 <SpiSlaveRead>:
    EnableSpi();
}
void (*SpiSlaveSignalDataIsReady)(void) = SpiSlaveSignalDataIsReady_Implementation;
uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
 230:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 234:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 238:	09 95       	icall
 23a:	88 23       	and	r24, r24
 23c:	c9 f3       	breq	.-14     	; 0x230 <SpiSlaveRead>
    return ReadSpiDataRegister();
 23e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 242:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 246:	09 94       	ijmp

00000248 <SpiSlaveSendBytes>:
}
void SpiSlaveSendBytes(uint8_t *bytes, uint16_t nbytes)
{
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	8c 01       	movw	r16, r24
 254:	06 0f       	add	r16, r22
 256:	17 1f       	adc	r17, r23
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 258:	c0 17       	cp	r28, r16
 25a:	d1 07       	cpc	r29, r17
 25c:	a9 f0       	breq	.+42     	; 0x288 <SpiSlaveSendBytes+0x40>
    {
        /* *Spi_spdr = bytes[byte_index]; */
        WriteSpiDataRegister(bytes[byte_index]);
 25e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 262:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 266:	89 91       	ld	r24, Y+
 268:	09 95       	icall
        SpiSlaveSignalDataIsReady();
 26a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 26e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 272:	09 95       	icall
        while ( !SpiTransferIsDone() );
 274:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 278:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 27c:	09 95       	icall
 27e:	88 23       	and	r24, r24
 280:	c9 f3       	breq	.-14     	; 0x274 <SpiSlaveSendBytes+0x2c>
        // Added 2018-08-23: I missed this before
        SpiClearFlagTransferIsDone(); // TODO: add unit tests for this
 282:	0e 94 00 01 	call	0x200	; 0x200 <SpiClearFlagTransferIsDone>
 286:	e8 cf       	rjmp	.-48     	; 0x258 <SpiSlaveSendBytes+0x10>
    // The SPI master waits for MISO to go low after every read.
    // This gaurantees the next byte of data is ready.
    // The SPI master does not have to release SlaveSelect, but it can.
    // SlaveSelect being low should not impact the slave's ability to disable
    // SPI and pull MISO low.
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <ReadDataRegister>:
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
}
bool (*UartSpiTransferIsDone)(void) = Received8bits;
static uint8_t ReadDataRegister(void)
{
    return *UartSpi_data;
 292:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <UartSpi_data>
 296:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <UartSpi_data+0x1>
 29a:	80 81       	ld	r24, Z
}
 29c:	08 95       	ret

0000029e <Transfer16bits>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
 29e:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <UartSpi_data>
 2a2:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <UartSpi_data+0x1>
 2a6:	10 82       	st	Z, r1
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 2a8:	10 82       	st	Z, r1
 2aa:	08 95       	ret

000002ac <StartAdcReadout>:
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
}
static void StartAdcReadout(void)
{
    ClearBit(UartSpi_port, UartSpi_AdcConv);
 2ac:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_AdcConv>
 2b0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <UartSpi_port>
 2b4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UartSpi_port+0x1>
 2b8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000002bc <StartAdcConversion>:
}
void (*UartSpiStartAdcReadout)(void) = StartAdcReadout;
static void (*AdcConvIdleLow)(void) = StartAdcReadout;
static void StartAdcConversion(void)
{
    SetBit(UartSpi_port, UartSpi_AdcConv);
 2bc:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_AdcConv>
 2c0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <UartSpi_port>
 2c4:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <UartSpi_port+0x1>
 2c8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000002cc <TxBufferIsEmpty>:
/* =====[ UartSpiRead ]===== */
//
static bool TxBufferIsEmpty(void)
{
    // Check `data register empty` flag UDRE0
    return BitIsSet(UartSpi_csra, UartSpi_DataRegEmpty);
 2cc:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <UartSpi_DataRegEmpty>
 2d0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <UartSpi_csra>
 2d4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UartSpi_csra+0x1>
 2d8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000002dc <Received8bits>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 2dc:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <UartSpi_RxComplete>
 2e0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <UartSpi_csra>
 2e4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UartSpi_csra+0x1>
 2e8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000002ec <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 2f4:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <UartSpi_br>
 2f8:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <UartSpi_br+0x1>
 2fc:	f8 01       	movw	r30, r16
 2fe:	11 82       	std	Z+1, r1	; 0x01
 300:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 302:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <UartSpi_ddr>
 306:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <UartSpi_ddr+0x1>
 30a:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <UartSpi_Sck>
 30e:	ce 01       	movw	r24, r28
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 314:	0e 94 56 01 	call	0x2ac	; 0x2ac <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 318:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_AdcConv>
 31c:	ce 01       	movw	r24, r28
 31e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 322:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <UartSpi_csrc>
 326:	d0 91 5f 01 	lds	r29, 0x015F	; 0x80015f <UartSpi_csrc+0x1>
 32a:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <UartSpi_ModeSelect0>
 32e:	ce 01       	movw	r24, r28
 330:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 334:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <UartSpi_ModeSelect1>
 338:	ce 01       	movw	r24, r28
 33a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 33e:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <UartSpi_ClockPolarity>
 342:	ce 01       	movw	r24, r28
 344:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 348:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <UartSpi_ClockPhase>
 34c:	ce 01       	movw	r24, r28
 34e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 352:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <UartSpi_DataOrder>
 356:	ce 01       	movw	r24, r28
 358:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 35c:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <UartSpi_csrb>
 360:	d0 91 61 01 	lds	r29, 0x0161	; 0x800161 <UartSpi_csrb+0x1>
 364:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <UartSpi_RxEnable>
 368:	ce 01       	movw	r24, r28
 36a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 36e:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <UartSpi_TxEnable>
 372:	ce 01       	movw	r24, r28
 374:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 378:	f8 01       	movw	r30, r16
 37a:	11 82       	std	Z+1, r1	; 0x01
 37c:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <WaitForConversionToFinish>:
void (*UartSpiTransfer16bits)(void) = Transfer16bits;
void WaitForConversionToFinish(void)
{
    // conversion takes 4.66us max; one loop iter = 3 cpu
    uint8_t fifteen_ticks = 15;
    Delay3CpuCyclesPerTick(fifteen_ticks);
 388:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Delay3CpuCyclesPerTick>
 38c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Delay3CpuCyclesPerTick+0x1>
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	09 94       	ijmp

00000394 <UartSpiRead>:
    // Adding in the overhead of function calls and setup, this should be well
    // over the 4.66us max.
    // TODO: measure actual AdcConv high-time on an oscilloscope.
}
void UartSpiRead(uint8_t *two_bytes)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
    UartSpiStartAdcConversion();
 39a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <UartSpiStartAdcConversion>
 39e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <UartSpiStartAdcConversion+0x1>
 3a2:	09 95       	icall
    WaitForConversionToFinish();
 3a4:	0e 94 c4 01 	call	0x388	; 0x388 <WaitForConversionToFinish>
    UartSpiStartAdcReadout();
 3a8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <UartSpiStartAdcReadout>
 3ac:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <UartSpiStartAdcReadout+0x1>
 3b0:	09 95       	icall
    while (!UartSpiTxBufferIsEmpty());
 3b2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <UartSpiTxBufferIsEmpty>
 3b6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <UartSpiTxBufferIsEmpty+0x1>
 3ba:	09 95       	icall
 3bc:	88 23       	and	r24, r24
 3be:	c9 f3       	breq	.-14     	; 0x3b2 <UartSpiRead+0x1e>
    UartSpiTransfer16bits();
 3c0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <UartSpiTransfer16bits>
 3c4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <UartSpiTransfer16bits+0x1>
 3c8:	09 95       	icall
    while (!UartSpiTransferIsDone()) ;
 3ca:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UartSpiTransferIsDone>
 3ce:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <UartSpiTransferIsDone+0x1>
 3d2:	09 95       	icall
 3d4:	88 23       	and	r24, r24
 3d6:	c9 f3       	breq	.-14     	; 0x3ca <UartSpiRead+0x36>
    *(two_bytes++)  = UartSpiReadDataRegister();   // MSB
 3d8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <UartSpiReadDataRegister>
 3dc:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <UartSpiReadDataRegister+0x1>
 3e0:	09 95       	icall
 3e2:	88 83       	st	Y, r24
    while (!UartSpiTransferIsDone()) ;
 3e4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <UartSpiTransferIsDone>
 3e8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <UartSpiTransferIsDone+0x1>
 3ec:	09 95       	icall
 3ee:	88 23       	and	r24, r24
 3f0:	c9 f3       	breq	.-14     	; 0x3e4 <UartSpiRead+0x50>
    *two_bytes      = UartSpiReadDataRegister();   // LSB
 3f2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <UartSpiReadDataRegister>
 3f6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <UartSpiReadDataRegister+0x1>
 3fa:	09 95       	icall
 3fc:	89 83       	std	Y+1, r24	; 0x01
    /* uint16_t adc_reading; */
    /* adc_reading = UartSpiReadDataRegister();    // MSB */
    /* adc_reading = adc_reading << 8; */
    /* adc_reading |= UartSpiReadDataRegister();   // LSB */
    /* return adc_reading; */
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 404:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <PwmResetCounterAtTop>
 408:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <PwmResetCounterAtTop+0x1>
 40c:	09 95       	icall
    PwmTopIsOcr0a();
 40e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <PwmTopIsOcr0a>
 412:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <PwmTopIsOcr0a+0x1>
 416:	09 95       	icall
    PwmClkIsCpuClk();
 418:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <PwmClkIsCpuClk>
 41c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <PwmClkIsCpuClk+0x1>
 420:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 422:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Lis_clktop>
 426:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Lis_clktop+0x1>
 42a:	88 ec       	ldi	r24, 0xC8	; 200
 42c:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 42e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Lis_clkth>
 432:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <Lis_clkth+0x1>
 436:	20 81       	ld	r18, Z
 438:	26 95       	lsr	r18
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
 43e:	08 95       	ret

00000440 <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 440:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <PwmEnableOutputSetUntilMatch>
 444:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <PwmEnableOutputSetUntilMatch+0x1>
 448:	09 94       	ijmp

0000044a <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 450:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <Lis_PixSelect>
 454:	6c 2f       	mov	r22, r28
 456:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <Lis_ddr2>
 45a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <Lis_ddr2+0x1>
 45e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 462:	6c 2f       	mov	r22, r28
 464:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Lis_port2>
 468:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <Lis_port2+0x1>
 46c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 470:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <Lis_ddr1>
 474:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <Lis_ddr1+0x1>
 478:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <Lis_Clk>
 47c:	ce 01       	movw	r24, r28
 47e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 482:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <Lis_Rst>
 486:	61 2f       	mov	r22, r17
 488:	ce 01       	movw	r24, r28
 48a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 48e:	61 2f       	mov	r22, r17
 490:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Lis_port1>
 494:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <Lis_port1+0x1>
 498:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 49c:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Lis_Sync>
 4a0:	ce 01       	movw	r24, r28
 4a2:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 4a6:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <LisRunClkAt50kHz>
 4aa:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <LisRunClkAt50kHz+0x1>
 4ae:	09 95       	icall
    LisClkOn();
 4b0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <LisClkOn>
 4b4:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <LisClkOn+0x1>
}
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 4be:	09 94       	ijmp

000004c0 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 4c4:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <Pwm_tccr0a>
 4c8:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <Pwm_tccr0a+0x1>
 4cc:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Pwm_Wgm00>
 4d0:	ce 01       	movw	r24, r28
 4d2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 4d6:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Pwm_Wgm01>
 4da:	ce 01       	movw	r24, r28
}
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 4e0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000004e4 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 4e4:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <Pwm_Wgm02>
 4e8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Pwm_tccr0b>
 4ec:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Pwm_tccr0b+0x1>
 4f0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000004f4 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 4f8:	c0 91 3b 01 	lds	r28, 0x013B	; 0x80013b <Pwm_tccr0b>
 4fc:	d0 91 3c 01 	lds	r29, 0x013C	; 0x80013c <Pwm_tccr0b+0x1>
 500:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <Pwm_Cs00>
 504:	ce 01       	movw	r24, r28
 506:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 50a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <Pwm_Cs01>
 50e:	ce 01       	movw	r24, r28
 510:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 514:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <Pwm_Cs02>
 518:	ce 01       	movw	r24, r28
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 51e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000522 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 526:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <Pwm_tccr0a>
 52a:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <Pwm_tccr0a+0x1>
 52e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <Pwm_Com0b0>
 532:	ce 01       	movw	r24, r28
 534:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 538:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <Pwm_Com0b1>
 53c:	ce 01       	movw	r24, r28
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 542:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000546 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

0000054c <LisFrameReadout>:
 54c:	aa 9a       	sbi	0x15, 2	; 21
 54e:	aa 9b       	sbis	0x15, 2	; 21
 550:	fe cf       	rjmp	.-4      	; 0x54e <LisFrameReadout+0x2>
 552:	aa 9a       	sbi	0x15, 2	; 21
 554:	5e 9a       	sbi	0x0b, 6	; 11
 556:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <Lis_nticks_counter+0x1>
 55a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <Lis_nticks_counter>
 55e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Lis_nticks_counter>
 562:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Lis_nticks_counter+0x1>
 566:	9c 01       	movw	r18, r24
 568:	2f 5f       	subi	r18, 0xFF	; 255
 56a:	3f 4f       	sbci	r19, 0xFF	; 255
 56c:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <Lis_nticks_counter+0x1>
 570:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <Lis_nticks_counter>
 574:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <Lis_nticks_exposure>
 578:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <Lis_nticks_exposure+0x1>
 57c:	82 17       	cp	r24, r18
 57e:	93 07       	cpc	r25, r19
 580:	28 f4       	brcc	.+10     	; 0x58c <LisFrameReadout+0x40>
 582:	aa 9a       	sbi	0x15, 2	; 21
 584:	aa 9b       	sbis	0x15, 2	; 21
 586:	fe cf       	rjmp	.-4      	; 0x584 <LisFrameReadout+0x38>
 588:	aa 9a       	sbi	0x15, 2	; 21
 58a:	e9 cf       	rjmp	.-46     	; 0x55e <LisFrameReadout+0x12>
 58c:	5e 98       	cbi	0x0b, 6	; 11
 58e:	84 e8       	ldi	r24, 0x84	; 132
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pframe+0x1>
 596:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pframe>
 59a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 59e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
 5a2:	4f 9b       	sbis	0x09, 7	; 9
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <LisFrameReadout+0x56>
 5a6:	4f 99       	sbic	0x09, 7	; 9
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <LisFrameReadout+0x5a>
 5aa:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 5ae:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 5b2:	9c 01       	movw	r18, r24
 5b4:	2f 5f       	subi	r18, 0xFF	; 255
 5b6:	3f 4f       	sbci	r19, 0xFF	; 255
 5b8:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__data_end+0x1>
 5bc:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
 5c0:	80 31       	cpi	r24, 0x10	; 16
 5c2:	93 40       	sbci	r25, 0x03	; 3
 5c4:	b8 f5       	brcc	.+110    	; 0x634 <LisFrameReadout+0xe8>
 5c6:	a9 9a       	sbi	0x15, 1	; 21
 5c8:	a9 9b       	sbis	0x15, 1	; 21
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <LisFrameReadout+0x7c>
 5cc:	a9 9a       	sbi	0x15, 1	; 21
 5ce:	5a 9a       	sbi	0x0b, 2	; 11
 5d0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Delay3CpuCyclesPerTick>
 5d4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Delay3CpuCyclesPerTick+0x1>
 5d8:	8b e0       	ldi	r24, 0x0B	; 11
 5da:	09 95       	icall
 5dc:	5a 98       	cbi	0x0b, 2	; 11
 5de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5e2:	85 ff       	sbrs	r24, 5
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <LisFrameReadout+0x92>
 5e6:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5ea:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5ee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5f2:	87 ff       	sbrs	r24, 7
 5f4:	fc cf       	rjmp	.-8      	; 0x5ee <LisFrameReadout+0xa2>
 5f6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <pframe>
 5fa:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <pframe+0x1>
 5fe:	cf 01       	movw	r24, r30
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pframe+0x1>
 606:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pframe>
 60a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 60e:	80 83       	st	Z, r24
 610:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 614:	87 ff       	sbrs	r24, 7
 616:	fc cf       	rjmp	.-8      	; 0x610 <LisFrameReadout+0xc4>
 618:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <pframe>
 61c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <pframe+0x1>
 620:	cf 01       	movw	r24, r30
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <pframe+0x1>
 628:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <pframe>
 62c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 630:	80 83       	st	Z, r24
 632:	bb cf       	rjmp	.-138    	; 0x5aa <LisFrameReadout+0x5e>
 634:	08 95       	ret

00000636 <SendDummyByte>:
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 63c:	81 ef       	ldi	r24, 0xF1	; 241
 63e:	8e bd       	out	0x2e, r24	; 46
 640:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 644:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 648:	09 94       	ijmp

0000064a <SendFourDummyBytes>:
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 d0       	rcall	.+0      	; 0x650 <SendFourDummyBytes+0x6>
 650:	00 d0       	rcall	.+0      	; 0x652 <SendFourDummyBytes+0x8>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 65c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Delay3CpuCyclesPerTick+0x2>
 660:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Delay3CpuCyclesPerTick+0x3>
 664:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <Delay3CpuCyclesPerTick+0x4>
 668:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <Delay3CpuCyclesPerTick+0x5>
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	9a 83       	std	Y+2, r25	; 0x02
 670:	ab 83       	std	Y+3, r26	; 0x03
 672:	bc 83       	std	Y+4, r27	; 0x04
 674:	64 e0       	ldi	r22, 0x04	; 4
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	0e 94 24 01 	call	0x248	; 0x248 <SpiSlaveSendBytes>
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

0000068e <FillDummyFrameWithAlphabet>:
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	e4 e8       	ldi	r30, 0x84	; 132
 694:	f1 e0       	ldi	r31, 0x01	; 1
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	ca e1       	ldi	r28, 0x1A	; 26
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	c9 01       	movw	r24, r18
 6a0:	be 01       	movw	r22, r28
 6a2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__udivmodhi4>
 6a6:	8f 5b       	subi	r24, 0xBF	; 191
 6a8:	81 93       	st	Z+, r24
 6aa:	2f 5f       	subi	r18, 0xFF	; 255
 6ac:	3f 4f       	sbci	r19, 0xFF	; 255
 6ae:	20 32       	cpi	r18, 0x20	; 32
 6b0:	86 e0       	ldi	r24, 0x06	; 6
 6b2:	38 07       	cpc	r19, r24
 6b4:	a1 f7       	brne	.-24     	; 0x69e <FillDummyFrameWithAlphabet+0x10>
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <FillDummyFrameWithAdcReadings>:
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	c4 e8       	ldi	r28, 0x84	; 132
 6c2:	d1 e0       	ldi	r29, 0x01	; 1
 6c4:	ce 01       	movw	r24, r28
 6c6:	0e 94 ca 01 	call	0x394	; 0x394 <UartSpiRead>
 6ca:	22 96       	adiw	r28, 0x02	; 2
 6cc:	87 e0       	ldi	r24, 0x07	; 7
 6ce:	c4 3a       	cpi	r28, 0xA4	; 164
 6d0:	d8 07       	cpc	r29, r24
 6d2:	c1 f7       	brne	.-16     	; 0x6c4 <FillDummyFrameWithAdcReadings+0x8>
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

000006da <SendDummyFrame>:
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 6e0:	0e 94 47 03 	call	0x68e	; 0x68e <FillDummyFrameWithAlphabet>
 6e4:	60 e2       	ldi	r22, 0x20	; 32
 6e6:	76 e0       	ldi	r23, 0x06	; 6
 6e8:	84 e8       	ldi	r24, 0x84	; 132
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0c 94 24 01 	jmp	0x248	; 0x248 <SpiSlaveSendBytes>

000006f0 <SendAdcReading>:
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <SendAdcReading+0x6>
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 700:	19 82       	std	Y+1, r1	; 0x01
 702:	1a 82       	std	Y+2, r1	; 0x02
 704:	ce 01       	movw	r24, r28
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	0e 94 ca 01 	call	0x394	; 0x394 <UartSpiRead>
 70c:	62 e0       	ldi	r22, 0x02	; 2
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	ce 01       	movw	r24, r28
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	0e 94 24 01 	call	0x248	; 0x248 <SpiSlaveSendBytes>
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	08 95       	ret

00000722 <SendFakeAdcReading>:
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	00 d0       	rcall	.+0      	; 0x728 <SendFakeAdcReading+0x6>
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 732:	82 e1       	ldi	r24, 0x12	; 18
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	84 e3       	ldi	r24, 0x34	; 52
 738:	8a 83       	std	Y+2, r24	; 0x02
 73a:	62 e0       	ldi	r22, 0x02	; 2
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	ce 01       	movw	r24, r28
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	0e 94 24 01 	call	0x248	; 0x248 <SpiSlaveSendBytes>
 746:	0f 90       	pop	r0
 748:	0f 90       	pop	r0
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <SendAdcFrame>:
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 756:	0e 94 5e 03 	call	0x6bc	; 0x6bc <FillDummyFrameWithAdcReadings>
 75a:	60 e2       	ldi	r22, 0x20	; 32
 75c:	76 e0       	ldi	r23, 0x06	; 6
 75e:	84 e8       	ldi	r24, 0x84	; 132
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0c 94 24 01 	jmp	0x248	; 0x248 <SpiSlaveSendBytes>

00000766 <SendLisFrame>:
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 776:	0e 94 a6 02 	call	0x54c	; 0x54c <LisFrameReadout>
 77a:	c4 e8       	ldi	r28, 0x84	; 132
 77c:	d1 e0       	ldi	r29, 0x01	; 1
 77e:	89 91       	ld	r24, Y+
 780:	8e bd       	out	0x2e, r24	; 46
 782:	2c 98       	cbi	0x05, 4	; 5
 784:	8c b5       	in	r24, 0x2c	; 44
 786:	8f 7b       	andi	r24, 0xBF	; 191
 788:	8c bd       	out	0x2c, r24	; 44
 78a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Delay3CpuCyclesPerTick>
 78e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Delay3CpuCyclesPerTick+0x1>
 792:	8a e0       	ldi	r24, 0x0A	; 10
 794:	09 95       	icall
 796:	8c b5       	in	r24, 0x2c	; 44
 798:	80 64       	ori	r24, 0x40	; 64
 79a:	8c bd       	out	0x2c, r24	; 44
 79c:	0d b4       	in	r0, 0x2d	; 45
 79e:	07 fe       	sbrs	r0, 7
 7a0:	fd cf       	rjmp	.-6      	; 0x79c <SendLisFrame+0x36>
 7a2:	8e b5       	in	r24, 0x2e	; 46
 7a4:	87 e0       	ldi	r24, 0x07	; 7
 7a6:	c4 3a       	cpi	r28, 0xA4	; 164
 7a8:	d8 07       	cpc	r29, r24
 7aa:	49 f7       	brne	.-46     	; 0x77e <SendLisFrame+0x18>
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <SendDataMasterAskedFor>:
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	0e 94 97 00 	call	0x12e	; 0x12e <DebugLedsTurnRed>
 7b8:	0e 94 18 01 	call	0x230	; 0x230 <SpiSlaveRead>
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	19 f4       	brne	.+6      	; 0x7c6 <SendDataMasterAskedFor+0x14>
 7c0:	0e 94 b3 03 	call	0x766	; 0x766 <SendLisFrame>
 7c4:	23 c0       	rjmp	.+70     	; 0x80c <SendDataMasterAskedFor+0x5a>
 7c6:	86 3f       	cpi	r24, 0xF6	; 246
 7c8:	19 f4       	brne	.+6      	; 0x7d0 <SendDataMasterAskedFor+0x1e>
 7ca:	0e 94 a8 03 	call	0x750	; 0x750 <SendAdcFrame>
 7ce:	1e c0       	rjmp	.+60     	; 0x80c <SendDataMasterAskedFor+0x5a>
 7d0:	81 3f       	cpi	r24, 0xF1	; 241
 7d2:	19 f4       	brne	.+6      	; 0x7da <SendDataMasterAskedFor+0x28>
 7d4:	0e 94 1b 03 	call	0x636	; 0x636 <SendDummyByte>
 7d8:	19 c0       	rjmp	.+50     	; 0x80c <SendDataMasterAskedFor+0x5a>
 7da:	82 3f       	cpi	r24, 0xF2	; 242
 7dc:	19 f4       	brne	.+6      	; 0x7e4 <SendDataMasterAskedFor+0x32>
 7de:	0e 94 25 03 	call	0x64a	; 0x64a <SendFourDummyBytes>
 7e2:	14 c0       	rjmp	.+40     	; 0x80c <SendDataMasterAskedFor+0x5a>
 7e4:	83 3f       	cpi	r24, 0xF3	; 243
 7e6:	19 f4       	brne	.+6      	; 0x7ee <SendDataMasterAskedFor+0x3c>
 7e8:	0e 94 6d 03 	call	0x6da	; 0x6da <SendDummyFrame>
 7ec:	0f c0       	rjmp	.+30     	; 0x80c <SendDataMasterAskedFor+0x5a>
 7ee:	84 3f       	cpi	r24, 0xF4	; 244
 7f0:	19 f4       	brne	.+6      	; 0x7f8 <SendDataMasterAskedFor+0x46>
 7f2:	0e 94 78 03 	call	0x6f0	; 0x6f0 <SendAdcReading>
 7f6:	0a c0       	rjmp	.+20     	; 0x80c <SendDataMasterAskedFor+0x5a>
 7f8:	85 3f       	cpi	r24, 0xF5	; 245
 7fa:	19 f4       	brne	.+6      	; 0x802 <SendDataMasterAskedFor+0x50>
 7fc:	0e 94 91 03 	call	0x722	; 0x722 <SendFakeAdcReading>
 800:	05 c0       	rjmp	.+10     	; 0x80c <SendDataMasterAskedFor+0x5a>
 802:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <slave_ignore>
 806:	89 13       	cpse	r24, r25
 808:	0e 94 a3 02 	call	0x546	; 0x546 <IndicateUnknownCommand>
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

00000812 <RespondToRequestsForData>:
 812:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 816:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 81a:	09 95       	icall
 81c:	81 11       	cpse	r24, r1
 81e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <SendDataMasterAskedFor>
 822:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

00000826 <All_debug_leds_turn_on_and_turn_green>:
 826:	0e 94 7b 00 	call	0xf6	; 0xf6 <DebugLedsTurnAllOn>
 82a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

0000082e <main>:
 82e:	0e 94 13 04 	call	0x826	; 0x826 <All_debug_leds_turn_on_and_turn_green>
 832:	0e 94 06 01 	call	0x20c	; 0x20c <SpiSlaveInit>
 836:	0e 94 76 01 	call	0x2ec	; 0x2ec <UartSpiInit>
 83a:	0e 94 25 02 	call	0x44a	; 0x44a <LisInit>
 83e:	0e 94 09 04 	call	0x812	; 0x812 <RespondToRequestsForData>
 842:	fd cf       	rjmp	.-6      	; 0x83e <main+0x10>

00000844 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 844:	1f 92       	push	r1
 846:	0f 92       	push	r0
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	0f 92       	push	r0
 84c:	11 24       	eor	r1, r1
 84e:	2f 93       	push	r18
 850:	3f 93       	push	r19
 852:	4f 93       	push	r20
 854:	5f 93       	push	r21
 856:	6f 93       	push	r22
 858:	7f 93       	push	r23
 85a:	8f 93       	push	r24
 85c:	9f 93       	push	r25
 85e:	af 93       	push	r26
 860:	bf 93       	push	r27
 862:	ef 93       	push	r30
 864:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 866:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <DoTaskForThisTest>
 86a:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <DoTaskForThisTest+0x1>
 86e:	09 95       	icall
}
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	7f 91       	pop	r23
 87e:	6f 91       	pop	r22
 880:	5f 91       	pop	r21
 882:	4f 91       	pop	r20
 884:	3f 91       	pop	r19
 886:	2f 91       	pop	r18
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 89c:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 8b2:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 8be:	8a 95       	dec	r24
 8c0:	f1 f7       	brne	.-4      	; 0x8be <Delay3CpuCyclesPerTick_Implementation>
 8c2:	08 95       	ret

000008c4 <__udivmodhi4>:
 8c4:	aa 1b       	sub	r26, r26
 8c6:	bb 1b       	sub	r27, r27
 8c8:	51 e1       	ldi	r21, 0x11	; 17
 8ca:	07 c0       	rjmp	.+14     	; 0x8da <__udivmodhi4_ep>

000008cc <__udivmodhi4_loop>:
 8cc:	aa 1f       	adc	r26, r26
 8ce:	bb 1f       	adc	r27, r27
 8d0:	a6 17       	cp	r26, r22
 8d2:	b7 07       	cpc	r27, r23
 8d4:	10 f0       	brcs	.+4      	; 0x8da <__udivmodhi4_ep>
 8d6:	a6 1b       	sub	r26, r22
 8d8:	b7 0b       	sbc	r27, r23

000008da <__udivmodhi4_ep>:
 8da:	88 1f       	adc	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	5a 95       	dec	r21
 8e0:	a9 f7       	brne	.-22     	; 0x8cc <__udivmodhi4_loop>
 8e2:	80 95       	com	r24
 8e4:	90 95       	com	r25
 8e6:	bc 01       	movw	r22, r24
 8e8:	cd 01       	movw	r24, r26
 8ea:	08 95       	ret

000008ec <_exit>:
 8ec:	f8 94       	cli

000008ee <__stop_program>:
 8ee:	ff cf       	rjmp	.-2      	; 0x8ee <__stop_program>
