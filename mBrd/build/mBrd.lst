
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f55  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b7  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000538  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056b  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  000027db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  8e:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SetBit>:
    *port ^= (1<<bit);
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
}
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <SetBit+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <SetBit+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <ClearBit>:
  ae:	fc 01       	movw	r30, r24
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <ClearBit+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <ClearBit+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <BitIsClear+0xc>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <BitIsClear+0x8>
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	8f 27       	eor	r24, r31
}
  dc:	81 70       	andi	r24, 0x01	; 1
  de:	08 95       	ret

000000e0 <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <DebugLeds_ddr>
  e8:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <DebugLeds_ddr+0x1>
  ec:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <debug_led1>
  f0:	ce 01       	movw	r24, r28
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
  f6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <debug_led2>
  fa:	ce 01       	movw	r24, r28
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 100:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <debug_led3>
 104:	ce 01       	movw	r24, r28
 106:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 10a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <debug_led4>
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <DebugLedsTurnRed>:
 11a:	68 2f       	mov	r22, r24
 11c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <DebugLeds_port>
 120:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DebugLeds_port+0x1>
 124:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 128:	08 95       	ret

0000012a <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 12e:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <DebugLeds_port>
 132:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <DebugLeds_port+0x1>
 136:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <debug_led1>
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 140:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <debug_led2>
 144:	ce 01       	movw	r24, r28
 146:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 14a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <debug_led3>
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 154:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <debug_led4>
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <SpiSlaveInit>:

void SpiSlaveInit(void)
{
    /* =====[ Configure user-defined pins in software. ]===== */
    // Make Spi_Miso an output pin.
    SetBit(Spi_ddr, Spi_Miso);
 164:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Spi_Miso>
 168:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Spi_ddr>
 16c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Spi_ddr+0x1>
 170:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>

    // Enable SPI.
    SetBit(Spi_spcr, Spi_Enable);
 174:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <Spi_Enable>
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Spi_spcr>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Spi_spcr+0x1>
 180:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 184:	08 95       	ret

00000186 <Turn_led3_red_when_SpiSlave_receives_a_byte>:
{
    /* =====[ Operate ]===== */
    // SPI Master sends a byte.
    /* =====[ Version without interrupts ]===== */
    // Do nothing until SPI Interrupt Flag is set.
    while( BitIsClear(Spi_spsr, Spi_InterruptFlag) );
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	8d e4       	ldi	r24, 0x4D	; 77
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsClear>
 190:	81 11       	cpse	r24, r1
 192:	f9 cf       	rjmp	.-14     	; 0x186 <Turn_led3_red_when_SpiSlave_receives_a_byte>
    DebugLedsTurnRed(debug_led3);
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 8d 00 	call	0x11a	; 0x11a <DebugLedsTurnRed>
 19a:	08 95       	ret

0000019c <main>:
}

int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 19c:	0e 94 70 00 	call	0xe0	; 0xe0 <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 1a0:	0e 94 95 00 	call	0x12a	; 0x12a <DebugLedsTurnAllGreen>
    /* =====[ test SpiSlave ]===== */
    SpiSlaveInit();
 1a4:	0e 94 b2 00 	call	0x164	; 0x164 <SpiSlaveInit>
    /* sei(); // Enable interrupts */
    Turn_led3_red_when_SpiSlave_receives_a_byte();
 1a8:	0e 94 c3 00 	call	0x186	; 0x186 <Turn_led3_red_when_SpiSlave_receives_a_byte>
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
