
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000627  0080017a  0080017a  00000b4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003649  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000123a  00000000  00000000  000045fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f7f  00000000  00000000  00005837  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f0  00000000  00000000  000077b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000169d  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b1a  00000000  00000000  00009745  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000a25f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_14>
  3c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 37       	cpi	r26, 0x7A	; 122
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	aa e7       	ldi	r26, 0x7A	; 122
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3a       	cpi	r26, 0xA1	; 161
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <main>
  9e:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
  bc:	fc 01       	movw	r30, r24
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <BitIsSet+0xe>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <BitIsSet+0xa>
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	28 23       	and	r18, r24
  ea:	39 23       	and	r19, r25
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	23 2b       	or	r18, r19
  f0:	09 f4       	brne	.+2      	; 0xf4 <BitIsSet+0x20>
  f2:	80 e0       	ldi	r24, 0x00	; 0
}
  f4:	08 95       	ret

000000f6 <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c0 91 78 01 	lds	r28, 0x0178	; 0x800178 <DebugLeds_ddr>
  fe:	d0 91 79 01 	lds	r29, 0x0179	; 0x800179 <DebugLeds_ddr+0x1>
 102:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <debug_led1>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10c:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <debug_led2>
 110:	ce 01       	movw	r24, r28
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 116:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <debug_led3>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 120:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <debug_led4>
 124:	ce 01       	movw	r24, r28
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000012e <DebugLedsTurnRed>:
 12e:	68 2f       	mov	r22, r24
 130:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <DebugLeds_port>
 134:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <DebugLeds_port+0x1>
 138:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000013c <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 140:	c0 91 76 01 	lds	r28, 0x0176	; 0x800176 <DebugLeds_port>
 144:	d0 91 77 01 	lds	r29, 0x0177	; 0x800177 <DebugLeds_port+0x1>
 148:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <debug_led1>
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 152:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <debug_led2>
 156:	ce 01       	movw	r24, r28
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 15c:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <debug_led3>
 160:	ce 01       	movw	r24, r28
 162:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 166:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <debug_led4>
 16a:	ce 01       	movw	r24, r28
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 170:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000174 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 174:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiStatusRegister>
 178:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiStatusRegister+0x1>
 17c:	09 95       	icall
 17e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 182:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 186:	09 94       	ijmp

00000188 <ReadSpiStatusRegister_Implementation>:
 188:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Spi_spsr>
 18c:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <Spi_spsr+0x1>
 190:	80 81       	ld	r24, Z
 192:	08 95       	ret

00000194 <ReadSpiDataRegister_Implementation>:
 194:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Spi_spdr>
 198:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Spi_spdr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <EnableSpi_Implementation>:
 1a0:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <Spi_Enable>
 1a4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Spi_spcr>
 1a8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Spi_spcr+0x1>
 1ac:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001b0 <SpiTransferIsDone_Implementation>:
 1b0:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <Spi_InterruptFlag>
 1b4:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Spi_spsr>
 1b8:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <Spi_spsr+0x1>
 1bc:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <BitIsSet>

000001c0 <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 1c0:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <Spi_Miso>
 1c4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <Spi_ddr>
 1c8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <Spi_ddr+0x1>
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 1d0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 1d4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 1d8:	09 95       	icall
    ClearPendingSpiInterrupt();
 1da:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ClearPendingSpiInterrupt>
 1de:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ClearPendingSpiInterrupt+0x1>
 1e2:	09 94       	ijmp

000001e4 <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 1e4:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <UartSpi_AdcConv>
 1e8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <UartSpi_port>
 1ec:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <UartSpi_port+0x1>
 1f0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001f4 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 1fc:	00 91 5d 01 	lds	r16, 0x015D	; 0x80015d <UartSpi_br>
 200:	10 91 5e 01 	lds	r17, 0x015E	; 0x80015e <UartSpi_br+0x1>
 204:	f8 01       	movw	r30, r16
 206:	11 82       	std	Z+1, r1	; 0x01
 208:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 20a:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <UartSpi_ddr>
 20e:	d0 91 66 01 	lds	r29, 0x0166	; 0x800166 <UartSpi_ddr+0x1>
 212:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <UartSpi_Sck>
 216:	ce 01       	movw	r24, r28
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 21c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 220:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <UartSpi_AdcConv>
 224:	ce 01       	movw	r24, r28
 226:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 22a:	c0 91 5f 01 	lds	r28, 0x015F	; 0x80015f <UartSpi_csrc>
 22e:	d0 91 60 01 	lds	r29, 0x0160	; 0x800160 <UartSpi_csrc+0x1>
 232:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <UartSpi_ModeSelect0>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 23c:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <UartSpi_ModeSelect1>
 240:	ce 01       	movw	r24, r28
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 246:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <UartSpi_ClockPolarity>
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 250:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <UartSpi_ClockPhase>
 254:	ce 01       	movw	r24, r28
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 25a:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <UartSpi_DataOrder>
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 264:	c0 91 61 01 	lds	r28, 0x0161	; 0x800161 <UartSpi_csrb>
 268:	d0 91 62 01 	lds	r29, 0x0162	; 0x800162 <UartSpi_csrb+0x1>
 26c:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <UartSpi_RxEnable>
 270:	ce 01       	movw	r24, r28
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 276:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <UartSpi_TxEnable>
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 280:	f8 01       	movw	r30, r16
 282:	11 82       	std	Z+1, r1	; 0x01
 284:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	08 95       	ret

00000290 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 290:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmResetCounterAtTop>
 294:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmResetCounterAtTop+0x1>
 298:	09 95       	icall
    PwmTopIsOcr0a();
 29a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmTopIsOcr0a>
 29e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmTopIsOcr0a+0x1>
 2a2:	09 95       	icall
    PwmClkIsCpuClk();
 2a4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmClkIsCpuClk>
 2a8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmClkIsCpuClk+0x1>
 2ac:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 2ae:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Lis_clktop>
 2b2:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Lis_clktop+0x1>
 2b6:	88 ec       	ldi	r24, 0xC8	; 200
 2b8:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 2ba:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Lis_clkth>
 2be:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Lis_clkth+0x1>
 2c2:	20 81       	ld	r18, Z
 2c4:	26 95       	lsr	r18
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	08 95       	ret

000002cc <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 2cc:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmEnableOutputSetUntilMatch>
 2d0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmEnableOutputSetUntilMatch+0x1>
 2d4:	09 94       	ijmp

000002d6 <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 2dc:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <Lis_PixSelect>
 2e0:	6c 2f       	mov	r22, r28
 2e2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <Lis_ddr2>
 2e6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <Lis_ddr2+0x1>
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 2ee:	6c 2f       	mov	r22, r28
 2f0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <Lis_port2>
 2f4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <Lis_port2+0x1>
 2f8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 2fc:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <Lis_ddr1>
 300:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <Lis_ddr1+0x1>
 304:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <Lis_Clk>
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 30e:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <Lis_Rst>
 312:	61 2f       	mov	r22, r17
 314:	ce 01       	movw	r24, r28
 316:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 31a:	61 2f       	mov	r22, r17
 31c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Lis_port1>
 320:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <Lis_port1+0x1>
 324:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 328:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <Lis_Sync>
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 332:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <LisRunClkAt50kHz>
 336:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <LisRunClkAt50kHz+0x1>
 33a:	09 95       	icall
    LisClkOn();
 33c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisClkOn>
 340:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisClkOn+0x1>
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 34a:	09 94       	ijmp

0000034c <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 350:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <Pwm_tccr0a>
 354:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <Pwm_tccr0a+0x1>
 358:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Pwm_Wgm00>
 35c:	ce 01       	movw	r24, r28
 35e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 362:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Pwm_Wgm01>
 366:	ce 01       	movw	r24, r28
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 36c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000370 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 370:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <Pwm_Wgm02>
 374:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Pwm_tccr0b>
 378:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Pwm_tccr0b+0x1>
 37c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000380 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 384:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <Pwm_tccr0b>
 388:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <Pwm_tccr0b+0x1>
 38c:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <Pwm_Cs00>
 390:	ce 01       	movw	r24, r28
 392:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 396:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <Pwm_Cs01>
 39a:	ce 01       	movw	r24, r28
 39c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3a0:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <Pwm_Cs02>
 3a4:	ce 01       	movw	r24, r28
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3aa:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000003ae <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 3b2:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <Pwm_tccr0a>
 3b6:	d0 91 43 01 	lds	r29, 0x0143	; 0x800143 <Pwm_tccr0a+0x1>
 3ba:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <Pwm_Com0b0>
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3c4:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <Pwm_Com0b1>
 3c8:	ce 01       	movw	r24, r28
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3ce:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003d2 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0c 94 97 00 	jmp	0x12e	; 0x12e <DebugLedsTurnRed>

000003d8 <LisFrameReadout>:
 3d8:	aa 9a       	sbi	0x15, 2	; 21
 3da:	aa 9b       	sbis	0x15, 2	; 21
 3dc:	fe cf       	rjmp	.-4      	; 0x3da <LisFrameReadout+0x2>
 3de:	aa 9a       	sbi	0x15, 2	; 21
 3e0:	5e 9a       	sbi	0x0b, 6	; 11
 3e2:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <Lis_nticks_counter+0x1>
 3e6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <Lis_nticks_counter>
 3ea:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Lis_nticks_counter>
 3ee:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Lis_nticks_counter+0x1>
 3f2:	9c 01       	movw	r18, r24
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <Lis_nticks_counter+0x1>
 3fc:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <Lis_nticks_counter>
 400:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <Lis_nticks_exposure>
 404:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <Lis_nticks_exposure+0x1>
 408:	82 17       	cp	r24, r18
 40a:	93 07       	cpc	r25, r19
 40c:	28 f4       	brcc	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	aa 9a       	sbi	0x15, 2	; 21
 410:	aa 9b       	sbis	0x15, 2	; 21
 412:	fe cf       	rjmp	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	aa 9a       	sbi	0x15, 2	; 21
 416:	e9 cf       	rjmp	.-46     	; 0x3ea <LisFrameReadout+0x12>
 418:	5e 98       	cbi	0x0b, 6	; 11
 41a:	81 e8       	ldi	r24, 0x81	; 129
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pframe+0x1>
 422:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pframe>
 426:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <Lis_npixels_counter+0x1>
 42a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <Lis_npixels_counter>
 42e:	4f 9b       	sbis	0x09, 7	; 9
 430:	fe cf       	rjmp	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 432:	4f 99       	sbic	0x09, 7	; 9
 434:	fe cf       	rjmp	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Lis_npixels_counter>
 43a:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Lis_npixels_counter+0x1>
 43e:	9c 01       	movw	r18, r24
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <Lis_npixels_counter+0x1>
 448:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <Lis_npixels_counter>
 44c:	80 31       	cpi	r24, 0x10	; 16
 44e:	93 40       	sbci	r25, 0x03	; 3
 450:	b8 f5       	brcc	.+110    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 452:	a9 9a       	sbi	0x15, 1	; 21
 454:	a9 9b       	sbis	0x15, 1	; 21
 456:	fe cf       	rjmp	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	a9 9a       	sbi	0x15, 1	; 21
 45a:	5a 9a       	sbi	0x0b, 2	; 11
 45c:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick>
 460:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick+0x1>
 464:	8b e0       	ldi	r24, 0x0B	; 11
 466:	09 95       	icall
 468:	5a 98       	cbi	0x0b, 2	; 11
 46a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 46e:	85 ff       	sbrs	r24, 5
 470:	fc cf       	rjmp	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 476:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 47a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 47e:	87 ff       	sbrs	r24, 7
 480:	fc cf       	rjmp	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <pframe>
 486:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <pframe+0x1>
 48a:	cf 01       	movw	r24, r30
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pframe+0x1>
 492:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pframe>
 496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 49a:	80 83       	st	Z, r24
 49c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4a0:	87 ff       	sbrs	r24, 7
 4a2:	fc cf       	rjmp	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <pframe>
 4a8:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <pframe+0x1>
 4ac:	cf 01       	movw	r24, r30
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pframe+0x1>
 4b4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pframe>
 4b8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4bc:	80 83       	st	Z, r24
 4be:	bb cf       	rjmp	.-138    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 4c0:	08 95       	ret

000004c2 <WriteCfgToLis>:
 4c2:	98 b1       	in	r25, 0x08	; 8
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	89 27       	eor	r24, r25
 4c8:	88 b9       	out	0x08, r24	; 8
 4ca:	98 b1       	in	r25, 0x08	; 8
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	89 27       	eor	r24, r25
 4d0:	88 b9       	out	0x08, r24	; 8
 4d2:	aa 9a       	sbi	0x15, 2	; 21
 4d4:	aa 9b       	sbis	0x15, 2	; 21
 4d6:	fe cf       	rjmp	.-4      	; 0x4d4 <WriteCfgToLis+0x12>
 4d8:	aa 9a       	sbi	0x15, 2	; 21
 4da:	28 9a       	sbi	0x05, 0	; 5
 4dc:	5e 98       	cbi	0x0b, 6	; 11
 4de:	a9 9a       	sbi	0x15, 1	; 21
 4e0:	a9 9b       	sbis	0x15, 1	; 21
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <WriteCfgToLis+0x1e>
 4e4:	a9 9a       	sbi	0x15, 1	; 21
 4e6:	aa 9a       	sbi	0x15, 2	; 21
 4e8:	aa 9b       	sbis	0x15, 2	; 21
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <WriteCfgToLis+0x26>
 4ec:	aa 9a       	sbi	0x15, 2	; 21
 4ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <lis_gain>
 4f2:	84 30       	cpi	r24, 0x04	; 4
 4f4:	91 f4       	brne	.+36     	; 0x51a <WriteCfgToLis+0x58>
 4f6:	5e 9a       	sbi	0x0b, 6	; 11
 4f8:	a9 9a       	sbi	0x15, 1	; 21
 4fa:	a9 9b       	sbis	0x15, 1	; 21
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <WriteCfgToLis+0x38>
 4fe:	a9 9a       	sbi	0x15, 1	; 21
 500:	aa 9a       	sbi	0x15, 2	; 21
 502:	aa 9b       	sbis	0x15, 2	; 21
 504:	fe cf       	rjmp	.-4      	; 0x502 <WriteCfgToLis+0x40>
 506:	aa 9a       	sbi	0x15, 2	; 21
 508:	5e 98       	cbi	0x0b, 6	; 11
 50a:	a9 9a       	sbi	0x15, 1	; 21
 50c:	a9 9b       	sbis	0x15, 1	; 21
 50e:	fe cf       	rjmp	.-4      	; 0x50c <WriteCfgToLis+0x4a>
 510:	a9 9a       	sbi	0x15, 1	; 21
 512:	aa 9a       	sbi	0x15, 2	; 21
 514:	aa 9b       	sbis	0x15, 2	; 21
 516:	fe cf       	rjmp	.-4      	; 0x514 <WriteCfgToLis+0x52>
 518:	39 c0       	rjmp	.+114    	; 0x58c <WriteCfgToLis+0xca>
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	91 f4       	brne	.+36     	; 0x542 <WriteCfgToLis+0x80>
 51e:	5e 98       	cbi	0x0b, 6	; 11
 520:	a9 9a       	sbi	0x15, 1	; 21
 522:	a9 9b       	sbis	0x15, 1	; 21
 524:	fe cf       	rjmp	.-4      	; 0x522 <WriteCfgToLis+0x60>
 526:	a9 9a       	sbi	0x15, 1	; 21
 528:	aa 9a       	sbi	0x15, 2	; 21
 52a:	aa 9b       	sbis	0x15, 2	; 21
 52c:	fe cf       	rjmp	.-4      	; 0x52a <WriteCfgToLis+0x68>
 52e:	aa 9a       	sbi	0x15, 2	; 21
 530:	5e 9a       	sbi	0x0b, 6	; 11
 532:	a9 9a       	sbi	0x15, 1	; 21
 534:	a9 9b       	sbis	0x15, 1	; 21
 536:	fe cf       	rjmp	.-4      	; 0x534 <WriteCfgToLis+0x72>
 538:	a9 9a       	sbi	0x15, 1	; 21
 53a:	aa 9a       	sbi	0x15, 2	; 21
 53c:	aa 9b       	sbis	0x15, 2	; 21
 53e:	fe cf       	rjmp	.-4      	; 0x53c <WriteCfgToLis+0x7a>
 540:	25 c0       	rjmp	.+74     	; 0x58c <WriteCfgToLis+0xca>
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	91 f4       	brne	.+36     	; 0x56a <WriteCfgToLis+0xa8>
 546:	5e 98       	cbi	0x0b, 6	; 11
 548:	a9 9a       	sbi	0x15, 1	; 21
 54a:	a9 9b       	sbis	0x15, 1	; 21
 54c:	fe cf       	rjmp	.-4      	; 0x54a <WriteCfgToLis+0x88>
 54e:	a9 9a       	sbi	0x15, 1	; 21
 550:	aa 9a       	sbi	0x15, 2	; 21
 552:	aa 9b       	sbis	0x15, 2	; 21
 554:	fe cf       	rjmp	.-4      	; 0x552 <WriteCfgToLis+0x90>
 556:	aa 9a       	sbi	0x15, 2	; 21
 558:	5e 98       	cbi	0x0b, 6	; 11
 55a:	a9 9a       	sbi	0x15, 1	; 21
 55c:	a9 9b       	sbis	0x15, 1	; 21
 55e:	fe cf       	rjmp	.-4      	; 0x55c <WriteCfgToLis+0x9a>
 560:	a9 9a       	sbi	0x15, 1	; 21
 562:	aa 9a       	sbi	0x15, 2	; 21
 564:	aa 9b       	sbis	0x15, 2	; 21
 566:	fe cf       	rjmp	.-4      	; 0x564 <WriteCfgToLis+0xa2>
 568:	11 c0       	rjmp	.+34     	; 0x58c <WriteCfgToLis+0xca>
 56a:	5e 9a       	sbi	0x0b, 6	; 11
 56c:	a9 9a       	sbi	0x15, 1	; 21
 56e:	a9 9b       	sbis	0x15, 1	; 21
 570:	fe cf       	rjmp	.-4      	; 0x56e <WriteCfgToLis+0xac>
 572:	a9 9a       	sbi	0x15, 1	; 21
 574:	aa 9a       	sbi	0x15, 2	; 21
 576:	aa 9b       	sbis	0x15, 2	; 21
 578:	fe cf       	rjmp	.-4      	; 0x576 <WriteCfgToLis+0xb4>
 57a:	aa 9a       	sbi	0x15, 2	; 21
 57c:	5e 9a       	sbi	0x0b, 6	; 11
 57e:	a9 9a       	sbi	0x15, 1	; 21
 580:	a9 9b       	sbis	0x15, 1	; 21
 582:	fe cf       	rjmp	.-4      	; 0x580 <WriteCfgToLis+0xbe>
 584:	a9 9a       	sbi	0x15, 1	; 21
 586:	aa 9a       	sbi	0x15, 2	; 21
 588:	aa 9b       	sbis	0x15, 2	; 21
 58a:	fe cf       	rjmp	.-4      	; 0x588 <WriteCfgToLis+0xc6>
 58c:	aa 9a       	sbi	0x15, 2	; 21
 58e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
 592:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__data_end>
 596:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <nprogbits_rowselect>
 59a:	e8 17       	cp	r30, r24
 59c:	b8 f4       	brcc	.+46     	; 0x5cc <WriteCfgToLis+0x10a>
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	e9 5e       	subi	r30, 0xE9	; 233
 5a2:	fe 4f       	sbci	r31, 0xFE	; 254
 5a4:	80 81       	ld	r24, Z
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	11 f4       	brne	.+4      	; 0x5ae <WriteCfgToLis+0xec>
 5aa:	5e 9a       	sbi	0x0b, 6	; 11
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <WriteCfgToLis+0xee>
 5ae:	5e 98       	cbi	0x0b, 6	; 11
 5b0:	a9 9a       	sbi	0x15, 1	; 21
 5b2:	a9 9b       	sbis	0x15, 1	; 21
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <WriteCfgToLis+0xf0>
 5b6:	a9 9a       	sbi	0x15, 1	; 21
 5b8:	aa 9a       	sbi	0x15, 2	; 21
 5ba:	aa 9b       	sbis	0x15, 2	; 21
 5bc:	fe cf       	rjmp	.-4      	; 0x5ba <WriteCfgToLis+0xf8>
 5be:	aa 9a       	sbi	0x15, 2	; 21
 5c0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 5c4:	8f 5f       	subi	r24, 0xFF	; 255
 5c6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 5ca:	e3 cf       	rjmp	.-58     	; 0x592 <WriteCfgToLis+0xd0>
 5cc:	5e 98       	cbi	0x0b, 6	; 11
 5ce:	28 98       	cbi	0x05, 0	; 5
 5d0:	08 95       	ret

000005d2 <SendLisFrame>:
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	40 9a       	sbi	0x08, 0	; 8
 5d8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <LisFrameReadout>
 5dc:	40 98       	cbi	0x08, 0	; 8
 5de:	41 9a       	sbi	0x08, 1	; 8
 5e0:	c1 e8       	ldi	r28, 0x81	; 129
 5e2:	d1 e0       	ldi	r29, 0x01	; 1
 5e4:	89 91       	ld	r24, Y+
 5e6:	8e bd       	out	0x2e, r24	; 46
 5e8:	2c 98       	cbi	0x05, 4	; 5
 5ea:	8c b5       	in	r24, 0x2c	; 44
 5ec:	8f 7b       	andi	r24, 0xBF	; 191
 5ee:	8c bd       	out	0x2c, r24	; 44
 5f0:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick>
 5f4:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick+0x1>
 5f8:	8a e0       	ldi	r24, 0x0A	; 10
 5fa:	09 95       	icall
 5fc:	8c b5       	in	r24, 0x2c	; 44
 5fe:	80 64       	ori	r24, 0x40	; 64
 600:	8c bd       	out	0x2c, r24	; 44
 602:	0d b4       	in	r0, 0x2d	; 45
 604:	07 fe       	sbrs	r0, 7
 606:	fd cf       	rjmp	.-6      	; 0x602 <SendLisFrame+0x30>
 608:	8e b5       	in	r24, 0x2e	; 46
 60a:	87 e0       	ldi	r24, 0x07	; 7
 60c:	c1 3a       	cpi	r28, 0xA1	; 161
 60e:	d8 07       	cpc	r29, r24
 610:	49 f7       	brne	.-46     	; 0x5e4 <SendLisFrame+0x12>
 612:	41 98       	cbi	0x08, 1	; 8
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <SendDataMasterAskedFor>:
 61a:	ef 92       	push	r14
 61c:	ff 92       	push	r15
 61e:	0f 93       	push	r16
 620:	1f 93       	push	r17
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	00 d0       	rcall	.+0      	; 0x628 <SendDataMasterAskedFor+0xe>
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	98 b1       	in	r25, 0x08	; 8
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	89 27       	eor	r24, r25
 632:	88 b9       	out	0x08, r24	; 8
 634:	0d b4       	in	r0, 0x2d	; 45
 636:	07 fe       	sbrs	r0, 7
 638:	fd cf       	rjmp	.-6      	; 0x634 <SendDataMasterAskedFor+0x1a>
 63a:	8e b5       	in	r24, 0x2e	; 46
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	51 f4       	brne	.+20     	; 0x654 <SendDataMasterAskedFor+0x3a>
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <SendLisFrame>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	b1 f5       	brne	.+108    	; 0x6c4 <SendDataMasterAskedFor+0xaa>
 658:	0d b4       	in	r0, 0x2d	; 45
 65a:	07 fe       	sbrs	r0, 7
 65c:	fd cf       	rjmp	.-6      	; 0x658 <SendDataMasterAskedFor+0x3e>
 65e:	3e b5       	in	r19, 0x2e	; 46
 660:	0d b4       	in	r0, 0x2d	; 45
 662:	07 fe       	sbrs	r0, 7
 664:	fd cf       	rjmp	.-6      	; 0x660 <SendDataMasterAskedFor+0x46>
 666:	2e b5       	in	r18, 0x2e	; 46
 668:	82 2f       	mov	r24, r18
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	93 2b       	or	r25, r19
 66e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Lis_nticks_exposure+0x1>
 672:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Lis_nticks_exposure>
 676:	98 b1       	in	r25, 0x08	; 8
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	89 27       	eor	r24, r25
 67c:	88 b9       	out	0x08, r24	; 8
 67e:	39 83       	std	Y+1, r19	; 0x01
 680:	2a 83       	std	Y+2, r18	; 0x02
 682:	8e 01       	movw	r16, r28
 684:	0f 5f       	subi	r16, 0xFF	; 255
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	7e 01       	movw	r14, r28
 68a:	83 e0       	ldi	r24, 0x03	; 3
 68c:	e8 0e       	add	r14, r24
 68e:	f1 1c       	adc	r15, r1
 690:	f8 01       	movw	r30, r16
 692:	81 91       	ld	r24, Z+
 694:	8f 01       	movw	r16, r30
 696:	8e bd       	out	0x2e, r24	; 46
 698:	2c 98       	cbi	0x05, 4	; 5
 69a:	8c b5       	in	r24, 0x2c	; 44
 69c:	8f 7b       	andi	r24, 0xBF	; 191
 69e:	8c bd       	out	0x2c, r24	; 44
 6a0:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Delay3CpuCyclesPerTick>
 6a4:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Delay3CpuCyclesPerTick+0x1>
 6a8:	8a e0       	ldi	r24, 0x0A	; 10
 6aa:	09 95       	icall
 6ac:	8c b5       	in	r24, 0x2c	; 44
 6ae:	80 64       	ori	r24, 0x40	; 64
 6b0:	8c bd       	out	0x2c, r24	; 44
 6b2:	0d b4       	in	r0, 0x2d	; 45
 6b4:	07 fe       	sbrs	r0, 7
 6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <SendDataMasterAskedFor+0x98>
 6b8:	8e b5       	in	r24, 0x2e	; 46
 6ba:	0e 15       	cp	r16, r14
 6bc:	1f 05       	cpc	r17, r15
 6be:	09 f4       	brne	.+2      	; 0x6c2 <SendDataMasterAskedFor+0xa8>
 6c0:	5a c1       	rjmp	.+692    	; 0x976 <__stack+0x77>
 6c2:	e6 cf       	rjmp	.-52     	; 0x690 <SendDataMasterAskedFor+0x76>
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	09 f0       	breq	.+2      	; 0x6ca <SendDataMasterAskedFor+0xb0>
 6c8:	48 c0       	rjmp	.+144    	; 0x75a <SendDataMasterAskedFor+0x140>
 6ca:	98 b1       	in	r25, 0x08	; 8
 6cc:	84 e0       	ldi	r24, 0x04	; 4
 6ce:	89 27       	eor	r24, r25
 6d0:	88 b9       	out	0x08, r24	; 8
 6d2:	98 b1       	in	r25, 0x08	; 8
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	89 27       	eor	r24, r25
 6d8:	88 b9       	out	0x08, r24	; 8
 6da:	aa 9a       	sbi	0x15, 2	; 21
 6dc:	aa 9b       	sbis	0x15, 2	; 21
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <SendDataMasterAskedFor+0xc2>
 6e0:	aa 9a       	sbi	0x15, 2	; 21
 6e2:	28 9a       	sbi	0x05, 0	; 5
 6e4:	5e 98       	cbi	0x0b, 6	; 11
 6e6:	a9 9a       	sbi	0x15, 1	; 21
 6e8:	a9 9b       	sbis	0x15, 1	; 21
 6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <SendDataMasterAskedFor+0xce>
 6ec:	a9 9a       	sbi	0x15, 1	; 21
 6ee:	aa 9a       	sbi	0x15, 2	; 21
 6f0:	aa 9b       	sbis	0x15, 2	; 21
 6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <SendDataMasterAskedFor+0xd6>
 6f4:	aa 9a       	sbi	0x15, 2	; 21
 6f6:	5e 9a       	sbi	0x0b, 6	; 11
 6f8:	a9 9a       	sbi	0x15, 1	; 21
 6fa:	a9 9b       	sbis	0x15, 1	; 21
 6fc:	fe cf       	rjmp	.-4      	; 0x6fa <SendDataMasterAskedFor+0xe0>
 6fe:	a9 9a       	sbi	0x15, 1	; 21
 700:	aa 9a       	sbi	0x15, 2	; 21
 702:	aa 9b       	sbis	0x15, 2	; 21
 704:	fe cf       	rjmp	.-4      	; 0x702 <SendDataMasterAskedFor+0xe8>
 706:	aa 9a       	sbi	0x15, 2	; 21
 708:	5e 9a       	sbi	0x0b, 6	; 11
 70a:	a9 9a       	sbi	0x15, 1	; 21
 70c:	a9 9b       	sbis	0x15, 1	; 21
 70e:	fe cf       	rjmp	.-4      	; 0x70c <SendDataMasterAskedFor+0xf2>
 710:	a9 9a       	sbi	0x15, 1	; 21
 712:	aa 9a       	sbi	0x15, 2	; 21
 714:	aa 9b       	sbis	0x15, 2	; 21
 716:	fe cf       	rjmp	.-4      	; 0x714 <SendDataMasterAskedFor+0xfa>
 718:	aa 9a       	sbi	0x15, 2	; 21
 71a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
 71e:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__data_end>
 722:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <nprogbits_rowselect>
 726:	e8 17       	cp	r30, r24
 728:	08 f0       	brcs	.+2      	; 0x72c <SendDataMasterAskedFor+0x112>
 72a:	f6 c0       	rjmp	.+492    	; 0x918 <__stack+0x19>
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	e9 5e       	subi	r30, 0xE9	; 233
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	80 81       	ld	r24, Z
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	11 f4       	brne	.+4      	; 0x73c <SendDataMasterAskedFor+0x122>
 738:	5e 9a       	sbi	0x0b, 6	; 11
 73a:	01 c0       	rjmp	.+2      	; 0x73e <SendDataMasterAskedFor+0x124>
 73c:	5e 98       	cbi	0x0b, 6	; 11
 73e:	a9 9a       	sbi	0x15, 1	; 21
 740:	a9 9b       	sbis	0x15, 1	; 21
 742:	fe cf       	rjmp	.-4      	; 0x740 <SendDataMasterAskedFor+0x126>
 744:	a9 9a       	sbi	0x15, 1	; 21
 746:	aa 9a       	sbi	0x15, 2	; 21
 748:	aa 9b       	sbis	0x15, 2	; 21
 74a:	fe cf       	rjmp	.-4      	; 0x748 <SendDataMasterAskedFor+0x12e>
 74c:	aa 9a       	sbi	0x15, 2	; 21
 74e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 758:	e2 cf       	rjmp	.-60     	; 0x71e <SendDataMasterAskedFor+0x104>
 75a:	84 30       	cpi	r24, 0x04	; 4
 75c:	09 f0       	breq	.+2      	; 0x760 <SendDataMasterAskedFor+0x146>
 75e:	47 c0       	rjmp	.+142    	; 0x7ee <SendDataMasterAskedFor+0x1d4>
 760:	98 b1       	in	r25, 0x08	; 8
 762:	89 27       	eor	r24, r25
 764:	88 b9       	out	0x08, r24	; 8
 766:	98 b1       	in	r25, 0x08	; 8
 768:	82 e0       	ldi	r24, 0x02	; 2
 76a:	89 27       	eor	r24, r25
 76c:	88 b9       	out	0x08, r24	; 8
 76e:	aa 9a       	sbi	0x15, 2	; 21
 770:	aa 9b       	sbis	0x15, 2	; 21
 772:	fe cf       	rjmp	.-4      	; 0x770 <SendDataMasterAskedFor+0x156>
 774:	aa 9a       	sbi	0x15, 2	; 21
 776:	28 9a       	sbi	0x05, 0	; 5
 778:	5e 98       	cbi	0x0b, 6	; 11
 77a:	a9 9a       	sbi	0x15, 1	; 21
 77c:	a9 9b       	sbis	0x15, 1	; 21
 77e:	fe cf       	rjmp	.-4      	; 0x77c <SendDataMasterAskedFor+0x162>
 780:	a9 9a       	sbi	0x15, 1	; 21
 782:	aa 9a       	sbi	0x15, 2	; 21
 784:	aa 9b       	sbis	0x15, 2	; 21
 786:	fe cf       	rjmp	.-4      	; 0x784 <SendDataMasterAskedFor+0x16a>
 788:	aa 9a       	sbi	0x15, 2	; 21
 78a:	5e 9a       	sbi	0x0b, 6	; 11
 78c:	a9 9a       	sbi	0x15, 1	; 21
 78e:	a9 9b       	sbis	0x15, 1	; 21
 790:	fe cf       	rjmp	.-4      	; 0x78e <SendDataMasterAskedFor+0x174>
 792:	a9 9a       	sbi	0x15, 1	; 21
 794:	aa 9a       	sbi	0x15, 2	; 21
 796:	aa 9b       	sbis	0x15, 2	; 21
 798:	fe cf       	rjmp	.-4      	; 0x796 <SendDataMasterAskedFor+0x17c>
 79a:	aa 9a       	sbi	0x15, 2	; 21
 79c:	5e 98       	cbi	0x0b, 6	; 11
 79e:	a9 9a       	sbi	0x15, 1	; 21
 7a0:	a9 9b       	sbis	0x15, 1	; 21
 7a2:	fe cf       	rjmp	.-4      	; 0x7a0 <SendDataMasterAskedFor+0x186>
 7a4:	a9 9a       	sbi	0x15, 1	; 21
 7a6:	aa 9a       	sbi	0x15, 2	; 21
 7a8:	aa 9b       	sbis	0x15, 2	; 21
 7aa:	fe cf       	rjmp	.-4      	; 0x7a8 <SendDataMasterAskedFor+0x18e>
 7ac:	aa 9a       	sbi	0x15, 2	; 21
 7ae:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
 7b2:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__data_end>
 7b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <nprogbits_rowselect>
 7ba:	e8 17       	cp	r30, r24
 7bc:	08 f0       	brcs	.+2      	; 0x7c0 <SendDataMasterAskedFor+0x1a6>
 7be:	ac c0       	rjmp	.+344    	; 0x918 <__stack+0x19>
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	e9 5e       	subi	r30, 0xE9	; 233
 7c4:	fe 4f       	sbci	r31, 0xFE	; 254
 7c6:	80 81       	ld	r24, Z
 7c8:	81 30       	cpi	r24, 0x01	; 1
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <SendDataMasterAskedFor+0x1b6>
 7cc:	5e 9a       	sbi	0x0b, 6	; 11
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <SendDataMasterAskedFor+0x1b8>
 7d0:	5e 98       	cbi	0x0b, 6	; 11
 7d2:	a9 9a       	sbi	0x15, 1	; 21
 7d4:	a9 9b       	sbis	0x15, 1	; 21
 7d6:	fe cf       	rjmp	.-4      	; 0x7d4 <SendDataMasterAskedFor+0x1ba>
 7d8:	a9 9a       	sbi	0x15, 1	; 21
 7da:	aa 9a       	sbi	0x15, 2	; 21
 7dc:	aa 9b       	sbis	0x15, 2	; 21
 7de:	fe cf       	rjmp	.-4      	; 0x7dc <SendDataMasterAskedFor+0x1c2>
 7e0:	aa 9a       	sbi	0x15, 2	; 21
 7e2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 7e6:	8f 5f       	subi	r24, 0xFF	; 255
 7e8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 7ec:	e2 cf       	rjmp	.-60     	; 0x7b2 <SendDataMasterAskedFor+0x198>
 7ee:	85 30       	cpi	r24, 0x05	; 5
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <SendDataMasterAskedFor+0x1da>
 7f2:	48 c0       	rjmp	.+144    	; 0x884 <SendDataMasterAskedFor+0x26a>
 7f4:	98 b1       	in	r25, 0x08	; 8
 7f6:	84 e0       	ldi	r24, 0x04	; 4
 7f8:	89 27       	eor	r24, r25
 7fa:	88 b9       	out	0x08, r24	; 8
 7fc:	98 b1       	in	r25, 0x08	; 8
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	89 27       	eor	r24, r25
 802:	88 b9       	out	0x08, r24	; 8
 804:	aa 9a       	sbi	0x15, 2	; 21
 806:	aa 9b       	sbis	0x15, 2	; 21
 808:	fe cf       	rjmp	.-4      	; 0x806 <SendDataMasterAskedFor+0x1ec>
 80a:	aa 9a       	sbi	0x15, 2	; 21
 80c:	28 9a       	sbi	0x05, 0	; 5
 80e:	5e 98       	cbi	0x0b, 6	; 11
 810:	a9 9a       	sbi	0x15, 1	; 21
 812:	a9 9b       	sbis	0x15, 1	; 21
 814:	fe cf       	rjmp	.-4      	; 0x812 <SendDataMasterAskedFor+0x1f8>
 816:	a9 9a       	sbi	0x15, 1	; 21
 818:	aa 9a       	sbi	0x15, 2	; 21
 81a:	aa 9b       	sbis	0x15, 2	; 21
 81c:	fe cf       	rjmp	.-4      	; 0x81a <SendDataMasterAskedFor+0x200>
 81e:	aa 9a       	sbi	0x15, 2	; 21
 820:	5e 98       	cbi	0x0b, 6	; 11
 822:	a9 9a       	sbi	0x15, 1	; 21
 824:	a9 9b       	sbis	0x15, 1	; 21
 826:	fe cf       	rjmp	.-4      	; 0x824 <SendDataMasterAskedFor+0x20a>
 828:	a9 9a       	sbi	0x15, 1	; 21
 82a:	aa 9a       	sbi	0x15, 2	; 21
 82c:	aa 9b       	sbis	0x15, 2	; 21
 82e:	fe cf       	rjmp	.-4      	; 0x82c <SendDataMasterAskedFor+0x212>
 830:	aa 9a       	sbi	0x15, 2	; 21
 832:	5e 9a       	sbi	0x0b, 6	; 11
 834:	a9 9a       	sbi	0x15, 1	; 21
 836:	a9 9b       	sbis	0x15, 1	; 21
 838:	fe cf       	rjmp	.-4      	; 0x836 <SendDataMasterAskedFor+0x21c>
 83a:	a9 9a       	sbi	0x15, 1	; 21
 83c:	aa 9a       	sbi	0x15, 2	; 21
 83e:	aa 9b       	sbis	0x15, 2	; 21
 840:	fe cf       	rjmp	.-4      	; 0x83e <SendDataMasterAskedFor+0x224>
 842:	aa 9a       	sbi	0x15, 2	; 21
 844:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
 848:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__data_end>
 84c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <nprogbits_rowselect>
 850:	e8 17       	cp	r30, r24
 852:	08 f0       	brcs	.+2      	; 0x856 <SendDataMasterAskedFor+0x23c>
 854:	61 c0       	rjmp	.+194    	; 0x918 <__stack+0x19>
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	e9 5e       	subi	r30, 0xE9	; 233
 85a:	fe 4f       	sbci	r31, 0xFE	; 254
 85c:	80 81       	ld	r24, Z
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	11 f4       	brne	.+4      	; 0x866 <SendDataMasterAskedFor+0x24c>
 862:	5e 9a       	sbi	0x0b, 6	; 11
 864:	01 c0       	rjmp	.+2      	; 0x868 <SendDataMasterAskedFor+0x24e>
 866:	5e 98       	cbi	0x0b, 6	; 11
 868:	a9 9a       	sbi	0x15, 1	; 21
 86a:	a9 9b       	sbis	0x15, 1	; 21
 86c:	fe cf       	rjmp	.-4      	; 0x86a <SendDataMasterAskedFor+0x250>
 86e:	a9 9a       	sbi	0x15, 1	; 21
 870:	aa 9a       	sbi	0x15, 2	; 21
 872:	aa 9b       	sbis	0x15, 2	; 21
 874:	fe cf       	rjmp	.-4      	; 0x872 <SendDataMasterAskedFor+0x258>
 876:	aa 9a       	sbi	0x15, 2	; 21
 878:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 87c:	8f 5f       	subi	r24, 0xFF	; 255
 87e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 882:	e2 cf       	rjmp	.-60     	; 0x848 <SendDataMasterAskedFor+0x22e>
 884:	86 30       	cpi	r24, 0x06	; 6
 886:	09 f0       	breq	.+2      	; 0x88a <SendDataMasterAskedFor+0x270>
 888:	4a c0       	rjmp	.+148    	; 0x91e <__stack+0x1f>
 88a:	98 b1       	in	r25, 0x08	; 8
 88c:	84 e0       	ldi	r24, 0x04	; 4
 88e:	89 27       	eor	r24, r25
 890:	88 b9       	out	0x08, r24	; 8
 892:	98 b1       	in	r25, 0x08	; 8
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	89 27       	eor	r24, r25
 898:	88 b9       	out	0x08, r24	; 8
 89a:	aa 9a       	sbi	0x15, 2	; 21
 89c:	aa 9b       	sbis	0x15, 2	; 21
 89e:	fe cf       	rjmp	.-4      	; 0x89c <SendDataMasterAskedFor+0x282>
 8a0:	aa 9a       	sbi	0x15, 2	; 21
 8a2:	28 9a       	sbi	0x05, 0	; 5
 8a4:	5e 98       	cbi	0x0b, 6	; 11
 8a6:	a9 9a       	sbi	0x15, 1	; 21
 8a8:	a9 9b       	sbis	0x15, 1	; 21
 8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <SendDataMasterAskedFor+0x28e>
 8ac:	a9 9a       	sbi	0x15, 1	; 21
 8ae:	aa 9a       	sbi	0x15, 2	; 21
 8b0:	aa 9b       	sbis	0x15, 2	; 21
 8b2:	fe cf       	rjmp	.-4      	; 0x8b0 <SendDataMasterAskedFor+0x296>
 8b4:	aa 9a       	sbi	0x15, 2	; 21
 8b6:	5e 98       	cbi	0x0b, 6	; 11
 8b8:	a9 9a       	sbi	0x15, 1	; 21
 8ba:	a9 9b       	sbis	0x15, 1	; 21
 8bc:	fe cf       	rjmp	.-4      	; 0x8ba <SendDataMasterAskedFor+0x2a0>
 8be:	a9 9a       	sbi	0x15, 1	; 21
 8c0:	aa 9a       	sbi	0x15, 2	; 21
 8c2:	aa 9b       	sbis	0x15, 2	; 21
 8c4:	fe cf       	rjmp	.-4      	; 0x8c2 <SendDataMasterAskedFor+0x2a8>
 8c6:	aa 9a       	sbi	0x15, 2	; 21
 8c8:	5e 98       	cbi	0x0b, 6	; 11
 8ca:	a9 9a       	sbi	0x15, 1	; 21
 8cc:	a9 9b       	sbis	0x15, 1	; 21
 8ce:	fe cf       	rjmp	.-4      	; 0x8cc <SendDataMasterAskedFor+0x2b2>
 8d0:	a9 9a       	sbi	0x15, 1	; 21
 8d2:	aa 9a       	sbi	0x15, 2	; 21
 8d4:	aa 9b       	sbis	0x15, 2	; 21
 8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <SendDataMasterAskedFor+0x2ba>
 8d8:	aa 9a       	sbi	0x15, 2	; 21
 8da:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
 8de:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__data_end>
 8e2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <nprogbits_rowselect>
 8e6:	e8 17       	cp	r30, r24
 8e8:	b8 f4       	brcc	.+46     	; 0x918 <__stack+0x19>
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	e9 5e       	subi	r30, 0xE9	; 233
 8ee:	fe 4f       	sbci	r31, 0xFE	; 254
 8f0:	80 81       	ld	r24, Z
 8f2:	81 30       	cpi	r24, 0x01	; 1
 8f4:	11 f4       	brne	.+4      	; 0x8fa <SendDataMasterAskedFor+0x2e0>
 8f6:	5e 9a       	sbi	0x0b, 6	; 11
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <SendDataMasterAskedFor+0x2e2>
 8fa:	5e 98       	cbi	0x0b, 6	; 11
 8fc:	a9 9a       	sbi	0x15, 1	; 21
 8fe:	a9 9b       	sbis	0x15, 1	; 21
 900:	fe cf       	rjmp	.-4      	; 0x8fe <SendDataMasterAskedFor+0x2e4>
 902:	a9 9a       	sbi	0x15, 1	; 21
 904:	aa 9a       	sbi	0x15, 2	; 21
 906:	aa 9b       	sbis	0x15, 2	; 21
 908:	fe cf       	rjmp	.-4      	; 0x906 <__stack+0x7>
 90a:	aa 9a       	sbi	0x15, 2	; 21
 90c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
 910:	8f 5f       	subi	r24, 0xFF	; 255
 912:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 916:	e3 cf       	rjmp	.-58     	; 0x8de <SendDataMasterAskedFor+0x2c4>
 918:	5e 98       	cbi	0x0b, 6	; 11
 91a:	28 98       	cbi	0x05, 0	; 5
 91c:	2c c0       	rjmp	.+88     	; 0x976 <__stack+0x77>
 91e:	88 30       	cpi	r24, 0x08	; 8
 920:	11 f4       	brne	.+4      	; 0x926 <__stack+0x27>
 922:	85 e0       	ldi	r24, 0x05	; 5
 924:	0b c0       	rjmp	.+22     	; 0x93c <__stack+0x3d>
 926:	89 30       	cpi	r24, 0x09	; 9
 928:	11 f4       	brne	.+4      	; 0x92e <__stack+0x2f>
 92a:	84 e0       	ldi	r24, 0x04	; 4
 92c:	07 c0       	rjmp	.+14     	; 0x93c <__stack+0x3d>
 92e:	8a 30       	cpi	r24, 0x0A	; 10
 930:	11 f4       	brne	.+4      	; 0x936 <__stack+0x37>
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	03 c0       	rjmp	.+6      	; 0x93c <__stack+0x3d>
 936:	8b 30       	cpi	r24, 0x0B	; 11
 938:	21 f4       	brne	.+8      	; 0x942 <__stack+0x43>
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <lis_gain>
 940:	1a c0       	rjmp	.+52     	; 0x976 <__stack+0x77>
 942:	87 30       	cpi	r24, 0x07	; 7
 944:	51 f4       	brne	.+20     	; 0x95a <__stack+0x5b>
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	1f 91       	pop	r17
 950:	0f 91       	pop	r16
 952:	ff 90       	pop	r15
 954:	ef 90       	pop	r14
 956:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <WriteCfgToLis>
 95a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <slave_ignore>
 95e:	89 17       	cp	r24, r25
 960:	51 f0       	breq	.+20     	; 0x976 <__stack+0x77>
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	1f 91       	pop	r17
 96c:	0f 91       	pop	r16
 96e:	ff 90       	pop	r15
 970:	ef 90       	pop	r14
 972:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <IndicateUnknownCommand>
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	ff 90       	pop	r15
 984:	ef 90       	pop	r14
 986:	08 95       	ret

00000988 <RespondToRequestsForData>:
 988:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 98c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 990:	09 95       	icall
 992:	81 11       	cpse	r24, r1
 994:	0c 94 0d 03 	jmp	0x61a	; 0x61a <SendDataMasterAskedFor>
 998:	08 95       	ret

0000099a <All_debug_leds_turn_on_and_turn_green>:
 99a:	0e 94 7b 00 	call	0xf6	; 0xf6 <DebugLedsTurnAllOn>
 99e:	0c 94 9e 00 	jmp	0x13c	; 0x13c <DebugLedsTurnAllGreen>

000009a2 <main>:
 9a2:	0e 94 cd 04 	call	0x99a	; 0x99a <All_debug_leds_turn_on_and_turn_green>
 9a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SpiSlaveInit>
 9aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <UartSpiInit>
 9ae:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LisInit>
 9b2:	0e 94 c4 04 	call	0x988	; 0x988 <RespondToRequestsForData>
 9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <main+0x10>

000009b8 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 9b8:	1f 92       	push	r1
 9ba:	0f 92       	push	r0
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	0f 92       	push	r0
 9c0:	11 24       	eor	r1, r1
 9c2:	2f 93       	push	r18
 9c4:	3f 93       	push	r19
 9c6:	4f 93       	push	r20
 9c8:	5f 93       	push	r21
 9ca:	6f 93       	push	r22
 9cc:	7f 93       	push	r23
 9ce:	8f 93       	push	r24
 9d0:	9f 93       	push	r25
 9d2:	af 93       	push	r26
 9d4:	bf 93       	push	r27
 9d6:	ef 93       	push	r30
 9d8:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 9da:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <DoTaskForThisTest>
 9de:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <DoTaskForThisTest+0x1>
 9e2:	09 95       	icall
}
 9e4:	ff 91       	pop	r31
 9e6:	ef 91       	pop	r30
 9e8:	bf 91       	pop	r27
 9ea:	af 91       	pop	r26
 9ec:	9f 91       	pop	r25
 9ee:	8f 91       	pop	r24
 9f0:	7f 91       	pop	r23
 9f2:	6f 91       	pop	r22
 9f4:	5f 91       	pop	r21
 9f6:	4f 91       	pop	r20
 9f8:	3f 91       	pop	r19
 9fa:	2f 91       	pop	r18
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 a10:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 a12:	0f 90       	pop	r0
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	0f 90       	pop	r0
 a18:	1f 90       	pop	r1
 a1a:	18 95       	reti

00000a1c <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 a1c:	1f 92       	push	r1
 a1e:	0f 92       	push	r0
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	0f 92       	push	r0
 a24:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 a26:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 a28:	0f 90       	pop	r0
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	0f 90       	pop	r0
 a2e:	1f 90       	pop	r1
 a30:	18 95       	reti

00000a32 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 a32:	8a 95       	dec	r24
 a34:	f1 f7       	brne	.-4      	; 0xa32 <Delay3CpuCyclesPerTick_Implementation>
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
