
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000b8c  00000c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800242  00800242  00000d62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039ce  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000128b  00000000  00000000  00004bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020e1  00000000  00000000  00005e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  00007f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001923  00000000  00000000  000088b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d86  00000000  00000000  0000a1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000af61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_14>
  3c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 36       	cpi	r26, 0x6B	; 107
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <main>
  9e:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

inline void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
}

inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  bc:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <ToggleBit>:
}

inline void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  d4:	fc 01       	movw	r30, r24
  d6:	40 81       	ld	r20, Z
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <ToggleBit+0xc>
  de:	22 0f       	add	r18, r18
  e0:	6a 95       	dec	r22
  e2:	ea f7       	brpl	.-6      	; 0xde <ToggleBit+0xa>
  e4:	24 27       	eor	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <BitIsSet>:
}

inline bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <BitIsSet+0xe>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <BitIsSet+0xa>
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	28 23       	and	r18, r24
 100:	39 23       	and	r19, r25
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	23 2b       	or	r18, r19
 106:	09 f4       	brne	.+2      	; 0x10a <BitIsSet+0x20>
 108:	80 e0       	ldi	r24, 0x00	; 0
}
 10a:	08 95       	ret

0000010c <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	c0 91 40 02 	lds	r28, 0x0240	; 0x800240 <DebugLeds_ddr>
 114:	d0 91 41 02 	lds	r29, 0x0241	; 0x800241 <DebugLeds_ddr+0x1>
 118:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 122:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12c:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 136:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000144 <DebugLedsTurnRed>:
 144:	68 2f       	mov	r22, r24
 146:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <DebugLeds_port>
 14a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 14e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000152 <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 156:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <DebugLeds_port>
 15a:	d0 91 3f 02 	lds	r29, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 15e:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 168:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 172:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 17c:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 180:	ce 01       	movw	r24, r28
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 186:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

0000018a <DebugLedsToggleAll>:
}

void DebugLedsToggleAll(void)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
    ToggleBit(DebugLeds_port, debug_led1);
 18e:	c0 91 3e 02 	lds	r28, 0x023E	; 0x80023e <DebugLeds_port>
 192:	d0 91 3f 02 	lds	r29, 0x023F	; 0x80023f <DebugLeds_port+0x1>
 196:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <debug_led1>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ToggleBit>
    ToggleBit(DebugLeds_port, debug_led2);
 1a0:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <debug_led2>
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <ToggleBit>
    ToggleBit(DebugLeds_port, debug_led3);
 1aa:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <debug_led3>
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 6a 00 	call	0xd4	; 0xd4 <ToggleBit>
    ToggleBit(DebugLeds_port, debug_led4);
 1b4:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <debug_led4>
 1b8:	ce 01       	movw	r24, r28
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
void DebugLedsToggleAll(void)
{
    ToggleBit(DebugLeds_port, debug_led1);
    ToggleBit(DebugLeds_port, debug_led2);
    ToggleBit(DebugLeds_port, debug_led3);
    ToggleBit(DebugLeds_port, debug_led4);
 1be:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <ToggleBit>

000001c2 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 1c2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ReadSpiStatusRegister>
 1c6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ReadSpiStatusRegister+0x1>
 1ca:	09 95       	icall
 1cc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 1d0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 1d4:	09 94       	ijmp

000001d6 <ReadSpiStatusRegister_Implementation>:
 1d6:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <Spi_spsr>
 1da:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <Spi_spsr+0x1>
 1de:	80 81       	ld	r24, Z
 1e0:	08 95       	ret

000001e2 <ReadSpiDataRegister_Implementation>:
 1e2:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <Spi_spdr>
 1e6:	f0 91 33 02 	lds	r31, 0x0233	; 0x800233 <Spi_spdr+0x1>
 1ea:	80 81       	ld	r24, Z
 1ec:	08 95       	ret

000001ee <EnableSpi_Implementation>:
 1ee:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <Spi_Enable>
 1f2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <Spi_spcr>
 1f6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <Spi_spcr+0x1>
 1fa:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001fe <SpiTransferIsDone_Implementation>:
 1fe:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <Spi_InterruptFlag>
 202:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <Spi_spsr>
 206:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <Spi_spsr+0x1>
 20a:	0c 94 75 00 	jmp	0xea	; 0xea <BitIsSet>

0000020e <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 20e:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <Spi_Miso>
 212:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <Spi_ddr>
 216:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <Spi_ddr+0x1>
 21a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 21e:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <EnableSpi>
 222:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <EnableSpi+0x1>
 226:	09 95       	icall
    ClearPendingSpiInterrupt();
 228:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ClearPendingSpiInterrupt>
 22c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ClearPendingSpiInterrupt+0x1>
 230:	09 94       	ijmp

00000232 <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 232:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <UartSpi_AdcConv>
 236:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <UartSpi_port>
 23a:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <UartSpi_port+0x1>
 23e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000242 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 24a:	00 91 25 02 	lds	r16, 0x0225	; 0x800225 <UartSpi_br>
 24e:	10 91 26 02 	lds	r17, 0x0226	; 0x800226 <UartSpi_br+0x1>
 252:	f8 01       	movw	r30, r16
 254:	11 82       	std	Z+1, r1	; 0x01
 256:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 258:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <UartSpi_ddr>
 25c:	d0 91 2e 02 	lds	r29, 0x022E	; 0x80022e <UartSpi_ddr+0x1>
 260:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <UartSpi_Sck>
 264:	ce 01       	movw	r24, r28
 266:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 26a:	0e 94 19 01 	call	0x232	; 0x232 <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 26e:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <UartSpi_AdcConv>
 272:	ce 01       	movw	r24, r28
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 278:	c0 91 27 02 	lds	r28, 0x0227	; 0x800227 <UartSpi_csrc>
 27c:	d0 91 28 02 	lds	r29, 0x0228	; 0x800228 <UartSpi_csrc+0x1>
 280:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <UartSpi_ModeSelect0>
 284:	ce 01       	movw	r24, r28
 286:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 28a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <UartSpi_ModeSelect1>
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 294:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <UartSpi_ClockPolarity>
 298:	ce 01       	movw	r24, r28
 29a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 29e:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <UartSpi_ClockPhase>
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 2a8:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <UartSpi_DataOrder>
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 2b2:	c0 91 29 02 	lds	r28, 0x0229	; 0x800229 <UartSpi_csrb>
 2b6:	d0 91 2a 02 	lds	r29, 0x022A	; 0x80022a <UartSpi_csrb+0x1>
 2ba:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <UartSpi_RxEnable>
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 2c4:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <UartSpi_TxEnable>
 2c8:	ce 01       	movw	r24, r28
 2ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 2ce:	f8 01       	movw	r30, r16
 2d0:	11 82       	std	Z+1, r1	; 0x01
 2d2:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 2de:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmResetCounterAtTop>
 2e2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmResetCounterAtTop+0x1>
 2e6:	09 95       	icall
    PwmTopIsOcr0a();
 2e8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmTopIsOcr0a>
 2ec:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmTopIsOcr0a+0x1>
 2f0:	09 95       	icall
    PwmClkIsCpuClk();
 2f2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmClkIsCpuClk>
 2f6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmClkIsCpuClk+0x1>
 2fa:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 2fc:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <Lis_clktop>
 300:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <Lis_clktop+0x1>
 304:	88 ec       	ldi	r24, 0xC8	; 200
 306:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 308:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Lis_clkth>
 30c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Lis_clkth+0x1>
 310:	20 81       	ld	r18, Z
 312:	26 95       	lsr	r18
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
 318:	08 95       	ret

0000031a <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 31a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmEnableOutputSetUntilMatch>
 31e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmEnableOutputSetUntilMatch+0x1>
 322:	09 94       	ijmp

00000324 <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 32a:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <Lis_PixSelect>
 32e:	6c 2f       	mov	r22, r28
 330:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <Lis_ddr2>
 334:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <Lis_ddr2+0x1>
 338:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 33c:	6c 2f       	mov	r22, r28
 33e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <Lis_port2>
 342:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Lis_port2+0x1>
 346:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 34a:	c0 91 1a 02 	lds	r28, 0x021A	; 0x80021a <Lis_ddr1>
 34e:	d0 91 1b 02 	lds	r29, 0x021B	; 0x80021b <Lis_ddr1+0x1>
 352:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <Lis_Clk>
 356:	ce 01       	movw	r24, r28
 358:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 35c:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <Lis_Rst>
 360:	61 2f       	mov	r22, r17
 362:	ce 01       	movw	r24, r28
 364:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 368:	61 2f       	mov	r22, r17
 36a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Lis_port1>
 36e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Lis_port1+0x1>
 372:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 376:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <Lis_Sync>
 37a:	ce 01       	movw	r24, r28
 37c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 380:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <LisRunClkAt50kHz>
 384:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <LisRunClkAt50kHz+0x1>
 388:	09 95       	icall
    LisClkOn();
 38a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisClkOn>
 38e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisClkOn+0x1>
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 398:	09 94       	ijmp

0000039a <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 39e:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <Pwm_tccr0a>
 3a2:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <Pwm_tccr0a+0x1>
 3a6:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <Pwm_Wgm00>
 3aa:	ce 01       	movw	r24, r28
 3ac:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 3b0:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Pwm_Wgm01>
 3b4:	ce 01       	movw	r24, r28
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 3ba:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003be <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 3be:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <Pwm_Wgm02>
 3c2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Pwm_tccr0b>
 3c6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Pwm_tccr0b+0x1>
 3ca:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003ce <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 3d2:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <Pwm_tccr0b>
 3d6:	d0 91 09 02 	lds	r29, 0x0209	; 0x800209 <Pwm_tccr0b+0x1>
 3da:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <Pwm_Cs00>
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 3e4:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <Pwm_Cs01>
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3ee:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <Pwm_Cs02>
 3f2:	ce 01       	movw	r24, r28
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3f8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000003fc <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 400:	c0 91 0a 02 	lds	r28, 0x020A	; 0x80020a <Pwm_tccr0a>
 404:	d0 91 0b 02 	lds	r29, 0x020B	; 0x80020b <Pwm_tccr0a+0x1>
 408:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <Pwm_Com0b0>
 40c:	ce 01       	movw	r24, r28
 40e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 412:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <Pwm_Com0b1>
 416:	ce 01       	movw	r24, r28
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 41c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000420 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0c 94 a2 00 	jmp	0x144	; 0x144 <DebugLedsTurnRed>

00000426 <LisFrameReadout>:
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	aa 9a       	sbi	0x15, 2	; 21
 42c:	aa 9b       	sbis	0x15, 2	; 21
 42e:	fe cf       	rjmp	.-4      	; 0x42c <LisFrameReadout+0x6>
 430:	aa 9a       	sbi	0x15, 2	; 21
 432:	5e 9a       	sbi	0x0b, 6	; 11
 434:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <Lis_nticks_counter+0x1>
 438:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <Lis_nticks_counter>
 43c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <Lis_nticks_counter>
 440:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <Lis_nticks_counter+0x1>
 444:	9c 01       	movw	r18, r24
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <Lis_nticks_counter+0x1>
 44e:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <Lis_nticks_counter>
 452:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 456:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 45a:	82 17       	cp	r24, r18
 45c:	93 07       	cpc	r25, r19
 45e:	28 f4       	brcc	.+10     	; 0x46a <LisFrameReadout+0x44>
 460:	aa 9a       	sbi	0x15, 2	; 21
 462:	aa 9b       	sbis	0x15, 2	; 21
 464:	fe cf       	rjmp	.-4      	; 0x462 <LisFrameReadout+0x3c>
 466:	aa 9a       	sbi	0x15, 2	; 21
 468:	e9 cf       	rjmp	.-46     	; 0x43c <LisFrameReadout+0x16>
 46a:	5e 98       	cbi	0x0b, 6	; 11
 46c:	8b e4       	ldi	r24, 0x4B	; 75
 46e:	92 e0       	ldi	r25, 0x02	; 2
 470:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 474:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 478:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <Lis_npixels_counter+0x1>
 47c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <Lis_npixels_counter>
 480:	4f 9b       	sbis	0x09, 7	; 9
 482:	fe cf       	rjmp	.-4      	; 0x480 <LisFrameReadout+0x5a>
 484:	4f 99       	sbic	0x09, 7	; 9
 486:	fe cf       	rjmp	.-4      	; 0x484 <LisFrameReadout+0x5e>
 488:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	19 f0       	breq	.+6      	; 0x496 <LisFrameReadout+0x70>
 490:	c0 e1       	ldi	r28, 0x10	; 16
 492:	d3 e0       	ldi	r29, 0x03	; 3
 494:	38 c0       	rjmp	.+112    	; 0x506 <LisFrameReadout+0xe0>
 496:	c8 e8       	ldi	r28, 0x88	; 136
 498:	d1 e0       	ldi	r29, 0x01	; 1
 49a:	35 c0       	rjmp	.+106    	; 0x506 <LisFrameReadout+0xe0>
 49c:	a9 9b       	sbis	0x15, 1	; 21
 49e:	fe cf       	rjmp	.-4      	; 0x49c <LisFrameReadout+0x76>
 4a0:	a9 9a       	sbi	0x15, 1	; 21
 4a2:	5a 9a       	sbi	0x0b, 2	; 11
 4a4:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 4a8:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 4ac:	8b e0       	ldi	r24, 0x0B	; 11
 4ae:	09 95       	icall
 4b0:	5a 98       	cbi	0x0b, 2	; 11
 4b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4b6:	85 ff       	sbrs	r24, 5
 4b8:	fc cf       	rjmp	.-8      	; 0x4b2 <LisFrameReadout+0x8c>
 4ba:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4be:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4c6:	87 ff       	sbrs	r24, 7
 4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <LisFrameReadout+0x9c>
 4ca:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 4ce:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 4d2:	cf 01       	movw	r24, r30
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 4da:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 4de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4e2:	80 83       	st	Z, r24
 4e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4e8:	87 ff       	sbrs	r24, 7
 4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <LisFrameReadout+0xbe>
 4ec:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <pframe>
 4f0:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <pframe+0x1>
 4f4:	cf 01       	movw	r24, r30
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <pframe+0x1>
 4fc:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <pframe>
 500:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 504:	80 83       	st	Z, r24
 506:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <Lis_npixels_counter>
 50a:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <Lis_npixels_counter+0x1>
 50e:	9c 01       	movw	r18, r24
 510:	2f 5f       	subi	r18, 0xFF	; 255
 512:	3f 4f       	sbci	r19, 0xFF	; 255
 514:	30 93 46 02 	sts	0x0246, r19	; 0x800246 <Lis_npixels_counter+0x1>
 518:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <Lis_npixels_counter>
 51c:	8c 17       	cp	r24, r28
 51e:	9d 07       	cpc	r25, r29
 520:	10 f4       	brcc	.+4      	; 0x526 <LisFrameReadout+0x100>
 522:	a9 9a       	sbi	0x15, 1	; 21
 524:	bb cf       	rjmp	.-138    	; 0x49c <LisFrameReadout+0x76>
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <WriteCfgToLis>:
 52c:	98 b1       	in	r25, 0x08	; 8
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	89 27       	eor	r24, r25
 532:	88 b9       	out	0x08, r24	; 8
 534:	98 b1       	in	r25, 0x08	; 8
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	89 27       	eor	r24, r25
 53a:	88 b9       	out	0x08, r24	; 8
 53c:	aa 9a       	sbi	0x15, 2	; 21
 53e:	aa 9b       	sbis	0x15, 2	; 21
 540:	fe cf       	rjmp	.-4      	; 0x53e <WriteCfgToLis+0x12>
 542:	aa 9a       	sbi	0x15, 2	; 21
 544:	28 9a       	sbi	0x05, 0	; 5
 546:	5e 98       	cbi	0x0b, 6	; 11
 548:	a9 9a       	sbi	0x15, 1	; 21
 54a:	a9 9b       	sbis	0x15, 1	; 21
 54c:	fe cf       	rjmp	.-4      	; 0x54a <WriteCfgToLis+0x1e>
 54e:	a9 9a       	sbi	0x15, 1	; 21
 550:	aa 9a       	sbi	0x15, 2	; 21
 552:	aa 9b       	sbis	0x15, 2	; 21
 554:	fe cf       	rjmp	.-4      	; 0x552 <WriteCfgToLis+0x26>
 556:	aa 9a       	sbi	0x15, 2	; 21
 558:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	49 f4       	brne	.+18     	; 0x572 <WriteCfgToLis+0x46>
 560:	5e 9a       	sbi	0x0b, 6	; 11
 562:	a9 9a       	sbi	0x15, 1	; 21
 564:	a9 9b       	sbis	0x15, 1	; 21
 566:	fe cf       	rjmp	.-4      	; 0x564 <WriteCfgToLis+0x38>
 568:	a9 9a       	sbi	0x15, 1	; 21
 56a:	aa 9a       	sbi	0x15, 2	; 21
 56c:	aa 9b       	sbis	0x15, 2	; 21
 56e:	fe cf       	rjmp	.-4      	; 0x56c <WriteCfgToLis+0x40>
 570:	08 c0       	rjmp	.+16     	; 0x582 <WriteCfgToLis+0x56>
 572:	5e 98       	cbi	0x0b, 6	; 11
 574:	a9 9a       	sbi	0x15, 1	; 21
 576:	a9 9b       	sbis	0x15, 1	; 21
 578:	fe cf       	rjmp	.-4      	; 0x576 <WriteCfgToLis+0x4a>
 57a:	a9 9a       	sbi	0x15, 1	; 21
 57c:	aa 9a       	sbi	0x15, 2	; 21
 57e:	aa 9b       	sbis	0x15, 2	; 21
 580:	fe cf       	rjmp	.-4      	; 0x57e <WriteCfgToLis+0x52>
 582:	aa 9a       	sbi	0x15, 2	; 21
 584:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <lis_gain>
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	91 f4       	brne	.+36     	; 0x5b0 <WriteCfgToLis+0x84>
 58c:	5e 9a       	sbi	0x0b, 6	; 11
 58e:	a9 9a       	sbi	0x15, 1	; 21
 590:	a9 9b       	sbis	0x15, 1	; 21
 592:	fe cf       	rjmp	.-4      	; 0x590 <WriteCfgToLis+0x64>
 594:	a9 9a       	sbi	0x15, 1	; 21
 596:	aa 9a       	sbi	0x15, 2	; 21
 598:	aa 9b       	sbis	0x15, 2	; 21
 59a:	fe cf       	rjmp	.-4      	; 0x598 <WriteCfgToLis+0x6c>
 59c:	aa 9a       	sbi	0x15, 2	; 21
 59e:	5e 98       	cbi	0x0b, 6	; 11
 5a0:	a9 9a       	sbi	0x15, 1	; 21
 5a2:	a9 9b       	sbis	0x15, 1	; 21
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <WriteCfgToLis+0x76>
 5a6:	a9 9a       	sbi	0x15, 1	; 21
 5a8:	aa 9a       	sbi	0x15, 2	; 21
 5aa:	aa 9b       	sbis	0x15, 2	; 21
 5ac:	fe cf       	rjmp	.-4      	; 0x5aa <WriteCfgToLis+0x7e>
 5ae:	39 c0       	rjmp	.+114    	; 0x622 <WriteCfgToLis+0xf6>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	91 f4       	brne	.+36     	; 0x5d8 <WriteCfgToLis+0xac>
 5b4:	5e 98       	cbi	0x0b, 6	; 11
 5b6:	a9 9a       	sbi	0x15, 1	; 21
 5b8:	a9 9b       	sbis	0x15, 1	; 21
 5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <WriteCfgToLis+0x8c>
 5bc:	a9 9a       	sbi	0x15, 1	; 21
 5be:	aa 9a       	sbi	0x15, 2	; 21
 5c0:	aa 9b       	sbis	0x15, 2	; 21
 5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <WriteCfgToLis+0x94>
 5c4:	aa 9a       	sbi	0x15, 2	; 21
 5c6:	5e 9a       	sbi	0x0b, 6	; 11
 5c8:	a9 9a       	sbi	0x15, 1	; 21
 5ca:	a9 9b       	sbis	0x15, 1	; 21
 5cc:	fe cf       	rjmp	.-4      	; 0x5ca <WriteCfgToLis+0x9e>
 5ce:	a9 9a       	sbi	0x15, 1	; 21
 5d0:	aa 9a       	sbi	0x15, 2	; 21
 5d2:	aa 9b       	sbis	0x15, 2	; 21
 5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <WriteCfgToLis+0xa6>
 5d6:	25 c0       	rjmp	.+74     	; 0x622 <WriteCfgToLis+0xf6>
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	91 f4       	brne	.+36     	; 0x600 <WriteCfgToLis+0xd4>
 5dc:	5e 98       	cbi	0x0b, 6	; 11
 5de:	a9 9a       	sbi	0x15, 1	; 21
 5e0:	a9 9b       	sbis	0x15, 1	; 21
 5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <WriteCfgToLis+0xb4>
 5e4:	a9 9a       	sbi	0x15, 1	; 21
 5e6:	aa 9a       	sbi	0x15, 2	; 21
 5e8:	aa 9b       	sbis	0x15, 2	; 21
 5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <WriteCfgToLis+0xbc>
 5ec:	aa 9a       	sbi	0x15, 2	; 21
 5ee:	5e 98       	cbi	0x0b, 6	; 11
 5f0:	a9 9a       	sbi	0x15, 1	; 21
 5f2:	a9 9b       	sbis	0x15, 1	; 21
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <WriteCfgToLis+0xc6>
 5f6:	a9 9a       	sbi	0x15, 1	; 21
 5f8:	aa 9a       	sbi	0x15, 2	; 21
 5fa:	aa 9b       	sbis	0x15, 2	; 21
 5fc:	fe cf       	rjmp	.-4      	; 0x5fa <WriteCfgToLis+0xce>
 5fe:	11 c0       	rjmp	.+34     	; 0x622 <WriteCfgToLis+0xf6>
 600:	5e 9a       	sbi	0x0b, 6	; 11
 602:	a9 9a       	sbi	0x15, 1	; 21
 604:	a9 9b       	sbis	0x15, 1	; 21
 606:	fe cf       	rjmp	.-4      	; 0x604 <WriteCfgToLis+0xd8>
 608:	a9 9a       	sbi	0x15, 1	; 21
 60a:	aa 9a       	sbi	0x15, 2	; 21
 60c:	aa 9b       	sbis	0x15, 2	; 21
 60e:	fe cf       	rjmp	.-4      	; 0x60c <WriteCfgToLis+0xe0>
 610:	aa 9a       	sbi	0x15, 2	; 21
 612:	5e 9a       	sbi	0x0b, 6	; 11
 614:	a9 9a       	sbi	0x15, 1	; 21
 616:	a9 9b       	sbis	0x15, 1	; 21
 618:	fe cf       	rjmp	.-4      	; 0x616 <WriteCfgToLis+0xea>
 61a:	a9 9a       	sbi	0x15, 1	; 21
 61c:	aa 9a       	sbi	0x15, 2	; 21
 61e:	aa 9b       	sbis	0x15, 2	; 21
 620:	fe cf       	rjmp	.-4      	; 0x61e <WriteCfgToLis+0xf2>
 622:	aa 9a       	sbi	0x15, 2	; 21
 624:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <lis_rowselect>
 628:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__data_end>
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	e9 f4       	brne	.+58     	; 0x66a <WriteCfgToLis+0x13e>
 630:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 634:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 638:	e8 17       	cp	r30, r24
 63a:	f8 f4       	brcc	.+62     	; 0x67a <WriteCfgToLis+0x14e>
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	ea 5e       	subi	r30, 0xEA	; 234
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	80 81       	ld	r24, Z
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	11 f4       	brne	.+4      	; 0x64c <WriteCfgToLis+0x120>
 648:	5e 9a       	sbi	0x0b, 6	; 11
 64a:	01 c0       	rjmp	.+2      	; 0x64e <WriteCfgToLis+0x122>
 64c:	5e 98       	cbi	0x0b, 6	; 11
 64e:	a9 9a       	sbi	0x15, 1	; 21
 650:	a9 9b       	sbis	0x15, 1	; 21
 652:	fe cf       	rjmp	.-4      	; 0x650 <WriteCfgToLis+0x124>
 654:	a9 9a       	sbi	0x15, 1	; 21
 656:	aa 9a       	sbi	0x15, 2	; 21
 658:	aa 9b       	sbis	0x15, 2	; 21
 65a:	fe cf       	rjmp	.-4      	; 0x658 <WriteCfgToLis+0x12c>
 65c:	aa 9a       	sbi	0x15, 2	; 21
 65e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 668:	e3 cf       	rjmp	.-58     	; 0x630 <WriteCfgToLis+0x104>
 66a:	82 30       	cpi	r24, 0x02	; 2
 66c:	01 f5       	brne	.+64     	; 0x6ae <WriteCfgToLis+0x182>
 66e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 672:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 676:	e8 17       	cp	r30, r24
 678:	18 f0       	brcs	.+6      	; 0x680 <WriteCfgToLis+0x154>
 67a:	5e 98       	cbi	0x0b, 6	; 11
 67c:	28 98       	cbi	0x05, 0	; 5
 67e:	08 95       	ret
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	e1 5d       	subi	r30, 0xD1	; 209
 684:	fe 4f       	sbci	r31, 0xFE	; 254
 686:	80 81       	ld	r24, Z
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	11 f4       	brne	.+4      	; 0x690 <WriteCfgToLis+0x164>
 68c:	5e 9a       	sbi	0x0b, 6	; 11
 68e:	01 c0       	rjmp	.+2      	; 0x692 <WriteCfgToLis+0x166>
 690:	5e 98       	cbi	0x0b, 6	; 11
 692:	a9 9a       	sbi	0x15, 1	; 21
 694:	a9 9b       	sbis	0x15, 1	; 21
 696:	fe cf       	rjmp	.-4      	; 0x694 <WriteCfgToLis+0x168>
 698:	a9 9a       	sbi	0x15, 1	; 21
 69a:	aa 9a       	sbi	0x15, 2	; 21
 69c:	aa 9b       	sbis	0x15, 2	; 21
 69e:	fe cf       	rjmp	.-4      	; 0x69c <WriteCfgToLis+0x170>
 6a0:	aa 9a       	sbi	0x15, 2	; 21
 6a2:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 6a6:	8f 5f       	subi	r24, 0xFF	; 255
 6a8:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 6ac:	e0 cf       	rjmp	.-64     	; 0x66e <WriteCfgToLis+0x142>
 6ae:	83 30       	cpi	r24, 0x03	; 3
 6b0:	e9 f4       	brne	.+58     	; 0x6ec <WriteCfgToLis+0x1c0>
 6b2:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 6b6:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 6ba:	e8 17       	cp	r30, r24
 6bc:	f0 f6       	brcc	.-68     	; 0x67a <WriteCfgToLis+0x14e>
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	e8 5b       	subi	r30, 0xB8	; 184
 6c2:	fe 4f       	sbci	r31, 0xFE	; 254
 6c4:	80 81       	ld	r24, Z
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	11 f4       	brne	.+4      	; 0x6ce <WriteCfgToLis+0x1a2>
 6ca:	5e 9a       	sbi	0x0b, 6	; 11
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <WriteCfgToLis+0x1a4>
 6ce:	5e 98       	cbi	0x0b, 6	; 11
 6d0:	a9 9a       	sbi	0x15, 1	; 21
 6d2:	a9 9b       	sbis	0x15, 1	; 21
 6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <WriteCfgToLis+0x1a6>
 6d6:	a9 9a       	sbi	0x15, 1	; 21
 6d8:	aa 9a       	sbi	0x15, 2	; 21
 6da:	aa 9b       	sbis	0x15, 2	; 21
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <WriteCfgToLis+0x1ae>
 6de:	aa 9a       	sbi	0x15, 2	; 21
 6e0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 6ea:	e3 cf       	rjmp	.-58     	; 0x6b2 <WriteCfgToLis+0x186>
 6ec:	84 30       	cpi	r24, 0x04	; 4
 6ee:	f1 f4       	brne	.+60     	; 0x72c <WriteCfgToLis+0x200>
 6f0:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 6f4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 6f8:	e8 17       	cp	r30, r24
 6fa:	08 f0       	brcs	.+2      	; 0x6fe <WriteCfgToLis+0x1d2>
 6fc:	be cf       	rjmp	.-132    	; 0x67a <WriteCfgToLis+0x14e>
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	ef 59       	subi	r30, 0x9F	; 159
 702:	fe 4f       	sbci	r31, 0xFE	; 254
 704:	80 81       	ld	r24, Z
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	11 f4       	brne	.+4      	; 0x70e <WriteCfgToLis+0x1e2>
 70a:	5e 9a       	sbi	0x0b, 6	; 11
 70c:	01 c0       	rjmp	.+2      	; 0x710 <WriteCfgToLis+0x1e4>
 70e:	5e 98       	cbi	0x0b, 6	; 11
 710:	a9 9a       	sbi	0x15, 1	; 21
 712:	a9 9b       	sbis	0x15, 1	; 21
 714:	fe cf       	rjmp	.-4      	; 0x712 <WriteCfgToLis+0x1e6>
 716:	a9 9a       	sbi	0x15, 1	; 21
 718:	aa 9a       	sbi	0x15, 2	; 21
 71a:	aa 9b       	sbis	0x15, 2	; 21
 71c:	fe cf       	rjmp	.-4      	; 0x71a <WriteCfgToLis+0x1ee>
 71e:	aa 9a       	sbi	0x15, 2	; 21
 720:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 724:	8f 5f       	subi	r24, 0xFF	; 255
 726:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 72a:	e2 cf       	rjmp	.-60     	; 0x6f0 <WriteCfgToLis+0x1c4>
 72c:	85 30       	cpi	r24, 0x05	; 5
 72e:	f1 f4       	brne	.+60     	; 0x76c <WriteCfgToLis+0x240>
 730:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 734:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 738:	e8 17       	cp	r30, r24
 73a:	08 f0       	brcs	.+2      	; 0x73e <WriteCfgToLis+0x212>
 73c:	9e cf       	rjmp	.-196    	; 0x67a <WriteCfgToLis+0x14e>
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	e6 58       	subi	r30, 0x86	; 134
 742:	fe 4f       	sbci	r31, 0xFE	; 254
 744:	80 81       	ld	r24, Z
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	11 f4       	brne	.+4      	; 0x74e <WriteCfgToLis+0x222>
 74a:	5e 9a       	sbi	0x0b, 6	; 11
 74c:	01 c0       	rjmp	.+2      	; 0x750 <WriteCfgToLis+0x224>
 74e:	5e 98       	cbi	0x0b, 6	; 11
 750:	a9 9a       	sbi	0x15, 1	; 21
 752:	a9 9b       	sbis	0x15, 1	; 21
 754:	fe cf       	rjmp	.-4      	; 0x752 <WriteCfgToLis+0x226>
 756:	a9 9a       	sbi	0x15, 1	; 21
 758:	aa 9a       	sbi	0x15, 2	; 21
 75a:	aa 9b       	sbis	0x15, 2	; 21
 75c:	fe cf       	rjmp	.-4      	; 0x75a <WriteCfgToLis+0x22e>
 75e:	aa 9a       	sbi	0x15, 2	; 21
 760:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 764:	8f 5f       	subi	r24, 0xFF	; 255
 766:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 76a:	e2 cf       	rjmp	.-60     	; 0x730 <WriteCfgToLis+0x204>
 76c:	86 30       	cpi	r24, 0x06	; 6
 76e:	f1 f4       	brne	.+60     	; 0x7ac <WriteCfgToLis+0x280>
 770:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 774:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 778:	e8 17       	cp	r30, r24
 77a:	08 f0       	brcs	.+2      	; 0x77e <WriteCfgToLis+0x252>
 77c:	7e cf       	rjmp	.-260    	; 0x67a <WriteCfgToLis+0x14e>
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	eb 53       	subi	r30, 0x3B	; 59
 782:	fe 4f       	sbci	r31, 0xFE	; 254
 784:	80 81       	ld	r24, Z
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	11 f4       	brne	.+4      	; 0x78e <WriteCfgToLis+0x262>
 78a:	5e 9a       	sbi	0x0b, 6	; 11
 78c:	01 c0       	rjmp	.+2      	; 0x790 <WriteCfgToLis+0x264>
 78e:	5e 98       	cbi	0x0b, 6	; 11
 790:	a9 9a       	sbi	0x15, 1	; 21
 792:	a9 9b       	sbis	0x15, 1	; 21
 794:	fe cf       	rjmp	.-4      	; 0x792 <WriteCfgToLis+0x266>
 796:	a9 9a       	sbi	0x15, 1	; 21
 798:	aa 9a       	sbi	0x15, 2	; 21
 79a:	aa 9b       	sbis	0x15, 2	; 21
 79c:	fe cf       	rjmp	.-4      	; 0x79a <WriteCfgToLis+0x26e>
 79e:	aa 9a       	sbi	0x15, 2	; 21
 7a0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 7a4:	8f 5f       	subi	r24, 0xFF	; 255
 7a6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 7aa:	e2 cf       	rjmp	.-60     	; 0x770 <WriteCfgToLis+0x244>
 7ac:	87 30       	cpi	r24, 0x07	; 7
 7ae:	f1 f4       	brne	.+60     	; 0x7ec <WriteCfgToLis+0x2c0>
 7b0:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 7b4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 7b8:	e8 17       	cp	r30, r24
 7ba:	08 f0       	brcs	.+2      	; 0x7be <WriteCfgToLis+0x292>
 7bc:	5e cf       	rjmp	.-324    	; 0x67a <WriteCfgToLis+0x14e>
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	e4 55       	subi	r30, 0x54	; 84
 7c2:	fe 4f       	sbci	r31, 0xFE	; 254
 7c4:	80 81       	ld	r24, Z
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	11 f4       	brne	.+4      	; 0x7ce <WriteCfgToLis+0x2a2>
 7ca:	5e 9a       	sbi	0x0b, 6	; 11
 7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <WriteCfgToLis+0x2a4>
 7ce:	5e 98       	cbi	0x0b, 6	; 11
 7d0:	a9 9a       	sbi	0x15, 1	; 21
 7d2:	a9 9b       	sbis	0x15, 1	; 21
 7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <WriteCfgToLis+0x2a6>
 7d6:	a9 9a       	sbi	0x15, 1	; 21
 7d8:	aa 9a       	sbi	0x15, 2	; 21
 7da:	aa 9b       	sbis	0x15, 2	; 21
 7dc:	fe cf       	rjmp	.-4      	; 0x7da <WriteCfgToLis+0x2ae>
 7de:	aa 9a       	sbi	0x15, 2	; 21
 7e0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 7e4:	8f 5f       	subi	r24, 0xFF	; 255
 7e6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 7ea:	e2 cf       	rjmp	.-60     	; 0x7b0 <WriteCfgToLis+0x284>
 7ec:	88 30       	cpi	r24, 0x08	; 8
 7ee:	91 f5       	brne	.+100    	; 0x854 <WriteCfgToLis+0x328>
 7f0:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 7f4:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 7f8:	e8 17       	cp	r30, r24
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <WriteCfgToLis+0x2d2>
 7fc:	3e cf       	rjmp	.-388    	; 0x67a <WriteCfgToLis+0x14e>
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	ed 56       	subi	r30, 0x6D	; 109
 802:	fe 4f       	sbci	r31, 0xFE	; 254
 804:	80 81       	ld	r24, Z
 806:	81 30       	cpi	r24, 0x01	; 1
 808:	11 f4       	brne	.+4      	; 0x80e <WriteCfgToLis+0x2e2>
 80a:	5e 9a       	sbi	0x0b, 6	; 11
 80c:	01 c0       	rjmp	.+2      	; 0x810 <WriteCfgToLis+0x2e4>
 80e:	5e 98       	cbi	0x0b, 6	; 11
 810:	a9 9a       	sbi	0x15, 1	; 21
 812:	a9 9b       	sbis	0x15, 1	; 21
 814:	fe cf       	rjmp	.-4      	; 0x812 <WriteCfgToLis+0x2e6>
 816:	a9 9a       	sbi	0x15, 1	; 21
 818:	aa 9a       	sbi	0x15, 2	; 21
 81a:	aa 9b       	sbis	0x15, 2	; 21
 81c:	fe cf       	rjmp	.-4      	; 0x81a <WriteCfgToLis+0x2ee>
 81e:	aa 9a       	sbi	0x15, 2	; 21
 820:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 82a:	e2 cf       	rjmp	.-60     	; 0x7f0 <WriteCfgToLis+0x2c4>
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	e2 52       	subi	r30, 0x22	; 34
 830:	fe 4f       	sbci	r31, 0xFE	; 254
 832:	80 81       	ld	r24, Z
 834:	81 30       	cpi	r24, 0x01	; 1
 836:	a9 f4       	brne	.+42     	; 0x862 <WriteCfgToLis+0x336>
 838:	5e 9a       	sbi	0x0b, 6	; 11
 83a:	a9 9a       	sbi	0x15, 1	; 21
 83c:	a9 9b       	sbis	0x15, 1	; 21
 83e:	fe cf       	rjmp	.-4      	; 0x83c <WriteCfgToLis+0x310>
 840:	a9 9a       	sbi	0x15, 1	; 21
 842:	aa 9a       	sbi	0x15, 2	; 21
 844:	aa 9b       	sbis	0x15, 2	; 21
 846:	fe cf       	rjmp	.-4      	; 0x844 <WriteCfgToLis+0x318>
 848:	aa 9a       	sbi	0x15, 2	; 21
 84a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
 854:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 858:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <nprogbits_rowselect>
 85c:	e8 17       	cp	r30, r24
 85e:	30 f3       	brcs	.-52     	; 0x82c <WriteCfgToLis+0x300>
 860:	0c cf       	rjmp	.-488    	; 0x67a <WriteCfgToLis+0x14e>
 862:	5e 98       	cbi	0x0b, 6	; 11
 864:	ea cf       	rjmp	.-44     	; 0x83a <WriteCfgToLis+0x30e>

00000866 <AutoExpose>:
 866:	ef 92       	push	r14
 868:	ff 92       	push	r15
 86a:	0f 93       	push	r16
 86c:	1f 93       	push	r17
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	00 d0       	rcall	.+0      	; 0x874 <AutoExpose+0xe>
 874:	cd b7       	in	r28, 0x3d	; 61
 876:	de b7       	in	r29, 0x3e	; 62
 878:	0e 94 c5 00 	call	0x18a	; 0x18a <DebugLedsToggleAll>
 87c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 880:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 884:	99 83       	std	Y+1, r25	; 0x01
 886:	8a 83       	std	Y+2, r24	; 0x02
 888:	8e 01       	movw	r16, r28
 88a:	0f 5f       	subi	r16, 0xFF	; 255
 88c:	1f 4f       	sbci	r17, 0xFF	; 255
 88e:	7e 01       	movw	r14, r28
 890:	83 e0       	ldi	r24, 0x03	; 3
 892:	e8 0e       	add	r14, r24
 894:	f1 1c       	adc	r15, r1
 896:	f8 01       	movw	r30, r16
 898:	81 91       	ld	r24, Z+
 89a:	8f 01       	movw	r16, r30
 89c:	8e bd       	out	0x2e, r24	; 46
 89e:	2c 98       	cbi	0x05, 4	; 5
 8a0:	8c b5       	in	r24, 0x2c	; 44
 8a2:	8f 7b       	andi	r24, 0xBF	; 191
 8a4:	8c bd       	out	0x2c, r24	; 44
 8a6:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 8aa:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	09 95       	icall
 8b2:	8c b5       	in	r24, 0x2c	; 44
 8b4:	80 64       	ori	r24, 0x40	; 64
 8b6:	8c bd       	out	0x2c, r24	; 44
 8b8:	0d b4       	in	r0, 0x2d	; 45
 8ba:	07 fe       	sbrs	r0, 7
 8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <AutoExpose+0x52>
 8be:	8e b5       	in	r24, 0x2e	; 46
 8c0:	0e 15       	cp	r16, r14
 8c2:	1f 05       	cpc	r17, r15
 8c4:	41 f7       	brne	.-48     	; 0x896 <AutoExpose+0x30>
 8c6:	0f 90       	pop	r0
 8c8:	0f 90       	pop	r0
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	1f 91       	pop	r17
 8d0:	0f 91       	pop	r16
 8d2:	ff 90       	pop	r15
 8d4:	ef 90       	pop	r14
 8d6:	08 95       	ret

000008d8 <SendLisFrame>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	40 9a       	sbi	0x08, 0	; 8
 8e2:	0e 94 13 02 	call	0x426	; 0x426 <LisFrameReadout>
 8e6:	40 98       	cbi	0x08, 0	; 8
 8e8:	41 9a       	sbi	0x08, 1	; 8
 8ea:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <lis_sum_mode>
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	19 f0       	breq	.+6      	; 0x8f8 <SendLisFrame+0x20>
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	96 e0       	ldi	r25, 0x06	; 6
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <SendLisFrame+0x24>
 8f8:	80 e1       	ldi	r24, 0x10	; 16
 8fa:	93 e0       	ldi	r25, 0x03	; 3
 8fc:	0b e4       	ldi	r16, 0x4B	; 75
 8fe:	12 e0       	ldi	r17, 0x02	; 2
 900:	ec 01       	movw	r28, r24
 902:	c5 5b       	subi	r28, 0xB5	; 181
 904:	dd 4f       	sbci	r29, 0xFD	; 253
 906:	f8 01       	movw	r30, r16
 908:	81 91       	ld	r24, Z+
 90a:	8f 01       	movw	r16, r30
 90c:	8e bd       	out	0x2e, r24	; 46
 90e:	2c 98       	cbi	0x05, 4	; 5
 910:	8c b5       	in	r24, 0x2c	; 44
 912:	8f 7b       	andi	r24, 0xBF	; 191
 914:	8c bd       	out	0x2c, r24	; 44
 916:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 91a:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 91e:	8a e0       	ldi	r24, 0x0A	; 10
 920:	09 95       	icall
 922:	8c b5       	in	r24, 0x2c	; 44
 924:	80 64       	ori	r24, 0x40	; 64
 926:	8c bd       	out	0x2c, r24	; 44
 928:	0d b4       	in	r0, 0x2d	; 45
 92a:	07 fe       	sbrs	r0, 7
 92c:	fd cf       	rjmp	.-6      	; 0x928 <__stack+0x29>
 92e:	8e b5       	in	r24, 0x2e	; 46
 930:	0c 17       	cp	r16, r28
 932:	1d 07       	cpc	r17, r29
 934:	41 f7       	brne	.-48     	; 0x906 <__stack+0x7>
 936:	41 98       	cbi	0x08, 1	; 8
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <SendDataMasterAskedFor>:
 942:	ef 92       	push	r14
 944:	ff 92       	push	r15
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	00 d0       	rcall	.+0      	; 0x950 <SendDataMasterAskedFor+0xe>
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
 954:	98 b1       	in	r25, 0x08	; 8
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	89 27       	eor	r24, r25
 95a:	88 b9       	out	0x08, r24	; 8
 95c:	0d b4       	in	r0, 0x2d	; 45
 95e:	07 fe       	sbrs	r0, 7
 960:	fd cf       	rjmp	.-6      	; 0x95c <SendDataMasterAskedFor+0x1a>
 962:	8e b5       	in	r24, 0x2e	; 46
 964:	81 30       	cpi	r24, 0x01	; 1
 966:	51 f4       	brne	.+20     	; 0x97c <SendDataMasterAskedFor+0x3a>
 968:	0f 90       	pop	r0
 96a:	0f 90       	pop	r0
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	ff 90       	pop	r15
 976:	ef 90       	pop	r14
 978:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <SendLisFrame>
 97c:	82 30       	cpi	r24, 0x02	; 2
 97e:	c9 f5       	brne	.+114    	; 0x9f2 <SendDataMasterAskedFor+0xb0>
 980:	0d b4       	in	r0, 0x2d	; 45
 982:	07 fe       	sbrs	r0, 7
 984:	fd cf       	rjmp	.-6      	; 0x980 <SendDataMasterAskedFor+0x3e>
 986:	2e b5       	in	r18, 0x2e	; 46
 988:	0d b4       	in	r0, 0x2d	; 45
 98a:	07 fe       	sbrs	r0, 7
 98c:	fd cf       	rjmp	.-6      	; 0x988 <SendDataMasterAskedFor+0x46>
 98e:	8e b5       	in	r24, 0x2e	; 46
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	92 2b       	or	r25, r18
 994:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Lis_nticks_exposure+0x1>
 998:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Lis_nticks_exposure>
 99c:	98 b1       	in	r25, 0x08	; 8
 99e:	84 e0       	ldi	r24, 0x04	; 4
 9a0:	89 27       	eor	r24, r25
 9a2:	88 b9       	out	0x08, r24	; 8
 9a4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Lis_nticks_exposure>
 9a8:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Lis_nticks_exposure+0x1>
 9ac:	99 83       	std	Y+1, r25	; 0x01
 9ae:	8a 83       	std	Y+2, r24	; 0x02
 9b0:	8e 01       	movw	r16, r28
 9b2:	0f 5f       	subi	r16, 0xFF	; 255
 9b4:	1f 4f       	sbci	r17, 0xFF	; 255
 9b6:	7e 01       	movw	r14, r28
 9b8:	83 e0       	ldi	r24, 0x03	; 3
 9ba:	e8 0e       	add	r14, r24
 9bc:	f1 1c       	adc	r15, r1
 9be:	f8 01       	movw	r30, r16
 9c0:	81 91       	ld	r24, Z+
 9c2:	8f 01       	movw	r16, r30
 9c4:	8e bd       	out	0x2e, r24	; 46
 9c6:	2c 98       	cbi	0x05, 4	; 5
 9c8:	8c b5       	in	r24, 0x2c	; 44
 9ca:	8f 7b       	andi	r24, 0xBF	; 191
 9cc:	8c bd       	out	0x2c, r24	; 44
 9ce:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <Delay3CpuCyclesPerTick>
 9d2:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <Delay3CpuCyclesPerTick+0x1>
 9d6:	8a e0       	ldi	r24, 0x0A	; 10
 9d8:	09 95       	icall
 9da:	8c b5       	in	r24, 0x2c	; 44
 9dc:	80 64       	ori	r24, 0x40	; 64
 9de:	8c bd       	out	0x2c, r24	; 44
 9e0:	0d b4       	in	r0, 0x2d	; 45
 9e2:	07 fe       	sbrs	r0, 7
 9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <SendDataMasterAskedFor+0x9e>
 9e6:	8e b5       	in	r24, 0x2e	; 46
 9e8:	0e 15       	cp	r16, r14
 9ea:	1f 05       	cpc	r17, r15
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <SendDataMasterAskedFor+0xae>
 9ee:	6b c0       	rjmp	.+214    	; 0xac6 <SendDataMasterAskedFor+0x184>
 9f0:	e6 cf       	rjmp	.-52     	; 0x9be <SendDataMasterAskedFor+0x7c>
 9f2:	85 31       	cpi	r24, 0x15	; 21
 9f4:	51 f4       	brne	.+20     	; 0xa0a <SendDataMasterAskedFor+0xc8>
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	ff 90       	pop	r15
 a04:	ef 90       	pop	r14
 a06:	0c 94 33 04 	jmp	0x866	; 0x866 <AutoExpose>
 a0a:	86 30       	cpi	r24, 0x06	; 6
 a0c:	21 f4       	brne	.+8      	; 0xa16 <SendDataMasterAskedFor+0xd4>
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <lis_sum_mode>
 a14:	58 c0       	rjmp	.+176    	; 0xac6 <SendDataMasterAskedFor+0x184>
 a16:	85 30       	cpi	r24, 0x05	; 5
 a18:	19 f4       	brne	.+6      	; 0xa20 <SendDataMasterAskedFor+0xde>
 a1a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <lis_sum_mode>
 a1e:	53 c0       	rjmp	.+166    	; 0xac6 <SendDataMasterAskedFor+0x184>
 a20:	88 30       	cpi	r24, 0x08	; 8
 a22:	11 f4       	brne	.+4      	; 0xa28 <SendDataMasterAskedFor+0xe6>
 a24:	85 e0       	ldi	r24, 0x05	; 5
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <SendDataMasterAskedFor+0xec>
 a28:	89 30       	cpi	r24, 0x09	; 9
 a2a:	21 f4       	brne	.+8      	; 0xa34 <SendDataMasterAskedFor+0xf2>
 a2c:	84 e0       	ldi	r24, 0x04	; 4
 a2e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <lis_gain>
 a32:	49 c0       	rjmp	.+146    	; 0xac6 <SendDataMasterAskedFor+0x184>
 a34:	8a 30       	cpi	r24, 0x0A	; 10
 a36:	11 f4       	brne	.+4      	; 0xa3c <SendDataMasterAskedFor+0xfa>
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	f9 cf       	rjmp	.-14     	; 0xa2e <SendDataMasterAskedFor+0xec>
 a3c:	8b 30       	cpi	r24, 0x0B	; 11
 a3e:	11 f4       	brne	.+4      	; 0xa44 <SendDataMasterAskedFor+0x102>
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	f5 cf       	rjmp	.-22     	; 0xa2e <SendDataMasterAskedFor+0xec>
 a44:	8c 30       	cpi	r24, 0x0C	; 12
 a46:	19 f4       	brne	.+6      	; 0xa4e <SendDataMasterAskedFor+0x10c>
 a48:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <lis_rowselect>
 a4c:	3c c0       	rjmp	.+120    	; 0xac6 <SendDataMasterAskedFor+0x184>
 a4e:	8d 30       	cpi	r24, 0x0D	; 13
 a50:	11 f4       	brne	.+4      	; 0xa56 <SendDataMasterAskedFor+0x114>
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	1b c0       	rjmp	.+54     	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a56:	8e 30       	cpi	r24, 0x0E	; 14
 a58:	11 f4       	brne	.+4      	; 0xa5e <SendDataMasterAskedFor+0x11c>
 a5a:	82 e0       	ldi	r24, 0x02	; 2
 a5c:	17 c0       	rjmp	.+46     	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a5e:	8f 30       	cpi	r24, 0x0F	; 15
 a60:	11 f4       	brne	.+4      	; 0xa66 <SendDataMasterAskedFor+0x124>
 a62:	83 e0       	ldi	r24, 0x03	; 3
 a64:	13 c0       	rjmp	.+38     	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a66:	80 31       	cpi	r24, 0x10	; 16
 a68:	11 f4       	brne	.+4      	; 0xa6e <SendDataMasterAskedFor+0x12c>
 a6a:	84 e0       	ldi	r24, 0x04	; 4
 a6c:	0f c0       	rjmp	.+30     	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a6e:	81 31       	cpi	r24, 0x11	; 17
 a70:	11 f4       	brne	.+4      	; 0xa76 <SendDataMasterAskedFor+0x134>
 a72:	85 e0       	ldi	r24, 0x05	; 5
 a74:	0b c0       	rjmp	.+22     	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a76:	82 31       	cpi	r24, 0x12	; 18
 a78:	11 f4       	brne	.+4      	; 0xa7e <SendDataMasterAskedFor+0x13c>
 a7a:	86 e0       	ldi	r24, 0x06	; 6
 a7c:	07 c0       	rjmp	.+14     	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a7e:	83 31       	cpi	r24, 0x13	; 19
 a80:	11 f4       	brne	.+4      	; 0xa86 <SendDataMasterAskedFor+0x144>
 a82:	87 e0       	ldi	r24, 0x07	; 7
 a84:	03 c0       	rjmp	.+6      	; 0xa8c <SendDataMasterAskedFor+0x14a>
 a86:	84 31       	cpi	r24, 0x14	; 20
 a88:	21 f4       	brne	.+8      	; 0xa92 <SendDataMasterAskedFor+0x150>
 a8a:	88 e0       	ldi	r24, 0x08	; 8
 a8c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <lis_rowselect>
 a90:	1a c0       	rjmp	.+52     	; 0xac6 <SendDataMasterAskedFor+0x184>
 a92:	87 30       	cpi	r24, 0x07	; 7
 a94:	51 f4       	brne	.+20     	; 0xaaa <SendDataMasterAskedFor+0x168>
 a96:	0f 90       	pop	r0
 a98:	0f 90       	pop	r0
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	ff 90       	pop	r15
 aa4:	ef 90       	pop	r14
 aa6:	0c 94 96 02 	jmp	0x52c	; 0x52c <WriteCfgToLis>
 aaa:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <slave_ignore>
 aae:	89 17       	cp	r24, r25
 ab0:	51 f0       	breq	.+20     	; 0xac6 <SendDataMasterAskedFor+0x184>
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	ff 90       	pop	r15
 ac0:	ef 90       	pop	r14
 ac2:	0c 94 10 02 	jmp	0x420	; 0x420 <IndicateUnknownCommand>
 ac6:	0f 90       	pop	r0
 ac8:	0f 90       	pop	r0
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	1f 91       	pop	r17
 ad0:	0f 91       	pop	r16
 ad2:	ff 90       	pop	r15
 ad4:	ef 90       	pop	r14
 ad6:	08 95       	ret

00000ad8 <RespondToRequestsForData>:
 ad8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 adc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 ae0:	09 95       	icall
 ae2:	81 11       	cpse	r24, r1
 ae4:	0c 94 a1 04 	jmp	0x942	; 0x942 <SendDataMasterAskedFor>
 ae8:	08 95       	ret

00000aea <All_debug_leds_turn_on_and_turn_green>:
 aea:	0e 94 86 00 	call	0x10c	; 0x10c <DebugLedsTurnAllOn>
 aee:	0c 94 a9 00 	jmp	0x152	; 0x152 <DebugLedsTurnAllGreen>

00000af2 <main>:
 af2:	0e 94 75 05 	call	0xaea	; 0xaea <All_debug_leds_turn_on_and_turn_green>
 af6:	0e 94 07 01 	call	0x20e	; 0x20e <SpiSlaveInit>
 afa:	0e 94 21 01 	call	0x242	; 0x242 <UartSpiInit>
 afe:	0e 94 92 01 	call	0x324	; 0x324 <LisInit>
 b02:	0e 94 6c 05 	call	0xad8	; 0xad8 <RespondToRequestsForData>
 b06:	fd cf       	rjmp	.-6      	; 0xb02 <main+0x10>

00000b08 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 b08:	1f 92       	push	r1
 b0a:	0f 92       	push	r0
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	0f 92       	push	r0
 b10:	11 24       	eor	r1, r1
 b12:	2f 93       	push	r18
 b14:	3f 93       	push	r19
 b16:	4f 93       	push	r20
 b18:	5f 93       	push	r21
 b1a:	6f 93       	push	r22
 b1c:	7f 93       	push	r23
 b1e:	8f 93       	push	r24
 b20:	9f 93       	push	r25
 b22:	af 93       	push	r26
 b24:	bf 93       	push	r27
 b26:	ef 93       	push	r30
 b28:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 b2a:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <DoTaskForThisTest>
 b2e:	f0 91 4a 02 	lds	r31, 0x024A	; 0x80024a <DoTaskForThisTest+0x1>
 b32:	09 95       	icall
}
 b34:	ff 91       	pop	r31
 b36:	ef 91       	pop	r30
 b38:	bf 91       	pop	r27
 b3a:	af 91       	pop	r26
 b3c:	9f 91       	pop	r25
 b3e:	8f 91       	pop	r24
 b40:	7f 91       	pop	r23
 b42:	6f 91       	pop	r22
 b44:	5f 91       	pop	r21
 b46:	4f 91       	pop	r20
 b48:	3f 91       	pop	r19
 b4a:	2f 91       	pop	r18
 b4c:	0f 90       	pop	r0
 b4e:	0f be       	out	0x3f, r0	; 63
 b50:	0f 90       	pop	r0
 b52:	1f 90       	pop	r1
 b54:	18 95       	reti

00000b56 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 b56:	1f 92       	push	r1
 b58:	0f 92       	push	r0
 b5a:	0f b6       	in	r0, 0x3f	; 63
 b5c:	0f 92       	push	r0
 b5e:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 b60:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 b62:	0f 90       	pop	r0
 b64:	0f be       	out	0x3f, r0	; 63
 b66:	0f 90       	pop	r0
 b68:	1f 90       	pop	r1
 b6a:	18 95       	reti

00000b6c <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 b6c:	1f 92       	push	r1
 b6e:	0f 92       	push	r0
 b70:	0f b6       	in	r0, 0x3f	; 63
 b72:	0f 92       	push	r0
 b74:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 b76:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 b78:	0f 90       	pop	r0
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	0f 90       	pop	r0
 b7e:	1f 90       	pop	r1
 b80:	18 95       	reti

00000b82 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 b82:	8a 95       	dec	r24
 b84:	f1 f7       	brne	.-4      	; 0xb82 <Delay3CpuCyclesPerTick_Implementation>
 b86:	08 95       	ret

00000b88 <_exit>:
 b88:	f8 94       	cli

00000b8a <__stop_program>:
 b8a:	ff cf       	rjmp	.-2      	; 0xb8a <__stop_program>
