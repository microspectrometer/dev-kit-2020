
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000582  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000626  0080015c  0080015c  00000672  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003396  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fe  00000000  00000000  00003e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001676  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000828  00000000  00000000  000066a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014ca  00000000  00000000  00006ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094a  00000000  00000000  00008392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00008cdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_14>
  3c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
  9e:	0c 94 bf 02 	jmp	0x57e	; 0x57e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

inline void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
}

inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  bc:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <DebugLedsTurnAllOn>:
    SetBit(DebugLeds_port, debug_led);
}

void DebugLedsTurnGreen(uint8_t debug_led)
{
    ClearBit(DebugLeds_port, debug_led);
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <DebugLeds_ddr>
  dc:	d0 91 5a 01 	lds	r29, 0x015A	; 0x80015a <DebugLeds_ddr+0x1>
  e0:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <debug_led1>
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  ea:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <debug_led2>
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  f4:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <debug_led3>
  f8:	ce 01       	movw	r24, r28
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  fe:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <debug_led4>
 102:	ce 01       	movw	r24, r28
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000010c <DebugLedsTurnAllRed>:
}

void DebugLedsTurnAllRed(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
    SetBit(DebugLeds_port, debug_led1);
 110:	c0 91 57 01 	lds	r28, 0x0157	; 0x800157 <DebugLeds_port>
 114:	d0 91 58 01 	lds	r29, 0x0158	; 0x800158 <DebugLeds_port+0x1>
 118:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <debug_led1>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(DebugLeds_port, debug_led2);
 122:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <debug_led2>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(DebugLeds_port, debug_led3);
 12c:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <debug_led3>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(DebugLeds_port, debug_led4);
 136:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <debug_led4>
 13a:	ce 01       	movw	r24, r28
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
 140:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000144 <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 57 01 	lds	r28, 0x0157	; 0x800157 <DebugLeds_port>
 14c:	d0 91 58 01 	lds	r29, 0x0158	; 0x800158 <DebugLeds_port+0x1>
 150:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <debug_led4>
 172:	ce 01       	movw	r24, r28
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 178:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

0000017c <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 17c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiStatusRegister>
 180:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiStatusRegister+0x1>
 184:	09 95       	icall
 186:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 18a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 18e:	09 94       	ijmp

00000190 <ReadSpiStatusRegister_Implementation>:
 190:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <Spi_spsr>
 194:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <Spi_spsr+0x1>
 198:	80 81       	ld	r24, Z
 19a:	08 95       	ret

0000019c <ReadSpiDataRegister_Implementation>:
 19c:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <Spi_spdr>
 1a0:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <Spi_spdr+0x1>
 1a4:	80 81       	ld	r24, Z
 1a6:	08 95       	ret

000001a8 <EnableSpi_Implementation>:
 1a8:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <Spi_Enable>
 1ac:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Spi_spcr>
 1b0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <Spi_spcr+0x1>
 1b4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000001b8 <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 1b8:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <Spi_Miso>
 1bc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Spi_ddr>
 1c0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <Spi_ddr+0x1>
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 1c8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <EnableSpi>
 1cc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <EnableSpi+0x1>
 1d0:	09 95       	icall
    ClearPendingSpiInterrupt();
 1d2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 1d6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 1da:	09 94       	ijmp

000001dc <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 1dc:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <UartSpi_AdcConv>
 1e0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UartSpi_port>
 1e4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UartSpi_port+0x1>
 1e8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000001ec <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 1f4:	00 91 3f 01 	lds	r16, 0x013F	; 0x80013f <UartSpi_br>
 1f8:	10 91 40 01 	lds	r17, 0x0140	; 0x800140 <UartSpi_br+0x1>
 1fc:	f8 01       	movw	r30, r16
 1fe:	11 82       	std	Z+1, r1	; 0x01
 200:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 202:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <UartSpi_ddr>
 206:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <UartSpi_ddr+0x1>
 20a:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <UartSpi_Sck>
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 214:	0e 94 ee 00 	call	0x1dc	; 0x1dc <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 218:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <UartSpi_AdcConv>
 21c:	ce 01       	movw	r24, r28
 21e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 222:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <UartSpi_csrc>
 226:	d0 91 42 01 	lds	r29, 0x0142	; 0x800142 <UartSpi_csrc+0x1>
 22a:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <UartSpi_ModeSelect0>
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 234:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <UartSpi_ModeSelect1>
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 23e:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <UartSpi_ClockPolarity>
 242:	ce 01       	movw	r24, r28
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 248:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <UartSpi_ClockPhase>
 24c:	ce 01       	movw	r24, r28
 24e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 252:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <UartSpi_DataOrder>
 256:	ce 01       	movw	r24, r28
 258:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 25c:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <UartSpi_csrb>
 260:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <UartSpi_csrb+0x1>
 264:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <UartSpi_RxEnable>
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 26e:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <UartSpi_TxEnable>
 272:	ce 01       	movw	r24, r28
 274:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 278:	f8 01       	movw	r30, r16
 27a:	11 82       	std	Z+1, r1	; 0x01
 27c:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 288:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmResetCounterAtTop>
 28c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmResetCounterAtTop+0x1>
 290:	09 95       	icall
    PwmTopIsOcr0a();
 292:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmTopIsOcr0a>
 296:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmTopIsOcr0a+0x1>
 29a:	09 95       	icall
    PwmClkIsCpuClk();
 29c:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmClkIsCpuClk>
 2a0:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmClkIsCpuClk+0x1>
 2a4:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 2a6:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Lis_clktop>
 2aa:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Lis_clktop+0x1>
 2ae:	88 ec       	ldi	r24, 0xC8	; 200
 2b0:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 2b2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Lis_clkth>
 2b6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <Lis_clkth+0x1>
 2ba:	20 81       	ld	r18, Z
 2bc:	26 95       	lsr	r18
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	08 95       	ret

000002c4 <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 2c4:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <PwmEnableOutputSetUntilMatch>
 2c8:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <PwmEnableOutputSetUntilMatch+0x1>
 2cc:	09 94       	ijmp

000002ce <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 2d4:	c0 91 29 01 	lds	r28, 0x0129	; 0x800129 <Lis_PixSelect>
 2d8:	6c 2f       	mov	r22, r28
 2da:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <Lis_ddr2>
 2de:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <Lis_ddr2+0x1>
 2e2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 2e6:	6c 2f       	mov	r22, r28
 2e8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Lis_port2>
 2ec:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Lis_port2+0x1>
 2f0:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 2f4:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <Lis_ddr1>
 2f8:	d0 91 35 01 	lds	r29, 0x0135	; 0x800135 <Lis_ddr1+0x1>
 2fc:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <Lis_Clk>
 300:	ce 01       	movw	r24, r28
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 306:	10 91 27 01 	lds	r17, 0x0127	; 0x800127 <Lis_Rst>
 30a:	61 2f       	mov	r22, r17
 30c:	ce 01       	movw	r24, r28
 30e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 312:	61 2f       	mov	r22, r17
 314:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Lis_port1>
 318:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Lis_port1+0x1>
 31c:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 320:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Lis_Sync>
 324:	ce 01       	movw	r24, r28
 326:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 32a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisRunClkAt50kHz>
 32e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisRunClkAt50kHz+0x1>
 332:	09 95       	icall
    LisClkOn();
 334:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <LisClkOn>
 338:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <LisClkOn+0x1>
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 342:	09 94       	ijmp

00000344 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 348:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <Pwm_tccr0a>
 34c:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <Pwm_tccr0a+0x1>
 350:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <Pwm_Wgm00>
 354:	ce 01       	movw	r24, r28
 356:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 35a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <Pwm_Wgm01>
 35e:	ce 01       	movw	r24, r28
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 364:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000368 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 368:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <Pwm_Wgm02>
 36c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Pwm_tccr0b>
 370:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Pwm_tccr0b+0x1>
 374:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000378 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 37c:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <Pwm_tccr0b>
 380:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <Pwm_tccr0b+0x1>
 384:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <Pwm_Cs00>
 388:	ce 01       	movw	r24, r28
 38a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 38e:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <Pwm_Cs01>
 392:	ce 01       	movw	r24, r28
 394:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 398:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <Pwm_Cs02>
 39c:	ce 01       	movw	r24, r28
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 3a2:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

000003a6 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 3aa:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <Pwm_tccr0a>
 3ae:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <Pwm_tccr0a+0x1>
 3b2:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Pwm_Com0b0>
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3bc:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Pwm_Com0b1>
 3c0:	ce 01       	movw	r24, r28
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 3c6:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

000003ca <LisFrameReadout>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 3ca:	aa 9a       	sbi	0x15, 2	; 21
 3cc:	aa 9b       	sbis	0x15, 2	; 21
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <LisFrameReadout+0x2>
 3d0:	aa 9a       	sbi	0x15, 2	; 21
 3d2:	5e 9a       	sbi	0x0b, 6	; 11
 3d4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <Lis_nticks_counter+0x1>
 3d8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <Lis_nticks_counter>
 3dc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Lis_nticks_counter>
 3e0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Lis_nticks_counter+0x1>
 3e4:	9c 01       	movw	r18, r24
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <Lis_nticks_counter+0x1>
 3ee:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <Lis_nticks_counter>
 3f2:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <Lis_nticks_exposure>
 3f6:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <Lis_nticks_exposure+0x1>
 3fa:	82 17       	cp	r24, r18
 3fc:	93 07       	cpc	r25, r19
 3fe:	28 f4       	brcc	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 400:	aa 9a       	sbi	0x15, 2	; 21
 402:	aa 9b       	sbis	0x15, 2	; 21
 404:	fe cf       	rjmp	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	aa 9a       	sbi	0x15, 2	; 21
 408:	e9 cf       	rjmp	.-46     	; 0x3dc <LisFrameReadout+0x12>
 40a:	5e 98       	cbi	0x0b, 6	; 11
 40c:	82 e6       	ldi	r24, 0x62	; 98
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <pframe+0x1>
 414:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pframe>
 418:	4f 9b       	sbis	0x09, 7	; 9
 41a:	fe cf       	rjmp	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	4f 99       	sbic	0x09, 7	; 9
 41e:	fe cf       	rjmp	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 424:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 428:	9c 01       	movw	r18, r24
 42a:	2f 5f       	subi	r18, 0xFF	; 255
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
 42e:	30 93 5d 01 	sts	0x015D, r19	; 0x80015d <__data_end+0x1>
 432:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <__data_end>
 436:	80 31       	cpi	r24, 0x10	; 16
 438:	93 40       	sbci	r25, 0x03	; 3
 43a:	b8 f5       	brcc	.+110    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 43c:	a9 9a       	sbi	0x15, 1	; 21
 43e:	a9 9b       	sbis	0x15, 1	; 21
 440:	fe cf       	rjmp	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	a9 9a       	sbi	0x15, 1	; 21
 444:	5a 9a       	sbi	0x0b, 2	; 11
 446:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <Delay3CpuCyclesPerTick>
 44a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <Delay3CpuCyclesPerTick+0x1>
 44e:	8b e0       	ldi	r24, 0x0B	; 11
 450:	09 95       	icall
 452:	5a 98       	cbi	0x0b, 2	; 11
 454:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 458:	85 ff       	sbrs	r24, 5
 45a:	fc cf       	rjmp	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 460:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 464:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 468:	87 ff       	sbrs	r24, 7
 46a:	fc cf       	rjmp	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <pframe>
 470:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <pframe+0x1>
 474:	cf 01       	movw	r24, r30
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <pframe+0x1>
 47c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pframe>
 480:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 484:	80 83       	st	Z, r24
 486:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 48a:	87 ff       	sbrs	r24, 7
 48c:	fc cf       	rjmp	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <pframe>
 492:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <pframe+0x1>
 496:	cf 01       	movw	r24, r30
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <pframe+0x1>
 49e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pframe>
 4a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4a6:	80 83       	st	Z, r24
 4a8:	bb cf       	rjmp	.-138    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 4aa:	08 95       	ret

000004ac <All_debug_leds_turn_on_and_turn_green>:
 4ac:	0e 94 6a 00 	call	0xd4	; 0xd4 <DebugLedsTurnAllOn>
 4b0:	0c 94 a2 00 	jmp	0x144	; 0x144 <DebugLedsTurnAllGreen>

000004b4 <main>:
 4b4:	0e 94 56 02 	call	0x4ac	; 0x4ac <All_debug_leds_turn_on_and_turn_green>
 4b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SpiSlaveInit>
 4bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <UartSpiInit>
 4c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <LisInit>
 4c4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <Lis_nticks_counter+0x1>
 4c8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <Lis_nticks_counter>
 4cc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Lis_nticks_counter>
 4d0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Lis_nticks_counter+0x1>
 4d4:	9c 01       	movw	r18, r24
 4d6:	2f 5f       	subi	r18, 0xFF	; 255
 4d8:	3f 4f       	sbci	r19, 0xFF	; 255
 4da:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <Lis_nticks_counter+0x1>
 4de:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <Lis_nticks_counter>
 4e2:	0a 97       	sbiw	r24, 0x0a	; 10
 4e4:	28 f4       	brcc	.+10     	; 0x4f0 <main+0x3c>
 4e6:	aa 9a       	sbi	0x15, 2	; 21
 4e8:	aa 9b       	sbis	0x15, 2	; 21
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <main+0x34>
 4ec:	aa 9a       	sbi	0x15, 2	; 21
 4ee:	ee cf       	rjmp	.-36     	; 0x4cc <main+0x18>
 4f0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LisFrameReadout>
 4f4:	0e 94 86 00 	call	0x10c	; 0x10c <DebugLedsTurnAllRed>
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret

000004fe <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 520:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <DoTaskForThisTest>
 524:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <DoTaskForThisTest+0x1>
 528:	09 95       	icall
}
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	bf 91       	pop	r27
 530:	af 91       	pop	r26
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	7f 91       	pop	r23
 538:	6f 91       	pop	r22
 53a:	5f 91       	pop	r21
 53c:	4f 91       	pop	r20
 53e:	3f 91       	pop	r19
 540:	2f 91       	pop	r18
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 556:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 56c:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 578:	8a 95       	dec	r24
 57a:	f1 f7       	brne	.-4      	; 0x578 <Delay3CpuCyclesPerTick_Implementation>
 57c:	08 95       	ret

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
