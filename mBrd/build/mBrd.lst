
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000606  00800142  00800142  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000260d  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6e  00000000  00000000  00003015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec6  00000000  00000000  00003e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e8  00000000  00000000  00004d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000101a  00000000  00000000  00005334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c6  00000000  00000000  0000634e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00006b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 02 	call	0x592	; 0x592 <main>
  9e:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <DebugLeds_ddr>
 102:	d0 91 40 01 	lds	r29, 0x0140	; 0x800140 <DebugLeds_ddr+0x1>
 106:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <debug_led1>
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 110:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <debug_led2>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 11a:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <debug_led3>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 124:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <debug_led4>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DebugLedsTurnRed>:
 134:	68 2f       	mov	r22, r24
 136:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <DebugLeds_port>
 13a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <DebugLeds_port+0x1>
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 142:	08 95       	ret

00000144 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <DebugLeds_port>
 14c:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <DebugLeds_port+0x1>
 150:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <debug_led4>
 172:	ce 01       	movw	r24, r28
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <ClearPendingSpiInterrupt_Implementation>:
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 17e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
 182:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
 186:	09 95       	icall
 188:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 18c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 190:	09 95       	icall
 192:	08 95       	ret

00000194 <ReadSpiStatusRegister_Implementation>:
 194:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <Spi_spsr>
 198:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <Spi_spsr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <ReadSpiDataRegister_Implementation>:
 1a0:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <Spi_spdr>
 1a4:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <Spi_spdr+0x1>
 1a8:	80 81       	ld	r24, Z
 1aa:	08 95       	ret

000001ac <WriteSpiDataRegister_Implementation>:
 1ac:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <Spi_spdr>
 1b0:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <Spi_spdr+0x1>
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret

000001b8 <DisableSpi_Implementation>:
 1b8:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <Spi_Enable>
 1bc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Spi_spcr>
 1c0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Spi_spcr+0x1>
 1c4:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1c8:	08 95       	ret

000001ca <SpiSlaveSignalDataIsReady_Implementation>:
 1ca:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <Spi_Miso>
 1ce:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Spi_port>
 1d2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Spi_port+0x1>
 1d6:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1da:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 1de:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 1e2:	09 95       	icall
 1e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 1e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 1ec:	09 95       	icall
 1ee:	08 95       	ret

000001f0 <EnableSpi_Implementation>:
 1f0:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <Spi_Enable>
 1f4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Spi_spcr>
 1f8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Spi_spcr+0x1>
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 200:	08 95       	ret

00000202 <SpiTransferIsDone_Implementation>:
 202:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <Spi_InterruptFlag>
 206:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Spi_spsr>
 20a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Spi_spsr+0x1>
 20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 212:	08 95       	ret

00000214 <SpiSlaveInit>:
 214:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <Spi_Miso>
 218:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Spi_ddr>
 21c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Spi_ddr+0x1>
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 224:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 228:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 22c:	09 95       	icall
 22e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 232:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
 236:	09 95       	icall
 238:	08 95       	ret

0000023a <SpiSlaveRead>:
    EnableSpi();
}
void (*SpiSlaveSignalDataIsReady)(void) = SpiSlaveSignalDataIsReady_Implementation;
uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
 23a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 23e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 242:	09 95       	icall
 244:	88 23       	and	r24, r24
 246:	c9 f3       	breq	.-14     	; 0x23a <SpiSlaveRead>
    return ReadSpiDataRegister();
 248:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 24c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 250:	09 95       	icall
}
 252:	08 95       	ret

00000254 <SpiSlaveSendBytes>:
void SpiSlaveSendBytes(uint8_t *bytes, uint16_t nbytes)
{
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 25c:	61 15       	cp	r22, r1
 25e:	71 05       	cpc	r23, r1
 260:	c9 f0       	breq	.+50     	; 0x294 <SpiSlaveSendBytes+0x40>
 262:	8c 01       	movw	r16, r24
 264:	ec 01       	movw	r28, r24
 266:	06 0f       	add	r16, r22
 268:	17 1f       	adc	r17, r23
    {
        /* *Spi_spdr = bytes[byte_index]; */
        WriteSpiDataRegister(bytes[byte_index]);
 26a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 26e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 272:	89 91       	ld	r24, Y+
 274:	09 95       	icall
        SpiSlaveSignalDataIsReady();
 276:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 27a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 27e:	09 95       	icall
        while ( !SpiTransferIsDone() );
 280:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 284:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 288:	09 95       	icall
 28a:	88 23       	and	r24, r24
 28c:	c9 f3       	breq	.-14     	; 0x280 <SpiSlaveSendBytes+0x2c>
    return ReadSpiDataRegister();
}
void SpiSlaveSendBytes(uint8_t *bytes, uint16_t nbytes)
{
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 28e:	c0 17       	cp	r28, r16
 290:	d1 07       	cpc	r29, r17
 292:	59 f7       	brne	.-42     	; 0x26a <SpiSlaveSendBytes+0x16>
    // The SPI master waits for MISO to go low after every read.
    // This gaurantees the next byte of data is ready.
    // The SPI master does not have to release SlaveSelect, but it can.
    // SlaveSelect being low should not impact the slave's ability to disable
    // SPI and pull MISO low.
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <StartAdcReadout>:
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
}
static void StartAdcReadout(void)
{
    ClearBit(UartSpi_port, UartSpi_AdcConv);
 29e:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <UartSpi_AdcConv>
 2a2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UartSpi_port>
 2a6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UartSpi_port+0x1>
 2aa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 2ae:	08 95       	ret

000002b0 <UartSpiInit>:
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
}
void UartSpiInit(void)
{
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
{
    // Configure USART to clock ADC SCK at fosc/2 = 5MHz:
        // UBRR0    = fosc/(2*baudrate) -1
        // baudrate = fosc/(2*(UBBR0+1)); // baud rate is bits per second
        // fosc=10MHz, so for UBBR0=0, baudrate = fosc/2 = 5MHz
    *UartSpi_br = 0;
 2b8:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <UartSpi_br>
 2bc:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <UartSpi_br+0x1>
 2c0:	f8 01       	movw	r30, r16
 2c2:	11 82       	std	Z+1, r1	; 0x01
 2c4:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 2c6:	c0 91 2a 01 	lds	r28, 0x012A	; 0x80012a <UartSpi_ddr>
 2ca:	d0 91 2b 01 	lds	r29, 0x012B	; 0x80012b <UartSpi_ddr+0x1>
 2ce:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <UartSpi_Sck>
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz();
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 2d8:	0e 94 4f 01 	call	0x29e	; 0x29e <StartAdcReadout>
    SetBit(UartSpi_port, UartSpi_AdcConv);
}
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 2dc:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <UartSpi_AdcConv>
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableSpiMode(void)
{
    // Enable ATmega328 USART in SPI master mode.
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 2e6:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <UartSpi_csrc>
 2ea:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <UartSpi_csrc+0x1>
 2ee:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <UartSpi_ModeSelect0>
 2f2:	ce 01       	movw	r24, r28
 2f4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 2f8:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <UartSpi_ModeSelect1>
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 302:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <UartSpi_ClockPolarity>
 306:	ce 01       	movw	r24, r28
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 30c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <UartSpi_ClockPhase>
 310:	ce 01       	movw	r24, r28
 312:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);    // MSB is transmitted first
 316:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <UartSpi_DataOrder>
 31a:	ce 01       	movw	r24, r28
 31c:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 320:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <UartSpi_csrb>
 324:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <UartSpi_csrb+0x1>
 328:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <UartSpi_RxEnable>
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 332:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <UartSpi_TxEnable>
 336:	ce 01       	movw	r24, r28
 338:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Configure USART to clock ADC SCK at fosc/2 = 5MHz:
        // UBRR0    = fosc/(2*baudrate) -1
        // baudrate = fosc/(2*(UBBR0+1)); // baud rate is bits per second
        // fosc=10MHz, so for UBBR0=0, baudrate = fosc/2 = 5MHz
    *UartSpi_br = 0;
 33c:	f8 01       	movw	r30, r16
 33e:	11 82       	std	Z+1, r1	; 0x01
 340:	10 82       	st	Z, r1
    RunSpiAt5Mhz();
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    EnableSpiMode();
    RunSpiAt5Mhz(); // Do I need to call this again after the enable?
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <UartSpiRead>:
static uint8_t ReadUartSpiDataRegister(void)
{
    return *UartSpi_data;
}
uint16_t UartSpiRead(void)
{
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
    ClearBit(UartSpi_port, UartSpi_AdcConv);
}
static void (*AdcConvIdleLow)(void) = StartAdcReadout;
static void StartAdcConversion(void)
{
    SetBit(UartSpi_port, UartSpi_AdcConv);
 35c:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <UartSpi_AdcConv>
 360:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UartSpi_port>
 364:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UartSpi_port+0x1>
 368:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
uint16_t UartSpiRead(void)
{
    StartAdcConversion(); // conversion takes 4.66us max; one loop iter = 3 cpu
    /* uint8_t tconv = 15; _delay_loop_1(tconv); // 3*1.0e-7s*15 = 4.5us */
    // Wait for conversion to finish
    uint8_t ticks = 15; Delay3CpuCyclesPerTick(ticks); // 3*1.0e-7s*15 = 4.5us
 36c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <Delay3CpuCyclesPerTick>
 370:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <Delay3CpuCyclesPerTick+0x1>
 374:	8f e0       	ldi	r24, 0x0F	; 15
 376:	09 95       	icall
    StartAdcReadout();
 378:	0e 94 4f 01 	call	0x29e	; 0x29e <StartAdcReadout>
    RunSpiAt5Mhz(); // Do I need to call this again after the enable?
}
static bool TxBufferIsEmpty(void)
{
    // Check `data register empty` flag UDRE0
    return BitIsSet(UartSpi_csra, UartSpi_DataRegEmpty);
 37c:	00 91 26 01 	lds	r16, 0x0126	; 0x800126 <UartSpi_csra>
 380:	10 91 27 01 	lds	r17, 0x0127	; 0x800127 <UartSpi_csra+0x1>
 384:	f0 90 14 01 	lds	r15, 0x0114	; 0x800114 <UartSpi_DataRegEmpty>
 388:	c0 2f       	mov	r28, r16
 38a:	d1 2f       	mov	r29, r17
 38c:	6f 2d       	mov	r22, r15
 38e:	80 2f       	mov	r24, r16
 390:	91 2f       	mov	r25, r17
 392:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
    StartAdcConversion(); // conversion takes 4.66us max; one loop iter = 3 cpu
    /* uint8_t tconv = 15; _delay_loop_1(tconv); // 3*1.0e-7s*15 = 4.5us */
    // Wait for conversion to finish
    uint8_t ticks = 15; Delay3CpuCyclesPerTick(ticks); // 3*1.0e-7s*15 = 4.5us
    StartAdcReadout();
    while (!TxBufferIsEmpty());
 396:	88 23       	and	r24, r24
 398:	b9 f3       	breq	.-18     	; 0x388 <UartSpiRead+0x3c>
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
 39a:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <UartSpi_data>
 39e:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <UartSpi_data+0x1>
 3a2:	f6 01       	movw	r30, r12
 3a4:	10 82       	st	Z, r1
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 3a6:	10 82       	st	Z, r1
    return BitIsSet(UartSpi_csra, UartSpi_DataRegEmpty);
}
static bool UartSpiTransferIsDone(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 3a8:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <UartSpi_RxComplete>
 3ac:	01 2f       	mov	r16, r17
 3ae:	61 2f       	mov	r22, r17
 3b0:	8c 2f       	mov	r24, r28
 3b2:	9d 2f       	mov	r25, r29
 3b4:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
    StartAdcReadout();
    while (!TxBufferIsEmpty());
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
    while (!UartSpiTransferIsDone()) ;
 3b8:	88 23       	and	r24, r24
 3ba:	c1 f3       	breq	.-16     	; 0x3ac <UartSpiRead+0x60>
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
}
static uint8_t ReadUartSpiDataRegister(void)
{
    return *UartSpi_data;
 3bc:	f6 01       	movw	r30, r12
 3be:	e0 80       	ld	r14, Z
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
    while (!UartSpiTransferIsDone()) ;
    uint16_t adc_reading;
    adc_reading = ReadUartSpiDataRegister();    // MSB
 3c0:	f1 2c       	mov	r15, r1
    adc_reading = adc_reading << 8;
 3c2:	fe 2c       	mov	r15, r14
 3c4:	ee 24       	eor	r14, r14
    return BitIsSet(UartSpi_csra, UartSpi_DataRegEmpty);
}
static bool UartSpiTransferIsDone(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 3c6:	60 2f       	mov	r22, r16
 3c8:	8c 2f       	mov	r24, r28
 3ca:	9d 2f       	mov	r25, r29
 3cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
    while (!UartSpiTransferIsDone()) ;
    uint16_t adc_reading;
    adc_reading = ReadUartSpiDataRegister();    // MSB
    adc_reading = adc_reading << 8;
    while (!UartSpiTransferIsDone()) ;
 3d0:	88 23       	and	r24, r24
 3d2:	c9 f3       	breq	.-14     	; 0x3c6 <UartSpiRead+0x7a>
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
}
static uint8_t ReadUartSpiDataRegister(void)
{
    return *UartSpi_data;
 3d4:	f6 01       	movw	r30, r12
 3d6:	80 81       	ld	r24, Z
    adc_reading = ReadUartSpiDataRegister();    // MSB
    adc_reading = adc_reading << 8;
    while (!UartSpiTransferIsDone()) ;
    adc_reading |= ReadUartSpiDataRegister();   // LSB
    return adc_reading;
}
 3d8:	97 01       	movw	r18, r14
 3da:	28 2b       	or	r18, r24
 3dc:	c9 01       	movw	r24, r18
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	08 95       	ret

000003f0 <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 3f6:	08 95       	ret

000003f8 <SendAdcReading>:
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <SendAdcReading+0x6>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 408:	0e 94 a6 01 	call	0x34c	; 0x34c <UartSpiRead>
 40c:	99 83       	std	Y+1, r25	; 0x01
 40e:	8a 83       	std	Y+2, r24	; 0x02
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	ce 01       	movw	r24, r28
 416:	01 96       	adiw	r24, 0x01	; 1
 418:	0e 94 2a 01 	call	0x254	; 0x254 <SpiSlaveSendBytes>
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <SendFakeAdcReading>:
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <SendFakeAdcReading+0x6>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 436:	82 e1       	ldi	r24, 0x12	; 18
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	84 e3       	ldi	r24, 0x34	; 52
 43c:	8a 83       	std	Y+2, r24	; 0x02
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	0e 94 2a 01 	call	0x254	; 0x254 <SpiSlaveSendBytes>
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <SetupDebugLeds>:
 454:	0e 94 7d 00 	call	0xfa	; 0xfa <DebugLedsTurnAllOn>
 458:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
 45c:	08 95       	ret

0000045e <SendDummyByte>:
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	8e bd       	out	0x2e, r24	; 46
 468:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 46c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 470:	09 95       	icall
 472:	08 95       	ret

00000474 <SendFourDummyBytes>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 d0       	rcall	.+0      	; 0x47a <SendFourDummyBytes+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <SendFourDummyBytes+0x8>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	89 83       	std	Y+1, r24	; 0x01
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	8a 83       	std	Y+2, r24	; 0x02
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	8b 83       	std	Y+3, r24	; 0x03
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	8c 83       	std	Y+4, r24	; 0x04
 496:	64 e0       	ldi	r22, 0x04	; 4
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	0e 94 2a 01 	call	0x254	; 0x254 <SpiSlaveSendBytes>
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <FillDummyFrameWithAlphabet>:
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	04 e4       	ldi	r16, 0x44	; 68
 4bc:	11 e0       	ldi	r17, 0x01	; 1
 4be:	c8 e4       	ldi	r28, 0x48	; 72
 4c0:	d7 e0       	ldi	r29, 0x07	; 7
 4c2:	f8 01       	movw	r30, r16
 4c4:	0f 2e       	mov	r0, r31
 4c6:	fa e1       	ldi	r31, 0x1A	; 26
 4c8:	ff 2e       	mov	r15, r31
 4ca:	f0 2d       	mov	r31, r0
 4cc:	af 01       	movw	r20, r30
 4ce:	40 1b       	sub	r20, r16
 4d0:	51 0b       	sbc	r21, r17
 4d2:	9a 01       	movw	r18, r20
 4d4:	a5 ec       	ldi	r26, 0xC5	; 197
 4d6:	be e4       	ldi	r27, 0x4E	; 78
 4d8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__umulhisi3>
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	f8 9e       	mul	r15, r24
 4ea:	90 01       	movw	r18, r0
 4ec:	f9 9e       	mul	r15, r25
 4ee:	30 0d       	add	r19, r0
 4f0:	11 24       	eor	r1, r1
 4f2:	42 1b       	sub	r20, r18
 4f4:	53 0b       	sbc	r21, r19
 4f6:	4f 5b       	subi	r20, 0xBF	; 191
 4f8:	41 93       	st	Z+, r20
 4fa:	ec 17       	cp	r30, r28
 4fc:	fd 07       	cpc	r31, r29
 4fe:	31 f7       	brne	.-52     	; 0x4cc <FillDummyFrameWithAlphabet+0x1c>
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	08 95       	ret

0000050c <SendDummyFrame>:
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 512:	0e 94 58 02 	call	0x4b0	; 0x4b0 <FillDummyFrameWithAlphabet>
 516:	64 e0       	ldi	r22, 0x04	; 4
 518:	76 e0       	ldi	r23, 0x06	; 6
 51a:	84 e4       	ldi	r24, 0x44	; 68
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 2a 01 	call	0x254	; 0x254 <SpiSlaveSendBytes>
 522:	08 95       	ret

00000524 <SendDataMasterAskedFor>:
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 52a:	0e 94 1d 01 	call	0x23a	; 0x23a <SpiSlaveRead>
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	19 f4       	brne	.+6      	; 0x538 <SendDataMasterAskedFor+0x14>
 532:	0e 94 2f 02 	call	0x45e	; 0x45e <SendDummyByte>
 536:	19 c0       	rjmp	.+50     	; 0x56a <SendDataMasterAskedFor+0x46>
 538:	82 30       	cpi	r24, 0x02	; 2
 53a:	19 f4       	brne	.+6      	; 0x542 <SendDataMasterAskedFor+0x1e>
 53c:	0e 94 3a 02 	call	0x474	; 0x474 <SendFourDummyBytes>
 540:	14 c0       	rjmp	.+40     	; 0x56a <SendDataMasterAskedFor+0x46>
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	19 f4       	brne	.+6      	; 0x54c <SendDataMasterAskedFor+0x28>
 546:	0e 94 86 02 	call	0x50c	; 0x50c <SendDummyFrame>
 54a:	0f c0       	rjmp	.+30     	; 0x56a <SendDataMasterAskedFor+0x46>
 54c:	84 30       	cpi	r24, 0x04	; 4
 54e:	19 f4       	brne	.+6      	; 0x556 <SendDataMasterAskedFor+0x32>
 550:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SendAdcReading>
 554:	0a c0       	rjmp	.+20     	; 0x56a <SendDataMasterAskedFor+0x46>
 556:	85 30       	cpi	r24, 0x05	; 5
 558:	19 f4       	brne	.+6      	; 0x560 <SendDataMasterAskedFor+0x3c>
 55a:	0e 94 13 02 	call	0x426	; 0x426 <SendFakeAdcReading>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <SendDataMasterAskedFor+0x46>
 560:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <slave_ignore>
 564:	89 13       	cpse	r24, r25
 566:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <IndicateUnknownCommand>
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 570:	08 95       	ret

00000572 <RespondToRequestsForData>:
 572:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 576:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 57a:	09 95       	icall
 57c:	81 11       	cpse	r24, r1
 57e:	0e 94 92 02 	call	0x524	; 0x524 <SendDataMasterAskedFor>
 582:	08 95       	ret

00000584 <App_version_of_Slave_RespondToRequestsForData>:
 584:	0e 94 0a 01 	call	0x214	; 0x214 <SpiSlaveInit>
 588:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UartSpiInit>
 58c:	0e 94 b9 02 	call	0x572	; 0x572 <RespondToRequestsForData>
 590:	fd cf       	rjmp	.-6      	; 0x58c <App_version_of_Slave_RespondToRequestsForData+0x8>

00000592 <main>:
 592:	0e 94 2a 02 	call	0x454	; 0x454 <SetupDebugLeds>
 596:	0e 94 c2 02 	call	0x584	; 0x584 <App_version_of_Slave_RespondToRequestsForData>

0000059a <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 59a:	1f 92       	push	r1
 59c:	0f 92       	push	r0
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	0f 92       	push	r0
 5a2:	11 24       	eor	r1, r1
 5a4:	2f 93       	push	r18
 5a6:	3f 93       	push	r19
 5a8:	4f 93       	push	r20
 5aa:	5f 93       	push	r21
 5ac:	6f 93       	push	r22
 5ae:	7f 93       	push	r23
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	af 93       	push	r26
 5b6:	bf 93       	push	r27
 5b8:	ef 93       	push	r30
 5ba:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 5bc:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
 5c0:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x1>
 5c4:	09 95       	icall
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <Delay3CpuCyclesPerTick_Implementation>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5e8:	8a 95       	dec	r24
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <Delay3CpuCyclesPerTick_Implementation>
 5ec:	08 95       	ret

000005ee <__umulhisi3>:
 5ee:	a2 9f       	mul	r26, r18
 5f0:	b0 01       	movw	r22, r0
 5f2:	b3 9f       	mul	r27, r19
 5f4:	c0 01       	movw	r24, r0
 5f6:	a3 9f       	mul	r26, r19
 5f8:	70 0d       	add	r23, r0
 5fa:	81 1d       	adc	r24, r1
 5fc:	11 24       	eor	r1, r1
 5fe:	91 1d       	adc	r25, r1
 600:	b2 9f       	mul	r27, r18
 602:	70 0d       	add	r23, r0
 604:	81 1d       	adc	r24, r1
 606:	11 24       	eor	r1, r1
 608:	91 1d       	adc	r25, r1
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
