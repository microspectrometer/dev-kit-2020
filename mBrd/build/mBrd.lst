
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00000882  00000916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000882  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800164  00800164  0000097a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007190  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014b9  00000000  00000000  00007f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bed  00000000  00000000  00009445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b28  00000000  00000000  0000c034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ad1  00000000  00000000  0000cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a00  00000000  00000000  0000e62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000598  00000000  00000000  0001302d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_14>
  3c:	0c 94 34 04 	jmp	0x868	; 0x868 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 36       	cpi	r26, 0x64	; 100
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e6       	ldi	r26, 0x64	; 100
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <main>
  9e:	0c 94 3f 04 	jmp	0x87e	; 0x87e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DebugLedsTurnAllOn>:
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
  a6:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <DebugLeds_ddr>
  aa:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <DebugLeds_ddr+0x1>
  ae:	40 81       	ld	r20, Z
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9c 01       	movw	r18, r24
  b6:	00 90 5f 01 	lds	r0, 0x015F	; 0x80015f <debug_led1>
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DebugLedsTurnAllOn+0x1a>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DebugLedsTurnAllOn+0x16>
  c4:	24 2b       	or	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	40 81       	ld	r20, Z
  ca:	9c 01       	movw	r18, r24
  cc:	00 90 5e 01 	lds	r0, 0x015E	; 0x80015e <debug_led2>
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DebugLedsTurnAllOn+0x30>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DebugLedsTurnAllOn+0x2c>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	40 81       	ld	r20, Z
  e0:	9c 01       	movw	r18, r24
  e2:	00 90 5d 01 	lds	r0, 0x015D	; 0x80015d <debug_led3>
  e6:	02 c0       	rjmp	.+4      	; 0xec <DebugLedsTurnAllOn+0x46>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DebugLedsTurnAllOn+0x42>
  f0:	24 2b       	or	r18, r20
  f2:	20 83       	st	Z, r18
  f4:	20 81       	ld	r18, Z
  f6:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <debug_led4>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DebugLedsTurnAllOn+0x5a>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <DebugLedsTurnAllOn+0x56>
 104:	82 2b       	or	r24, r18
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <DebugLedsTurnAllRed>:
    ClearBit(DebugLeds_port, debug_led);
}

void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
 10a:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <DebugLeds_port>
 10e:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <DebugLeds_port+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 112:	40 81       	ld	r20, Z
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	9c 01       	movw	r18, r24
 11a:	00 90 5f 01 	lds	r0, 0x015F	; 0x80015f <debug_led1>
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DebugLedsTurnAllRed+0x1a>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DebugLedsTurnAllRed+0x16>
 128:	24 2b       	or	r18, r20
 12a:	20 83       	st	Z, r18
 12c:	40 81       	ld	r20, Z
 12e:	9c 01       	movw	r18, r24
 130:	00 90 5e 01 	lds	r0, 0x015E	; 0x80015e <debug_led2>
 134:	02 c0       	rjmp	.+4      	; 0x13a <DebugLedsTurnAllRed+0x30>
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DebugLedsTurnAllRed+0x2c>
 13e:	24 2b       	or	r18, r20
 140:	20 83       	st	Z, r18
 142:	40 81       	ld	r20, Z
 144:	9c 01       	movw	r18, r24
 146:	00 90 5d 01 	lds	r0, 0x015D	; 0x80015d <debug_led3>
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DebugLedsTurnAllRed+0x46>
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <DebugLedsTurnAllRed+0x42>
 154:	24 2b       	or	r18, r20
 156:	20 83       	st	Z, r18
 158:	20 81       	ld	r18, Z
 15a:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <debug_led4>
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DebugLedsTurnAllRed+0x5a>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <DebugLedsTurnAllRed+0x56>
 168:	82 2b       	or	r24, r18
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <DebugLedsTurnAllGreen>:
    SetBit(DebugLeds_port, debug_led4);
}

void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
 16e:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <DebugLeds_port>
 172:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <DebugLeds_port+0x1>
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 176:	30 81       	ld	r19, Z
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	00 90 5f 01 	lds	r0, 0x015F	; 0x80015f <debug_led1>
 182:	02 c0       	rjmp	.+4      	; 0x188 <DebugLedsTurnAllGreen+0x1a>
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DebugLedsTurnAllGreen+0x16>
 18c:	24 2f       	mov	r18, r20
 18e:	20 95       	com	r18
 190:	23 23       	and	r18, r19
 192:	20 83       	st	Z, r18
 194:	30 81       	ld	r19, Z
 196:	ac 01       	movw	r20, r24
 198:	00 90 5e 01 	lds	r0, 0x015E	; 0x80015e <debug_led2>
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DebugLedsTurnAllGreen+0x34>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DebugLedsTurnAllGreen+0x30>
 1a6:	24 2f       	mov	r18, r20
 1a8:	20 95       	com	r18
 1aa:	23 23       	and	r18, r19
 1ac:	20 83       	st	Z, r18
 1ae:	30 81       	ld	r19, Z
 1b0:	ac 01       	movw	r20, r24
 1b2:	00 90 5d 01 	lds	r0, 0x015D	; 0x80015d <debug_led3>
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DebugLedsTurnAllGreen+0x4e>
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DebugLedsTurnAllGreen+0x4a>
 1c0:	24 2f       	mov	r18, r20
 1c2:	20 95       	com	r18
 1c4:	23 23       	and	r18, r19
 1c6:	20 83       	st	Z, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <debug_led4>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DebugLedsTurnAllGreen+0x66>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DebugLedsTurnAllGreen+0x62>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 1e0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
 1e4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
 1e8:	09 95       	icall
 1ea:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 1ee:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 1f2:	09 94       	ijmp

000001f4 <ReadSpiStatusRegister_Implementation>:
 1f4:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spsr>
 1f8:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spsr+0x1>
 1fc:	80 81       	ld	r24, Z
 1fe:	08 95       	ret

00000200 <DisableSpi_Implementation>:
 200:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spcr>
 204:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spcr+0x1>
 208:	20 81       	ld	r18, Z
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Enable>
 212:	02 c0       	rjmp	.+4      	; 0x218 <DisableSpi_Implementation+0x18>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DisableSpi_Implementation+0x14>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <EnableSpi_Implementation>:
 224:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spcr>
 228:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spcr+0x1>
 22c:	20 81       	ld	r18, Z
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Enable>
 236:	02 c0       	rjmp	.+4      	; 0x23c <EnableSpi_Implementation+0x18>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <EnableSpi_Implementation+0x14>
 240:	82 2b       	or	r24, r18
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <SpiTransferIsDone_Implementation>:
 246:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spsr>
 24a:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spsr+0x1>
 24e:	80 81       	ld	r24, Z
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_InterruptFlag>
 258:	02 c0       	rjmp	.+4      	; 0x25e <SpiTransferIsDone_Implementation+0x18>
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <SpiTransferIsDone_Implementation+0x14>
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	28 23       	and	r18, r24
 266:	39 23       	and	r19, r25
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	23 2b       	or	r18, r19
 26c:	09 f4       	brne	.+2      	; 0x270 <SpiTransferIsDone_Implementation+0x2a>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	08 95       	ret

00000272 <ReadSpiDataRegister_Implementation>:
 272:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Spi_spdr>
 276:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Spi_spdr+0x1>
 27a:	80 81       	ld	r24, Z
 27c:	08 95       	ret

0000027e <SpiSlaveSignalDataIsReady_Implementation>:
 27e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_port>
 282:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_port+0x1>
 286:	20 81       	ld	r18, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 290:	02 c0       	rjmp	.+4      	; 0x296 <SpiSlaveSignalDataIsReady_Implementation+0x18>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <SpiSlaveSignalDataIsReady_Implementation+0x14>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	80 83       	st	Z, r24
 2a0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 2a4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 2a8:	09 95       	icall
 2aa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 2ae:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 2b2:	09 94       	ijmp

000002b4 <WriteSpiDataRegister_Implementation>:
 2b4:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Spi_spdr>
 2b8:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Spi_spdr+0x1>
 2bc:	80 83       	st	Z, r24
 2be:	08 95       	ret

000002c0 <spi_LedGreen>:
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <spi_LedGreen+0x12>
 2d2:	1f 92       	push	r1
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	0e 94 b7 00 	call	0x16e	; 0x16e <DebugLedsTurnAllGreen>
 2dc:	19 82       	std	Y+1, r1	; 0x01
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	8a 83       	std	Y+2, r24	; 0x02
 2e2:	1b 82       	std	Y+3, r1	; 0x03
 2e4:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 2e8:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 2ec:	8e 01       	movw	r16, r28
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
 2f2:	7e 01       	movw	r14, r28
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	e8 0e       	add	r14, r24
 2f8:	f1 1c       	adc	r15, r1
 2fa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 2fe:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 302:	d8 01       	movw	r26, r16
 304:	8d 91       	ld	r24, X+
 306:	8d 01       	movw	r16, r26
 308:	09 95       	icall
 30a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 30e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 312:	09 95       	icall
 314:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 318:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 31c:	09 95       	icall
 31e:	88 23       	and	r24, r24
 320:	c9 f3       	breq	.-14     	; 0x314 <spi_LedGreen+0x54>
 322:	f6 01       	movw	r30, r12
 324:	80 81       	ld	r24, Z
 326:	0e 15       	cp	r16, r14
 328:	1f 05       	cpc	r17, r15
 32a:	39 f7       	brne	.-50     	; 0x2fa <spi_LedGreen+0x3a>
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	08 95       	ret

00000344 <spi_LedRed>:
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	00 d0       	rcall	.+0      	; 0x356 <spi_LedRed+0x12>
 356:	1f 92       	push	r1
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	0e 94 85 00 	call	0x10a	; 0x10a <DebugLedsTurnAllRed>
 360:	19 82       	std	Y+1, r1	; 0x01
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	8a 83       	std	Y+2, r24	; 0x02
 366:	1b 82       	std	Y+3, r1	; 0x03
 368:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 36c:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 370:	8e 01       	movw	r16, r28
 372:	0f 5f       	subi	r16, 0xFF	; 255
 374:	1f 4f       	sbci	r17, 0xFF	; 255
 376:	7e 01       	movw	r14, r28
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	e8 0e       	add	r14, r24
 37c:	f1 1c       	adc	r15, r1
 37e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 382:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 386:	d8 01       	movw	r26, r16
 388:	8d 91       	ld	r24, X+
 38a:	8d 01       	movw	r16, r26
 38c:	09 95       	icall
 38e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 392:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 396:	09 95       	icall
 398:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 39c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 3a0:	09 95       	icall
 3a2:	88 23       	and	r24, r24
 3a4:	c9 f3       	breq	.-14     	; 0x398 <spi_LedRed+0x54>
 3a6:	f6 01       	movw	r30, r12
 3a8:	80 81       	ld	r24, Z
 3aa:	0e 15       	cp	r16, r14
 3ac:	1f 05       	cpc	r17, r15
 3ae:	39 f7       	brne	.-50     	; 0x37e <spi_LedRed+0x3a>
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	cf 90       	pop	r12
 3c6:	08 95       	ret

000003c8 <spi_LookupCmd>:
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	48 f4       	brcc	.+18     	; 0x3de <spi_LookupCmd+0x16>
 3cc:	e8 2f       	mov	r30, r24
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	e4 5e       	subi	r30, 0xE4	; 228
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 81       	ld	r24, Z
 3da:	91 81       	ldd	r25, Z+1	; 0x01
 3dc:	08 95       	ret
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	08 95       	ret

000003e4 <SpiSlaveWrite_StatusInvalid>:
 3e4:	cf 92       	push	r12
 3e6:	df 92       	push	r13
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <SpiSlaveWrite_StatusInvalid+0x12>
 3f6:	00 d0       	rcall	.+0      	; 0x3f8 <SpiSlaveWrite_StatusInvalid+0x14>
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	19 82       	std	Y+1, r1	; 0x01
 3fe:	92 e0       	ldi	r25, 0x02	; 2
 400:	9a 83       	std	Y+2, r25	; 0x02
 402:	9f ef       	ldi	r25, 0xFF	; 255
 404:	9b 83       	std	Y+3, r25	; 0x03
 406:	8c 83       	std	Y+4, r24	; 0x04
 408:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 40c:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 410:	8e 01       	movw	r16, r28
 412:	0f 5f       	subi	r16, 0xFF	; 255
 414:	1f 4f       	sbci	r17, 0xFF	; 255
 416:	7e 01       	movw	r14, r28
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	e8 0e       	add	r14, r24
 41c:	f1 1c       	adc	r15, r1
 41e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 422:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 426:	d8 01       	movw	r26, r16
 428:	8d 91       	ld	r24, X+
 42a:	8d 01       	movw	r16, r26
 42c:	09 95       	icall
 42e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 432:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 436:	09 95       	icall
 438:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 43c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 440:	09 95       	icall
 442:	88 23       	and	r24, r24
 444:	c9 f3       	breq	.-14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 446:	f6 01       	movw	r30, r12
 448:	80 81       	ld	r24, Z
 44a:	0e 15       	cp	r16, r14
 44c:	1f 05       	cpc	r17, r15
 44e:	39 f7       	brne	.-50     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	08 95       	ret

0000046a <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 46e:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_ddr>
 472:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_ddr+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 476:	80 81       	ld	r24, Z
 478:	c1 e0       	ldi	r28, 0x01	; 1
 47a:	d0 e0       	ldi	r29, 0x00	; 0
 47c:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 480:	02 c0       	rjmp	.+4      	; 0x486 <SpiSlaveInit+0x1c>
 482:	cc 0f       	add	r28, r28
 484:	dd 1f       	adc	r29, r29
 486:	0a 94       	dec	r0
 488:	e2 f7       	brpl	.-8      	; 0x482 <SpiSlaveInit+0x18>
 48a:	8c 2b       	or	r24, r28
 48c:	80 83       	st	Z, r24
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 48e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 492:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 496:	09 95       	icall
    /* ------------------------ */
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
 498:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_port>
 49c:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_port+0x1>
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 4a0:	80 81       	ld	r24, Z
 4a2:	c0 95       	com	r28
 4a4:	c8 23       	and	r28, r24
 4a6:	c0 83       	st	Z, r28
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 4a8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 4ac:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 4b4:	09 94       	ijmp

000004b6 <StartAdcReadout>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 4b6:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <UartSpi_port>
 4ba:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <UartSpi_port+0x1>
 4be:	20 81       	ld	r18, Z
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <UartSpi_AdcConv>
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <StartAdcReadout+0x18>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	0a 94       	dec	r0
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <StartAdcReadout+0x14>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	80 83       	st	Z, r24
 4d8:	08 95       	ret

000004da <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 4e6:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <UartSpi_br>
 4ea:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <UartSpi_br+0x1>
 4ee:	f8 01       	movw	r30, r16
 4f0:	11 82       	std	Z+1, r1	; 0x01
 4f2:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 4f4:	e0 90 4d 01 	lds	r14, 0x014D	; 0x80014d <UartSpi_ddr>
 4f8:	f0 90 4e 01 	lds	r15, 0x014E	; 0x80014e <UartSpi_ddr+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 4fc:	f7 01       	movw	r30, r14
 4fe:	20 81       	ld	r18, Z
 500:	c1 e0       	ldi	r28, 0x01	; 1
 502:	d0 e0       	ldi	r29, 0x00	; 0
 504:	ce 01       	movw	r24, r28
 506:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <UartSpi_Sck>
 50a:	02 c0       	rjmp	.+4      	; 0x510 <UartSpiInit+0x36>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	0a 94       	dec	r0
 512:	e2 f7       	brpl	.-8      	; 0x50c <UartSpiInit+0x32>
 514:	82 2b       	or	r24, r18
 516:	80 83       	st	Z, r24
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 518:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <StartAdcReadout>
 51c:	f7 01       	movw	r30, r14
 51e:	20 81       	ld	r18, Z
 520:	ce 01       	movw	r24, r28
 522:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <UartSpi_AdcConv>
 526:	02 c0       	rjmp	.+4      	; 0x52c <UartSpiInit+0x52>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <UartSpiInit+0x4e>
 530:	82 2b       	or	r24, r18
 532:	80 83       	st	Z, r24
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 534:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UartSpi_csrc>
 538:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <UartSpi_csrc+0x1>
 53c:	20 81       	ld	r18, Z
 53e:	ce 01       	movw	r24, r28
 540:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <UartSpi_ModeSelect0>
 544:	02 c0       	rjmp	.+4      	; 0x54a <UartSpiInit+0x70>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <UartSpiInit+0x6c>
 54e:	82 2b       	or	r24, r18
 550:	80 83       	st	Z, r24
 552:	20 81       	ld	r18, Z
 554:	ce 01       	movw	r24, r28
 556:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <UartSpi_ModeSelect1>
 55a:	02 c0       	rjmp	.+4      	; 0x560 <UartSpiInit+0x86>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <UartSpiInit+0x82>
 564:	82 2b       	or	r24, r18
 566:	80 83       	st	Z, r24
 568:	20 81       	ld	r18, Z
 56a:	ce 01       	movw	r24, r28
 56c:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <UartSpi_ClockPolarity>
 570:	02 c0       	rjmp	.+4      	; 0x576 <UartSpiInit+0x9c>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <UartSpiInit+0x98>
 57a:	82 2b       	or	r24, r18
 57c:	80 83       	st	Z, r24
 57e:	20 81       	ld	r18, Z
 580:	ce 01       	movw	r24, r28
 582:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <UartSpi_ClockPhase>
 586:	02 c0       	rjmp	.+4      	; 0x58c <UartSpiInit+0xb2>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <UartSpiInit+0xae>
 590:	82 2b       	or	r24, r18
 592:	80 83       	st	Z, r24
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 594:	90 81       	ld	r25, Z
 596:	9e 01       	movw	r18, r28
 598:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <UartSpi_DataOrder>
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <UartSpiInit+0xc8>
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <UartSpiInit+0xc4>
 5a6:	82 2f       	mov	r24, r18
 5a8:	80 95       	com	r24
 5aa:	89 23       	and	r24, r25
 5ac:	80 83       	st	Z, r24
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 5ae:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UartSpi_csrb>
 5b2:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <UartSpi_csrb+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 5b6:	20 81       	ld	r18, Z
 5b8:	ce 01       	movw	r24, r28
 5ba:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <UartSpi_RxEnable>
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <UartSpiInit+0xea>
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <UartSpiInit+0xe6>
 5c8:	82 2b       	or	r24, r18
 5ca:	80 83       	st	Z, r24
 5cc:	80 81       	ld	r24, Z
 5ce:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <UartSpi_TxEnable>
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <UartSpiInit+0xfe>
 5d4:	cc 0f       	add	r28, r28
 5d6:	dd 1f       	adc	r29, r29
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <UartSpiInit+0xfa>
 5dc:	c8 2b       	or	r28, r24
 5de:	c0 83       	st	Z, r28
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 5e0:	f8 01       	movw	r30, r16
 5e2:	11 82       	std	Z+1, r1	; 0x01
 5e4:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	08 95       	ret

000005f4 <LisRunClkAt50kHz_Implementation>:
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 5f4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <PwmResetCounterAtTop>
 5f8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <PwmResetCounterAtTop+0x1>
 5fc:	09 95       	icall
 5fe:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <PwmTopIsOcr0a>
 602:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <PwmTopIsOcr0a+0x1>
 606:	09 95       	icall
 608:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <PwmClkIsCpuClk>
 60c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <PwmClkIsCpuClk+0x1>
 610:	09 95       	icall
 612:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Lis_clktop>
 616:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Lis_clktop+0x1>
 61a:	88 ec       	ldi	r24, 0xC8	; 200
 61c:	80 83       	st	Z, r24
 61e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Lis_clkth>
 622:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Lis_clkth+0x1>
 626:	20 81       	ld	r18, Z
 628:	26 95       	lsr	r18
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
 62e:	08 95       	ret

00000630 <LisClkOn_Implementation>:
 630:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmEnableOutputSetUntilMatch>
 634:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmEnableOutputSetUntilMatch+0x1>
 638:	09 94       	ijmp

0000063a <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 63a:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Lis_ddr2>
 63e:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Lis_ddr2+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 642:	40 81       	ld	r20, Z
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	9c 01       	movw	r18, r24
 64a:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Lis_PixSelect>
 64e:	02 c0       	rjmp	.+4      	; 0x654 <LisInit+0x1a>
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <LisInit+0x16>
 658:	34 2f       	mov	r19, r20
 65a:	32 2b       	or	r19, r18
 65c:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 65e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Lis_port2>
 662:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Lis_port2+0x1>
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 666:	30 81       	ld	r19, Z
 668:	20 95       	com	r18
 66a:	23 23       	and	r18, r19
 66c:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 66e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Lis_ddr1>
 672:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Lis_ddr1+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 676:	40 81       	ld	r20, Z
 678:	9c 01       	movw	r18, r24
 67a:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Lis_Clk>
 67e:	02 c0       	rjmp	.+4      	; 0x684 <LisInit+0x4a>
 680:	22 0f       	add	r18, r18
 682:	33 1f       	adc	r19, r19
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <LisInit+0x46>
 688:	24 2b       	or	r18, r20
 68a:	20 83       	st	Z, r18
 68c:	40 81       	ld	r20, Z
 68e:	9c 01       	movw	r18, r24
 690:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <Lis_Rst>
 694:	02 c0       	rjmp	.+4      	; 0x69a <LisInit+0x60>
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	0a 94       	dec	r0
 69c:	e2 f7       	brpl	.-8      	; 0x696 <LisInit+0x5c>
 69e:	34 2f       	mov	r19, r20
 6a0:	32 2b       	or	r19, r18
 6a2:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 6a4:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <Lis_port1>
 6a8:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <Lis_port1+0x1>
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 6ac:	3c 91       	ld	r19, X
 6ae:	20 95       	com	r18
 6b0:	23 23       	and	r18, r19
 6b2:	2c 93       	st	X, r18
 6b4:	20 81       	ld	r18, Z
 6b6:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <Lis_Sync>
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <LisInit+0x86>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	0a 94       	dec	r0
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <LisInit+0x82>
 6c4:	80 95       	com	r24
 6c6:	82 23       	and	r24, r18
 6c8:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 6ca:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
 6ce:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
 6d2:	09 95       	icall
    LisClkOn();
 6d4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
 6d8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
 6dc:	09 94       	ijmp

000006de <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 6de:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Pwm_tccr0a>
 6e2:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Pwm_tccr0a+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 6e6:	40 81       	ld	r20, Z
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	9c 01       	movw	r18, r24
 6ee:	00 90 27 01 	lds	r0, 0x0127	; 0x800127 <Pwm_Wgm00>
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <ResetCounterAtTop+0x1a>
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	0a 94       	dec	r0
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <ResetCounterAtTop+0x16>
 6fc:	24 2b       	or	r18, r20
 6fe:	20 83       	st	Z, r18
 700:	20 81       	ld	r18, Z
 702:	00 90 26 01 	lds	r0, 0x0126	; 0x800126 <Pwm_Wgm01>
 706:	02 c0       	rjmp	.+4      	; 0x70c <ResetCounterAtTop+0x2e>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	0a 94       	dec	r0
 70e:	e2 f7       	brpl	.-8      	; 0x708 <ResetCounterAtTop+0x2a>
 710:	82 2b       	or	r24, r18
 712:	80 83       	st	Z, r24
 714:	08 95       	ret

00000716 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 716:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Pwm_tccr0b>
 71a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Pwm_tccr0b+0x1>
 71e:	20 81       	ld	r18, Z
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	00 90 25 01 	lds	r0, 0x0125	; 0x800125 <Pwm_Wgm02>
 728:	02 c0       	rjmp	.+4      	; 0x72e <TopIsOcr0a+0x18>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	0a 94       	dec	r0
 730:	e2 f7       	brpl	.-8      	; 0x72a <TopIsOcr0a+0x14>
 732:	82 2b       	or	r24, r18
 734:	80 83       	st	Z, r24
 736:	08 95       	ret

00000738 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 738:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Pwm_tccr0b>
 73c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Pwm_tccr0b+0x1>
 740:	40 81       	ld	r20, Z
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	9c 01       	movw	r18, r24
 748:	00 90 24 01 	lds	r0, 0x0124	; 0x800124 <Pwm_Cs00>
 74c:	02 c0       	rjmp	.+4      	; 0x752 <PwmClkIsCpuClk_Implementation+0x1a>
 74e:	22 0f       	add	r18, r18
 750:	33 1f       	adc	r19, r19
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <PwmClkIsCpuClk_Implementation+0x16>
 756:	24 2b       	or	r18, r20
 758:	20 83       	st	Z, r18
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
 75a:	30 81       	ld	r19, Z
 75c:	ac 01       	movw	r20, r24
 75e:	00 90 23 01 	lds	r0, 0x0123	; 0x800123 <Pwm_Cs01>
 762:	02 c0       	rjmp	.+4      	; 0x768 <PwmClkIsCpuClk_Implementation+0x30>
 764:	44 0f       	add	r20, r20
 766:	55 1f       	adc	r21, r21
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <PwmClkIsCpuClk_Implementation+0x2c>
 76c:	24 2f       	mov	r18, r20
 76e:	20 95       	com	r18
 770:	23 23       	and	r18, r19
 772:	20 83       	st	Z, r18
 774:	20 81       	ld	r18, Z
 776:	00 90 22 01 	lds	r0, 0x0122	; 0x800122 <Pwm_Cs02>
 77a:	02 c0       	rjmp	.+4      	; 0x780 <PwmClkIsCpuClk_Implementation+0x48>
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	0a 94       	dec	r0
 782:	e2 f7       	brpl	.-8      	; 0x77c <PwmClkIsCpuClk_Implementation+0x44>
 784:	80 95       	com	r24
 786:	82 23       	and	r24, r18
 788:	80 83       	st	Z, r24
 78a:	08 95       	ret

0000078c <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 78c:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Pwm_tccr0a>
 790:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Pwm_tccr0a+0x1>
 794:	30 81       	ld	r19, Z
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	ac 01       	movw	r20, r24
 79c:	00 90 21 01 	lds	r0, 0x0121	; 0x800121 <Pwm_Com0b0>
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <EnableOutputSetUntilMatch+0x1a>
 7a2:	44 0f       	add	r20, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <EnableOutputSetUntilMatch+0x16>
 7aa:	24 2f       	mov	r18, r20
 7ac:	20 95       	com	r18
 7ae:	23 23       	and	r18, r19
 7b0:	20 83       	st	Z, r18
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
 7b2:	20 81       	ld	r18, Z
 7b4:	00 90 20 01 	lds	r0, 0x0120	; 0x800120 <Pwm_Com0b1>
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <EnableOutputSetUntilMatch+0x32>
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	0a 94       	dec	r0
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <EnableOutputSetUntilMatch+0x2e>
 7c2:	82 2b       	or	r24, r18
 7c4:	80 83       	st	Z, r24
 7c6:	08 95       	ret

000007c8 <main>:
}
void Show_data_on_debug_leds(uint8_t four_bits)
{
    // Show the lower nibble of input `four_bits`
    uint8_t *pfour_bits = &four_bits;
    if (BitIsSet(pfour_bits, 0)) DebugLedsTurnRed(debug_led1);
 7c8:	0e 94 53 00 	call	0xa6	; 0xa6 <DebugLedsTurnAllOn>
 7cc:	0e 94 b7 00 	call	0x16e	; 0x16e <DebugLedsTurnAllGreen>
 7d0:	0e 94 35 02 	call	0x46a	; 0x46a <SpiSlaveInit>
 7d4:	0e 94 6d 02 	call	0x4da	; 0x4da <UartSpiInit>
 7d8:	0e 94 1d 03 	call	0x63a	; 0x63a <LisInit>
 7dc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 7e0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 7e4:	09 95       	icall
 7e6:	88 23       	and	r24, r24
 7e8:	c9 f3       	breq	.-14     	; 0x7dc <main+0x14>
 7ea:	ce b5       	in	r28, 0x2e	; 46
 7ec:	8c 2f       	mov	r24, r28
 7ee:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <spi_LookupCmd>
 7f2:	00 97       	sbiw	r24, 0x00	; 0
 7f4:	19 f0       	breq	.+6      	; 0x7fc <main+0x34>
 7f6:	fc 01       	movw	r30, r24
 7f8:	09 95       	icall
 7fa:	f0 cf       	rjmp	.-32     	; 0x7dc <main+0x14>
 7fc:	8c 2f       	mov	r24, r28
 7fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <SpiSlaveWrite_StatusInvalid>
 802:	ec cf       	rjmp	.-40     	; 0x7dc <main+0x14>

00000804 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
 80e:	2f 93       	push	r18
 810:	3f 93       	push	r19
 812:	4f 93       	push	r20
 814:	5f 93       	push	r21
 816:	6f 93       	push	r22
 818:	7f 93       	push	r23
 81a:	8f 93       	push	r24
 81c:	9f 93       	push	r25
 81e:	af 93       	push	r26
 820:	bf 93       	push	r27
 822:	ef 93       	push	r30
 824:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 826:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <__data_end>
 82a:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <__data_end+0x1>
 82e:	09 95       	icall
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 85c:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 868:	1f 92       	push	r1
 86a:	0f 92       	push	r0
 86c:	0f b6       	in	r0, 0x3f	; 63
 86e:	0f 92       	push	r0
 870:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 872:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 874:	0f 90       	pop	r0
 876:	0f be       	out	0x3f, r0	; 63
 878:	0f 90       	pop	r0
 87a:	1f 90       	pop	r1
 87c:	18 95       	reti

0000087e <_exit>:
 87e:	f8 94       	cli

00000880 <__stop_program>:
 880:	ff cf       	rjmp	.-2      	; 0x880 <__stop_program>
