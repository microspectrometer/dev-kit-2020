
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000606  00800114  00800114  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f6c  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b18  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a89  00000000  00000000  00002ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00003a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ccc  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f9  00000000  00000000  00004ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000051a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
}

void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  be:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <DebugLeds_ddr>
  e0:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <DebugLeds_ddr+0x1>
  e4:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <debug_led1>
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  ee:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <debug_led2>
  f2:	ce 01       	movw	r24, r28
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  f8:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <debug_led3>
  fc:	ce 01       	movw	r24, r28
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 102:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <debug_led4>
 106:	ce 01       	movw	r24, r28
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 116:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <DebugLeds_port>
 11a:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <DebugLeds_port+0x1>
 11e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <debug_led1>
 122:	ce 01       	movw	r24, r28
 124:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 128:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <debug_led2>
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 132:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <debug_led3>
 136:	ce 01       	movw	r24, r28
 138:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 13c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <debug_led4>
 140:	ce 01       	movw	r24, r28
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
#include "Lis.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 152:	c0 91 03 01 	lds	r28, 0x0103	; 0x800103 <Lis_PixSelect>
 156:	6c 2f       	mov	r22, r28
 158:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Lis_ddr2>
 15c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <Lis_ddr2+0x1>
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 164:	6c 2f       	mov	r22, r28
 166:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Lis_port2>
 16a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Lis_port2+0x1>
 16e:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 172:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <Lis_ddr1>
 176:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <Lis_ddr1+0x1>
 17a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Lis_Clk>
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 184:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <Lis_Rst>
 188:	61 2f       	mov	r22, r17
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 190:	61 2f       	mov	r22, r17
 192:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Lis_port1>
 196:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Lis_port1+0x1>
 19a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 19e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <Lis_Sync>
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	08 95       	ret

000001b0 <oldLisRunClkAt50kHz>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 1b0:	88 ec       	ldi	r24, 0xC8	; 200
 1b2:	87 bd       	out	0x27, r24	; 39
 1b4:	84 e6       	ldi	r24, 0x64	; 100
 1b6:	88 bd       	out	0x28, r24	; 40
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	84 e4       	ldi	r24, 0x44	; 68
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	84 e4       	ldi	r24, 0x44	; 68
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1cc:	63 e0       	ldi	r22, 0x03	; 3
 1ce:	85 e4       	ldi	r24, 0x45	; 69
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	85 e4       	ldi	r24, 0x45	; 69
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	85 e4       	ldi	r24, 0x45	; 69
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	85 e4       	ldi	r24, 0x45	; 69
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1f4:	64 e0       	ldi	r22, 0x04	; 4
 1f6:	84 e4       	ldi	r24, 0x44	; 68
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1fe:	65 e0       	ldi	r22, 0x05	; 5
 200:	84 e4       	ldi	r24, 0x44	; 68
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 208:	08 95       	ret

0000020a <SetupDebugLeds>:
 20a:	0e 94 6c 00 	call	0xd8	; 0xd8 <DebugLedsTurnAllOn>
 20e:	0e 94 89 00 	call	0x112	; 0x112 <DebugLedsTurnAllGreen>
 212:	08 95       	ret

00000214 <main>:
 214:	0e 94 05 01 	call	0x20a	; 0x20a <SetupDebugLeds>
 218:	0e 94 a6 00 	call	0x14c	; 0x14c <LisInit>
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <oldLisRunClkAt50kHz>
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret

00000226 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 248:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 24c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 250:	09 95       	icall
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
