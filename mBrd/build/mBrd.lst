
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000236  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001410  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4f  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000688  00000000  00000000  000022bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000772  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000275  00000000  00000000  000032f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00003567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 10 01 	call	0x220	; 0x220 <main>
  8e:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <SetBit+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <SetBit+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <ClearBit>:
  ae:	fc 01       	movw	r30, r24
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <ClearBit+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <ClearBit+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <BitIsSet+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <BitIsSet+0xa>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	28 23       	and	r18, r24
  de:	39 23       	and	r19, r25
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	23 2b       	or	r18, r19
  e4:	09 f4       	brne	.+2      	; 0xe8 <BitIsSet+0x20>
  e6:	80 e0       	ldi	r24, 0x00	; 0
}
  e8:	08 95       	ret

000000ea <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <DebugLeds_ddr>
  f2:	d0 91 12 01 	lds	r29, 0x0112	; 0x800112 <DebugLeds_ddr+0x1>
  f6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <debug_led1>
  fa:	ce 01       	movw	r24, r28
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 100:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <debug_led2>
 104:	ce 01       	movw	r24, r28
 106:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 10a:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <debug_led3>
 10e:	ce 01       	movw	r24, r28
 110:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 114:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <debug_led4>
 118:	ce 01       	movw	r24, r28
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <DebugLedsTurnRed>:
 124:	68 2f       	mov	r22, r24
 126:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <DebugLeds_port>
 12a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <DebugLeds_port+0x1>
 12e:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 132:	08 95       	ret

00000134 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 138:	c0 91 0f 01 	lds	r28, 0x010F	; 0x80010f <DebugLeds_port>
 13c:	d0 91 10 01 	lds	r29, 0x0110	; 0x800110 <DebugLeds_port+0x1>
 140:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <debug_led1>
 144:	ce 01       	movw	r24, r28
 146:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 14a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <debug_led2>
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 154:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <debug_led3>
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 15e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <debug_led4>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <SpiTransferIsDone_Implementation>:
{
    SpiMasterOpenSpi();
    *Spi_spdr = byte_to_send;  // load tx buffer and start SPI transmission
    while (!SpiTransferIsDone()) ;
    SpiMasterCloseSpi();
}
 16e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Spi_InterruptFlag>
 172:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Spi_spsr>
 176:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Spi_spsr+0x1>
 17a:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 17e:	08 95       	ret

00000180 <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 180:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Spi_Miso>
 184:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Spi_ddr>
 188:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Spi_ddr+0x1>
 18c:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
}
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 190:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <Spi_Enable>
 194:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Spi_spcr>
 198:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Spi_spcr+0x1>
 19c:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 1a0:	08 95       	ret

000001a2 <Show_data_on_debug_leds>:
    Show_data_on_debug_leds(*Spi_spdr);
}
void test_SpiSlave(void)
{
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-07-31
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	1f 92       	push	r1
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1b8:	88 23       	and	r24, r24
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <Show_data_on_debug_leds+0x20>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedsTurnRed>
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1cc:	88 23       	and	r24, r24
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <Show_data_on_debug_leds+0x34>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedsTurnRed>
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1e0:	88 23       	and	r24, r24
 1e2:	19 f0       	breq	.+6      	; 0x1ea <Show_data_on_debug_leds+0x48>
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedsTurnRed>
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	ce 01       	movw	r24, r28
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1f4:	88 23       	and	r24, r24
 1f6:	19 f0       	breq	.+6      	; 0x1fe <Show_data_on_debug_leds+0x5c>
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	0e 94 92 00 	call	0x124	; 0x124 <DebugLedsTurnRed>
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <SpiSlaveRead_and_show_received_data_on_debug_leds>:
 206:	0e 94 c0 00 	call	0x180	; 0x180 <SpiSlaveInit>
 20a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <SpiTransferIsDone>
 20e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <SpiTransferIsDone+0x1>
 212:	09 95       	icall
 214:	88 23       	and	r24, r24
 216:	c9 f3       	breq	.-14     	; 0x20a <SpiSlaveRead_and_show_received_data_on_debug_leds+0x4>
 218:	8e b5       	in	r24, 0x2e	; 46
 21a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Show_data_on_debug_leds>
 21e:	08 95       	ret

00000220 <main>:
}
int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 220:	0e 94 75 00 	call	0xea	; 0xea <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 224:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnAllGreen>
    Show_data_on_debug_leds(*Spi_spdr);
}
void test_SpiSlave(void)
{
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-07-31
 228:	0e 94 03 01 	call	0x206	; 0x206 <SpiSlaveRead_and_show_received_data_on_debug_leds>
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
    DebugLedsTurnAllGreen();
    test_SpiSlave(); // All tests pass 2018-07-31
}
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
