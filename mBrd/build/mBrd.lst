
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000078a  0000081e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800160  00800160  0000087e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000078bf  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  000085a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c1f  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b20  00000000  00000000  0000c698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ad7  00000000  00000000  0000d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f2c  00000000  00000000  0000ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  00013bbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_14>
  3c:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <main>
  9e:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
  a6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
  aa:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
  ae:	09 95       	icall
  b0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
  b4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
  b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
  ba:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spsr>
  be:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spsr+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	08 95       	ret

000000c6 <DisableSpi_Implementation>:
  c6:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spcr>
  ca:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spcr+0x1>
  ce:	20 81       	ld	r18, Z
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Enable>
  d8:	02 c0       	rjmp	.+4      	; 0xde <DisableSpi_Implementation+0x18>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DisableSpi_Implementation+0x14>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <EnableSpi_Implementation>:
  ea:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spcr>
  ee:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spcr+0x1>
  f2:	20 81       	ld	r18, Z
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Enable>
  fc:	02 c0       	rjmp	.+4      	; 0x102 <EnableSpi_Implementation+0x18>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <EnableSpi_Implementation+0x14>
 106:	82 2b       	or	r24, r18
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <SpiTransferIsDone_Implementation>:
 10c:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spsr>
 110:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spsr+0x1>
 114:	80 81       	ld	r24, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_InterruptFlag>
 11e:	02 c0       	rjmp	.+4      	; 0x124 <SpiTransferIsDone_Implementation+0x18>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <SpiTransferIsDone_Implementation+0x14>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	28 23       	and	r18, r24
 12c:	39 23       	and	r19, r25
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	23 2b       	or	r18, r19
 132:	09 f4       	brne	.+2      	; 0x136 <SpiTransferIsDone_Implementation+0x2a>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <ReadSpiDataRegister_Implementation>:
 138:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Spi_spdr>
 13c:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Spi_spdr+0x1>
 140:	80 81       	ld	r24, Z
 142:	08 95       	ret

00000144 <SpiSlaveSignalDataIsReady_Implementation>:
 144:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_port>
 148:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_port+0x1>
 14c:	20 81       	ld	r18, Z
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 156:	02 c0       	rjmp	.+4      	; 0x15c <SpiSlaveSignalDataIsReady_Implementation+0x18>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <SpiSlaveSignalDataIsReady_Implementation+0x14>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	80 83       	st	Z, r24
 166:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 16a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 16e:	09 95       	icall
 170:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 174:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 178:	09 94       	ijmp

0000017a <WriteSpiDataRegister_Implementation>:
 17a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Spi_spdr>
 17e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Spi_spdr+0x1>
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <SensorLed1Green>:
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	00 d0       	rcall	.+0      	; 0x198 <SensorLed1Green+0x12>
 198:	00 d0       	rcall	.+0      	; 0x19a <SensorLed1Green+0x14>
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <BiColorLed_port>
 1a2:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <BiColorLed_port+0x1>
 1a6:	20 81       	ld	r18, Z
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <status_led1>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <SensorLed1Green+0x30>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <SensorLed1Green+0x2c>
 1ba:	82 2b       	or	r24, r18
 1bc:	80 83       	st	Z, r24
 1be:	19 82       	std	Y+1, r1	; 0x01
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	8a 83       	std	Y+2, r24	; 0x02
 1c4:	1b 82       	std	Y+3, r1	; 0x03
 1c6:	1c 82       	std	Y+4, r1	; 0x04
 1c8:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 1cc:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 1d0:	8e 01       	movw	r16, r28
 1d2:	0f 5f       	subi	r16, 0xFF	; 255
 1d4:	1f 4f       	sbci	r17, 0xFF	; 255
 1d6:	7e 01       	movw	r14, r28
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	e8 0e       	add	r14, r24
 1dc:	f1 1c       	adc	r15, r1
 1de:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 1e2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 1e6:	d8 01       	movw	r26, r16
 1e8:	8d 91       	ld	r24, X+
 1ea:	8d 01       	movw	r16, r26
 1ec:	09 95       	icall
 1ee:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 1f2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 1f6:	09 95       	icall
 1f8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 1fc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 200:	09 95       	icall
 202:	88 23       	and	r24, r24
 204:	c9 f3       	breq	.-14     	; 0x1f8 <SensorLed1Green+0x72>
 206:	f6 01       	movw	r30, r12
 208:	80 81       	ld	r24, Z
 20a:	0e 15       	cp	r16, r14
 20c:	1f 05       	cpc	r17, r15
 20e:	39 f7       	brne	.-50     	; 0x1de <SensorLed1Green+0x58>
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	df 90       	pop	r13
 226:	cf 90       	pop	r12
 228:	08 95       	ret

0000022a <SensorLed1Red>:
 22a:	cf 92       	push	r12
 22c:	df 92       	push	r13
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	00 d0       	rcall	.+0      	; 0x23c <SensorLed1Red+0x12>
 23c:	00 d0       	rcall	.+0      	; 0x23e <SensorLed1Red+0x14>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <BiColorLed_port>
 246:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <BiColorLed_port+0x1>
 24a:	20 81       	ld	r18, Z
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <status_led1>
 254:	02 c0       	rjmp	.+4      	; 0x25a <SensorLed1Red+0x30>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <SensorLed1Red+0x2c>
 25e:	82 2b       	or	r24, r18
 260:	80 83       	st	Z, r24
 262:	19 82       	std	Y+1, r1	; 0x01
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	8a 83       	std	Y+2, r24	; 0x02
 268:	1b 82       	std	Y+3, r1	; 0x03
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8c 83       	std	Y+4, r24	; 0x04
 26e:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 272:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 276:	8e 01       	movw	r16, r28
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	7e 01       	movw	r14, r28
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	e8 0e       	add	r14, r24
 282:	f1 1c       	adc	r15, r1
 284:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 288:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 28c:	d8 01       	movw	r26, r16
 28e:	8d 91       	ld	r24, X+
 290:	8d 01       	movw	r16, r26
 292:	09 95       	icall
 294:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 298:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 29c:	09 95       	icall
 29e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 2a2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 2a6:	09 95       	icall
 2a8:	88 23       	and	r24, r24
 2aa:	c9 f3       	breq	.-14     	; 0x29e <SensorLed1Red+0x74>
 2ac:	f6 01       	movw	r30, r12
 2ae:	80 81       	ld	r24, Z
 2b0:	0e 15       	cp	r16, r14
 2b2:	1f 05       	cpc	r17, r15
 2b4:	39 f7       	brne	.-50     	; 0x284 <SensorLed1Red+0x5a>
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	ff 90       	pop	r15
 2c8:	ef 90       	pop	r14
 2ca:	df 90       	pop	r13
 2cc:	cf 90       	pop	r12
 2ce:	08 95       	ret

000002d0 <LookupSensorCmd>:
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	48 f4       	brcc	.+18     	; 0x2e6 <LookupSensorCmd+0x16>
 2d4:	e8 2f       	mov	r30, r24
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	e4 5e       	subi	r30, 0xE4	; 228
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	08 95       	ret
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	08 95       	ret

000002ec <SpiSlaveWrite_StatusInvalid>:
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <SpiSlaveWrite_StatusInvalid+0x12>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <SpiSlaveWrite_StatusInvalid+0x14>
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	19 82       	std	Y+1, r1	; 0x01
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	9a 83       	std	Y+2, r25	; 0x02
 30a:	9f ef       	ldi	r25, 0xFF	; 255
 30c:	9b 83       	std	Y+3, r25	; 0x03
 30e:	8c 83       	std	Y+4, r24	; 0x04
 310:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 314:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 318:	8e 01       	movw	r16, r28
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	7e 01       	movw	r14, r28
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	e8 0e       	add	r14, r24
 324:	f1 1c       	adc	r15, r1
 326:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 32a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 32e:	d8 01       	movw	r26, r16
 330:	8d 91       	ld	r24, X+
 332:	8d 01       	movw	r16, r26
 334:	09 95       	icall
 336:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 33a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 33e:	09 95       	icall
 340:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 344:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 348:	09 95       	icall
 34a:	88 23       	and	r24, r24
 34c:	c9 f3       	breq	.-14     	; 0x340 <SpiSlaveWrite_StatusInvalid+0x54>
 34e:	f6 01       	movw	r30, r12
 350:	80 81       	ld	r24, Z
 352:	0e 15       	cp	r16, r14
 354:	1f 05       	cpc	r17, r15
 356:	39 f7       	brne	.-50     	; 0x326 <SpiSlaveWrite_StatusInvalid+0x3a>
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	df 90       	pop	r13
 36e:	cf 90       	pop	r12
 370:	08 95       	ret

00000372 <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 376:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_ddr>
 37a:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_ddr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 37e:	80 81       	ld	r24, Z
 380:	c1 e0       	ldi	r28, 0x01	; 1
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 388:	02 c0       	rjmp	.+4      	; 0x38e <SpiSlaveInit+0x1c>
 38a:	cc 0f       	add	r28, r28
 38c:	dd 1f       	adc	r29, r29
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <SpiSlaveInit+0x18>
 392:	8c 2b       	or	r24, r28
 394:	80 83       	st	Z, r24
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 396:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 39a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 39e:	09 95       	icall
    /* ------------------------ */
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
 3a0:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_port>
 3a4:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_port+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 3a8:	80 81       	ld	r24, Z
 3aa:	c0 95       	com	r28
 3ac:	c8 23       	and	r28, r24
 3ae:	c0 83       	st	Z, r28
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 3b0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 3b4:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 3bc:	09 94       	ijmp

000003be <StartAdcReadout>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 3be:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <UartSpi_port>
 3c2:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <UartSpi_port+0x1>
 3c6:	20 81       	ld	r18, Z
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <UartSpi_AdcConv>
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <StartAdcReadout+0x18>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <StartAdcReadout+0x14>
 3da:	80 95       	com	r24
 3dc:	82 23       	and	r24, r18
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret

000003e2 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	0f 93       	push	r16
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 3ee:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <UartSpi_br>
 3f2:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <UartSpi_br+0x1>
 3f6:	f8 01       	movw	r30, r16
 3f8:	11 82       	std	Z+1, r1	; 0x01
 3fa:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 3fc:	e0 90 4d 01 	lds	r14, 0x014D	; 0x80014d <UartSpi_ddr>
 400:	f0 90 4e 01 	lds	r15, 0x014E	; 0x80014e <UartSpi_ddr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 404:	f7 01       	movw	r30, r14
 406:	20 81       	ld	r18, Z
 408:	c1 e0       	ldi	r28, 0x01	; 1
 40a:	d0 e0       	ldi	r29, 0x00	; 0
 40c:	ce 01       	movw	r24, r28
 40e:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <UartSpi_Sck>
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	82 2b       	or	r24, r18
 41e:	80 83       	st	Z, r24
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 420:	0e 94 df 01 	call	0x3be	; 0x3be <StartAdcReadout>
 424:	f7 01       	movw	r30, r14
 426:	20 81       	ld	r18, Z
 428:	ce 01       	movw	r24, r28
 42a:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <UartSpi_AdcConv>
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	80 83       	st	Z, r24
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 43c:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UartSpi_csrc>
 440:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <UartSpi_csrc+0x1>
 444:	20 81       	ld	r18, Z
 446:	ce 01       	movw	r24, r28
 448:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <UartSpi_ModeSelect0>
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	80 83       	st	Z, r24
 45a:	20 81       	ld	r18, Z
 45c:	ce 01       	movw	r24, r28
 45e:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <UartSpi_ModeSelect1>
 462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	82 2b       	or	r24, r18
 46e:	80 83       	st	Z, r24
 470:	20 81       	ld	r18, Z
 472:	ce 01       	movw	r24, r28
 474:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <UartSpi_ClockPolarity>
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	80 83       	st	Z, r24
 486:	20 81       	ld	r18, Z
 488:	ce 01       	movw	r24, r28
 48a:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <UartSpi_ClockPhase>
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 498:	82 2b       	or	r24, r18
 49a:	80 83       	st	Z, r24
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 49c:	90 81       	ld	r25, Z
 49e:	9e 01       	movw	r18, r28
 4a0:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <UartSpi_DataOrder>
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ae:	82 2f       	mov	r24, r18
 4b0:	80 95       	com	r24
 4b2:	89 23       	and	r24, r25
 4b4:	80 83       	st	Z, r24
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 4b6:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <UartSpi_csrb>
 4ba:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <UartSpi_csrb+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 4be:	20 81       	ld	r18, Z
 4c0:	ce 01       	movw	r24, r28
 4c2:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <UartSpi_RxEnable>
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4d0:	82 2b       	or	r24, r18
 4d2:	80 83       	st	Z, r24
 4d4:	80 81       	ld	r24, Z
 4d6:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <UartSpi_TxEnable>
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4dc:	cc 0f       	add	r28, r28
 4de:	dd 1f       	adc	r29, r29
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4e4:	c8 2b       	or	r28, r24
 4e6:	c0 83       	st	Z, r28
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 4e8:	f8 01       	movw	r30, r16
 4ea:	11 82       	std	Z+1, r1	; 0x01
 4ec:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	08 95       	ret

000004fc <LisRunClkAt50kHz_Implementation>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 4fc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <PwmResetCounterAtTop>
 500:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <PwmResetCounterAtTop+0x1>
 504:	09 95       	icall
 506:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <PwmTopIsOcr0a>
 50a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <PwmTopIsOcr0a+0x1>
 50e:	09 95       	icall
 510:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <PwmClkIsCpuClk>
 514:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <PwmClkIsCpuClk+0x1>
 518:	09 95       	icall
 51a:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Lis_clktop>
 51e:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Lis_clktop+0x1>
 522:	88 ec       	ldi	r24, 0xC8	; 200
 524:	80 83       	st	Z, r24
 526:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Lis_clkth>
 52a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Lis_clkth+0x1>
 52e:	20 81       	ld	r18, Z
 530:	26 95       	lsr	r18
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
 536:	08 95       	ret

00000538 <LisClkOn_Implementation>:
 538:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmEnableOutputSetUntilMatch>
 53c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmEnableOutputSetUntilMatch+0x1>
 540:	09 94       	ijmp

00000542 <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 542:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Lis_ddr2>
 546:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Lis_ddr2+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 54a:	40 81       	ld	r20, Z
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9c 01       	movw	r18, r24
 552:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Lis_PixSelect>
 556:	02 c0       	rjmp	.+4      	; 0x55c <LisInit+0x1a>
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <LisInit+0x16>
 560:	34 2f       	mov	r19, r20
 562:	32 2b       	or	r19, r18
 564:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 566:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Lis_port2>
 56a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Lis_port2+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 56e:	30 81       	ld	r19, Z
 570:	20 95       	com	r18
 572:	23 23       	and	r18, r19
 574:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 576:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Lis_ddr1>
 57a:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Lis_ddr1+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 57e:	40 81       	ld	r20, Z
 580:	9c 01       	movw	r18, r24
 582:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Lis_Clk>
 586:	02 c0       	rjmp	.+4      	; 0x58c <LisInit+0x4a>
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <LisInit+0x46>
 590:	24 2b       	or	r18, r20
 592:	20 83       	st	Z, r18
 594:	40 81       	ld	r20, Z
 596:	9c 01       	movw	r18, r24
 598:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <Lis_Rst>
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <LisInit+0x60>
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <LisInit+0x5c>
 5a6:	34 2f       	mov	r19, r20
 5a8:	32 2b       	or	r19, r18
 5aa:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 5ac:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <Lis_port1>
 5b0:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <Lis_port1+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 5b4:	3c 91       	ld	r19, X
 5b6:	20 95       	com	r18
 5b8:	23 23       	and	r18, r19
 5ba:	2c 93       	st	X, r18
 5bc:	20 81       	ld	r18, Z
 5be:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <Lis_Sync>
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <LisInit+0x86>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	0a 94       	dec	r0
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <LisInit+0x82>
 5cc:	80 95       	com	r24
 5ce:	82 23       	and	r24, r18
 5d0:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 5d2:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
 5d6:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
 5da:	09 95       	icall
    LisClkOn();
 5dc:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
 5e0:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
 5e4:	09 94       	ijmp

000005e6 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 5e6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Pwm_tccr0a>
 5ea:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Pwm_tccr0a+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5ee:	40 81       	ld	r20, Z
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	9c 01       	movw	r18, r24
 5f6:	00 90 27 01 	lds	r0, 0x0127	; 0x800127 <Pwm_Wgm00>
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <ResetCounterAtTop+0x1a>
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <ResetCounterAtTop+0x16>
 604:	24 2b       	or	r18, r20
 606:	20 83       	st	Z, r18
 608:	20 81       	ld	r18, Z
 60a:	00 90 26 01 	lds	r0, 0x0126	; 0x800126 <Pwm_Wgm01>
 60e:	02 c0       	rjmp	.+4      	; 0x614 <ResetCounterAtTop+0x2e>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	0a 94       	dec	r0
 616:	e2 f7       	brpl	.-8      	; 0x610 <ResetCounterAtTop+0x2a>
 618:	82 2b       	or	r24, r18
 61a:	80 83       	st	Z, r24
 61c:	08 95       	ret

0000061e <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 61e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Pwm_tccr0b>
 622:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Pwm_tccr0b+0x1>
 626:	20 81       	ld	r18, Z
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	00 90 25 01 	lds	r0, 0x0125	; 0x800125 <Pwm_Wgm02>
 630:	02 c0       	rjmp	.+4      	; 0x636 <TopIsOcr0a+0x18>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	0a 94       	dec	r0
 638:	e2 f7       	brpl	.-8      	; 0x632 <TopIsOcr0a+0x14>
 63a:	82 2b       	or	r24, r18
 63c:	80 83       	st	Z, r24
 63e:	08 95       	ret

00000640 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 640:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Pwm_tccr0b>
 644:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Pwm_tccr0b+0x1>
 648:	40 81       	ld	r20, Z
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	9c 01       	movw	r18, r24
 650:	00 90 24 01 	lds	r0, 0x0124	; 0x800124 <Pwm_Cs00>
 654:	02 c0       	rjmp	.+4      	; 0x65a <PwmClkIsCpuClk_Implementation+0x1a>
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <PwmClkIsCpuClk_Implementation+0x16>
 65e:	24 2b       	or	r18, r20
 660:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 662:	30 81       	ld	r19, Z
 664:	ac 01       	movw	r20, r24
 666:	00 90 23 01 	lds	r0, 0x0123	; 0x800123 <Pwm_Cs01>
 66a:	02 c0       	rjmp	.+4      	; 0x670 <PwmClkIsCpuClk_Implementation+0x30>
 66c:	44 0f       	add	r20, r20
 66e:	55 1f       	adc	r21, r21
 670:	0a 94       	dec	r0
 672:	e2 f7       	brpl	.-8      	; 0x66c <PwmClkIsCpuClk_Implementation+0x2c>
 674:	24 2f       	mov	r18, r20
 676:	20 95       	com	r18
 678:	23 23       	and	r18, r19
 67a:	20 83       	st	Z, r18
 67c:	20 81       	ld	r18, Z
 67e:	00 90 22 01 	lds	r0, 0x0122	; 0x800122 <Pwm_Cs02>
 682:	02 c0       	rjmp	.+4      	; 0x688 <PwmClkIsCpuClk_Implementation+0x48>
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	0a 94       	dec	r0
 68a:	e2 f7       	brpl	.-8      	; 0x684 <PwmClkIsCpuClk_Implementation+0x44>
 68c:	80 95       	com	r24
 68e:	82 23       	and	r24, r18
 690:	80 83       	st	Z, r24
 692:	08 95       	ret

00000694 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 694:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Pwm_tccr0a>
 698:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Pwm_tccr0a+0x1>
 69c:	30 81       	ld	r19, Z
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	ac 01       	movw	r20, r24
 6a4:	00 90 21 01 	lds	r0, 0x0121	; 0x800121 <Pwm_Com0b0>
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <EnableOutputSetUntilMatch+0x1a>
 6aa:	44 0f       	add	r20, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	0a 94       	dec	r0
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <EnableOutputSetUntilMatch+0x16>
 6b2:	24 2f       	mov	r18, r20
 6b4:	20 95       	com	r18
 6b6:	23 23       	and	r18, r19
 6b8:	20 83       	st	Z, r18
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 6ba:	20 81       	ld	r18, Z
 6bc:	00 90 20 01 	lds	r0, 0x0120	; 0x800120 <Pwm_Com0b1>
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <EnableOutputSetUntilMatch+0x32>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	0a 94       	dec	r0
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <EnableOutputSetUntilMatch+0x2e>
 6ca:	82 2b       	or	r24, r18
 6cc:	80 83       	st	Z, r24
 6ce:	08 95       	ret

000006d0 <main>:
    uint8_t *pfour_bits = &four_bits;
    if (BitIsSet(pfour_bits, 0)) BiColorLedRed(status_led1);
    if (BitIsSet(pfour_bits, 1)) BiColorLedRed(status_led2);
    if (BitIsSet(pfour_bits, 2)) BiColorLedRed(status_led3);
    if (BitIsSet(pfour_bits, 3)) BiColorLedRed(status_led4);
}
 6d0:	38 9a       	sbi	0x07, 0	; 7
 6d2:	39 9a       	sbi	0x07, 1	; 7
 6d4:	3a 9a       	sbi	0x07, 2	; 7
 6d6:	3b 9a       	sbi	0x07, 3	; 7
 6d8:	0e 94 b9 01 	call	0x372	; 0x372 <SpiSlaveInit>
 6dc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UartSpiInit>
 6e0:	0e 94 a1 02 	call	0x542	; 0x542 <LisInit>
 6e4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 6e8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 6ec:	09 95       	icall
 6ee:	88 23       	and	r24, r24
 6f0:	c9 f3       	breq	.-14     	; 0x6e4 <main+0x14>
 6f2:	ce b5       	in	r28, 0x2e	; 46
 6f4:	8c 2f       	mov	r24, r28
 6f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LookupSensorCmd>
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	19 f0       	breq	.+6      	; 0x704 <main+0x34>
 6fe:	fc 01       	movw	r30, r24
 700:	09 95       	icall
 702:	f0 cf       	rjmp	.-32     	; 0x6e4 <main+0x14>
 704:	8c 2f       	mov	r24, r28
 706:	0e 94 76 01 	call	0x2ec	; 0x2ec <SpiSlaveWrite_StatusInvalid>
 70a:	ec cf       	rjmp	.-40     	; 0x6e4 <main+0x14>

0000070c <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 72e:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__data_end>
 732:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <__data_end+0x1>
 736:	09 95       	icall
}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	0f 92       	push	r0
 762:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 764:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 766:	0f 90       	pop	r0
 768:	0f be       	out	0x3f, r0	; 63
 76a:	0f 90       	pop	r0
 76c:	1f 90       	pop	r1
 76e:	18 95       	reti

00000770 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 770:	1f 92       	push	r1
 772:	0f 92       	push	r0
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	0f 92       	push	r0
 778:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 77a:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
