
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014ac  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a72  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006e2  00000000  00000000  0000233a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007cd  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000340  00000000  00000000  00003499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000037d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_17>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8e:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SetBit>:
#include "ReadWriteBits.h"

void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <SetBit+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <SetBit+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <ClearBit>:
}

void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  ae:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <ClearBit+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <ClearBit+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <DebugLeds_ddr>
  d0:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <DebugLeds_ddr+0x1>
  d4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <debug_led1>
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
  de:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <debug_led2>
  e2:	ce 01       	movw	r24, r28
  e4:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
  e8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <debug_led3>
  ec:	ce 01       	movw	r24, r28
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
  f2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <debug_led4>
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <DebugLedsTurnRed>:
 102:	68 2f       	mov	r22, r24
 104:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <DebugLeds_port>
 108:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DebugLeds_port+0x1>
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 110:	08 95       	ret

00000112 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 116:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <DebugLeds_port>
 11a:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <DebugLeds_port+0x1>
 11e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <debug_led1>
 122:	ce 01       	movw	r24, r28
 124:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 128:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <debug_led2>
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 132:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <debug_led3>
 136:	ce 01       	movw	r24, r28
 138:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 13c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <debug_led4>
 140:	ce 01       	movw	r24, r28
 142:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 14c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Spi_Miso>
 150:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Spi_ddr>
 154:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Spi_ddr+0x1>
 158:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
}
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 15c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <Spi_Enable>
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Spi_spcr>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Spi_spcr+0x1>
 168:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 16c:	08 95       	ret

0000016e <SpiEnableInterruptForTransferIsDone>:
}
void test_SpiSlave(void)
{
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    SPI_interrupt_routine_turns_debug_led1_red();
 16e:	f8 94       	cli
 170:	67 e0       	ldi	r22, 0x07	; 7
 172:	8c e4       	ldi	r24, 0x4C	; 76
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 17a:	78 94       	sei
 17c:	08 95       	ret

0000017e <__vector_17>:
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 81 00 	call	0x102	; 0x102 <DebugLedsTurnRed>
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <SPI_interrupt_routine_turns_debug_led1_red>:
 1c8:	0e 94 a6 00 	call	0x14c	; 0x14c <SpiSlaveInit>
 1cc:	0e 94 b7 00 	call	0x16e	; 0x16e <SpiEnableInterruptForTransferIsDone>
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <SPI_interrupt_routine_turns_debug_led1_red+0x8>

000001d2 <main>:
}
int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 1d2:	0e 94 64 00 	call	0xc8	; 0xc8 <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 1d6:	0e 94 89 00 	call	0x112	; 0x112 <DebugLedsTurnAllGreen>
}
void test_SpiSlave(void)
{
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    SPI_interrupt_routine_turns_debug_led1_red();
 1da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SPI_interrupt_routine_turns_debug_led1_red>

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
