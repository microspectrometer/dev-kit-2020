
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011a  0080011a  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000188f  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4d  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000090a  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  00003280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a84  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00004491  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  9e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c0 91 17 01 	lds	r28, 0x0117	; 0x800117 <DebugLeds_ddr>
 102:	d0 91 18 01 	lds	r29, 0x0118	; 0x800118 <DebugLeds_ddr+0x1>
 106:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <debug_led1>
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 110:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <debug_led2>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 11a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <debug_led3>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 124:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <debug_led4>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DebugLedsTurnRed>:
 134:	68 2f       	mov	r22, r24
 136:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <DebugLeds_port>
 13a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <DebugLeds_port+0x1>
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 142:	08 95       	ret

00000144 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <DebugLeds_port>
 14c:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <DebugLeds_port+0x1>
 150:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <debug_led4>
 172:	ce 01       	movw	r24, r28
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <ReadSpiDataRegister_Implementation>:
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 17e:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <Spi_spdr>
 182:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <Spi_spdr+0x1>
 186:	80 81       	ld	r24, Z
 188:	08 95       	ret

0000018a <SpiTransferIsDone_Implementation>:
 18a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Spi_InterruptFlag>
 18e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Spi_spsr>
 192:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Spi_spsr+0x1>
 196:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 19a:	08 95       	ret

0000019c <SpiSlaveSignalDataIsReady>:
}
void SpiSlaveSignalDataIsReady(void)
{
    ClearBit(Spi_port, Spi_Miso);
 19c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Spi_Miso>
 1a0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Spi_port>
 1a4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Spi_port+0x1>
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1ac:	08 95       	ret

000001ae <SpiSlaveSignalDataIsNotReady>:
}
void SpiSlaveSignalDataIsNotReady(void)
{
    SetBit(Spi_port, Spi_Miso);
 1ae:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Spi_Miso>
 1b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Spi_port>
 1b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Spi_port+0x1>
 1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1be:	08 95       	ret

000001c0 <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 1c0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Spi_Miso>
 1c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Spi_ddr>
 1c8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Spi_ddr+0x1>
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void SpiSlaveInit(void)
{
    SetMisoAsOutput();         // pin-direction is user-defined
    SpiSlaveSignalDataIsNotReady(); // MISO idles high
 1d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SpiSlaveSignalDataIsNotReady>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
}
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 1d4:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <Spi_Enable>
 1d8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Spi_spcr>
 1dc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Spi_spcr+0x1>
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 1e4:	08 95       	ret

000001e6 <SpiSlaveRead>:
{
    SetBit(Spi_port, Spi_Miso);
}
uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
 1e6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiTransferIsDone>
 1ea:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 1ee:	09 95       	icall
 1f0:	88 23       	and	r24, r24
 1f2:	c9 f3       	breq	.-14     	; 0x1e6 <SpiSlaveRead>
    return ReadSpiDataRegister();
 1f4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
 1f8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
 1fc:	09 95       	icall
}
 1fe:	08 95       	ret

00000200 <__vector_17>:
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    /* SPI_interrupt_routine_turns_debug_led1_red(); // PASS 2018-08-01 */
    /* SPI_read_in_ISR_and_show_data_on_debug_leds(); // PASS 2018-08-01 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    App_version_of_Slave_receives_request_without_interrupts();
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
 222:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 226:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 22a:	09 95       	icall
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <LoadDummyData>:
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 258:	ce bd       	out	0x2e, r28	; 46
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <GetDataMasterAskedFor>:
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	19 f4       	brne	.+6      	; 0x268 <GetDataMasterAskedFor+0xa>
 262:	8b ed       	ldi	r24, 0xDB	; 219
 264:	0e 94 27 01 	call	0x24e	; 0x24e <LoadDummyData>
 268:	08 95       	ret

0000026a <DoWhatMasterSays>:
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 270:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SpiSlaveRead>
 274:	0e 94 2f 01 	call	0x25e	; 0x25e <GetDataMasterAskedFor>
 278:	0e 94 ce 00 	call	0x19c	; 0x19c <SpiSlaveSignalDataIsReady>
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 282:	08 95       	ret

00000284 <RespondToRequestsForData>:
 284:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <SpiTransferIsDone>
 288:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <SpiTransferIsDone+0x1>
 28c:	89 2b       	or	r24, r25
 28e:	11 f0       	breq	.+4      	; 0x294 <RespondToRequestsForData+0x10>
 290:	0e 94 35 01 	call	0x26a	; 0x26a <DoWhatMasterSays>
 294:	08 95       	ret

00000296 <App_version_of_Slave_receives_request_without_interrupts>:
 296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SpiSlaveInit>
 29a:	0e 94 42 01 	call	0x284	; 0x284 <RespondToRequestsForData>
 29e:	fd cf       	rjmp	.-6      	; 0x29a <App_version_of_Slave_receives_request_without_interrupts+0x4>

000002a0 <main>:
}
int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 2a0:	0e 94 7d 00 	call	0xfa	; 0xfa <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 2a4:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    /* SPI_interrupt_routine_turns_debug_led1_red(); // PASS 2018-08-01 */
    /* SPI_read_in_ISR_and_show_data_on_debug_leds(); // PASS 2018-08-01 */
    /* Slave_receives_request_and_sends_response_when_ready(); // PASS 2018-08-02 */
    App_version_of_Slave_receives_request_without_interrupts();
 2a8:	0e 94 4b 01 	call	0x296	; 0x296 <App_version_of_Slave_receives_request_without_interrupts>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
