
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000606  00800130  00800130  000003ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e4e  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d80  00000000  00000000  000034fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f29  00000000  00000000  0000427a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  000051a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb9  00000000  00000000  00005784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c11  00000000  00000000  0000663d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000724e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_14>
  3c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  9e:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
#include "ReadWriteBits.h"

inline void SetBit(uint8_t volatile * const port, uint8_t const bit) {
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
}

inline void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
  bc:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <DebugLedsTurnAllOn>:
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <DebugLeds_ddr>
  dc:	d0 91 2f 01 	lds	r29, 0x012F	; 0x80012f <DebugLeds_ddr+0x1>
  e0:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <debug_led1>
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  ea:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <debug_led2>
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  f4:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <debug_led3>
  f8:	ce 01       	movw	r24, r28
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  fe:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <debug_led4>
 102:	ce 01       	movw	r24, r28
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000010c <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 110:	c0 91 2c 01 	lds	r28, 0x012C	; 0x80012c <DebugLeds_port>
 114:	d0 91 2d 01 	lds	r29, 0x012D	; 0x80012d <DebugLeds_port+0x1>
 118:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <debug_led1>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 122:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <debug_led2>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 12c:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <debug_led3>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 136:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <debug_led4>
 13a:	ce 01       	movw	r24, r28
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 140:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000144 <LisRunClkAt50kHz_Implementation>:
    LisRunClkAt50kHz();
    LisClkOn();
}
static void LisRunClkAt50kHz_Implementation(void)
{
    PwmResetCounterAtTop();
 144:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <PwmResetCounterAtTop>
 148:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <PwmResetCounterAtTop+0x1>
 14c:	09 95       	icall
    PwmTopIsOcr0a();
 14e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <PwmTopIsOcr0a>
 152:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <PwmTopIsOcr0a+0x1>
 156:	09 95       	icall
    PwmClkIsCpuClk();
 158:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <PwmClkIsCpuClk>
 15c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <PwmClkIsCpuClk+0x1>
 160:	09 95       	icall
    *Lis_clktop = 200;           // 10MHz / 50kHz = 200 ticks
 162:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <Lis_clktop>
 166:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <Lis_clktop+0x1>
 16a:	88 ec       	ldi	r24, 0xC8	; 200
 16c:	80 83       	st	Z, r24
    *Lis_clkth = *Lis_clktop/2;  // 50% dutcy cycle: PASS 2018-08-21
 16e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Lis_clkth>
 172:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Lis_clkth+0x1>
 176:	20 81       	ld	r18, Z
 178:	26 95       	lsr	r18
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	08 95       	ret

00000180 <LisClkOn_Implementation>:
}
void (*LisRunClkAt50kHz)(void) = LisRunClkAt50kHz_Implementation;

static void LisClkOn_Implementation(void)
{
    PwmEnableOutputSetUntilMatch();
 180:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PwmEnableOutputSetUntilMatch>
 184:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PwmEnableOutputSetUntilMatch+0x1>
 188:	09 94       	ijmp

0000018a <LisInit>:
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
}
void LisInit(void)
{
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
#include "Pwm.h"
#include "ReadWriteBits.h"

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 190:	c0 91 1b 01 	lds	r28, 0x011B	; 0x80011b <Lis_PixSelect>
 194:	6c 2f       	mov	r22, r28
 196:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Lis_ddr2>
 19a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Lis_ddr2+0x1>
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 1a2:	6c 2f       	mov	r22, r28
 1a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Lis_port2>
 1a8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Lis_port2+0x1>
 1ac:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 1b0:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <Lis_ddr1>
 1b4:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <Lis_ddr1+0x1>
 1b8:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <Lis_Clk>
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void SetRstAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Rst);
 1c2:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <Lis_Rst>
 1c6:	61 2f       	mov	r22, r17
 1c8:	ce 01       	movw	r24, r28
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 1ce:	61 2f       	mov	r22, r17
 1d0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Lis_port1>
 1d4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Lis_port1+0x1>
 1d8:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
{
    SetBit(Lis_ddr1, Lis_Rst);
}
static void SetSyncAsInput(void)
{
    ClearBit(Lis_ddr1, Lis_Sync);
 1dc:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Lis_Sync>
 1e0:	ce 01       	movw	r24, r28
 1e2:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 1e6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <LisRunClkAt50kHz>
 1ea:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <LisRunClkAt50kHz+0x1>
 1ee:	09 95       	icall
    LisClkOn();
 1f0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <LisClkOn>
 1f4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <LisClkOn+0x1>
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
    LisClkOn();
 1fe:	09 94       	ijmp

00000200 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 204:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <Pwm_tccr0a>
 208:	d0 91 17 01 	lds	r29, 0x0117	; 0x800117 <Pwm_tccr0a+0x1>
 20c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Pwm_Wgm00>
 210:	ce 01       	movw	r24, r28
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 216:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Pwm_Wgm01>
 21a:	ce 01       	movw	r24, r28
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
    SetBit(Pwm_tccr0a, Pwm_Wgm01);
 220:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000224 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 224:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <Pwm_Wgm02>
 228:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Pwm_tccr0b>
 22c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Pwm_tccr0b+0x1>
 230:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000234 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 238:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <Pwm_tccr0b>
 23c:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <Pwm_tccr0b+0x1>
 240:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <Pwm_Cs00>
 244:	ce 01       	movw	r24, r28
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
 24a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Pwm_Cs01>
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 254:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Pwm_Cs02>
 258:	ce 01       	movw	r24, r28
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
    ClearBit(Pwm_tccr0b, Pwm_Cs01);
    ClearBit(Pwm_tccr0b, Pwm_Cs02);
 25e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000262 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 266:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <Pwm_tccr0a>
 26a:	d0 91 17 01 	lds	r29, 0x0117	; 0x800117 <Pwm_tccr0a+0x1>
 26e:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <Pwm_Com0b0>
 272:	ce 01       	movw	r24, r28
 274:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 278:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Pwm_Com0b1>
 27c:	ce 01       	movw	r24, r28
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
    SetBit  (Pwm_tccr0a, Pwm_Com0b1);
 282:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000286 <DemoMacroFastestRstResponseToClk>:
}
void Show_data_on_debug_leds(uint8_t four_bits)
{
    // Show the lower nibble of input `four_bits`
    uint8_t *pfour_bits = &four_bits;
    if (BitIsSet(pfour_bits, 0)) DebugLedsTurnRed(debug_led1);
 286:	a9 9b       	sbis	0x15, 1	; 21
 288:	fe cf       	rjmp	.-4      	; 0x286 <DemoMacroFastestRstResponseToClk>
 28a:	5e 9a       	sbi	0x0b, 6	; 11
 28c:	a9 9a       	sbi	0x15, 1	; 21
 28e:	aa 9b       	sbis	0x15, 2	; 21
 290:	fe cf       	rjmp	.-4      	; 0x28e <DemoMacroFastestRstResponseToClk+0x8>
 292:	5e 98       	cbi	0x0b, 6	; 11
 294:	aa 9a       	sbi	0x15, 2	; 21
 296:	f7 cf       	rjmp	.-18     	; 0x286 <DemoMacroFastestRstResponseToClk>

00000298 <main>:
 298:	0e 94 6a 00 	call	0xd4	; 0xd4 <DebugLedsTurnAllOn>
 29c:	0e 94 86 00 	call	0x10c	; 0x10c <DebugLedsTurnAllGreen>
 2a0:	0e 94 c5 00 	call	0x18a	; 0x18a <LisInit>
 2a4:	0e 94 43 01 	call	0x286	; 0x286 <DemoMacroFastestRstResponseToClk>

000002a8 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	ef 93       	push	r30
 2c8:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 2ca:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__data_end>
 2ce:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__data_end+0x1>
 2d2:	09 95       	icall
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 300:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 316:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
