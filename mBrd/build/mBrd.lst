
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000222  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000106d  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b7  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000599  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000599  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002b6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <SetBit+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <SetBit+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <ClearBit>:
  ae:	fc 01       	movw	r30, r24
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <ClearBit+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <ClearBit+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <BitIsSet+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <BitIsSet+0xa>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	28 23       	and	r18, r24
  de:	39 23       	and	r19, r25
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	23 2b       	or	r18, r19
  e4:	09 f4       	brne	.+2      	; 0xe8 <BitIsSet+0x20>
  e6:	80 e0       	ldi	r24, 0x00	; 0
}
  e8:	08 95       	ret

000000ea <BitIsClear>:

bool BitIsClear(uint8_t volatile * const port, uint8_t const bit) {
    return !(*port & (1<<bit));
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <BitIsClear+0xc>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <BitIsClear+0x8>
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	8f 27       	eor	r24, r31
}
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	08 95       	ret

00000102 <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <DebugLeds_ddr>
 10a:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <DebugLeds_ddr+0x1>
 10e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <debug_led1>
 112:	ce 01       	movw	r24, r28
 114:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 118:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <debug_led2>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 122:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <debug_led3>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 12c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <debug_led4>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <DebugLedsTurnRed>:
 13c:	68 2f       	mov	r22, r24
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <DebugLeds_port>
 142:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DebugLeds_port+0x1>
 146:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 14a:	08 95       	ret

0000014c <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 150:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <DebugLeds_port>
 154:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <DebugLeds_port+0x1>
 158:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <debug_led1>
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 162:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <debug_led2>
 166:	ce 01       	movw	r24, r28
 168:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 16c:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <debug_led3>
 170:	ce 01       	movw	r24, r28
 172:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 176:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <debug_led4>
 17a:	ce 01       	movw	r24, r28
 17c:	0e 94 57 00 	call	0xae	; 0xae <ClearBit>
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <SpiSlaveInit>:

void SpiSlaveInit(void)
{
    /* =====[ Configure user-defined pins in software. ]===== */
    // Make Spi_Miso an output pin.
    SetBit(Spi_ddr, Spi_Miso);
 186:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Spi_Miso>
 18a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Spi_ddr>
 18e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Spi_ddr+0x1>
 192:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>

    // Enable SPI.
    SetBit(Spi_spcr, Spi_Enable);
 196:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <Spi_Enable>
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Spi_spcr>
 19e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Spi_spcr+0x1>
 1a2:	0e 94 4b 00 	call	0x96	; 0x96 <SetBit>
 1a6:	08 95       	ret

000001a8 <Show_received_SPI_data_on_debug_leds>:
void Show_received_SPI_data_on_debug_leds(void)
{
    /* =====[ Operate ]===== */
    // SPI Master sends a 4-bit value.
    /* =====[ Version without interrupts ]===== */
    while( BitIsClear(Spi_spsr, Spi_InterruptFlag) );
 1a8:	67 e0       	ldi	r22, 0x07	; 7
 1aa:	8d e4       	ldi	r24, 0x4D	; 77
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 75 00 	call	0xea	; 0xea <BitIsClear>
 1b2:	81 11       	cpse	r24, r1
 1b4:	f9 cf       	rjmp	.-14     	; 0x1a8 <Show_received_SPI_data_on_debug_leds>
    if (BitIsSet(Spi_spdr, 0)) DebugLedsTurnRed(debug_led1);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	8e e4       	ldi	r24, 0x4E	; 78
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1c0:	88 23       	and	r24, r24
 1c2:	19 f0       	breq	.+6      	; 0x1ca <Show_received_SPI_data_on_debug_leds+0x22>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 9e 00 	call	0x13c	; 0x13c <DebugLedsTurnRed>
    if (BitIsSet(Spi_spdr, 1)) DebugLedsTurnRed(debug_led2);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	8e e4       	ldi	r24, 0x4E	; 78
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1d4:	88 23       	and	r24, r24
 1d6:	19 f0       	breq	.+6      	; 0x1de <Show_received_SPI_data_on_debug_leds+0x36>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 9e 00 	call	0x13c	; 0x13c <DebugLedsTurnRed>
    if (BitIsSet(Spi_spdr, 2)) DebugLedsTurnRed(debug_led3);
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	8e e4       	ldi	r24, 0x4E	; 78
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1e8:	88 23       	and	r24, r24
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <Show_received_SPI_data_on_debug_leds+0x4a>
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 9e 00 	call	0x13c	; 0x13c <DebugLedsTurnRed>
    if (BitIsSet(Spi_spdr, 3)) DebugLedsTurnRed(debug_led4);
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	8e e4       	ldi	r24, 0x4E	; 78
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 64 00 	call	0xc8	; 0xc8 <BitIsSet>
 1fc:	88 23       	and	r24, r24
 1fe:	19 f0       	breq	.+6      	; 0x206 <Show_received_SPI_data_on_debug_leds+0x5e>
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	0e 94 9e 00 	call	0x13c	; 0x13c <DebugLedsTurnRed>
 206:	08 95       	ret

00000208 <main>:
}
int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 208:	0e 94 81 00 	call	0x102	; 0x102 <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 20c:	0e 94 a6 00 	call	0x14c	; 0x14c <DebugLedsTurnAllGreen>
    /* =====[ test SpiSlave ]===== */
    SpiSlaveInit();
 210:	0e 94 c3 00 	call	0x186	; 0x186 <SpiSlaveInit>
    /* sei(); // Enable interrupts */
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-30 */
    Show_received_SPI_data_on_debug_leds();
 214:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <Show_received_SPI_data_on_debug_leds>
}
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
