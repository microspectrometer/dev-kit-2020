
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000606  00800126  00800126  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca9  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3a  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae6  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00003b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf7  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a0  00000000  00000000  00004d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  9e:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <DebugLeds_ddr>
 102:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <DebugLeds_ddr+0x1>
 106:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <debug_led1>
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 110:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <debug_led2>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 11a:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <debug_led3>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 124:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <debug_led4>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DebugLedsTurnRed>:
 134:	68 2f       	mov	r22, r24
 136:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <DebugLeds_port>
 13a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <DebugLeds_port+0x1>
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 142:	08 95       	ret

00000144 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 22 01 	lds	r28, 0x0122	; 0x800122 <DebugLeds_port>
 14c:	d0 91 23 01 	lds	r29, 0x0123	; 0x800123 <DebugLeds_port+0x1>
 150:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <debug_led4>
 172:	ce 01       	movw	r24, r28
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <ClearPendingSpiInterrupt_Implementation>:
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 17e:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
 182:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
 186:	09 95       	icall
 188:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 18c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 190:	09 95       	icall
 192:	08 95       	ret

00000194 <ReadSpiStatusRegister_Implementation>:
 194:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <Spi_spsr>
 198:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <Spi_spsr+0x1>
 19c:	80 81       	ld	r24, Z
 19e:	08 95       	ret

000001a0 <ReadSpiDataRegister_Implementation>:
 1a0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <Spi_spdr>
 1a4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <Spi_spdr+0x1>
 1a8:	80 81       	ld	r24, Z
 1aa:	08 95       	ret

000001ac <WriteSpiDataRegister_Implementation>:
 1ac:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <Spi_spdr>
 1b0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <Spi_spdr+0x1>
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret

000001b8 <DisableSpi_Implementation>:
 1b8:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_Enable>
 1bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Spi_spcr>
 1c0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Spi_spcr+0x1>
 1c4:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1c8:	08 95       	ret

000001ca <SpiSlaveSignalDataIsReady_Implementation>:
 1ca:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Spi_Miso>
 1ce:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Spi_port>
 1d2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Spi_port+0x1>
 1d6:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
 1da:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 1de:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 1e2:	09 95       	icall
 1e4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 1e8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 1ec:	09 95       	icall
 1ee:	08 95       	ret

000001f0 <EnableSpi_Implementation>:
 1f0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Spi_Enable>
 1f4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Spi_spcr>
 1f8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Spi_spcr+0x1>
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 200:	08 95       	ret

00000202 <SpiTransferIsDone_Implementation>:
 202:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <Spi_InterruptFlag>
 206:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Spi_spsr>
 20a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Spi_spsr+0x1>
 20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 212:	08 95       	ret

00000214 <SpiSlaveInit>:
 214:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Spi_Miso>
 218:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Spi_ddr>
 21c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Spi_ddr+0x1>
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 224:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 228:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 22c:	09 95       	icall
 22e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 232:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
 236:	09 95       	icall
 238:	08 95       	ret

0000023a <SpiSlaveRead>:
    EnableSpi();
}
void (*SpiSlaveSignalDataIsReady)(void) = SpiSlaveSignalDataIsReady_Implementation;
uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
 23a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 23e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 242:	09 95       	icall
 244:	88 23       	and	r24, r24
 246:	c9 f3       	breq	.-14     	; 0x23a <SpiSlaveRead>
    return ReadSpiDataRegister();
 248:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 24c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 250:	09 95       	icall
}
 252:	08 95       	ret

00000254 <SpiSlaveSendBytes>:
void SpiSlaveSendBytes(uint8_t *bytes, uint16_t nbytes)
{
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 25c:	61 15       	cp	r22, r1
 25e:	71 05       	cpc	r23, r1
 260:	c9 f0       	breq	.+50     	; 0x294 <SpiSlaveSendBytes+0x40>
 262:	8c 01       	movw	r16, r24
 264:	ec 01       	movw	r28, r24
 266:	06 0f       	add	r16, r22
 268:	17 1f       	adc	r17, r23
    {
        /* *Spi_spdr = bytes[byte_index]; */
        WriteSpiDataRegister(bytes[byte_index]);
 26a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 26e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 272:	89 91       	ld	r24, Y+
 274:	09 95       	icall
        SpiSlaveSignalDataIsReady();
 276:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 27a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 27e:	09 95       	icall
        while ( !SpiTransferIsDone() );
 280:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 284:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 288:	09 95       	icall
 28a:	88 23       	and	r24, r24
 28c:	c9 f3       	breq	.-14     	; 0x280 <SpiSlaveSendBytes+0x2c>
    return ReadSpiDataRegister();
}
void SpiSlaveSendBytes(uint8_t *bytes, uint16_t nbytes)
{
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 28e:	c0 17       	cp	r28, r16
 290:	d1 07       	cpc	r29, r17
 292:	59 f7       	brne	.-42     	; 0x26a <SpiSlaveSendBytes+0x16>
    // The SPI master waits for MISO to go low after every read.
    // This gaurantees the next byte of data is ready.
    // The SPI master does not have to release SlaveSelect, but it can.
    // SlaveSelect being low should not impact the slave's ability to disable
    // SPI and pull MISO low.
}
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <IndicateUnknownCommand>:
    // Repeat test by flipping `SW2` to `ISP` and pressing reset to turn the
    // LEDs back to all green.
    //
}
void ShowSpiDataOnDebugLeds(void)
{ Show_data_on_debug_leds(*Spi_spdr); }
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 2a4:	08 95       	ret

000002a6 <SetupDebugLeds>:
 2a6:	0e 94 7d 00 	call	0xfa	; 0xfa <DebugLedsTurnAllOn>
 2aa:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
 2ae:	08 95       	ret

000002b0 <SendDummyByte>:
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	8e bd       	out	0x2e, r24	; 46
 2ba:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 2be:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 2c2:	09 95       	icall
 2c4:	08 95       	ret

000002c6 <SendFourDummyBytes>:
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <SendFourDummyBytes+0x6>
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <SendFourDummyBytes+0x8>
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	89 83       	std	Y+1, r24	; 0x01
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	8a 83       	std	Y+2, r24	; 0x02
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	8b 83       	std	Y+3, r24	; 0x03
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	8c 83       	std	Y+4, r24	; 0x04
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	0e 94 2a 01 	call	0x254	; 0x254 <SpiSlaveSendBytes>
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <FillDummyFrameWithAlphabet>:
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	08 e2       	ldi	r16, 0x28	; 40
 30e:	11 e0       	ldi	r17, 0x01	; 1
 310:	cc e2       	ldi	r28, 0x2C	; 44
 312:	d7 e0       	ldi	r29, 0x07	; 7
 314:	f8 01       	movw	r30, r16
 316:	0f 2e       	mov	r0, r31
 318:	fa e1       	ldi	r31, 0x1A	; 26
 31a:	ff 2e       	mov	r15, r31
 31c:	f0 2d       	mov	r31, r0
 31e:	af 01       	movw	r20, r30
 320:	40 1b       	sub	r20, r16
 322:	51 0b       	sbc	r21, r17
 324:	9a 01       	movw	r18, r20
 326:	a5 ec       	ldi	r26, 0xC5	; 197
 328:	be e4       	ldi	r27, 0x4E	; 78
 32a:	0e 94 11 02 	call	0x422	; 0x422 <__umulhisi3>
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	f8 9e       	mul	r15, r24
 33c:	90 01       	movw	r18, r0
 33e:	f9 9e       	mul	r15, r25
 340:	30 0d       	add	r19, r0
 342:	11 24       	eor	r1, r1
 344:	42 1b       	sub	r20, r18
 346:	53 0b       	sbc	r21, r19
 348:	4f 5b       	subi	r20, 0xBF	; 191
 34a:	41 93       	st	Z+, r20
 34c:	ec 17       	cp	r30, r28
 34e:	fd 07       	cpc	r31, r29
 350:	31 f7       	brne	.-52     	; 0x31e <FillDummyFrameWithAlphabet+0x1c>
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	08 95       	ret

0000035e <SendDummyFrame>:
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 364:	0e 94 81 01 	call	0x302	; 0x302 <FillDummyFrameWithAlphabet>
 368:	64 e0       	ldi	r22, 0x04	; 4
 36a:	76 e0       	ldi	r23, 0x06	; 6
 36c:	88 e2       	ldi	r24, 0x28	; 40
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 2a 01 	call	0x254	; 0x254 <SpiSlaveSendBytes>
 374:	08 95       	ret

00000376 <SendDataMasterAskedFor>:
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 37c:	0e 94 1d 01 	call	0x23a	; 0x23a <SpiSlaveRead>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	19 f4       	brne	.+6      	; 0x38a <SendDataMasterAskedFor+0x14>
 384:	0e 94 58 01 	call	0x2b0	; 0x2b0 <SendDummyByte>
 388:	0f c0       	rjmp	.+30     	; 0x3a8 <SendDataMasterAskedFor+0x32>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	19 f4       	brne	.+6      	; 0x394 <SendDataMasterAskedFor+0x1e>
 38e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <SendFourDummyBytes>
 392:	0a c0       	rjmp	.+20     	; 0x3a8 <SendDataMasterAskedFor+0x32>
 394:	83 30       	cpi	r24, 0x03	; 3
 396:	19 f4       	brne	.+6      	; 0x39e <SendDataMasterAskedFor+0x28>
 398:	0e 94 af 01 	call	0x35e	; 0x35e <SendDummyFrame>
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <SendDataMasterAskedFor+0x32>
 39e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <slave_ignore>
 3a2:	89 13       	cpse	r24, r25
 3a4:	0e 94 4f 01 	call	0x29e	; 0x29e <IndicateUnknownCommand>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 3ae:	08 95       	ret

000003b0 <RespondToRequestsForData>:
 3b0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 3b4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 3b8:	09 95       	icall
 3ba:	81 11       	cpse	r24, r1
 3bc:	0e 94 bb 01 	call	0x376	; 0x376 <SendDataMasterAskedFor>
 3c0:	08 95       	ret

000003c2 <App_version_of_Slave_RespondToRequestsForData>:
 3c2:	0e 94 0a 01 	call	0x214	; 0x214 <SpiSlaveInit>
 3c6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <RespondToRequestsForData>
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <App_version_of_Slave_RespondToRequestsForData+0x4>

000003cc <main>:
 3cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SetupDebugLeds>
 3d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <App_version_of_Slave_RespondToRequestsForData>

000003d4 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 3f6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end>
 3fa:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__data_end+0x1>
 3fe:	09 95       	icall
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__umulhisi3>:
 422:	a2 9f       	mul	r26, r18
 424:	b0 01       	movw	r22, r0
 426:	b3 9f       	mul	r27, r19
 428:	c0 01       	movw	r24, r0
 42a:	a3 9f       	mul	r26, r19
 42c:	70 0d       	add	r23, r0
 42e:	81 1d       	adc	r24, r1
 430:	11 24       	eor	r1, r1
 432:	91 1d       	adc	r25, r1
 434:	b2 9f       	mul	r27, r18
 436:	70 0d       	add	r23, r0
 438:	81 1d       	adc	r24, r1
 43a:	11 24       	eor	r1, r1
 43c:	91 1d       	adc	r25, r1
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
