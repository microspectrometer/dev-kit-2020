
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000163a  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b3  00000000  00000000  000026ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00002e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000910  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000340  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  9e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
void ClearBit(uint8_t volatile * const port, uint8_t const bit) {
    *port &= ~(1<<bit);
}

void ToggleBit(uint8_t volatile * const port, uint8_t const bit) {
    *port ^= (1<<bit);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <SetBit+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <SetBit+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <ClearBit>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <ClearBit+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <ClearBit+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <BitIsSet>:
}

bool BitIsSet(uint8_t volatile * const port, uint8_t const bit) {
    return *port & (1<<bit);
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <BitIsSet+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <BitIsSet+0xa>
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	28 23       	and	r18, r24
  ee:	39 23       	and	r19, r25
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	23 2b       	or	r18, r19
  f4:	09 f4       	brne	.+2      	; 0xf8 <BitIsSet+0x20>
  f6:	80 e0       	ldi	r24, 0x00	; 0
}
  f8:	08 95       	ret

000000fa <DebugLedsTurnAllOn>:
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
}
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <DebugLeds_ddr>
 102:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <DebugLeds_ddr+0x1>
 106:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <debug_led1>
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 110:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <debug_led2>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 11a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <debug_led3>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 124:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <debug_led4>
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <DebugLedsTurnRed>:
 134:	68 2f       	mov	r22, r24
 136:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <DebugLeds_port>
 13a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <DebugLeds_port+0x1>
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 142:	08 95       	ret

00000144 <DebugLedsTurnAllGreen>:

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <DebugLeds_port>
 14c:	d0 91 14 01 	lds	r29, 0x0114	; 0x800114 <DebugLeds_port+0x1>
 150:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <debug_led4>
 172:	ce 01       	movw	r24, r28
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <ClearBit>
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <SpiSlaveInit>:
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 17e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <Spi_Miso>
 182:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Spi_ddr>
 186:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Spi_ddr+0x1>
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
}
static void EnableSpi(void)
{
    SetBit(Spi_spcr, Spi_Enable);
 18e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <Spi_Enable>
 192:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Spi_spcr>
 196:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Spi_spcr+0x1>
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
 19e:	08 95       	ret

000001a0 <SpiEnableInterrupt>:
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
}
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
 1a0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <GlobalInterruptDisable>
 1a4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <GlobalInterruptDisable+0x1>
 1a8:	09 95       	icall
static void ClearPendingSpiInterrupt(void)
{
    // Clear the SPI Interrupt Flag bit in the SPI Status Register.
    // Implementation:
    // Read registers SPSR and SPDR, in that order.
    *Spi_spsr; *Spi_spdr;
 1aa:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <Spi_spsr>
 1ae:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <Spi_spsr+0x1>
 1b2:	80 81       	ld	r24, Z
 1b4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <Spi_spdr>
 1b8:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <Spi_spdr+0x1>
 1bc:	80 81       	ld	r24, Z
}
static void EnableTransferCompleteInterrupt(void)
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
 1be:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Spi_InterruptEnable>
 1c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Spi_spcr>
 1c6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Spi_spcr+0x1>
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 1ce:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <GlobalInterruptEnable>
 1d2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <GlobalInterruptEnable+0x1>
 1d6:	09 95       	icall
 1d8:	08 95       	ret

000001da <Show_data_on_debug_leds>:
void test_SpiSlave(void)
{
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    /* SPI_interrupt_routine_turns_debug_led1_red(); // PASS 2018-08-01 */
    SPI_read_in_ISR_and_show_data_on_debug_leds(); // PASS 2018-08-01
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	1f 92       	push	r1
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	89 83       	std	Y+1, r24	; 0x01
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	ce 01       	movw	r24, r28
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 1f0:	88 23       	and	r24, r24
 1f2:	19 f0       	breq	.+6      	; 0x1fa <Show_data_on_debug_leds+0x20>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 204:	88 23       	and	r24, r24
 206:	19 f0       	breq	.+6      	; 0x20e <Show_data_on_debug_leds+0x34>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	ce 01       	movw	r24, r28
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 218:	88 23       	and	r24, r24
 21a:	19 f0       	breq	.+6      	; 0x222 <Show_data_on_debug_leds+0x48>
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 222:	63 e0       	ldi	r22, 0x03	; 3
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	0e 94 6c 00 	call	0xd8	; 0xd8 <BitIsSet>
 22c:	88 23       	and	r24, r24
 22e:	19 f0       	breq	.+6      	; 0x236 <Show_data_on_debug_leds+0x5c>
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	0e 94 9a 00 	call	0x134	; 0x134 <DebugLedsTurnRed>
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <ShowSpiDataOnDebugLeds>:
 23e:	8e b5       	in	r24, 0x2e	; 46
 240:	0e 94 ed 00 	call	0x1da	; 0x1da <Show_data_on_debug_leds>
 244:	08 95       	ret

00000246 <__vector_17>:
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
 268:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
 26c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x1>
 270:	09 95       	icall
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <SPI_read_in_ISR_and_show_data_on_debug_leds>:
 294:	0e 94 bf 00 	call	0x17e	; 0x17e <SpiSlaveInit>
 298:	8f e1       	ldi	r24, 0x1F	; 31
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 2a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 2a4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SpiEnableInterrupt>
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <SPI_read_in_ISR_and_show_data_on_debug_leds+0x14>

000002aa <main>:
}
int main()
{
    /* test_DebugLeds(); // All tests pass 2018-07-30 */
    DebugLedsTurnAllOn();
 2aa:	0e 94 7d 00 	call	0xfa	; 0xfa <DebugLedsTurnAllOn>
    DebugLedsTurnAllGreen();
 2ae:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
void test_SpiSlave(void)
{
    /* Turn_led3_red_when_SpiSlave_receives_a_byte(); // PASS 2018-07-31 */
    /* SpiSlaveRead_and_show_received_data_on_debug_leds(); // PASS 2018-08-01 */
    /* SPI_interrupt_routine_turns_debug_led1_red(); // PASS 2018-08-01 */
    SPI_read_in_ISR_and_show_data_on_debug_leds(); // PASS 2018-08-01
 2b2:	0e 94 4a 01 	call	0x294	; 0x294 <SPI_read_in_ISR_and_show_data_on_debug_leds>

000002b6 <GlobalInterruptEnable_Implementation>:
#include "AvrAsmMacros.h"
#include <avr/interrupt.h>      // defines macros `sei()` and `cli()`

// sei()
static void GlobalInterruptEnable_Implementation(void)
{ sei(); }
 2b6:	78 94       	sei
 2b8:	08 95       	ret

000002ba <GlobalInterruptDisable_Implementation>:
void (*GlobalInterruptEnable)(void) = GlobalInterruptEnable_Implementation;

// cli()
static void GlobalInterruptDisable_Implementation(void)
{ cli(); }
 2ba:	f8 94       	cli
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
