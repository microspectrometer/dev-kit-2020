; Broken LIS config instructions
; function call has overhead, but that is OK
; where is the 32-bit input argument? look for four consecutive `and`
; r12-r15 and r24-r27 are used for operating on two 32-bit values
; operating on a 32-bit value is time consuming, don't do it
; split the values into bytes and operate on those so the costly 32-bit work
; happens before the time critical section starts.
; Or forget the 32-bit value and just work on an array.
push	r12
push	r13
push	r14
push	r15
movw	r12, r22
movw	r14, r24
; Wait for falling edge of clock
sbi	0x15, 2	; 21
sbis	0x15, 2	; 21
rjmp	.-4      	; 0x2b8 <ProgramPhotodiodeArray_Implementation+0xe>
sbi	0x15, 2	; 21
; PixSelect HIGH
sbi	0x05, 0	; 5
; Rst LOW
cbi	0x0b, 6	; 11
; Wait for rising edge of clock
sbi	0x15, 1	; 21
sbis	0x15, 1	; 21
rjmp	.-4      	; 0x2c4 <ProgramPhotodiodeArray_Implementation+0x1a>
sbi	0x15, 1	; 21
; Wait for falling edge of clock
sbi	0x15, 2	; 21
sbis	0x15, 2	; 21
rjmp	.-4      	; 0x2cc <ProgramPhotodiodeArray_Implementation+0x22>
sbi	0x15, 2	; 21
; Setup the while loop. This setup takes 8 cycles.
; 4 ldi:1, 1 movw:1, 1 mov:1, 1 rjmp:2
; 4*1+1*1+1*1+1*2 = 8 cycles
ldi	r18, 0x00	; 0
ldi	r19, 0x00	; 0
ldi	r20, 0x01	; 1
ldi	r21, 0x00	; 0
movw	r24, r20
mov	r0, r18
rjmp	.+4      	; 0x2d2 <ProgramPhotodiodeArray_Implementation+0x28>
; add:1, adc:1, dec:1, brpl:branch_if_plus:1, 
add	r24, r24
adc	r25, r25
dec	r0
brpl	.-8      	; 0x2ce <ProgramPhotodiodeArray_Implementation+0x24>
mov	r0, r25
add	r0, r0
sbc	r26, r26
sbc	r27, r27
and	r24, r12
and	r25, r13
and	r26, r14
and	r27, r15
or	r24, r25
or	r24, r26
or	r24, r27
breq	.+42     	; 0x318 <ProgramPhotodiodeArray_Implementation+0x6e>
; RST HIGH
sbi	0x0b, 6	; 11
; Wait for rising edge of clock
sbi	0x15, 1	; 21
sbis	0x15, 1	; 21
rjmp	.-4      	; 0x2f2 <ProgramPhotodiodeArray_Implementation+0x48>
sbi	0x15, 1	; 21
; Wait for falling edge of clock
sbi	0x15, 2	; 21
sbis	0x15, 2	; 21
rjmp	.-4      	; 0x2fa <ProgramPhotodiodeArray_Implementation+0x50>
sbi	0x15, 2	; 21
; subi:subtract constant from reg, sbci:subtract with carry const from reg
; I think subtracting 255 is how it increments r18
subi	r18, 0xFF	; 255
sbci	r19, 0xFF	; 255
; cpi:compare reg r18 with immediate 28 (number of bits)
cpi	r18, 0x1C	; 28
cpc	r19, r1
brne	.-66     	; 0x2c8 <ProgramPhotodiodeArray_Implementation+0x1e>
; Rst LOW
cbi	0x0b, 6	; 11
; PixSelect LOW
cbi	0x05, 0	; 5
pop	r15
pop	r14
pop	r13
pop	r12
ret
cbi	0x0b, 6	; 11
rjmp	.-44     	; 0x2f0 <ProgramPhotodiodeArray_Implementation+0x46>
