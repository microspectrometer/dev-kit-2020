
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001382  00001416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000634  00800144  00800144  0000145a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000145a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000379c  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001034  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190b  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000944  00000000  00000000  00007920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016a5  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d9  00000000  00000000  00009909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  0000b2e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_17>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e8       	ldi	r30, 0x82	; 130
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 34       	cpi	r26, 0x44	; 68
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a4 e4       	ldi	r26, 0x44	; 68
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 37       	cpi	r26, 0x78	; 120
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3b 09 	call	0x1276	; 0x1276 <main>
      9e:	0c 94 bf 09 	jmp	0x137e	; 0x137e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
      a6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiStatusRegister>
      aa:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiStatusRegister+0x1>
      ae:	09 95       	icall
      b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
      b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
      b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
      ba:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Spi_spsr>
      be:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Spi_spsr+0x1>
      c2:	80 81       	ld	r24, Z
      c4:	08 95       	ret

000000c6 <EnableSpi_Implementation>:
      c6:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Spi_spcr>
      ca:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <Spi_spcr+0x1>
      ce:	20 81       	ld	r18, Z
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_Enable>
      d8:	02 c0       	rjmp	.+4      	; 0xde <EnableSpi_Implementation+0x18>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	0a 94       	dec	r0
      e0:	e2 f7       	brpl	.-8      	; 0xda <EnableSpi_Implementation+0x14>
      e2:	82 2b       	or	r24, r18
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <ReadSpiDataRegister_Implementation>:
      e8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Spi_spdr>
      ec:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Spi_spdr+0x1>
      f0:	80 81       	ld	r24, Z
      f2:	08 95       	ret

000000f4 <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
    ClearBit(Spi_ddr, Spi_DataReady); // make it an input
    SetBit(Spi_port, Spi_DataReady); // enable pull-up
}
void SetDataReadyAsOutputIdlesHigh(void) // For SpiSlave only!
{
    SetBit(Spi_port, Spi_DataReady); // idle HIGH
      f8:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Spi_port>
      fc:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Spi_port+0x1>
     100:	20 81       	ld	r18, Z
     102:	c1 e0       	ldi	r28, 0x01	; 1
     104:	d0 e0       	ldi	r29, 0x00	; 0
     106:	ce 01       	movw	r24, r28
     108:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_DataReady>
     10c:	02 c0       	rjmp	.+4      	; 0x112 <SpiSlaveInit+0x1e>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	0a 94       	dec	r0
     114:	e2 f7       	brpl	.-8      	; 0x10e <SpiSlaveInit+0x1a>
     116:	92 2f       	mov	r25, r18
     118:	98 2b       	or	r25, r24
     11a:	90 83       	st	Z, r25
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
     11c:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Spi_ddr>
     120:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <Spi_ddr+0x1>
     124:	90 81       	ld	r25, Z
     126:	89 2b       	or	r24, r25
     128:	80 83       	st	Z, r24
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
     12a:	20 81       	ld	r18, Z
     12c:	ce 01       	movw	r24, r28
     12e:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Spi_Miso>
     132:	02 c0       	rjmp	.+4      	; 0x138 <SpiSlaveInit+0x44>
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	0a 94       	dec	r0
     13a:	e2 f7       	brpl	.-8      	; 0x134 <SpiSlaveInit+0x40>
     13c:	82 2b       	or	r24, r18
     13e:	80 83       	st	Z, r24
{
    // Slave outputs LOW on DataReady to signal Master there is data to read.
    SetDataReadyAsOutputIdlesHigh();
    // TODO: do not drive MISO, that's why we have DataReady
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
     140:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <EnableSpi>
     144:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <EnableSpi+0x1>
     148:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
     14a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
     14e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
     152:	09 95       	icall
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
}
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
     154:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <GlobalInterruptDisable>
     158:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <GlobalInterruptDisable+0x1>
     15c:	09 95       	icall
    ClearPendingSpiInterrupt();
     15e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
     162:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
     166:	09 95       	icall
/*     // and disable with: */
/*     /1* ClearBit(Spi_spcr, Spi_InterruptEnable); // Disable SPI interrupt *1/ */
/* } */
static void EnableTransferCompleteInterrupt(void)
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
     168:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Spi_spcr>
     16c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <Spi_spcr+0x1>
     170:	80 81       	ld	r24, Z
     172:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_InterruptEnable>
     176:	02 c0       	rjmp	.+4      	; 0x17c <SpiSlaveInit+0x88>
     178:	cc 0f       	add	r28, r28
     17a:	dd 1f       	adc	r29, r29
     17c:	0a 94       	dec	r0
     17e:	e2 f7       	brpl	.-8      	; 0x178 <SpiSlaveInit+0x84>
     180:	c8 2b       	or	r28, r24
     182:	c0 83       	st	Z, r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
     184:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <GlobalInterruptEnable>
     188:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <GlobalInterruptEnable+0x1>
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
    // Slave uses interrupts to send and receive bytes over SPI.
    SpiEnableInterrupt();
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
     190:	09 94       	ijmp

00000192 <QueueInit>:
    return pq;
}
uint16_t QueueLength(volatile Queue_s * pq)
{ // Return length of Queue
    return pq->length;
}
     192:	e4 e4       	ldi	r30, 0x44	; 68
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	91 83       	std	Z+1, r25	; 0x01
     198:	80 83       	st	Z, r24
     19a:	77 83       	std	Z+7, r23	; 0x07
     19c:	66 83       	std	Z+6, r22	; 0x06
     19e:	12 82       	std	Z+2, r1	; 0x02
     1a0:	13 82       	std	Z+3, r1	; 0x03
     1a2:	15 82       	std	Z+5, r1	; 0x05
     1a4:	14 82       	std	Z+4, r1	; 0x04
     1a6:	cf 01       	movw	r24, r30
     1a8:	08 95       	ret

000001aa <QueuePush>:
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
     1aa:	fc 01       	movw	r30, r24
    pq->length--;
    return pq->buffer[pq->tail++];
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
     1ac:	24 81       	ldd	r18, Z+4	; 0x04
     1ae:	35 81       	ldd	r19, Z+5	; 0x05
     1b0:	86 81       	ldd	r24, Z+6	; 0x06
     1b2:	97 81       	ldd	r25, Z+7	; 0x07
     1b4:	28 17       	cp	r18, r24
     1b6:	39 07       	cpc	r19, r25
     1b8:	b8 f4       	brcc	.+46     	; 0x1e8 <QueuePush+0x3e>
}
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
    if (QueueIsFull(pq)) return;
    // wrap head to beginning of buffer when it reaches the end of the buffer
    if (pq->head >= pq->max_length) pq->head = 0;
     1ba:	82 81       	ldd	r24, Z+2	; 0x02
     1bc:	26 81       	ldd	r18, Z+6	; 0x06
     1be:	37 81       	ldd	r19, Z+7	; 0x07
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	82 17       	cp	r24, r18
     1c4:	93 07       	cpc	r25, r19
     1c6:	08 f0       	brcs	.+2      	; 0x1ca <QueuePush+0x20>
     1c8:	12 82       	std	Z+2, r1	; 0x02
    pq->buffer[pq->head++] = data;
     1ca:	a0 81       	ld	r26, Z
     1cc:	b1 81       	ldd	r27, Z+1	; 0x01
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	98 0f       	add	r25, r24
     1d4:	92 83       	std	Z+2, r25	; 0x02
     1d6:	a8 0f       	add	r26, r24
     1d8:	b1 1d       	adc	r27, r1
     1da:	6c 93       	st	X, r22
    pq->length++;
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	95 83       	std	Z+5, r25	; 0x05
     1e4:	84 83       	std	Z+4, r24	; 0x04
     1e6:	08 95       	ret
     1e8:	08 95       	ret

000001ea <QueuePop>:
}
uint8_t QueuePop(volatile Queue_s *pq)
{
     1ea:	fc 01       	movw	r30, r24
    if (pq->length >= pq->max_length) return true;
    return false;
}
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
     1ec:	84 81       	ldd	r24, Z+4	; 0x04
     1ee:	95 81       	ldd	r25, Z+5	; 0x05
     1f0:	89 2b       	or	r24, r25
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <QueuePop+0xe>
    pq->buffer[pq->head++] = data;
    pq->length++;
}
uint8_t QueuePop(volatile Queue_s *pq)
{
    if (QueueIsEmpty(pq)) return 0;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	08 95       	ret
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     1f8:	83 81       	ldd	r24, Z+3	; 0x03
     1fa:	26 81       	ldd	r18, Z+6	; 0x06
     1fc:	37 81       	ldd	r19, Z+7	; 0x07
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	82 17       	cp	r24, r18
     202:	93 07       	cpc	r25, r19
     204:	08 f0       	brcs	.+2      	; 0x208 <QueuePop+0x1e>
     206:	13 82       	std	Z+3, r1	; 0x03
    pq->length--;
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	95 81       	ldd	r25, Z+5	; 0x05
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	95 83       	std	Z+5, r25	; 0x05
     210:	84 83       	std	Z+4, r24	; 0x04
    return pq->buffer[pq->tail++];
     212:	80 81       	ld	r24, Z
     214:	91 81       	ldd	r25, Z+1	; 0x01
     216:	23 81       	ldd	r18, Z+3	; 0x03
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	32 0f       	add	r19, r18
     21c:	33 83       	std	Z+3, r19	; 0x03
     21e:	fc 01       	movw	r30, r24
     220:	e2 0f       	add	r30, r18
     222:	f1 1d       	adc	r31, r1
     224:	80 81       	ld	r24, Z
     226:	08 95       	ret

00000228 <QueueIsFull>:
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
     228:	fc 01       	movw	r30, r24
     22a:	44 81       	ldd	r20, Z+4	; 0x04
     22c:	55 81       	ldd	r21, Z+5	; 0x05
     22e:	26 81       	ldd	r18, Z+6	; 0x06
     230:	37 81       	ldd	r19, Z+7	; 0x07
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	42 17       	cp	r20, r18
     236:	53 07       	cpc	r21, r19
     238:	08 f4       	brcc	.+2      	; 0x23c <QueueIsFull+0x14>
     23a:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
     23c:	08 95       	ret

0000023e <QueueIsEmpty>:
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
     23e:	fc 01       	movw	r30, r24
     240:	24 81       	ldd	r18, Z+4	; 0x04
     242:	35 81       	ldd	r19, Z+5	; 0x05
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	23 2b       	or	r18, r19
     248:	09 f0       	breq	.+2      	; 0x24c <QueueIsEmpty+0xe>
     24a:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
     24c:	08 95       	ret

0000024e <GlobalInterruptEnable_Implementation>:
    // clear rising edge flag
    SetBit(Pwm_tifr0, Pwm_Ocf0a); // sbi	0x15, 1	; 21
    // wait until rising edge flag sets
    while(BitIsClear(Pwm_tifr0, Pwm_Ocf0a)); // sbis	0x15, 1	; 21
    // clear rising edge flag
    SetBit(Pwm_tifr0, Pwm_Ocf0a); // sbi	0x15, 1	; 21
     24e:	78 94       	sei
     250:	08 95       	ret

00000252 <GlobalInterruptDisable_Implementation>:
     252:	f8 94       	cli
     254:	08 95       	ret

00000256 <NullCommand>:
     256:	08 95       	ret

00000258 <GetSensorConfig>:
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <GetSensorConfig+0x6>
     25e:	00 d0       	rcall	.+0      	; 0x260 <GetSensorConfig+0x8>
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	1c 82       	std	Y+4, r1	; 0x04
     266:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     26a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	ce 01       	movw	r24, r28
     274:	04 96       	adiw	r24, 0x04	; 4
     276:	09 95       	icall
     278:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <gain>
     282:	8a 83       	std	Y+2, r24	; 0x02
     284:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <active_rows>
     288:	8b 83       	std	Y+3, r24	; 0x03
     28a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     28e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     292:	63 e0       	ldi	r22, 0x03	; 3
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	ce 01       	movw	r24, r28
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	09 95       	icall
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <ProgramPhotodiodeArray_Implementation>:
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	ec 01       	movw	r28, r24
     2b0:	aa 9a       	sbi	0x15, 2	; 21
     2b2:	aa 9b       	sbis	0x15, 2	; 21
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <ProgramPhotodiodeArray_Implementation+0x8>
     2b6:	aa 9a       	sbi	0x15, 2	; 21
     2b8:	28 9a       	sbi	0x05, 0	; 5
     2ba:	ce 01       	movw	r24, r28
     2bc:	03 96       	adiw	r24, 0x03	; 3
     2be:	fe 01       	movw	r30, r28
     2c0:	a1 e0       	ldi	r26, 0x01	; 1
     2c2:	b0 e0       	ldi	r27, 0x00	; 0
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 81       	ld	r20, Z
     2ca:	64 2f       	mov	r22, r20
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	ad 01       	movw	r20, r26
     2d0:	02 2e       	mov	r0, r18
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <ProgramPhotodiodeArray_Implementation+0x2e>
     2d4:	44 0f       	add	r20, r20
     2d6:	55 1f       	adc	r21, r21
     2d8:	0a 94       	dec	r0
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <ProgramPhotodiodeArray_Implementation+0x2a>
     2dc:	46 23       	and	r20, r22
     2de:	57 23       	and	r21, r23
     2e0:	45 2b       	or	r20, r21
     2e2:	b1 f1       	breq	.+108    	; 0x350 <ProgramPhotodiodeArray_Implementation+0xa6>
     2e4:	5e 9a       	sbi	0x0b, 6	; 11
     2e6:	a9 9a       	sbi	0x15, 1	; 21
     2e8:	a9 9b       	sbis	0x15, 1	; 21
     2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <ProgramPhotodiodeArray_Implementation+0x3e>
     2ec:	a9 9a       	sbi	0x15, 1	; 21
     2ee:	aa 9a       	sbi	0x15, 2	; 21
     2f0:	aa 9b       	sbis	0x15, 2	; 21
     2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <ProgramPhotodiodeArray_Implementation+0x46>
     2f4:	aa 9a       	sbi	0x15, 2	; 21
     2f6:	2f 5f       	subi	r18, 0xFF	; 255
     2f8:	3f 4f       	sbci	r19, 0xFF	; 255
     2fa:	28 30       	cpi	r18, 0x08	; 8
     2fc:	31 05       	cpc	r19, r1
     2fe:	21 f7       	brne	.-56     	; 0x2c8 <ProgramPhotodiodeArray_Implementation+0x1e>
     300:	31 96       	adiw	r30, 0x01	; 1
     302:	e8 17       	cp	r30, r24
     304:	f9 07       	cpc	r31, r25
     306:	f1 f6       	brne	.-68     	; 0x2c4 <ProgramPhotodiodeArray_Implementation+0x1a>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	4b 81       	ldd	r20, Y+3	; 0x03
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	cb 01       	movw	r24, r22
     316:	02 2e       	mov	r0, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <ProgramPhotodiodeArray_Implementation+0x74>
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <ProgramPhotodiodeArray_Implementation+0x70>
     322:	48 23       	and	r20, r24
     324:	59 23       	and	r21, r25
     326:	45 2b       	or	r20, r21
     328:	a9 f0       	breq	.+42     	; 0x354 <ProgramPhotodiodeArray_Implementation+0xaa>
     32a:	5e 9a       	sbi	0x0b, 6	; 11
     32c:	a9 9a       	sbi	0x15, 1	; 21
     32e:	a9 9b       	sbis	0x15, 1	; 21
     330:	fe cf       	rjmp	.-4      	; 0x32e <ProgramPhotodiodeArray_Implementation+0x84>
     332:	a9 9a       	sbi	0x15, 1	; 21
     334:	aa 9a       	sbi	0x15, 2	; 21
     336:	aa 9b       	sbis	0x15, 2	; 21
     338:	fe cf       	rjmp	.-4      	; 0x336 <ProgramPhotodiodeArray_Implementation+0x8c>
     33a:	aa 9a       	sbi	0x15, 2	; 21
     33c:	2f 5f       	subi	r18, 0xFF	; 255
     33e:	3f 4f       	sbci	r19, 0xFF	; 255
     340:	24 30       	cpi	r18, 0x04	; 4
     342:	31 05       	cpc	r19, r1
     344:	29 f7       	brne	.-54     	; 0x310 <ProgramPhotodiodeArray_Implementation+0x66>
     346:	5e 98       	cbi	0x0b, 6	; 11
     348:	28 98       	cbi	0x05, 0	; 5
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret
     350:	5e 98       	cbi	0x0b, 6	; 11
     352:	c9 cf       	rjmp	.-110    	; 0x2e6 <ProgramPhotodiodeArray_Implementation+0x3c>
     354:	5e 98       	cbi	0x0b, 6	; 11
     356:	ea cf       	rjmp	.-44     	; 0x32c <ProgramPhotodiodeArray_Implementation+0x82>

00000358 <GetExposure>:
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <GetExposure+0x6>
     35e:	1f 92       	push	r1
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	1b 82       	std	Y+3, r1	; 0x03
     366:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     36a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	ce 01       	movw	r24, r28
     374:	03 96       	adiw	r24, 0x03	; 3
     376:	09 95       	icall
     378:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <exposure_ticks>
     37c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <exposure_ticks+0x1>
     380:	99 83       	std	Y+1, r25	; 0x01
     382:	8a 83       	std	Y+2, r24	; 0x02
     384:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     388:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	09 95       	icall
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <StartAdcReadout>:
     3a2:	5a 98       	cbi	0x0b, 2	; 11
     3a4:	08 95       	ret

000003a6 <LisRunClkAt50kHz_Implementation>:
     3a6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmResetCounterAtTop>
     3aa:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmResetCounterAtTop+0x1>
     3ae:	09 95       	icall
     3b0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <PwmTopIsOcr0a>
     3b4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <PwmTopIsOcr0a+0x1>
     3b8:	09 95       	icall
     3ba:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <PwmClkIsCpuClk>
     3be:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <PwmClkIsCpuClk+0x1>
     3c2:	09 95       	icall
     3c4:	88 ec       	ldi	r24, 0xC8	; 200
     3c6:	87 bd       	out	0x27, r24	; 39
     3c8:	87 b5       	in	r24, 0x27	; 39
     3ca:	86 95       	lsr	r24
     3cc:	88 bd       	out	0x28, r24	; 40
     3ce:	08 95       	ret

000003d0 <LisClkOn_Implementation>:
     3d0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <PwmEnableOutputSetUntilMatch>
     3d4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <PwmEnableOutputSetUntilMatch+0x1>
     3d8:	09 94       	ijmp

000003da <ResetCounterAtTop>:
     3da:	84 b5       	in	r24, 0x24	; 36
     3dc:	81 60       	ori	r24, 0x01	; 1
     3de:	84 bd       	out	0x24, r24	; 36
     3e0:	84 b5       	in	r24, 0x24	; 36
     3e2:	82 60       	ori	r24, 0x02	; 2
     3e4:	84 bd       	out	0x24, r24	; 36
     3e6:	08 95       	ret

000003e8 <TopIsOcr0a>:
     3e8:	85 b5       	in	r24, 0x25	; 37
     3ea:	88 60       	ori	r24, 0x08	; 8
     3ec:	85 bd       	out	0x25, r24	; 37
     3ee:	08 95       	ret

000003f0 <PwmClkIsCpuClk_Implementation>:
     3f0:	85 b5       	in	r24, 0x25	; 37
     3f2:	81 60       	ori	r24, 0x01	; 1
     3f4:	85 bd       	out	0x25, r24	; 37
     3f6:	85 b5       	in	r24, 0x25	; 37
     3f8:	8d 7f       	andi	r24, 0xFD	; 253
     3fa:	85 bd       	out	0x25, r24	; 37
     3fc:	85 b5       	in	r24, 0x25	; 37
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	85 bd       	out	0x25, r24	; 37
     402:	08 95       	ret

00000404 <EnableOutputSetUntilMatch>:
     404:	84 b5       	in	r24, 0x24	; 36
     406:	8f 7e       	andi	r24, 0xEF	; 239
     408:	84 bd       	out	0x24, r24	; 36
     40a:	84 b5       	in	r24, 0x24	; 36
     40c:	80 62       	ori	r24, 0x20	; 32
     40e:	84 bd       	out	0x24, r24	; 36
     410:	08 95       	ret

00000412 <WriteSpiMaster_Implementation>:
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	7b 01       	movw	r14, r22
     420:	61 15       	cp	r22, r1
     422:	71 05       	cpc	r23, r1
     424:	c9 f0       	breq	.+50     	; 0x458 <WriteSpiMaster_Implementation+0x46>
     426:	ec 01       	movw	r28, r24
     428:	8c 01       	movw	r16, r24
     42a:	06 0f       	add	r16, r22
     42c:	17 1f       	adc	r17, r23
     42e:	89 91       	ld	r24, Y+
     430:	8e bd       	out	0x2e, r24	; 46
     432:	29 98       	cbi	0x05, 1	; 5
     434:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     438:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     43c:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     440:	81 11       	cpse	r24, r1
     442:	f8 cf       	rjmp	.-16     	; 0x434 <WriteSpiMaster_Implementation+0x22>
     444:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     448:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     44c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     450:	29 9a       	sbi	0x05, 1	; 5
     452:	c0 17       	cp	r28, r16
     454:	d1 07       	cpc	r29, r17
     456:	59 f7       	brne	.-42     	; 0x42e <WriteSpiMaster_Implementation+0x1c>
     458:	c7 01       	movw	r24, r14
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	08 95       	ret

00000468 <GetSensorLED>:
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	00 d0       	rcall	.+0      	; 0x46e <GetSensorLED+0x6>
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     476:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     47a:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     47e:	81 11       	cpse	r24, r1
     480:	f8 cf       	rjmp	.-16     	; 0x472 <GetSensorLED+0xa>
     482:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     486:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     48a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	78 f5       	brcc	.+94     	; 0x4f0 <GetSensorLED+0x88>
     492:	97 b1       	in	r25, 0x07	; 7
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	02 c0       	rjmp	.+4      	; 0x49e <GetSensorLED+0x36>
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	8a 95       	dec	r24
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <GetSensorLED+0x32>
     4a2:	89 2f       	mov	r24, r25
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	82 23       	and	r24, r18
     4a8:	93 23       	and	r25, r19
     4aa:	89 2b       	or	r24, r25
     4ac:	89 f4       	brne	.+34     	; 0x4d0 <GetSensorLED+0x68>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	19 82       	std	Y+1, r1	; 0x01
     4b2:	8a 83       	std	Y+2, r24	; 0x02
     4b4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     4b8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     4bc:	62 e0       	ldi	r22, 0x02	; 2
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	ce 01       	movw	r24, r28
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	09 95       	icall
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret
     4d0:	87 b1       	in	r24, 0x07	; 7
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	82 23       	and	r24, r18
     4d6:	93 23       	and	r25, r19
     4d8:	89 2b       	or	r24, r25
     4da:	41 f0       	breq	.+16     	; 0x4ec <GetSensorLED+0x84>
     4dc:	88 b1       	in	r24, 0x08	; 8
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	28 23       	and	r18, r24
     4e2:	39 23       	and	r19, r25
     4e4:	23 2b       	or	r18, r19
     4e6:	11 f0       	breq	.+4      	; 0x4ec <GetSensorLED+0x84>
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	e2 cf       	rjmp	.-60     	; 0x4b0 <GetSensorLED+0x48>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	e0 cf       	rjmp	.-64     	; 0x4b0 <GetSensorLED+0x48>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     4f8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	ce 01       	movw	r24, r28
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	09 95       	icall
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <SetSensorLED>:
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	1f 92       	push	r1
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     520:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     524:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     528:	81 11       	cpse	r24, r1
     52a:	f8 cf       	rjmp	.-16     	; 0x51c <SetSensorLED+0xc>
     52c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     530:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     534:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     538:	18 2f       	mov	r17, r24
     53a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     53e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     542:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     546:	81 11       	cpse	r24, r1
     548:	f8 cf       	rjmp	.-16     	; 0x53a <SetSensorLED+0x2a>
     54a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     54e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     552:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     556:	12 30       	cpi	r17, 0x02	; 2
     558:	30 f4       	brcc	.+12     	; 0x566 <SetSensorLED+0x56>
     55a:	88 23       	and	r24, r24
     55c:	a1 f0       	breq	.+40     	; 0x586 <SetSensorLED+0x76>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	89 f1       	breq	.+98     	; 0x5c4 <SetSensorLED+0xb4>
     562:	82 30       	cpi	r24, 0x02	; 2
     564:	01 f1       	breq	.+64     	; 0x5a6 <SetSensorLED+0x96>
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     56e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	ce 01       	movw	r24, r28
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	09 95       	icall
     57c:	0f 90       	pop	r0
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	08 95       	ret
     586:	27 b1       	in	r18, 0x07	; 7
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	01 c0       	rjmp	.+2      	; 0x590 <SetSensorLED+0x80>
     58e:	88 0f       	add	r24, r24
     590:	1a 95       	dec	r17
     592:	ea f7       	brpl	.-6      	; 0x58e <SetSensorLED+0x7e>
     594:	80 95       	com	r24
     596:	92 2f       	mov	r25, r18
     598:	98 23       	and	r25, r24
     59a:	97 b9       	out	0x07, r25	; 7
     59c:	98 b1       	in	r25, 0x08	; 8
     59e:	89 23       	and	r24, r25
     5a0:	88 b9       	out	0x08, r24	; 8
     5a2:	19 82       	std	Y+1, r1	; 0x01
     5a4:	e2 cf       	rjmp	.-60     	; 0x56a <SetSensorLED+0x5a>
     5a6:	28 b1       	in	r18, 0x08	; 8
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <SetSensorLED+0xa0>
     5ae:	88 0f       	add	r24, r24
     5b0:	1a 95       	dec	r17
     5b2:	ea f7       	brpl	.-6      	; 0x5ae <SetSensorLED+0x9e>
     5b4:	92 2f       	mov	r25, r18
     5b6:	98 2b       	or	r25, r24
     5b8:	98 b9       	out	0x08, r25	; 8
     5ba:	97 b1       	in	r25, 0x07	; 7
     5bc:	89 2b       	or	r24, r25
     5be:	87 b9       	out	0x07, r24	; 7
     5c0:	19 82       	std	Y+1, r1	; 0x01
     5c2:	d3 cf       	rjmp	.-90     	; 0x56a <SetSensorLED+0x5a>
     5c4:	28 b1       	in	r18, 0x08	; 8
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <SetSensorLED+0xbe>
     5cc:	88 0f       	add	r24, r24
     5ce:	1a 95       	dec	r17
     5d0:	ea f7       	brpl	.-6      	; 0x5cc <SetSensorLED+0xbc>
     5d2:	98 2f       	mov	r25, r24
     5d4:	90 95       	com	r25
     5d6:	92 23       	and	r25, r18
     5d8:	ef cf       	rjmp	.-34     	; 0x5b8 <SetSensorLED+0xa8>

000005da <SetExposure>:
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     5ec:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     5f0:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     5f4:	81 11       	cpse	r24, r1
     5f6:	f8 cf       	rjmp	.-16     	; 0x5e8 <SetExposure+0xe>
     5f8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     5fc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     600:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     604:	08 2f       	mov	r16, r24
     606:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     60a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     60e:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     612:	81 11       	cpse	r24, r1
     614:	f8 cf       	rjmp	.-16     	; 0x606 <SetExposure+0x2c>
     616:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     61a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     61e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     622:	18 2f       	mov	r17, r24
     624:	19 82       	std	Y+1, r1	; 0x01
     626:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     62a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	09 95       	icall
     638:	81 2f       	mov	r24, r17
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	90 2b       	or	r25, r16
     63e:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <exposure_ticks+0x1>
     642:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <exposure_ticks>
     646:	0f 90       	pop	r0
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	08 95       	ret

00000652 <CaptureFrame>:
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	00 d0       	rcall	.+0      	; 0x660 <CaptureFrame+0xe>
     660:	1f 92       	push	r1
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	1b 82       	std	Y+3, r1	; 0x03
     668:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     66c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	ce 01       	movw	r24, r28
     676:	03 96       	adiw	r24, 0x03	; 3
     678:	09 95       	icall
     67a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <GetFrame>
     67e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <GetFrame+0x1>
     682:	09 95       	icall
     684:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	09 f4       	brne	.+2      	; 0x68e <CaptureFrame+0x3c>
     68c:	43 c0       	rjmp	.+134    	; 0x714 <CaptureFrame+0xc2>
     68e:	90 e1       	ldi	r25, 0x10	; 16
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	89 83       	std	Y+1, r24	; 0x01
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     69a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     69e:	62 e0       	ldi	r22, 0x02	; 2
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	09 95       	icall
     6a8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
     6ac:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	ce 01       	movw	r24, r28
     6b6:	03 96       	adiw	r24, 0x03	; 3
     6b8:	09 95       	icall
     6ba:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	59 f1       	breq	.+86     	; 0x718 <CaptureFrame+0xc6>
     6c2:	80 e2       	ldi	r24, 0x20	; 32
     6c4:	96 e0       	ldi	r25, 0x06	; 6
     6c6:	08 e5       	ldi	r16, 0x58	; 88
     6c8:	11 e0       	ldi	r17, 0x01	; 1
     6ca:	9c 01       	movw	r18, r24
     6cc:	28 5a       	subi	r18, 0xA8	; 168
     6ce:	3e 4f       	sbci	r19, 0xFE	; 254
     6d0:	79 01       	movw	r14, r18
     6d2:	f8 01       	movw	r30, r16
     6d4:	81 91       	ld	r24, Z+
     6d6:	8f 01       	movw	r16, r30
     6d8:	8e bd       	out	0x2e, r24	; 46
     6da:	29 98       	cbi	0x05, 1	; 5
     6dc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     6e0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     6e4:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
     6e8:	81 11       	cpse	r24, r1
     6ea:	f8 cf       	rjmp	.-16     	; 0x6dc <CaptureFrame+0x8a>
     6ec:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
     6f0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
     6f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
     6f8:	29 9a       	sbi	0x05, 1	; 5
     6fa:	e0 16       	cp	r14, r16
     6fc:	f1 06       	cpc	r15, r17
     6fe:	49 f7       	brne	.-46     	; 0x6d2 <CaptureFrame+0x80>
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret
     714:	98 e8       	ldi	r25, 0x88	; 136
     716:	bd cf       	rjmp	.-134    	; 0x692 <CaptureFrame+0x40>
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	d4 cf       	rjmp	.-88     	; 0x6c6 <CaptureFrame+0x74>

0000071e <GetFrame_Implementation>:
     71e:	aa 9a       	sbi	0x15, 2	; 21
     720:	aa 9b       	sbis	0x15, 2	; 21
     722:	fe cf       	rjmp	.-4      	; 0x720 <GetFrame_Implementation+0x2>
     724:	aa 9a       	sbi	0x15, 2	; 21
     726:	5e 9a       	sbi	0x0b, 6	; 11
     728:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <exposure_ticks>
     72c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <exposure_ticks+0x1>
     730:	89 2b       	or	r24, r25
     732:	91 f0       	breq	.+36     	; 0x758 <GetFrame_Implementation+0x3a>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	aa 9a       	sbi	0x15, 2	; 21
     73a:	aa 9b       	sbis	0x15, 2	; 21
     73c:	fe cf       	rjmp	.-4      	; 0x73a <GetFrame_Implementation+0x1c>
     73e:	aa 9a       	sbi	0x15, 2	; 21
     740:	ac 01       	movw	r20, r24
     742:	4f 5f       	subi	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <exposure_ticks>
     74a:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <exposure_ticks+0x1>
     74e:	82 17       	cp	r24, r18
     750:	93 07       	cpc	r25, r19
     752:	10 f4       	brcc	.+4      	; 0x758 <GetFrame_Implementation+0x3a>
     754:	ca 01       	movw	r24, r20
     756:	f0 cf       	rjmp	.-32     	; 0x738 <GetFrame_Implementation+0x1a>
     758:	5e 98       	cbi	0x0b, 6	; 11
     75a:	4f 9b       	sbis	0x09, 7	; 9
     75c:	fe cf       	rjmp	.-4      	; 0x75a <GetFrame_Implementation+0x3c>
     75e:	4f 99       	sbic	0x09, 7	; 9
     760:	fe cf       	rjmp	.-4      	; 0x75e <GetFrame_Implementation+0x40>
     762:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	69 f1       	breq	.+90     	; 0x7c4 <GetFrame_Implementation+0xa6>
     76a:	20 e1       	ldi	r18, 0x10	; 16
     76c:	33 e0       	ldi	r19, 0x03	; 3
     76e:	e8 e5       	ldi	r30, 0x58	; 88
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	28 5a       	subi	r18, 0xA8	; 168
     778:	3e 4f       	sbci	r19, 0xFE	; 254
     77a:	9e e0       	ldi	r25, 0x0E	; 14
     77c:	a9 9a       	sbi	0x15, 1	; 21
     77e:	a9 9b       	sbis	0x15, 1	; 21
     780:	fe cf       	rjmp	.-4      	; 0x77e <GetFrame_Implementation+0x60>
     782:	a9 9a       	sbi	0x15, 1	; 21
     784:	5a 9a       	sbi	0x0b, 2	; 11
     786:	89 2f       	mov	r24, r25
     788:	8a 95       	dec	r24
     78a:	f1 f7       	brne	.-4      	; 0x788 <GetFrame_Implementation+0x6a>
     78c:	5a 98       	cbi	0x0b, 2	; 11
     78e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     792:	85 ff       	sbrs	r24, 5
     794:	fc cf       	rjmp	.-8      	; 0x78e <GetFrame_Implementation+0x70>
     796:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     79a:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     79e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     7a2:	87 ff       	sbrs	r24, 7
     7a4:	fc cf       	rjmp	.-8      	; 0x79e <GetFrame_Implementation+0x80>
     7a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     7aa:	80 83       	st	Z, r24
     7ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     7b0:	87 ff       	sbrs	r24, 7
     7b2:	fc cf       	rjmp	.-8      	; 0x7ac <GetFrame_Implementation+0x8e>
     7b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     7b8:	81 83       	std	Z+1, r24	; 0x01
     7ba:	32 96       	adiw	r30, 0x02	; 2
     7bc:	e2 17       	cp	r30, r18
     7be:	f3 07       	cpc	r31, r19
     7c0:	e9 f6       	brne	.-70     	; 0x77c <GetFrame_Implementation+0x5e>
     7c2:	08 95       	ret
     7c4:	28 e8       	ldi	r18, 0x88	; 136
     7c6:	31 e0       	ldi	r19, 0x01	; 1
     7c8:	d2 cf       	rjmp	.-92     	; 0x76e <GetFrame_Implementation+0x50>

000007ca <RepresentConfigAs4bytes>:
     7ca:	2f 92       	push	r2
     7cc:	3f 92       	push	r3
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	c8 56       	subi	r28, 0x68	; 104
     7f4:	d1 09       	sbc	r29, r1
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	fc 01       	movw	r30, r24
     802:	92 2e       	mov	r9, r18
     804:	10 82       	st	Z, r1
     806:	11 82       	std	Z+1, r1	; 0x01
     808:	12 82       	std	Z+2, r1	; 0x02
     80a:	13 82       	std	Z+3, r1	; 0x03
     80c:	61 30       	cpi	r22, 0x01	; 1
     80e:	09 f4       	brne	.+2      	; 0x812 <RepresentConfigAs4bytes+0x48>
     810:	8a c2       	rjmp	.+1300   	; 0xd26 <__stack+0x427>
     812:	14 e8       	ldi	r17, 0x84	; 132
     814:	1d a3       	std	Y+37, r17	; 0x25
     816:	64 ec       	ldi	r22, 0xC4	; 196
     818:	6c a3       	std	Y+36, r22	; 0x24
     81a:	84 e4       	ldi	r24, 0x44	; 68
     81c:	8b a3       	std	Y+35, r24	; 0x23
     81e:	04 ea       	ldi	r16, 0xA4	; 164
     820:	0a a3       	std	Y+34, r16	; 0x22
     822:	14 ee       	ldi	r17, 0xE4	; 228
     824:	19 a3       	std	Y+33, r17	; 0x21
     826:	64 e6       	ldi	r22, 0x64	; 100
     828:	68 a3       	std	Y+32, r22	; 0x20
     82a:	84 e2       	ldi	r24, 0x24	; 36
     82c:	8f 8f       	std	Y+31, r24	; 0x1f
     82e:	04 e9       	ldi	r16, 0x94	; 148
     830:	0e 8f       	std	Y+30, r16	; 0x1e
     832:	14 ed       	ldi	r17, 0xD4	; 212
     834:	1d 8f       	std	Y+29, r17	; 0x1d
     836:	64 e5       	ldi	r22, 0x54	; 84
     838:	6c 8f       	std	Y+28, r22	; 0x1c
     83a:	84 eb       	ldi	r24, 0xB4	; 180
     83c:	8b 8f       	std	Y+27, r24	; 0x1b
     83e:	04 ef       	ldi	r16, 0xF4	; 244
     840:	0a 8f       	std	Y+26, r16	; 0x1a
     842:	14 e7       	ldi	r17, 0x74	; 116
     844:	19 8f       	std	Y+25, r17	; 0x19
     846:	64 e3       	ldi	r22, 0x34	; 52
     848:	68 8f       	std	Y+24, r22	; 0x18
     84a:	84 e1       	ldi	r24, 0x14	; 20
     84c:	8f 8b       	std	Y+23, r24	; 0x17
     84e:	0c e8       	ldi	r16, 0x8C	; 140
     850:	0e 8b       	std	Y+22, r16	; 0x16
     852:	1c ec       	ldi	r17, 0xCC	; 204
     854:	1d 8b       	std	Y+21, r17	; 0x15
     856:	6c e4       	ldi	r22, 0x4C	; 76
     858:	6c 8b       	std	Y+20, r22	; 0x14
     85a:	8c ea       	ldi	r24, 0xAC	; 172
     85c:	8b 8b       	std	Y+19, r24	; 0x13
     85e:	0c ee       	ldi	r16, 0xEC	; 236
     860:	0f 87       	std	Y+15, r16	; 0x0f
     862:	1c e6       	ldi	r17, 0x6C	; 108
     864:	1e 87       	std	Y+14, r17	; 0x0e
     866:	6c e2       	ldi	r22, 0x2C	; 44
     868:	6d 87       	std	Y+13, r22	; 0x0d
     86a:	8c e9       	ldi	r24, 0x9C	; 156
     86c:	8c 87       	std	Y+12, r24	; 0x0c
     86e:	0c ed       	ldi	r16, 0xDC	; 220
     870:	0b 87       	std	Y+11, r16	; 0x0b
     872:	1c e5       	ldi	r17, 0x5C	; 92
     874:	1a 87       	std	Y+10, r17	; 0x0a
     876:	6c eb       	ldi	r22, 0xBC	; 188
     878:	69 87       	std	Y+9, r22	; 0x09
     87a:	8c ef       	ldi	r24, 0xFC	; 252
     87c:	88 87       	std	Y+8, r24	; 0x08
     87e:	0c e7       	ldi	r16, 0x7C	; 124
     880:	0f 83       	std	Y+7, r16	; 0x07
     882:	1c e3       	ldi	r17, 0x3C	; 60
     884:	1e 83       	std	Y+6, r17	; 0x06
     886:	6c e1       	ldi	r22, 0x1C	; 28
     888:	6d 83       	std	Y+5, r22	; 0x05
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	8c 83       	std	Y+4, r24	; 0x04
     88e:	02 e8       	ldi	r16, 0x82	; 130
     890:	26 96       	adiw	r28, 0x06	; 6
     892:	0f af       	std	Y+63, r16	; 0x3f
     894:	26 97       	sbiw	r28, 0x06	; 6
     896:	12 ec       	ldi	r17, 0xC2	; 194
     898:	25 96       	adiw	r28, 0x05	; 5
     89a:	1f af       	std	Y+63, r17	; 0x3f
     89c:	25 97       	sbiw	r28, 0x05	; 5
     89e:	62 e4       	ldi	r22, 0x42	; 66
     8a0:	24 96       	adiw	r28, 0x04	; 4
     8a2:	6f af       	std	Y+63, r22	; 0x3f
     8a4:	24 97       	sbiw	r28, 0x04	; 4
     8a6:	82 ea       	ldi	r24, 0xA2	; 162
     8a8:	23 96       	adiw	r28, 0x03	; 3
     8aa:	8f af       	std	Y+63, r24	; 0x3f
     8ac:	23 97       	sbiw	r28, 0x03	; 3
     8ae:	02 ee       	ldi	r16, 0xE2	; 226
     8b0:	22 96       	adiw	r28, 0x02	; 2
     8b2:	0f af       	std	Y+63, r16	; 0x3f
     8b4:	22 97       	sbiw	r28, 0x02	; 2
     8b6:	12 e6       	ldi	r17, 0x62	; 98
     8b8:	21 96       	adiw	r28, 0x01	; 1
     8ba:	1f af       	std	Y+63, r17	; 0x3f
     8bc:	21 97       	sbiw	r28, 0x01	; 1
     8be:	62 e2       	ldi	r22, 0x22	; 34
     8c0:	6f af       	std	Y+63, r22	; 0x3f
     8c2:	82 e9       	ldi	r24, 0x92	; 146
     8c4:	8e af       	std	Y+62, r24	; 0x3e
     8c6:	02 ed       	ldi	r16, 0xD2	; 210
     8c8:	0d af       	std	Y+61, r16	; 0x3d
     8ca:	12 e5       	ldi	r17, 0x52	; 82
     8cc:	1c af       	std	Y+60, r17	; 0x3c
     8ce:	62 eb       	ldi	r22, 0xB2	; 178
     8d0:	6b af       	std	Y+59, r22	; 0x3b
     8d2:	82 ef       	ldi	r24, 0xF2	; 242
     8d4:	8a af       	std	Y+58, r24	; 0x3a
     8d6:	02 e7       	ldi	r16, 0x72	; 114
     8d8:	09 af       	std	Y+57, r16	; 0x39
     8da:	12 e3       	ldi	r17, 0x32	; 50
     8dc:	18 af       	std	Y+56, r17	; 0x38
     8de:	62 e1       	ldi	r22, 0x12	; 18
     8e0:	6f ab       	std	Y+55, r22	; 0x37
     8e2:	8a e8       	ldi	r24, 0x8A	; 138
     8e4:	8e ab       	std	Y+54, r24	; 0x36
     8e6:	0a ec       	ldi	r16, 0xCA	; 202
     8e8:	0d ab       	std	Y+53, r16	; 0x35
     8ea:	1a e4       	ldi	r17, 0x4A	; 74
     8ec:	1c ab       	std	Y+52, r17	; 0x34
     8ee:	6a ea       	ldi	r22, 0xAA	; 170
     8f0:	6b ab       	std	Y+51, r22	; 0x33
     8f2:	8a ee       	ldi	r24, 0xEA	; 234
     8f4:	8a ab       	std	Y+50, r24	; 0x32
     8f6:	0a e6       	ldi	r16, 0x6A	; 106
     8f8:	09 ab       	std	Y+49, r16	; 0x31
     8fa:	1a e2       	ldi	r17, 0x2A	; 42
     8fc:	18 ab       	std	Y+48, r17	; 0x30
     8fe:	6a e9       	ldi	r22, 0x9A	; 154
     900:	6f a7       	std	Y+47, r22	; 0x2f
     902:	8a ed       	ldi	r24, 0xDA	; 218
     904:	8e a7       	std	Y+46, r24	; 0x2e
     906:	0a e5       	ldi	r16, 0x5A	; 90
     908:	0d a7       	std	Y+45, r16	; 0x2d
     90a:	1a eb       	ldi	r17, 0xBA	; 186
     90c:	1c a7       	std	Y+44, r17	; 0x2c
     90e:	6a ef       	ldi	r22, 0xFA	; 250
     910:	6b a7       	std	Y+43, r22	; 0x2b
     912:	8a e7       	ldi	r24, 0x7A	; 122
     914:	8a a7       	std	Y+42, r24	; 0x2a
     916:	0a e3       	ldi	r16, 0x3A	; 58
     918:	09 a7       	std	Y+41, r16	; 0x29
     91a:	1a e1       	ldi	r17, 0x1A	; 26
     91c:	18 a7       	std	Y+40, r17	; 0x28
     91e:	6a e0       	ldi	r22, 0x0A	; 10
     920:	6f a3       	std	Y+39, r22	; 0x27
     922:	86 e8       	ldi	r24, 0x86	; 134
     924:	a6 96       	adiw	r28, 0x26	; 38
     926:	8f af       	std	Y+63, r24	; 0x3f
     928:	a6 97       	sbiw	r28, 0x26	; 38
     92a:	06 ec       	ldi	r16, 0xC6	; 198
     92c:	a5 96       	adiw	r28, 0x25	; 37
     92e:	0f af       	std	Y+63, r16	; 0x3f
     930:	a5 97       	sbiw	r28, 0x25	; 37
     932:	16 e4       	ldi	r17, 0x46	; 70
     934:	a4 96       	adiw	r28, 0x24	; 36
     936:	1f af       	std	Y+63, r17	; 0x3f
     938:	a4 97       	sbiw	r28, 0x24	; 36
     93a:	66 ea       	ldi	r22, 0xA6	; 166
     93c:	a3 96       	adiw	r28, 0x23	; 35
     93e:	6f af       	std	Y+63, r22	; 0x3f
     940:	a3 97       	sbiw	r28, 0x23	; 35
     942:	86 ee       	ldi	r24, 0xE6	; 230
     944:	a2 96       	adiw	r28, 0x22	; 34
     946:	8f af       	std	Y+63, r24	; 0x3f
     948:	a2 97       	sbiw	r28, 0x22	; 34
     94a:	06 e6       	ldi	r16, 0x66	; 102
     94c:	a1 96       	adiw	r28, 0x21	; 33
     94e:	0f af       	std	Y+63, r16	; 0x3f
     950:	a1 97       	sbiw	r28, 0x21	; 33
     952:	16 e2       	ldi	r17, 0x26	; 38
     954:	a0 96       	adiw	r28, 0x20	; 32
     956:	1f af       	std	Y+63, r17	; 0x3f
     958:	a0 97       	sbiw	r28, 0x20	; 32
     95a:	66 e9       	ldi	r22, 0x96	; 150
     95c:	6f 96       	adiw	r28, 0x1f	; 31
     95e:	6f af       	std	Y+63, r22	; 0x3f
     960:	6f 97       	sbiw	r28, 0x1f	; 31
     962:	86 ed       	ldi	r24, 0xD6	; 214
     964:	6e 96       	adiw	r28, 0x1e	; 30
     966:	8f af       	std	Y+63, r24	; 0x3f
     968:	6e 97       	sbiw	r28, 0x1e	; 30
     96a:	06 e5       	ldi	r16, 0x56	; 86
     96c:	6d 96       	adiw	r28, 0x1d	; 29
     96e:	0f af       	std	Y+63, r16	; 0x3f
     970:	6d 97       	sbiw	r28, 0x1d	; 29
     972:	16 eb       	ldi	r17, 0xB6	; 182
     974:	6c 96       	adiw	r28, 0x1c	; 28
     976:	1f af       	std	Y+63, r17	; 0x3f
     978:	6c 97       	sbiw	r28, 0x1c	; 28
     97a:	66 ef       	ldi	r22, 0xF6	; 246
     97c:	6b 96       	adiw	r28, 0x1b	; 27
     97e:	6f af       	std	Y+63, r22	; 0x3f
     980:	6b 97       	sbiw	r28, 0x1b	; 27
     982:	86 e7       	ldi	r24, 0x76	; 118
     984:	6a 96       	adiw	r28, 0x1a	; 26
     986:	8f af       	std	Y+63, r24	; 0x3f
     988:	6a 97       	sbiw	r28, 0x1a	; 26
     98a:	06 e3       	ldi	r16, 0x36	; 54
     98c:	69 96       	adiw	r28, 0x19	; 25
     98e:	0f af       	std	Y+63, r16	; 0x3f
     990:	69 97       	sbiw	r28, 0x19	; 25
     992:	16 e1       	ldi	r17, 0x16	; 22
     994:	68 96       	adiw	r28, 0x18	; 24
     996:	1f af       	std	Y+63, r17	; 0x3f
     998:	68 97       	sbiw	r28, 0x18	; 24
     99a:	6e e8       	ldi	r22, 0x8E	; 142
     99c:	67 96       	adiw	r28, 0x17	; 23
     99e:	6f af       	std	Y+63, r22	; 0x3f
     9a0:	67 97       	sbiw	r28, 0x17	; 23
     9a2:	8e ec       	ldi	r24, 0xCE	; 206
     9a4:	66 96       	adiw	r28, 0x16	; 22
     9a6:	8f af       	std	Y+63, r24	; 0x3f
     9a8:	66 97       	sbiw	r28, 0x16	; 22
     9aa:	0e e4       	ldi	r16, 0x4E	; 78
     9ac:	65 96       	adiw	r28, 0x15	; 21
     9ae:	0f af       	std	Y+63, r16	; 0x3f
     9b0:	65 97       	sbiw	r28, 0x15	; 21
     9b2:	1e ea       	ldi	r17, 0xAE	; 174
     9b4:	64 96       	adiw	r28, 0x14	; 20
     9b6:	1f af       	std	Y+63, r17	; 0x3f
     9b8:	64 97       	sbiw	r28, 0x14	; 20
     9ba:	6e ee       	ldi	r22, 0xEE	; 238
     9bc:	63 96       	adiw	r28, 0x13	; 19
     9be:	6f af       	std	Y+63, r22	; 0x3f
     9c0:	63 97       	sbiw	r28, 0x13	; 19
     9c2:	8e e6       	ldi	r24, 0x6E	; 110
     9c4:	62 96       	adiw	r28, 0x12	; 18
     9c6:	8f af       	std	Y+63, r24	; 0x3f
     9c8:	62 97       	sbiw	r28, 0x12	; 18
     9ca:	0e e2       	ldi	r16, 0x2E	; 46
     9cc:	61 96       	adiw	r28, 0x11	; 17
     9ce:	0f af       	std	Y+63, r16	; 0x3f
     9d0:	61 97       	sbiw	r28, 0x11	; 17
     9d2:	1e e9       	ldi	r17, 0x9E	; 158
     9d4:	60 96       	adiw	r28, 0x10	; 16
     9d6:	1f af       	std	Y+63, r17	; 0x3f
     9d8:	60 97       	sbiw	r28, 0x10	; 16
     9da:	6e ed       	ldi	r22, 0xDE	; 222
     9dc:	2f 96       	adiw	r28, 0x0f	; 15
     9de:	6f af       	std	Y+63, r22	; 0x3f
     9e0:	2f 97       	sbiw	r28, 0x0f	; 15
     9e2:	8e e5       	ldi	r24, 0x5E	; 94
     9e4:	2e 96       	adiw	r28, 0x0e	; 14
     9e6:	8f af       	std	Y+63, r24	; 0x3f
     9e8:	2e 97       	sbiw	r28, 0x0e	; 14
     9ea:	0e eb       	ldi	r16, 0xBE	; 190
     9ec:	2d 96       	adiw	r28, 0x0d	; 13
     9ee:	0f af       	std	Y+63, r16	; 0x3f
     9f0:	2d 97       	sbiw	r28, 0x0d	; 13
     9f2:	1e ef       	ldi	r17, 0xFE	; 254
     9f4:	2c 96       	adiw	r28, 0x0c	; 12
     9f6:	1f af       	std	Y+63, r17	; 0x3f
     9f8:	2c 97       	sbiw	r28, 0x0c	; 12
     9fa:	6e e7       	ldi	r22, 0x7E	; 126
     9fc:	2b 96       	adiw	r28, 0x0b	; 11
     9fe:	6f af       	std	Y+63, r22	; 0x3f
     a00:	2b 97       	sbiw	r28, 0x0b	; 11
     a02:	8e e3       	ldi	r24, 0x3E	; 62
     a04:	2a 96       	adiw	r28, 0x0a	; 10
     a06:	8f af       	std	Y+63, r24	; 0x3f
     a08:	2a 97       	sbiw	r28, 0x0a	; 10
     a0a:	0e e1       	ldi	r16, 0x1E	; 30
     a0c:	29 96       	adiw	r28, 0x09	; 9
     a0e:	0f af       	std	Y+63, r16	; 0x3f
     a10:	29 97       	sbiw	r28, 0x09	; 9
     a12:	1e e0       	ldi	r17, 0x0E	; 14
     a14:	28 96       	adiw	r28, 0x08	; 8
     a16:	1f af       	std	Y+63, r17	; 0x3f
     a18:	28 97       	sbiw	r28, 0x08	; 8
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	a8 2e       	mov	r10, r24
     a1e:	90 ec       	ldi	r25, 0xC0	; 192
     a20:	89 2e       	mov	r8, r25
     a22:	20 e4       	ldi	r18, 0x40	; 64
     a24:	72 2e       	mov	r7, r18
     a26:	30 ea       	ldi	r19, 0xA0	; 160
     a28:	23 2e       	mov	r2, r19
     a2a:	50 ee       	ldi	r21, 0xE0	; 224
     a2c:	35 2e       	mov	r3, r21
     a2e:	60 e6       	ldi	r22, 0x60	; 96
     a30:	46 2e       	mov	r4, r22
     a32:	70 e2       	ldi	r23, 0x20	; 32
     a34:	c7 2e       	mov	r12, r23
     a36:	60 e9       	ldi	r22, 0x90	; 144
     a38:	6a 8b       	std	Y+18, r22	; 0x12
     a3a:	80 ed       	ldi	r24, 0xD0	; 208
     a3c:	89 8b       	std	Y+17, r24	; 0x11
     a3e:	a0 e5       	ldi	r26, 0x50	; 80
     a40:	5a 2e       	mov	r5, r26
     a42:	b0 eb       	ldi	r27, 0xB0	; 176
     a44:	6b 2e       	mov	r6, r27
     a46:	10 ef       	ldi	r17, 0xF0	; 240
     a48:	e1 2e       	mov	r14, r17
     a4a:	00 e7       	ldi	r16, 0x70	; 112
     a4c:	d0 2e       	mov	r13, r16
     a4e:	80 e3       	ldi	r24, 0x30	; 48
     a50:	b8 2e       	mov	r11, r24
     a52:	00 e1       	ldi	r16, 0x10	; 16
     a54:	08 8b       	std	Y+16, r16	; 0x10
     a56:	18 e8       	ldi	r17, 0x88	; 136
     a58:	a9 96       	adiw	r28, 0x29	; 41
     a5a:	1f af       	std	Y+63, r17	; 0x3f
     a5c:	a9 97       	sbiw	r28, 0x29	; 41
     a5e:	18 ec       	ldi	r17, 0xC8	; 200
     a60:	68 e4       	ldi	r22, 0x48	; 72
     a62:	a8 96       	adiw	r28, 0x28	; 40
     a64:	6f af       	std	Y+63, r22	; 0x3f
     a66:	a8 97       	sbiw	r28, 0x28	; 40
     a68:	88 ea       	ldi	r24, 0xA8	; 168
     a6a:	a7 96       	adiw	r28, 0x27	; 39
     a6c:	8f af       	std	Y+63, r24	; 0x3f
     a6e:	a7 97       	sbiw	r28, 0x27	; 39
     a70:	b8 ee       	ldi	r27, 0xE8	; 232
     a72:	a8 e6       	ldi	r26, 0x68	; 104
     a74:	08 e2       	ldi	r16, 0x28	; 40
     a76:	0a 83       	std	Y+2, r16	; 0x02
     a78:	68 e9       	ldi	r22, 0x98	; 152
     a7a:	69 83       	std	Y+1, r22	; 0x01
     a7c:	78 ed       	ldi	r23, 0xD8	; 216
     a7e:	68 e5       	ldi	r22, 0x58	; 88
     a80:	58 eb       	ldi	r21, 0xB8	; 184
     a82:	38 ef       	ldi	r19, 0xF8	; 248
     a84:	28 e7       	ldi	r18, 0x78	; 120
     a86:	98 e3       	ldi	r25, 0x38	; 56
     a88:	88 e1       	ldi	r24, 0x18	; 24
     a8a:	08 e0       	ldi	r16, 0x08	; 8
     a8c:	f0 2e       	mov	r15, r16
     a8e:	06 e0       	ldi	r16, 0x06	; 6
     a90:	27 96       	adiw	r28, 0x07	; 7
     a92:	0f af       	std	Y+63, r16	; 0x3f
     a94:	27 97       	sbiw	r28, 0x07	; 7
     a96:	02 e0       	ldi	r16, 0x02	; 2
     a98:	0e a3       	std	Y+38, r16	; 0x26
     a9a:	04 e0       	ldi	r16, 0x04	; 4
     a9c:	0b 83       	std	Y+3, r16	; 0x03
     a9e:	45 32       	cpi	r20, 0x25	; 37
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <__stack+0x1a5>
     aa2:	11 c1       	rjmp	.+546    	; 0xcc6 <__stack+0x3c7>
     aa4:	44 30       	cpi	r20, 0x04	; 4
     aa6:	09 f4       	brne	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	86 c2       	rjmp	.+1292   	; 0xfb6 <__stack+0x6b7>
     aaa:	45 30       	cpi	r20, 0x05	; 5
     aac:	09 f4       	brne	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	bf c2       	rjmp	.+1406   	; 0x102e <__stack+0x72f>
     ab0:	90 fe       	sbrs	r9, 0
     ab2:	d7 c0       	rjmp	.+430    	; 0xc62 <__stack+0x363>
     ab4:	f0 82       	st	Z, r15
     ab6:	41 e2       	ldi	r20, 0x21	; 33
     ab8:	41 83       	std	Z+1, r20	; 0x01
     aba:	44 e8       	ldi	r20, 0x84	; 132
     abc:	42 83       	std	Z+2, r20	; 0x02
     abe:	a9 96       	adiw	r28, 0x29	; 41
     ac0:	af ac       	ldd	r10, Y+63	; 0x3f
     ac2:	a9 97       	sbiw	r28, 0x29	; 41
     ac4:	81 2e       	mov	r8, r17
     ac6:	a8 96       	adiw	r28, 0x28	; 40
     ac8:	7f ac       	ldd	r7, Y+63	; 0x3f
     aca:	a8 97       	sbiw	r28, 0x28	; 40
     acc:	a7 96       	adiw	r28, 0x27	; 39
     ace:	2f ac       	ldd	r2, Y+63	; 0x3f
     ad0:	a7 97       	sbiw	r28, 0x27	; 39
     ad2:	3b 2e       	mov	r3, r27
     ad4:	4a 2e       	mov	r4, r26
     ad6:	ca 80       	ldd	r12, Y+2	; 0x02
     ad8:	19 81       	ldd	r17, Y+1	; 0x01
     ada:	1a 8b       	std	Y+18, r17	; 0x12
     adc:	79 8b       	std	Y+17, r23	; 0x11
     ade:	56 2e       	mov	r5, r22
     ae0:	65 2e       	mov	r6, r21
     ae2:	e3 2e       	mov	r14, r19
     ae4:	d2 2e       	mov	r13, r18
     ae6:	b9 2e       	mov	r11, r25
     ae8:	88 8b       	std	Y+16, r24	; 0x10
     aea:	86 ec       	ldi	r24, 0xC6	; 198
     aec:	91 e3       	ldi	r25, 0x31	; 49
     aee:	37 ee       	ldi	r19, 0xE7	; 231
     af0:	29 e3       	ldi	r18, 0x39	; 57
     af2:	45 ea       	ldi	r20, 0xA5	; 165
     af4:	59 e2       	ldi	r21, 0x29	; 41
     af6:	b6 ed       	ldi	r27, 0xD6	; 214
     af8:	a5 eb       	ldi	r26, 0xB5	; 181
     afa:	67 ef       	ldi	r22, 0xF7	; 247
     afc:	6a 83       	std	Y+2, r22	; 0x02
     afe:	0d eb       	ldi	r16, 0xBD	; 189
     b00:	09 83       	std	Y+1, r16	; 0x01
     b02:	75 eb       	ldi	r23, 0xB5	; 181
     b04:	6d ea       	ldi	r22, 0xAD	; 173
     b06:	14 e9       	ldi	r17, 0x94	; 148
     b08:	1b 8b       	std	Y+19, r17	; 0x13
     b0a:	05 ea       	ldi	r16, 0xA5	; 165
     b0c:	0c 8b       	std	Y+20, r16	; 0x14
     b0e:	1e ec       	ldi	r17, 0xCE	; 206
     b10:	1f 87       	std	Y+15, r17	; 0x0f
     b12:	03 e7       	ldi	r16, 0x73	; 115
     b14:	0e 87       	std	Y+14, r16	; 0x0e
     b16:	1f ee       	ldi	r17, 0xEF	; 239
     b18:	1d 87       	std	Y+13, r17	; 0x0d
     b1a:	0b e7       	ldi	r16, 0x7B	; 123
     b1c:	0c 87       	std	Y+12, r16	; 0x0c
     b1e:	1d ea       	ldi	r17, 0xAD	; 173
     b20:	1b 87       	std	Y+11, r17	; 0x0b
     b22:	0b e6       	ldi	r16, 0x6B	; 107
     b24:	0a 87       	std	Y+10, r16	; 0x0a
     b26:	1e ed       	ldi	r17, 0xDE	; 222
     b28:	19 87       	std	Y+9, r17	; 0x09
     b2a:	07 ef       	ldi	r16, 0xF7	; 247
     b2c:	08 87       	std	Y+8, r16	; 0x08
     b2e:	1f ef       	ldi	r17, 0xFF	; 255
     b30:	1f 83       	std	Y+7, r17	; 0x07
     b32:	0f ef       	ldi	r16, 0xFF	; 255
     b34:	0e 83       	std	Y+6, r16	; 0x06
     b36:	1d eb       	ldi	r17, 0xBD	; 189
     b38:	1d 83       	std	Y+5, r17	; 0x05
     b3a:	0f ee       	ldi	r16, 0xEF	; 239
     b3c:	f0 2e       	mov	r15, r16
     b3e:	0c e9       	ldi	r16, 0x9C	; 156
     b40:	0d 8b       	std	Y+21, r16	; 0x15
     b42:	17 ee       	ldi	r17, 0xE7	; 231
     b44:	0c e8       	ldi	r16, 0x8C	; 140
     b46:	0c 83       	std	Y+4, r16	; 0x04
     b48:	03 e6       	ldi	r16, 0x63	; 99
     b4a:	0b 83       	std	Y+3, r16	; 0x03
     b4c:	91 fe       	sbrs	r9, 1
     b4e:	74 c0       	rjmp	.+232    	; 0xc38 <__stack+0x339>
     b50:	48 89       	ldd	r20, Y+16	; 0x10
     b52:	40 83       	st	Z, r20
     b54:	6b 81       	ldd	r22, Y+3	; 0x03
     b56:	61 83       	std	Z+1, r22	; 0x01
     b58:	8c 81       	ldd	r24, Y+4	; 0x04
     b5a:	82 83       	std	Z+2, r24	; 0x02
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	83 83       	std	Z+3, r24	; 0x03
     b60:	aa 88       	ldd	r10, Y+18	; 0x12
     b62:	89 88       	ldd	r8, Y+17	; 0x11
     b64:	75 2c       	mov	r7, r5
     b66:	26 2c       	mov	r2, r6
     b68:	3e 2c       	mov	r3, r14
     b6a:	4d 2c       	mov	r4, r13
     b6c:	cb 2c       	mov	r12, r11
     b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b70:	9e 85       	ldd	r25, Y+14	; 0x0e
     b72:	3d 85       	ldd	r19, Y+13	; 0x0d
     b74:	2c 85       	ldd	r18, Y+12	; 0x0c
     b76:	4b 85       	ldd	r20, Y+11	; 0x0b
     b78:	5a 85       	ldd	r21, Y+10	; 0x0a
     b7a:	b9 85       	ldd	r27, Y+9	; 0x09
     b7c:	a8 85       	ldd	r26, Y+8	; 0x08
     b7e:	0f 81       	ldd	r16, Y+7	; 0x07
     b80:	0a 83       	std	Y+2, r16	; 0x02
     b82:	6e 81       	ldd	r22, Y+6	; 0x06
     b84:	69 83       	std	Y+1, r22	; 0x01
     b86:	7d 81       	ldd	r23, Y+5	; 0x05
     b88:	6f 2d       	mov	r22, r15
     b8a:	0d 89       	ldd	r16, Y+21	; 0x15
     b8c:	0b 8b       	std	Y+19, r16	; 0x13
     b8e:	1c 8b       	std	Y+20, r17	; 0x14
     b90:	19 e0       	ldi	r17, 0x09	; 9
     b92:	0d e0       	ldi	r16, 0x0D	; 13
     b94:	0f 2e       	mov	r0, r31
     b96:	f5 e0       	ldi	r31, 0x05	; 5
     b98:	ff 2e       	mov	r15, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	0f 2e       	mov	r0, r31
     b9e:	fb e0       	ldi	r31, 0x0B	; 11
     ba0:	6f 2e       	mov	r6, r31
     ba2:	f0 2d       	mov	r31, r0
     ba4:	0f 2e       	mov	r0, r31
     ba6:	ff e0       	ldi	r31, 0x0F	; 15
     ba8:	df 2e       	mov	r13, r31
     baa:	f0 2d       	mov	r31, r0
     bac:	0f 2e       	mov	r0, r31
     bae:	f7 e0       	ldi	r31, 0x07	; 7
     bb0:	ef 2e       	mov	r14, r31
     bb2:	f0 2d       	mov	r31, r0
     bb4:	0f 2e       	mov	r0, r31
     bb6:	f3 e0       	ldi	r31, 0x03	; 3
     bb8:	bf 2e       	mov	r11, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	92 fe       	sbrs	r9, 2
     bbe:	12 c0       	rjmp	.+36     	; 0xbe4 <__stack+0x2e5>
     bc0:	c0 82       	st	Z, r12
     bc2:	1c 89       	ldd	r17, Y+20	; 0x14
     bc4:	11 83       	std	Z+1, r17	; 0x01
     bc6:	4b 89       	ldd	r20, Y+19	; 0x13
     bc8:	42 83       	std	Z+2, r20	; 0x02
     bca:	b3 82       	std	Z+3, r11	; 0x03
     bcc:	a2 2c       	mov	r10, r2
     bce:	83 2c       	mov	r8, r3
     bd0:	74 2c       	mov	r7, r4
     bd2:	8b 2f       	mov	r24, r27
     bd4:	9a 2f       	mov	r25, r26
     bd6:	3a 81       	ldd	r19, Y+2	; 0x02
     bd8:	29 81       	ldd	r18, Y+1	; 0x01
     bda:	47 2f       	mov	r20, r23
     bdc:	56 2f       	mov	r21, r22
     bde:	16 2d       	mov	r17, r6
     be0:	0d 2d       	mov	r16, r13
     be2:	fe 2c       	mov	r15, r14
     be4:	93 fe       	sbrs	r9, 3
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <__stack+0x2f9>
     be8:	70 82       	st	Z, r7
     bea:	51 83       	std	Z+1, r21	; 0x01
     bec:	42 83       	std	Z+2, r20	; 0x02
     bee:	f3 82       	std	Z+3, r15	; 0x03
     bf0:	a8 2c       	mov	r10, r8
     bf2:	83 2f       	mov	r24, r19
     bf4:	92 2f       	mov	r25, r18
     bf6:	10 2f       	mov	r17, r16
     bf8:	94 fe       	sbrs	r9, 4
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <__stack+0x305>
     bfc:	a0 82       	st	Z, r10
     bfe:	91 83       	std	Z+1, r25	; 0x01
     c00:	82 83       	std	Z+2, r24	; 0x02
     c02:	13 83       	std	Z+3, r17	; 0x03
     c04:	c8 59       	subi	r28, 0x98	; 152
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	7f 90       	pop	r7
     c2c:	6f 90       	pop	r6
     c2e:	5f 90       	pop	r5
     c30:	4f 90       	pop	r4
     c32:	3f 90       	pop	r3
     c34:	2f 90       	pop	r2
     c36:	08 95       	ret
     c38:	18 e0       	ldi	r17, 0x08	; 8
     c3a:	0c e0       	ldi	r16, 0x0C	; 12
     c3c:	68 94       	set
     c3e:	ff 24       	eor	r15, r15
     c40:	f2 f8       	bld	r15, 2
     c42:	0f 2e       	mov	r0, r31
     c44:	fa e0       	ldi	r31, 0x0A	; 10
     c46:	6f 2e       	mov	r6, r31
     c48:	f0 2d       	mov	r31, r0
     c4a:	0f 2e       	mov	r0, r31
     c4c:	fe e0       	ldi	r31, 0x0E	; 14
     c4e:	df 2e       	mov	r13, r31
     c50:	f0 2d       	mov	r31, r0
     c52:	0f 2e       	mov	r0, r31
     c54:	f6 e0       	ldi	r31, 0x06	; 6
     c56:	ef 2e       	mov	r14, r31
     c58:	f0 2d       	mov	r31, r0
     c5a:	68 94       	set
     c5c:	bb 24       	eor	r11, r11
     c5e:	b1 f8       	bld	r11, 1
     c60:	ad cf       	rjmp	.-166    	; 0xbbc <__stack+0x2bd>
     c62:	82 e4       	ldi	r24, 0x42	; 66
     c64:	90 e1       	ldi	r25, 0x10	; 16
     c66:	33 e6       	ldi	r19, 0x63	; 99
     c68:	28 e1       	ldi	r18, 0x18	; 24
     c6a:	41 e2       	ldi	r20, 0x21	; 33
     c6c:	58 e0       	ldi	r21, 0x08	; 8
     c6e:	b2 e5       	ldi	r27, 0x52	; 82
     c70:	a4 e9       	ldi	r26, 0x94	; 148
     c72:	13 e7       	ldi	r17, 0x73	; 115
     c74:	1a 83       	std	Y+2, r17	; 0x02
     c76:	6c e9       	ldi	r22, 0x9C	; 156
     c78:	69 83       	std	Y+1, r22	; 0x01
     c7a:	71 e3       	ldi	r23, 0x31	; 49
     c7c:	6c e8       	ldi	r22, 0x8C	; 140
     c7e:	00 e1       	ldi	r16, 0x10	; 16
     c80:	0b 8b       	std	Y+19, r16	; 0x13
     c82:	14 e8       	ldi	r17, 0x84	; 132
     c84:	1c 8b       	std	Y+20, r17	; 0x14
     c86:	0a e4       	ldi	r16, 0x4A	; 74
     c88:	0f 87       	std	Y+15, r16	; 0x0f
     c8a:	12 e5       	ldi	r17, 0x52	; 82
     c8c:	1e 87       	std	Y+14, r17	; 0x0e
     c8e:	0b e6       	ldi	r16, 0x6B	; 107
     c90:	0d 87       	std	Y+13, r16	; 0x0d
     c92:	1a e5       	ldi	r17, 0x5A	; 90
     c94:	1c 87       	std	Y+12, r17	; 0x0c
     c96:	09 e2       	ldi	r16, 0x29	; 41
     c98:	0b 87       	std	Y+11, r16	; 0x0b
     c9a:	1a e4       	ldi	r17, 0x4A	; 74
     c9c:	1a 87       	std	Y+10, r17	; 0x0a
     c9e:	0a e5       	ldi	r16, 0x5A	; 90
     ca0:	09 87       	std	Y+9, r16	; 0x09
     ca2:	16 ed       	ldi	r17, 0xD6	; 214
     ca4:	18 87       	std	Y+8, r17	; 0x08
     ca6:	0b e7       	ldi	r16, 0x7B	; 123
     ca8:	0f 83       	std	Y+7, r16	; 0x07
     caa:	1e ed       	ldi	r17, 0xDE	; 222
     cac:	1e 83       	std	Y+6, r17	; 0x06
     cae:	09 e3       	ldi	r16, 0x39	; 57
     cb0:	0d 83       	std	Y+5, r16	; 0x05
     cb2:	1e ec       	ldi	r17, 0xCE	; 206
     cb4:	f1 2e       	mov	r15, r17
     cb6:	18 e1       	ldi	r17, 0x18	; 24
     cb8:	1d 8b       	std	Y+21, r17	; 0x15
     cba:	16 ec       	ldi	r17, 0xC6	; 198
     cbc:	08 e0       	ldi	r16, 0x08	; 8
     cbe:	0c 83       	std	Y+4, r16	; 0x04
     cc0:	02 e4       	ldi	r16, 0x42	; 66
     cc2:	0b 83       	std	Y+3, r16	; 0x03
     cc4:	43 cf       	rjmp	.-378    	; 0xb4c <__stack+0x24d>
     cc6:	1b 81       	ldd	r17, Y+3	; 0x03
     cc8:	10 83       	st	Z, r17
     cca:	ad a0       	ldd	r10, Y+37	; 0x25
     ccc:	8c a0       	ldd	r8, Y+36	; 0x24
     cce:	7b a0       	ldd	r7, Y+35	; 0x23
     cd0:	2a a0       	ldd	r2, Y+34	; 0x22
     cd2:	39 a0       	ldd	r3, Y+33	; 0x21
     cd4:	48 a0       	ldd	r4, Y+32	; 0x20
     cd6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     cd8:	4e 8d       	ldd	r20, Y+30	; 0x1e
     cda:	4a 8b       	std	Y+18, r20	; 0x12
     cdc:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cde:	69 8b       	std	Y+17, r22	; 0x11
     ce0:	5c 8c       	ldd	r5, Y+28	; 0x1c
     ce2:	6b 8c       	ldd	r6, Y+27	; 0x1b
     ce4:	ea 8c       	ldd	r14, Y+26	; 0x1a
     ce6:	d9 8c       	ldd	r13, Y+25	; 0x19
     ce8:	b8 8c       	ldd	r11, Y+24	; 0x18
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	88 8b       	std	Y+16, r24	; 0x10
     cee:	0e 89       	ldd	r16, Y+22	; 0x16
     cf0:	a9 96       	adiw	r28, 0x29	; 41
     cf2:	0f af       	std	Y+63, r16	; 0x3f
     cf4:	a9 97       	sbiw	r28, 0x29	; 41
     cf6:	1d 89       	ldd	r17, Y+21	; 0x15
     cf8:	4c 89       	ldd	r20, Y+20	; 0x14
     cfa:	a8 96       	adiw	r28, 0x28	; 40
     cfc:	4f af       	std	Y+63, r20	; 0x3f
     cfe:	a8 97       	sbiw	r28, 0x28	; 40
     d00:	6b 89       	ldd	r22, Y+19	; 0x13
     d02:	a7 96       	adiw	r28, 0x27	; 39
     d04:	6f af       	std	Y+63, r22	; 0x3f
     d06:	a7 97       	sbiw	r28, 0x27	; 39
     d08:	bf 85       	ldd	r27, Y+15	; 0x0f
     d0a:	ae 85       	ldd	r26, Y+14	; 0x0e
     d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0e:	8a 83       	std	Y+2, r24	; 0x02
     d10:	0c 85       	ldd	r16, Y+12	; 0x0c
     d12:	09 83       	std	Y+1, r16	; 0x01
     d14:	7b 85       	ldd	r23, Y+11	; 0x0b
     d16:	6a 85       	ldd	r22, Y+10	; 0x0a
     d18:	59 85       	ldd	r21, Y+9	; 0x09
     d1a:	38 85       	ldd	r19, Y+8	; 0x08
     d1c:	2f 81       	ldd	r18, Y+7	; 0x07
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	fc 80       	ldd	r15, Y+4	; 0x04
     d24:	c5 ce       	rjmp	.-630    	; 0xab0 <__stack+0x1b1>
     d26:	60 83       	st	Z, r22
     d28:	05 e8       	ldi	r16, 0x85	; 133
     d2a:	0d a3       	std	Y+37, r16	; 0x25
     d2c:	15 ec       	ldi	r17, 0xC5	; 197
     d2e:	1c a3       	std	Y+36, r17	; 0x24
     d30:	65 e4       	ldi	r22, 0x45	; 69
     d32:	6b a3       	std	Y+35, r22	; 0x23
     d34:	85 ea       	ldi	r24, 0xA5	; 165
     d36:	8a a3       	std	Y+34, r24	; 0x22
     d38:	05 ee       	ldi	r16, 0xE5	; 229
     d3a:	09 a3       	std	Y+33, r16	; 0x21
     d3c:	15 e6       	ldi	r17, 0x65	; 101
     d3e:	18 a3       	std	Y+32, r17	; 0x20
     d40:	65 e2       	ldi	r22, 0x25	; 37
     d42:	6f 8f       	std	Y+31, r22	; 0x1f
     d44:	85 e9       	ldi	r24, 0x95	; 149
     d46:	8e 8f       	std	Y+30, r24	; 0x1e
     d48:	05 ed       	ldi	r16, 0xD5	; 213
     d4a:	0d 8f       	std	Y+29, r16	; 0x1d
     d4c:	15 e5       	ldi	r17, 0x55	; 85
     d4e:	1c 8f       	std	Y+28, r17	; 0x1c
     d50:	65 eb       	ldi	r22, 0xB5	; 181
     d52:	6b 8f       	std	Y+27, r22	; 0x1b
     d54:	85 ef       	ldi	r24, 0xF5	; 245
     d56:	8a 8f       	std	Y+26, r24	; 0x1a
     d58:	05 e7       	ldi	r16, 0x75	; 117
     d5a:	09 8f       	std	Y+25, r16	; 0x19
     d5c:	15 e3       	ldi	r17, 0x35	; 53
     d5e:	18 8f       	std	Y+24, r17	; 0x18
     d60:	65 e1       	ldi	r22, 0x15	; 21
     d62:	6f 8b       	std	Y+23, r22	; 0x17
     d64:	8d e8       	ldi	r24, 0x8D	; 141
     d66:	8e 8b       	std	Y+22, r24	; 0x16
     d68:	0d ec       	ldi	r16, 0xCD	; 205
     d6a:	0d 8b       	std	Y+21, r16	; 0x15
     d6c:	1d e4       	ldi	r17, 0x4D	; 77
     d6e:	1c 8b       	std	Y+20, r17	; 0x14
     d70:	6d ea       	ldi	r22, 0xAD	; 173
     d72:	6b 8b       	std	Y+19, r22	; 0x13
     d74:	8d ee       	ldi	r24, 0xED	; 237
     d76:	8f 87       	std	Y+15, r24	; 0x0f
     d78:	0d e6       	ldi	r16, 0x6D	; 109
     d7a:	0e 87       	std	Y+14, r16	; 0x0e
     d7c:	1d e2       	ldi	r17, 0x2D	; 45
     d7e:	1d 87       	std	Y+13, r17	; 0x0d
     d80:	6d e9       	ldi	r22, 0x9D	; 157
     d82:	6c 87       	std	Y+12, r22	; 0x0c
     d84:	8d ed       	ldi	r24, 0xDD	; 221
     d86:	8b 87       	std	Y+11, r24	; 0x0b
     d88:	0d e5       	ldi	r16, 0x5D	; 93
     d8a:	0a 87       	std	Y+10, r16	; 0x0a
     d8c:	1d eb       	ldi	r17, 0xBD	; 189
     d8e:	19 87       	std	Y+9, r17	; 0x09
     d90:	6d ef       	ldi	r22, 0xFD	; 253
     d92:	68 87       	std	Y+8, r22	; 0x08
     d94:	8d e7       	ldi	r24, 0x7D	; 125
     d96:	8f 83       	std	Y+7, r24	; 0x07
     d98:	0d e3       	ldi	r16, 0x3D	; 61
     d9a:	0e 83       	std	Y+6, r16	; 0x06
     d9c:	1d e1       	ldi	r17, 0x1D	; 29
     d9e:	1d 83       	std	Y+5, r17	; 0x05
     da0:	6d e0       	ldi	r22, 0x0D	; 13
     da2:	6c 83       	std	Y+4, r22	; 0x04
     da4:	83 e8       	ldi	r24, 0x83	; 131
     da6:	26 96       	adiw	r28, 0x06	; 6
     da8:	8f af       	std	Y+63, r24	; 0x3f
     daa:	26 97       	sbiw	r28, 0x06	; 6
     dac:	03 ec       	ldi	r16, 0xC3	; 195
     dae:	25 96       	adiw	r28, 0x05	; 5
     db0:	0f af       	std	Y+63, r16	; 0x3f
     db2:	25 97       	sbiw	r28, 0x05	; 5
     db4:	13 e4       	ldi	r17, 0x43	; 67
     db6:	24 96       	adiw	r28, 0x04	; 4
     db8:	1f af       	std	Y+63, r17	; 0x3f
     dba:	24 97       	sbiw	r28, 0x04	; 4
     dbc:	63 ea       	ldi	r22, 0xA3	; 163
     dbe:	23 96       	adiw	r28, 0x03	; 3
     dc0:	6f af       	std	Y+63, r22	; 0x3f
     dc2:	23 97       	sbiw	r28, 0x03	; 3
     dc4:	83 ee       	ldi	r24, 0xE3	; 227
     dc6:	22 96       	adiw	r28, 0x02	; 2
     dc8:	8f af       	std	Y+63, r24	; 0x3f
     dca:	22 97       	sbiw	r28, 0x02	; 2
     dcc:	03 e6       	ldi	r16, 0x63	; 99
     dce:	21 96       	adiw	r28, 0x01	; 1
     dd0:	0f af       	std	Y+63, r16	; 0x3f
     dd2:	21 97       	sbiw	r28, 0x01	; 1
     dd4:	13 e2       	ldi	r17, 0x23	; 35
     dd6:	1f af       	std	Y+63, r17	; 0x3f
     dd8:	63 e9       	ldi	r22, 0x93	; 147
     dda:	6e af       	std	Y+62, r22	; 0x3e
     ddc:	83 ed       	ldi	r24, 0xD3	; 211
     dde:	8d af       	std	Y+61, r24	; 0x3d
     de0:	03 e5       	ldi	r16, 0x53	; 83
     de2:	0c af       	std	Y+60, r16	; 0x3c
     de4:	13 eb       	ldi	r17, 0xB3	; 179
     de6:	1b af       	std	Y+59, r17	; 0x3b
     de8:	63 ef       	ldi	r22, 0xF3	; 243
     dea:	6a af       	std	Y+58, r22	; 0x3a
     dec:	83 e7       	ldi	r24, 0x73	; 115
     dee:	89 af       	std	Y+57, r24	; 0x39
     df0:	03 e3       	ldi	r16, 0x33	; 51
     df2:	08 af       	std	Y+56, r16	; 0x38
     df4:	13 e1       	ldi	r17, 0x13	; 19
     df6:	1f ab       	std	Y+55, r17	; 0x37
     df8:	6b e8       	ldi	r22, 0x8B	; 139
     dfa:	6e ab       	std	Y+54, r22	; 0x36
     dfc:	8b ec       	ldi	r24, 0xCB	; 203
     dfe:	8d ab       	std	Y+53, r24	; 0x35
     e00:	0b e4       	ldi	r16, 0x4B	; 75
     e02:	0c ab       	std	Y+52, r16	; 0x34
     e04:	1b ea       	ldi	r17, 0xAB	; 171
     e06:	1b ab       	std	Y+51, r17	; 0x33
     e08:	6b ee       	ldi	r22, 0xEB	; 235
     e0a:	6a ab       	std	Y+50, r22	; 0x32
     e0c:	8b e6       	ldi	r24, 0x6B	; 107
     e0e:	89 ab       	std	Y+49, r24	; 0x31
     e10:	0b e2       	ldi	r16, 0x2B	; 43
     e12:	08 ab       	std	Y+48, r16	; 0x30
     e14:	1b e9       	ldi	r17, 0x9B	; 155
     e16:	1f a7       	std	Y+47, r17	; 0x2f
     e18:	6b ed       	ldi	r22, 0xDB	; 219
     e1a:	6e a7       	std	Y+46, r22	; 0x2e
     e1c:	8b e5       	ldi	r24, 0x5B	; 91
     e1e:	8d a7       	std	Y+45, r24	; 0x2d
     e20:	0b eb       	ldi	r16, 0xBB	; 187
     e22:	0c a7       	std	Y+44, r16	; 0x2c
     e24:	1b ef       	ldi	r17, 0xFB	; 251
     e26:	1b a7       	std	Y+43, r17	; 0x2b
     e28:	6b e7       	ldi	r22, 0x7B	; 123
     e2a:	6a a7       	std	Y+42, r22	; 0x2a
     e2c:	8b e3       	ldi	r24, 0x3B	; 59
     e2e:	89 a7       	std	Y+41, r24	; 0x29
     e30:	0b e1       	ldi	r16, 0x1B	; 27
     e32:	08 a7       	std	Y+40, r16	; 0x28
     e34:	1b e0       	ldi	r17, 0x0B	; 11
     e36:	1f a3       	std	Y+39, r17	; 0x27
     e38:	67 e8       	ldi	r22, 0x87	; 135
     e3a:	a6 96       	adiw	r28, 0x26	; 38
     e3c:	6f af       	std	Y+63, r22	; 0x3f
     e3e:	a6 97       	sbiw	r28, 0x26	; 38
     e40:	87 ec       	ldi	r24, 0xC7	; 199
     e42:	a5 96       	adiw	r28, 0x25	; 37
     e44:	8f af       	std	Y+63, r24	; 0x3f
     e46:	a5 97       	sbiw	r28, 0x25	; 37
     e48:	07 e4       	ldi	r16, 0x47	; 71
     e4a:	a4 96       	adiw	r28, 0x24	; 36
     e4c:	0f af       	std	Y+63, r16	; 0x3f
     e4e:	a4 97       	sbiw	r28, 0x24	; 36
     e50:	17 ea       	ldi	r17, 0xA7	; 167
     e52:	a3 96       	adiw	r28, 0x23	; 35
     e54:	1f af       	std	Y+63, r17	; 0x3f
     e56:	a3 97       	sbiw	r28, 0x23	; 35
     e58:	67 ee       	ldi	r22, 0xE7	; 231
     e5a:	a2 96       	adiw	r28, 0x22	; 34
     e5c:	6f af       	std	Y+63, r22	; 0x3f
     e5e:	a2 97       	sbiw	r28, 0x22	; 34
     e60:	87 e6       	ldi	r24, 0x67	; 103
     e62:	a1 96       	adiw	r28, 0x21	; 33
     e64:	8f af       	std	Y+63, r24	; 0x3f
     e66:	a1 97       	sbiw	r28, 0x21	; 33
     e68:	07 e2       	ldi	r16, 0x27	; 39
     e6a:	a0 96       	adiw	r28, 0x20	; 32
     e6c:	0f af       	std	Y+63, r16	; 0x3f
     e6e:	a0 97       	sbiw	r28, 0x20	; 32
     e70:	17 e9       	ldi	r17, 0x97	; 151
     e72:	6f 96       	adiw	r28, 0x1f	; 31
     e74:	1f af       	std	Y+63, r17	; 0x3f
     e76:	6f 97       	sbiw	r28, 0x1f	; 31
     e78:	67 ed       	ldi	r22, 0xD7	; 215
     e7a:	6e 96       	adiw	r28, 0x1e	; 30
     e7c:	6f af       	std	Y+63, r22	; 0x3f
     e7e:	6e 97       	sbiw	r28, 0x1e	; 30
     e80:	87 e5       	ldi	r24, 0x57	; 87
     e82:	6d 96       	adiw	r28, 0x1d	; 29
     e84:	8f af       	std	Y+63, r24	; 0x3f
     e86:	6d 97       	sbiw	r28, 0x1d	; 29
     e88:	07 eb       	ldi	r16, 0xB7	; 183
     e8a:	6c 96       	adiw	r28, 0x1c	; 28
     e8c:	0f af       	std	Y+63, r16	; 0x3f
     e8e:	6c 97       	sbiw	r28, 0x1c	; 28
     e90:	17 ef       	ldi	r17, 0xF7	; 247
     e92:	6b 96       	adiw	r28, 0x1b	; 27
     e94:	1f af       	std	Y+63, r17	; 0x3f
     e96:	6b 97       	sbiw	r28, 0x1b	; 27
     e98:	67 e7       	ldi	r22, 0x77	; 119
     e9a:	6a 96       	adiw	r28, 0x1a	; 26
     e9c:	6f af       	std	Y+63, r22	; 0x3f
     e9e:	6a 97       	sbiw	r28, 0x1a	; 26
     ea0:	87 e3       	ldi	r24, 0x37	; 55
     ea2:	69 96       	adiw	r28, 0x19	; 25
     ea4:	8f af       	std	Y+63, r24	; 0x3f
     ea6:	69 97       	sbiw	r28, 0x19	; 25
     ea8:	07 e1       	ldi	r16, 0x17	; 23
     eaa:	68 96       	adiw	r28, 0x18	; 24
     eac:	0f af       	std	Y+63, r16	; 0x3f
     eae:	68 97       	sbiw	r28, 0x18	; 24
     eb0:	1f e8       	ldi	r17, 0x8F	; 143
     eb2:	67 96       	adiw	r28, 0x17	; 23
     eb4:	1f af       	std	Y+63, r17	; 0x3f
     eb6:	67 97       	sbiw	r28, 0x17	; 23
     eb8:	6f ec       	ldi	r22, 0xCF	; 207
     eba:	66 96       	adiw	r28, 0x16	; 22
     ebc:	6f af       	std	Y+63, r22	; 0x3f
     ebe:	66 97       	sbiw	r28, 0x16	; 22
     ec0:	8f e4       	ldi	r24, 0x4F	; 79
     ec2:	65 96       	adiw	r28, 0x15	; 21
     ec4:	8f af       	std	Y+63, r24	; 0x3f
     ec6:	65 97       	sbiw	r28, 0x15	; 21
     ec8:	0f ea       	ldi	r16, 0xAF	; 175
     eca:	64 96       	adiw	r28, 0x14	; 20
     ecc:	0f af       	std	Y+63, r16	; 0x3f
     ece:	64 97       	sbiw	r28, 0x14	; 20
     ed0:	1f ee       	ldi	r17, 0xEF	; 239
     ed2:	63 96       	adiw	r28, 0x13	; 19
     ed4:	1f af       	std	Y+63, r17	; 0x3f
     ed6:	63 97       	sbiw	r28, 0x13	; 19
     ed8:	6f e6       	ldi	r22, 0x6F	; 111
     eda:	62 96       	adiw	r28, 0x12	; 18
     edc:	6f af       	std	Y+63, r22	; 0x3f
     ede:	62 97       	sbiw	r28, 0x12	; 18
     ee0:	8f e2       	ldi	r24, 0x2F	; 47
     ee2:	61 96       	adiw	r28, 0x11	; 17
     ee4:	8f af       	std	Y+63, r24	; 0x3f
     ee6:	61 97       	sbiw	r28, 0x11	; 17
     ee8:	0f e9       	ldi	r16, 0x9F	; 159
     eea:	60 96       	adiw	r28, 0x10	; 16
     eec:	0f af       	std	Y+63, r16	; 0x3f
     eee:	60 97       	sbiw	r28, 0x10	; 16
     ef0:	1f ed       	ldi	r17, 0xDF	; 223
     ef2:	2f 96       	adiw	r28, 0x0f	; 15
     ef4:	1f af       	std	Y+63, r17	; 0x3f
     ef6:	2f 97       	sbiw	r28, 0x0f	; 15
     ef8:	6f e5       	ldi	r22, 0x5F	; 95
     efa:	2e 96       	adiw	r28, 0x0e	; 14
     efc:	6f af       	std	Y+63, r22	; 0x3f
     efe:	2e 97       	sbiw	r28, 0x0e	; 14
     f00:	8f eb       	ldi	r24, 0xBF	; 191
     f02:	2d 96       	adiw	r28, 0x0d	; 13
     f04:	8f af       	std	Y+63, r24	; 0x3f
     f06:	2d 97       	sbiw	r28, 0x0d	; 13
     f08:	0f ef       	ldi	r16, 0xFF	; 255
     f0a:	2c 96       	adiw	r28, 0x0c	; 12
     f0c:	0f af       	std	Y+63, r16	; 0x3f
     f0e:	2c 97       	sbiw	r28, 0x0c	; 12
     f10:	1f e7       	ldi	r17, 0x7F	; 127
     f12:	2b 96       	adiw	r28, 0x0b	; 11
     f14:	1f af       	std	Y+63, r17	; 0x3f
     f16:	2b 97       	sbiw	r28, 0x0b	; 11
     f18:	6f e3       	ldi	r22, 0x3F	; 63
     f1a:	2a 96       	adiw	r28, 0x0a	; 10
     f1c:	6f af       	std	Y+63, r22	; 0x3f
     f1e:	2a 97       	sbiw	r28, 0x0a	; 10
     f20:	8f e1       	ldi	r24, 0x1F	; 31
     f22:	29 96       	adiw	r28, 0x09	; 9
     f24:	8f af       	std	Y+63, r24	; 0x3f
     f26:	29 97       	sbiw	r28, 0x09	; 9
     f28:	0f e0       	ldi	r16, 0x0F	; 15
     f2a:	28 96       	adiw	r28, 0x08	; 8
     f2c:	0f af       	std	Y+63, r16	; 0x3f
     f2e:	28 97       	sbiw	r28, 0x08	; 8
     f30:	81 e8       	ldi	r24, 0x81	; 129
     f32:	a8 2e       	mov	r10, r24
     f34:	91 ec       	ldi	r25, 0xC1	; 193
     f36:	89 2e       	mov	r8, r25
     f38:	21 e4       	ldi	r18, 0x41	; 65
     f3a:	72 2e       	mov	r7, r18
     f3c:	31 ea       	ldi	r19, 0xA1	; 161
     f3e:	23 2e       	mov	r2, r19
     f40:	51 ee       	ldi	r21, 0xE1	; 225
     f42:	35 2e       	mov	r3, r21
     f44:	61 e6       	ldi	r22, 0x61	; 97
     f46:	46 2e       	mov	r4, r22
     f48:	71 e2       	ldi	r23, 0x21	; 33
     f4a:	c7 2e       	mov	r12, r23
     f4c:	11 e9       	ldi	r17, 0x91	; 145
     f4e:	1a 8b       	std	Y+18, r17	; 0x12
     f50:	61 ed       	ldi	r22, 0xD1	; 209
     f52:	69 8b       	std	Y+17, r22	; 0x11
     f54:	a1 e5       	ldi	r26, 0x51	; 81
     f56:	5a 2e       	mov	r5, r26
     f58:	b1 eb       	ldi	r27, 0xB1	; 177
     f5a:	6b 2e       	mov	r6, r27
     f5c:	11 ef       	ldi	r17, 0xF1	; 241
     f5e:	e1 2e       	mov	r14, r17
     f60:	01 e7       	ldi	r16, 0x71	; 113
     f62:	d0 2e       	mov	r13, r16
     f64:	81 e3       	ldi	r24, 0x31	; 49
     f66:	b8 2e       	mov	r11, r24
     f68:	81 e1       	ldi	r24, 0x11	; 17
     f6a:	88 8b       	std	Y+16, r24	; 0x10
     f6c:	09 e8       	ldi	r16, 0x89	; 137
     f6e:	a9 96       	adiw	r28, 0x29	; 41
     f70:	0f af       	std	Y+63, r16	; 0x3f
     f72:	a9 97       	sbiw	r28, 0x29	; 41
     f74:	19 ec       	ldi	r17, 0xC9	; 201
     f76:	69 e4       	ldi	r22, 0x49	; 73
     f78:	a8 96       	adiw	r28, 0x28	; 40
     f7a:	6f af       	std	Y+63, r22	; 0x3f
     f7c:	a8 97       	sbiw	r28, 0x28	; 40
     f7e:	89 ea       	ldi	r24, 0xA9	; 169
     f80:	a7 96       	adiw	r28, 0x27	; 39
     f82:	8f af       	std	Y+63, r24	; 0x3f
     f84:	a7 97       	sbiw	r28, 0x27	; 39
     f86:	b9 ee       	ldi	r27, 0xE9	; 233
     f88:	a9 e6       	ldi	r26, 0x69	; 105
     f8a:	09 e2       	ldi	r16, 0x29	; 41
     f8c:	0a 83       	std	Y+2, r16	; 0x02
     f8e:	69 e9       	ldi	r22, 0x99	; 153
     f90:	69 83       	std	Y+1, r22	; 0x01
     f92:	79 ed       	ldi	r23, 0xD9	; 217
     f94:	69 e5       	ldi	r22, 0x59	; 89
     f96:	59 eb       	ldi	r21, 0xB9	; 185
     f98:	39 ef       	ldi	r19, 0xF9	; 249
     f9a:	29 e7       	ldi	r18, 0x79	; 121
     f9c:	99 e3       	ldi	r25, 0x39	; 57
     f9e:	89 e1       	ldi	r24, 0x19	; 25
     fa0:	09 e0       	ldi	r16, 0x09	; 9
     fa2:	f0 2e       	mov	r15, r16
     fa4:	07 e0       	ldi	r16, 0x07	; 7
     fa6:	27 96       	adiw	r28, 0x07	; 7
     fa8:	0f af       	std	Y+63, r16	; 0x3f
     faa:	27 97       	sbiw	r28, 0x07	; 7
     fac:	03 e0       	ldi	r16, 0x03	; 3
     fae:	0e a3       	std	Y+38, r16	; 0x26
     fb0:	05 e0       	ldi	r16, 0x05	; 5
     fb2:	0b 83       	std	Y+3, r16	; 0x03
     fb4:	74 cd       	rjmp	.-1304   	; 0xa9e <__stack+0x19f>
     fb6:	1e a1       	ldd	r17, Y+38	; 0x26
     fb8:	10 83       	st	Z, r17
     fba:	26 96       	adiw	r28, 0x06	; 6
     fbc:	af ac       	ldd	r10, Y+63	; 0x3f
     fbe:	26 97       	sbiw	r28, 0x06	; 6
     fc0:	25 96       	adiw	r28, 0x05	; 5
     fc2:	8f ac       	ldd	r8, Y+63	; 0x3f
     fc4:	25 97       	sbiw	r28, 0x05	; 5
     fc6:	24 96       	adiw	r28, 0x04	; 4
     fc8:	7f ac       	ldd	r7, Y+63	; 0x3f
     fca:	24 97       	sbiw	r28, 0x04	; 4
     fcc:	23 96       	adiw	r28, 0x03	; 3
     fce:	2f ac       	ldd	r2, Y+63	; 0x3f
     fd0:	23 97       	sbiw	r28, 0x03	; 3
     fd2:	22 96       	adiw	r28, 0x02	; 2
     fd4:	3f ac       	ldd	r3, Y+63	; 0x3f
     fd6:	22 97       	sbiw	r28, 0x02	; 2
     fd8:	21 96       	adiw	r28, 0x01	; 1
     fda:	4f ac       	ldd	r4, Y+63	; 0x3f
     fdc:	21 97       	sbiw	r28, 0x01	; 1
     fde:	cf ac       	ldd	r12, Y+63	; 0x3f
     fe0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fe2:	4a 8b       	std	Y+18, r20	; 0x12
     fe4:	6d ad       	ldd	r22, Y+61	; 0x3d
     fe6:	69 8b       	std	Y+17, r22	; 0x11
     fe8:	5c ac       	ldd	r5, Y+60	; 0x3c
     fea:	6b ac       	ldd	r6, Y+59	; 0x3b
     fec:	ea ac       	ldd	r14, Y+58	; 0x3a
     fee:	d9 ac       	ldd	r13, Y+57	; 0x39
     ff0:	b8 ac       	ldd	r11, Y+56	; 0x38
     ff2:	8f a9       	ldd	r24, Y+55	; 0x37
     ff4:	88 8b       	std	Y+16, r24	; 0x10
     ff6:	0e a9       	ldd	r16, Y+54	; 0x36
     ff8:	a9 96       	adiw	r28, 0x29	; 41
     ffa:	0f af       	std	Y+63, r16	; 0x3f
     ffc:	a9 97       	sbiw	r28, 0x29	; 41
     ffe:	1d a9       	ldd	r17, Y+53	; 0x35
    1000:	4c a9       	ldd	r20, Y+52	; 0x34
    1002:	a8 96       	adiw	r28, 0x28	; 40
    1004:	4f af       	std	Y+63, r20	; 0x3f
    1006:	a8 97       	sbiw	r28, 0x28	; 40
    1008:	6b a9       	ldd	r22, Y+51	; 0x33
    100a:	a7 96       	adiw	r28, 0x27	; 39
    100c:	6f af       	std	Y+63, r22	; 0x3f
    100e:	a7 97       	sbiw	r28, 0x27	; 39
    1010:	ba a9       	ldd	r27, Y+50	; 0x32
    1012:	a9 a9       	ldd	r26, Y+49	; 0x31
    1014:	88 a9       	ldd	r24, Y+48	; 0x30
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	0f a5       	ldd	r16, Y+47	; 0x2f
    101a:	09 83       	std	Y+1, r16	; 0x01
    101c:	7e a5       	ldd	r23, Y+46	; 0x2e
    101e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1020:	5c a5       	ldd	r21, Y+44	; 0x2c
    1022:	3b a5       	ldd	r19, Y+43	; 0x2b
    1024:	2a a5       	ldd	r18, Y+42	; 0x2a
    1026:	99 a5       	ldd	r25, Y+41	; 0x29
    1028:	88 a5       	ldd	r24, Y+40	; 0x28
    102a:	ff a0       	ldd	r15, Y+39	; 0x27
    102c:	41 cd       	rjmp	.-1406   	; 0xab0 <__stack+0x1b1>
    102e:	27 96       	adiw	r28, 0x07	; 7
    1030:	1f ad       	ldd	r17, Y+63	; 0x3f
    1032:	27 97       	sbiw	r28, 0x07	; 7
    1034:	10 83       	st	Z, r17
    1036:	a6 96       	adiw	r28, 0x26	; 38
    1038:	af ac       	ldd	r10, Y+63	; 0x3f
    103a:	a6 97       	sbiw	r28, 0x26	; 38
    103c:	a5 96       	adiw	r28, 0x25	; 37
    103e:	8f ac       	ldd	r8, Y+63	; 0x3f
    1040:	a5 97       	sbiw	r28, 0x25	; 37
    1042:	a4 96       	adiw	r28, 0x24	; 36
    1044:	7f ac       	ldd	r7, Y+63	; 0x3f
    1046:	a4 97       	sbiw	r28, 0x24	; 36
    1048:	a3 96       	adiw	r28, 0x23	; 35
    104a:	2f ac       	ldd	r2, Y+63	; 0x3f
    104c:	a3 97       	sbiw	r28, 0x23	; 35
    104e:	a2 96       	adiw	r28, 0x22	; 34
    1050:	3f ac       	ldd	r3, Y+63	; 0x3f
    1052:	a2 97       	sbiw	r28, 0x22	; 34
    1054:	a1 96       	adiw	r28, 0x21	; 33
    1056:	4f ac       	ldd	r4, Y+63	; 0x3f
    1058:	a1 97       	sbiw	r28, 0x21	; 33
    105a:	a0 96       	adiw	r28, 0x20	; 32
    105c:	cf ac       	ldd	r12, Y+63	; 0x3f
    105e:	a0 97       	sbiw	r28, 0x20	; 32
    1060:	6f 96       	adiw	r28, 0x1f	; 31
    1062:	4f ad       	ldd	r20, Y+63	; 0x3f
    1064:	6f 97       	sbiw	r28, 0x1f	; 31
    1066:	4a 8b       	std	Y+18, r20	; 0x12
    1068:	6e 96       	adiw	r28, 0x1e	; 30
    106a:	6f ad       	ldd	r22, Y+63	; 0x3f
    106c:	6e 97       	sbiw	r28, 0x1e	; 30
    106e:	69 8b       	std	Y+17, r22	; 0x11
    1070:	6d 96       	adiw	r28, 0x1d	; 29
    1072:	5f ac       	ldd	r5, Y+63	; 0x3f
    1074:	6d 97       	sbiw	r28, 0x1d	; 29
    1076:	6c 96       	adiw	r28, 0x1c	; 28
    1078:	6f ac       	ldd	r6, Y+63	; 0x3f
    107a:	6c 97       	sbiw	r28, 0x1c	; 28
    107c:	6b 96       	adiw	r28, 0x1b	; 27
    107e:	ef ac       	ldd	r14, Y+63	; 0x3f
    1080:	6b 97       	sbiw	r28, 0x1b	; 27
    1082:	6a 96       	adiw	r28, 0x1a	; 26
    1084:	df ac       	ldd	r13, Y+63	; 0x3f
    1086:	6a 97       	sbiw	r28, 0x1a	; 26
    1088:	69 96       	adiw	r28, 0x19	; 25
    108a:	bf ac       	ldd	r11, Y+63	; 0x3f
    108c:	69 97       	sbiw	r28, 0x19	; 25
    108e:	68 96       	adiw	r28, 0x18	; 24
    1090:	8f ad       	ldd	r24, Y+63	; 0x3f
    1092:	68 97       	sbiw	r28, 0x18	; 24
    1094:	88 8b       	std	Y+16, r24	; 0x10
    1096:	67 96       	adiw	r28, 0x17	; 23
    1098:	0f ad       	ldd	r16, Y+63	; 0x3f
    109a:	67 97       	sbiw	r28, 0x17	; 23
    109c:	a9 96       	adiw	r28, 0x29	; 41
    109e:	0f af       	std	Y+63, r16	; 0x3f
    10a0:	a9 97       	sbiw	r28, 0x29	; 41
    10a2:	66 96       	adiw	r28, 0x16	; 22
    10a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    10a6:	66 97       	sbiw	r28, 0x16	; 22
    10a8:	65 96       	adiw	r28, 0x15	; 21
    10aa:	4f ad       	ldd	r20, Y+63	; 0x3f
    10ac:	65 97       	sbiw	r28, 0x15	; 21
    10ae:	a8 96       	adiw	r28, 0x28	; 40
    10b0:	4f af       	std	Y+63, r20	; 0x3f
    10b2:	a8 97       	sbiw	r28, 0x28	; 40
    10b4:	64 96       	adiw	r28, 0x14	; 20
    10b6:	6f ad       	ldd	r22, Y+63	; 0x3f
    10b8:	64 97       	sbiw	r28, 0x14	; 20
    10ba:	a7 96       	adiw	r28, 0x27	; 39
    10bc:	6f af       	std	Y+63, r22	; 0x3f
    10be:	a7 97       	sbiw	r28, 0x27	; 39
    10c0:	63 96       	adiw	r28, 0x13	; 19
    10c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    10c4:	63 97       	sbiw	r28, 0x13	; 19
    10c6:	62 96       	adiw	r28, 0x12	; 18
    10c8:	af ad       	ldd	r26, Y+63	; 0x3f
    10ca:	62 97       	sbiw	r28, 0x12	; 18
    10cc:	61 96       	adiw	r28, 0x11	; 17
    10ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    10d0:	61 97       	sbiw	r28, 0x11	; 17
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	60 96       	adiw	r28, 0x10	; 16
    10d6:	0f ad       	ldd	r16, Y+63	; 0x3f
    10d8:	60 97       	sbiw	r28, 0x10	; 16
    10da:	09 83       	std	Y+1, r16	; 0x01
    10dc:	2f 96       	adiw	r28, 0x0f	; 15
    10de:	7f ad       	ldd	r23, Y+63	; 0x3f
    10e0:	2f 97       	sbiw	r28, 0x0f	; 15
    10e2:	2e 96       	adiw	r28, 0x0e	; 14
    10e4:	6f ad       	ldd	r22, Y+63	; 0x3f
    10e6:	2e 97       	sbiw	r28, 0x0e	; 14
    10e8:	2d 96       	adiw	r28, 0x0d	; 13
    10ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    10ec:	2d 97       	sbiw	r28, 0x0d	; 13
    10ee:	2c 96       	adiw	r28, 0x0c	; 12
    10f0:	3f ad       	ldd	r19, Y+63	; 0x3f
    10f2:	2c 97       	sbiw	r28, 0x0c	; 12
    10f4:	2b 96       	adiw	r28, 0x0b	; 11
    10f6:	2f ad       	ldd	r18, Y+63	; 0x3f
    10f8:	2b 97       	sbiw	r28, 0x0b	; 11
    10fa:	2a 96       	adiw	r28, 0x0a	; 10
    10fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    10fe:	2a 97       	sbiw	r28, 0x0a	; 10
    1100:	29 96       	adiw	r28, 0x09	; 9
    1102:	8f ad       	ldd	r24, Y+63	; 0x3f
    1104:	29 97       	sbiw	r28, 0x09	; 9
    1106:	28 96       	adiw	r28, 0x08	; 8
    1108:	ff ac       	ldd	r15, Y+63	; 0x3f
    110a:	28 97       	sbiw	r28, 0x08	; 8
    110c:	d1 cc       	rjmp	.-1630   	; 0xab0 <__stack+0x1b1>

0000110e <SetSensorConfig>:
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	00 d0       	rcall	.+0      	; 0x1114 <SetSensorConfig+0x6>
    1114:	00 d0       	rcall	.+0      	; 0x1116 <SetSensorConfig+0x8>
    1116:	1f 92       	push	r1
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1120:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1124:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
    1128:	81 11       	cpse	r24, r1
    112a:	f8 cf       	rjmp	.-16     	; 0x111c <SetSensorConfig+0xe>
    112c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1130:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1134:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
    1138:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <binning>
    113c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1140:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1144:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
    1148:	81 11       	cpse	r24, r1
    114a:	f8 cf       	rjmp	.-16     	; 0x113c <SetSensorConfig+0x2e>
    114c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1150:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1154:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
    1158:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <gain>
    115c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1160:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1164:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
    1168:	81 11       	cpse	r24, r1
    116a:	f8 cf       	rjmp	.-16     	; 0x115c <SetSensorConfig+0x4e>
    116c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1170:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1174:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
    1178:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <active_rows>
    117c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <binning>
    1180:	92 30       	cpi	r25, 0x02	; 2
    1182:	48 f4       	brcc	.+18     	; 0x1196 <SetSensorConfig+0x88>
    1184:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <gain>
    1188:	91 30       	cpi	r25, 0x01	; 1
    118a:	c1 f0       	breq	.+48     	; 0x11bc <SetSensorConfig+0xae>
    118c:	95 32       	cpi	r25, 0x25	; 37
    118e:	b1 f0       	breq	.+44     	; 0x11bc <SetSensorConfig+0xae>
    1190:	94 50       	subi	r25, 0x04	; 4
    1192:	92 30       	cpi	r25, 0x02	; 2
    1194:	98 f0       	brcs	.+38     	; 0x11bc <SetSensorConfig+0xae>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
    119e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
    11a2:	61 e0       	ldi	r22, 0x01	; 1
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	09 95       	icall
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret
    11bc:	80 7e       	andi	r24, 0xE0	; 224
    11be:	59 f7       	brne	.-42     	; 0x1196 <SetSensorConfig+0x88>
    11c0:	1d 82       	std	Y+5, r1	; 0x05
    11c2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
    11c6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	ce 01       	movw	r24, r28
    11d0:	05 96       	adiw	r24, 0x05	; 5
    11d2:	09 95       	icall
    11d4:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <active_rows>
    11d8:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <gain>
    11dc:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <binning>
    11e0:	ce 01       	movw	r24, r28
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <RepresentConfigAs4bytes>
    11e8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <ProgramPhotodiodeArray>
    11ec:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <ProgramPhotodiodeArray+0x1>
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	09 95       	icall
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <UartSpiInit>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	c4 ec       	ldi	r28, 0xC4	; 196
    120c:	d0 e0       	ldi	r29, 0x00	; 0
    120e:	19 82       	std	Y+1, r1	; 0x01
    1210:	18 82       	st	Y, r1
    1212:	54 9a       	sbi	0x0a, 4	; 10
    1214:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <StartAdcReadout>
    1218:	52 9a       	sbi	0x0a, 2	; 10
    121a:	e2 ec       	ldi	r30, 0xC2	; 194
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 64       	ori	r24, 0x40	; 64
    1222:	80 83       	st	Z, r24
    1224:	80 81       	ld	r24, Z
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	80 83       	st	Z, r24
    122a:	80 81       	ld	r24, Z
    122c:	81 60       	ori	r24, 0x01	; 1
    122e:	80 83       	st	Z, r24
    1230:	80 81       	ld	r24, Z
    1232:	82 60       	ori	r24, 0x02	; 2
    1234:	80 83       	st	Z, r24
    1236:	80 81       	ld	r24, Z
    1238:	8b 7f       	andi	r24, 0xFB	; 251
    123a:	80 83       	st	Z, r24
    123c:	e1 ec       	ldi	r30, 0xC1	; 193
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 61       	ori	r24, 0x10	; 16
    1244:	80 83       	st	Z, r24
    1246:	80 81       	ld	r24, Z
    1248:	88 60       	ori	r24, 0x08	; 8
    124a:	80 83       	st	Z, r24
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	18 82       	st	Y, r1
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <LisInit>:
    1256:	20 9a       	sbi	0x04, 0	; 4
    1258:	28 98       	cbi	0x05, 0	; 5
    125a:	55 9a       	sbi	0x0a, 5	; 10
    125c:	56 9a       	sbi	0x0a, 6	; 10
    125e:	5e 98       	cbi	0x0b, 6	; 11
    1260:	57 98       	cbi	0x0a, 7	; 10
    1262:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
    1266:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
    126a:	09 95       	icall
    126c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
    1270:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
    1274:	09 94       	ijmp

00001276 <main>:
/* =====[ Allocate memory for one Frame of pixel data ]===== */
/* #define npixels 784 */
uint8_t frame[npixels*2];

int main()
{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	1f 92       	push	r1
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
inline void BiColorLedOn(uint8_t led_name)
{
    /** LED defaults to green when turned on.
     * To blink red, remember to turn the LED
     * red *each time* it is turned on. */
    SetBit(BiColorLed_ddr, led_name);
    1280:	38 9a       	sbi	0x07, 0	; 7
    1282:	39 9a       	sbi	0x07, 1	; 7
/* =====[ API ]===== */
/** These are all commands. Read them as actions, not queries.
 * */
inline void BiColorLedGreen(uint8_t led_name)
{
    ClearBit(BiColorLed_port, led_name);
    1284:	40 98       	cbi	0x08, 0	; 8
    1286:	41 98       	cbi	0x08, 1	; 8
    // Turn both LEDs green.
    BiColorLedGreen(led_0);
    BiColorLedGreen(led_1);
    // Sensor is a SPI slave.
    // See SPI interrupt routine at `ISR(SPI_STC_vect)`.
    SpiSlaveInit();
    1288:	0e 94 7a 00 	call	0xf4	; 0xf4 <SpiSlaveInit>
    // Create a FIFO buffer to queue bytes incoming over SPI.
    SpiFifo = QueueInit(spi_rx_buffer, max_length_of_queue);
    128c:	65 e0       	ldi	r22, 0x05	; 5
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	81 e5       	ldi	r24, 0x51	; 81
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	0e 94 c9 00 	call	0x192	; 0x192 <QueueInit>
    1298:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <SpiFifo+0x1>
    129c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <SpiFifo>
    // Use UART to talk to ADC with SPI interface.
    UartSpiInit();
    12a0:	0e 94 03 09 	call	0x1206	; 0x1206 <UartSpiInit>
    // Power up the linear array. Start 50kHz clock.
    LisInit();
    12a4:	0e 94 2b 09 	call	0x1256	; 0x1256 <LisInit>
    // Use globals because it is an easy way to share data with an ISR.
    /* HasSpiData = false; // global flag to track if there is SpiData */
    /* SpiData = 0x00; // global one-byte register to store SpiData */
    /* =====[ Initialize Globals: Photodiode Array Config ]===== */
    // Use globals because it is an easy way to share data with lib SensorVis
    binning = binning_on; // default to 392 pixels
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <binning>
    gain = gain1x; // default to 1x gain
    12ae:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <gain>
    active_rows = all_rows_active; // default to using all 5 pixel rows
    12b2:	8f e1       	ldi	r24, 0x1F	; 31
    12b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <active_rows>
    exposure_ticks = 50; // multiply by 20us to get integration time in seconds
    12b8:	82 e3       	ldi	r24, 0x32	; 50
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <exposure_ticks+0x1>
    12c0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <exposure_ticks>

/* --------------------------------------------------------------------------------------- */
/* Define command functions in jump table */
void ReplyCommandInvalid(void)
{
    uint8_t cmd_invalid[] = {invalid_cmd};
    12c4:	12 e0       	ldi	r17, 0x02	; 2
    // Loop forever acting on commands from the SPI Master.
    while(1) Get_commands_from_SpiMaster();
}
void Get_commands_from_SpiMaster(void)
{
    while (QueueIsEmpty(SpiFifo)); // idle until a command is received
    12c6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    12ca:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    12ce:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
    12d2:	81 11       	cpse	r24, r1
    12d4:	f8 cf       	rjmp	.-16     	; 0x12c6 <main+0x50>
    // Queue is no longer empty once a command byte is received over SPI.
    // The SPI ISR pushes the command byte onto the SPI Rx Queue.
    // Pop the command and execute it.
    SensorCmd* SensorCmdFn = LookupSensorCmd(QueuePop(SpiFifo));
    12d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    12da:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    12de:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
        GetExposure, // 9
        SetExposure, // 10
        CaptureFrame, // 11
        };
    // Return func ptr. Prevent attempts at out-of-bounds access.
    if (key < sizeof(pf)/sizeof(*pf)) return pf[key];
    12e2:	8c 30       	cpi	r24, 0x0C	; 12
    12e4:	58 f0       	brcs	.+22     	; 0x12fc <main+0x86>

/* --------------------------------------------------------------------------------------- */
/* Define command functions in jump table */
void ReplyCommandInvalid(void)
{
    uint8_t cmd_invalid[] = {invalid_cmd};
    12e6:	19 83       	std	Y+1, r17	; 0x01
    WriteSpiMaster(cmd_invalid, 1);
    12e8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
    12ec:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	ce 01       	movw	r24, r28
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	09 95       	icall
    12fa:	e5 cf       	rjmp	.-54     	; 0x12c6 <main+0x50>
        GetExposure, // 9
        SetExposure, // 10
        CaptureFrame, // 11
        };
    // Return func ptr. Prevent attempts at out-of-bounds access.
    if (key < sizeof(pf)/sizeof(*pf)) return pf[key];
    12fc:	e8 2f       	mov	r30, r24
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	e2 5e       	subi	r30, 0xE2	; 226
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	01 90       	ld	r0, Z+
    130a:	f0 81       	ld	r31, Z
    130c:	e0 2d       	mov	r30, r0
    if (SensorCmdFn == NULL) ReplyCommandInvalid();
    130e:	30 97       	sbiw	r30, 0x00	; 0
    1310:	51 f3       	breq	.-44     	; 0x12e6 <main+0x70>
    else SensorCmdFn();
    1312:	09 95       	icall
    1314:	d8 cf       	rjmp	.-80     	; 0x12c6 <main+0x50>

00001316 <__vector_17>:
}
ISR(SPI_STC_vect)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    // Program counter jumped from "client" code.
    // ISR is the same routine, whether "client" is in a SPI read or a SPI write.

    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) DEBUG_LedsShowError(); // TODO: add error handler
    1338:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    133c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1340:	0e 94 14 01 	call	0x228	; 0x228 <QueueIsFull>
    1344:	88 23       	and	r24, r24
    1346:	99 f0       	breq	.+38     	; 0x136e <__vector_17+0x58>
}
inline void BiColorLedRed(uint8_t led_name)
{
    SetBit(BiColorLed_port, led_name);
    1348:	40 9a       	sbi	0x08, 0	; 8
    134a:	41 9a       	sbi	0x08, 1	; 8
    // so that it does not send the byte before the Slave has a chance to see
    // the queue is empty. The Slave waits for QueueIsEmpty to be true after
    // writing each byte to the Master (to avoid overwriting SPDR during a
    // transmission). So the Slave would hang if it does not get a chance to see
    // the queue is empty after the final byte is transmitted.
}
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti
    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) DEBUG_LedsShowError(); // TODO: add error handler
    else
    {
        QueuePush(SpiFifo, *Spi_spdr); // "client" must pop data from SpiFifo queue
    136e:	6e b5       	in	r22, 0x2e	; 46
    1370:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
    1374:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
    1378:	0e 94 d5 00 	call	0x1aa	; 0x1aa <QueuePush>
    // so that it does not send the byte before the Slave has a chance to see
    // the queue is empty. The Slave waits for QueueIsEmpty to be true after
    // writing each byte to the Master (to avoid overwriting SPDR during a
    // transmission). So the Slave would hang if it does not get a chance to see
    // the queue is empty after the final byte is transmitted.
}
    137c:	e7 cf       	rjmp	.-50     	; 0x134c <__vector_17+0x36>

0000137e <_exit>:
    137e:	f8 94       	cli

00001380 <__stop_program>:
    1380:	ff cf       	rjmp	.-2      	; 0x1380 <__stop_program>
