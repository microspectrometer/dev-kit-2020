
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000d60  00000df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800174  00800174  00000e68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007e49  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151d  00000000  00000000  00009151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e3d  00000000  00000000  0000a66e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc0  00000000  00000000  0000d4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001be7  00000000  00000000  0000e16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000056ca  00000000  00000000  0000fd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  0001541d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__vector_14>
  3c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 06 	call	0xca6	; 0xca6 <main>
  9e:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
  a6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
  aa:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
  ae:	09 95       	icall
  b0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
  b4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
  b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
  ba:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Spi_spsr>
  be:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Spi_spsr+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	08 95       	ret

000000c6 <DisableSpi_Implementation>:
  c6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Spi_spcr>
  ca:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <Spi_spcr+0x1>
  ce:	20 81       	ld	r18, Z
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Spi_Enable>
  d8:	02 c0       	rjmp	.+4      	; 0xde <DisableSpi_Implementation+0x18>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DisableSpi_Implementation+0x14>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <EnableSpi_Implementation>:
  ea:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Spi_spcr>
  ee:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <Spi_spcr+0x1>
  f2:	20 81       	ld	r18, Z
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Spi_Enable>
  fc:	02 c0       	rjmp	.+4      	; 0x102 <EnableSpi_Implementation+0x18>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <EnableSpi_Implementation+0x14>
 106:	82 2b       	or	r24, r18
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <SpiTransferIsDone_Implementation>:
 10c:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Spi_spsr>
 110:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Spi_spsr+0x1>
 114:	80 81       	ld	r24, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Spi_InterruptFlag>
 11e:	02 c0       	rjmp	.+4      	; 0x124 <SpiTransferIsDone_Implementation+0x18>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <SpiTransferIsDone_Implementation+0x14>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	28 23       	and	r18, r24
 12c:	39 23       	and	r19, r25
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	23 2b       	or	r18, r19
 132:	09 f4       	brne	.+2      	; 0x136 <SpiTransferIsDone_Implementation+0x2a>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <ReadSpiDataRegister_Implementation>:
 138:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Spi_spdr>
 13c:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <Spi_spdr+0x1>
 140:	80 81       	ld	r24, Z
 142:	08 95       	ret

00000144 <SpiSlaveSignalDataIsReady_Implementation>:
 144:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Spi_port>
 148:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Spi_port+0x1>
 14c:	20 81       	ld	r18, Z
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	00 90 63 01 	lds	r0, 0x0163	; 0x800163 <Spi_Miso>
 156:	02 c0       	rjmp	.+4      	; 0x15c <SpiSlaveSignalDataIsReady_Implementation+0x18>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <SpiSlaveSignalDataIsReady_Implementation+0x14>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	80 83       	st	Z, r24
 166:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 16a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 16e:	09 95       	icall
 170:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 174:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 178:	09 94       	ijmp

0000017a <WriteSpiDataRegister_Implementation>:
 17a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Spi_spdr>
 17e:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <Spi_spdr+0x1>
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <SensorCfgLis>:
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	00 d0       	rcall	.+0      	; 0x18c <SensorCfgLis+0x6>
 18c:	00 d0       	rcall	.+0      	; 0x18e <SensorCfgLis+0x8>
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	8a 83       	std	Y+2, r24	; 0x02
 19a:	8b 83       	std	Y+3, r24	; 0x03
 19c:	89 ef       	ldi	r24, 0xF9	; 249
 19e:	8c 83       	std	Y+4, r24	; 0x04
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 ae 04 	call	0x95c	; 0x95c <LisWriteCfg>
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <SensorLed4Green>:
 1b6:	cf 92       	push	r12
 1b8:	df 92       	push	r13
 1ba:	ef 92       	push	r14
 1bc:	ff 92       	push	r15
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <SensorLed4Green+0x12>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <SensorLed4Green+0x14>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 1d2:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 1d6:	20 81       	ld	r18, Z
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	00 90 6e 01 	lds	r0, 0x016E	; 0x80016e <status_led4>
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <SensorLed4Green+0x30>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <SensorLed4Green+0x2c>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	80 83       	st	Z, r24
 1f0:	19 82       	std	Y+1, r1	; 0x01
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	8a 83       	std	Y+2, r24	; 0x02
 1f6:	1b 82       	std	Y+3, r1	; 0x03
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	8c 83       	std	Y+4, r24	; 0x04
 1fc:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 200:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 204:	8e 01       	movw	r16, r28
 206:	0f 5f       	subi	r16, 0xFF	; 255
 208:	1f 4f       	sbci	r17, 0xFF	; 255
 20a:	7e 01       	movw	r14, r28
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	e8 0e       	add	r14, r24
 210:	f1 1c       	adc	r15, r1
 212:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 216:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 21a:	d8 01       	movw	r26, r16
 21c:	8d 91       	ld	r24, X+
 21e:	8d 01       	movw	r16, r26
 220:	09 95       	icall
 222:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 226:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 22a:	09 95       	icall
 22c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 230:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 234:	09 95       	icall
 236:	88 23       	and	r24, r24
 238:	c9 f3       	breq	.-14     	; 0x22c <SensorLed4Green+0x76>
 23a:	f6 01       	movw	r30, r12
 23c:	80 81       	ld	r24, Z
 23e:	0e 15       	cp	r16, r14
 240:	1f 05       	cpc	r17, r15
 242:	39 f7       	brne	.-50     	; 0x212 <SensorLed4Green+0x5c>
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	08 95       	ret

0000025e <SensorLed1Red>:
 25e:	cf 92       	push	r12
 260:	df 92       	push	r13
 262:	ef 92       	push	r14
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <SensorLed1Red+0x12>
 270:	00 d0       	rcall	.+0      	; 0x272 <SensorLed1Red+0x14>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 27a:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 27e:	20 81       	ld	r18, Z
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	00 90 71 01 	lds	r0, 0x0171	; 0x800171 <status_led1>
 288:	02 c0       	rjmp	.+4      	; 0x28e <SensorLed1Red+0x30>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <SensorLed1Red+0x2c>
 292:	82 2b       	or	r24, r18
 294:	80 83       	st	Z, r24
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	8a 83       	std	Y+2, r24	; 0x02
 29c:	1b 82       	std	Y+3, r1	; 0x03
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	8c 83       	std	Y+4, r24	; 0x04
 2a2:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 2a6:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 2aa:	8e 01       	movw	r16, r28
 2ac:	0f 5f       	subi	r16, 0xFF	; 255
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	7e 01       	movw	r14, r28
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	e8 0e       	add	r14, r24
 2b6:	f1 1c       	adc	r15, r1
 2b8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 2bc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 2c0:	d8 01       	movw	r26, r16
 2c2:	8d 91       	ld	r24, X+
 2c4:	8d 01       	movw	r16, r26
 2c6:	09 95       	icall
 2c8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 2cc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 2d0:	09 95       	icall
 2d2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 2d6:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 2da:	09 95       	icall
 2dc:	88 23       	and	r24, r24
 2de:	c9 f3       	breq	.-14     	; 0x2d2 <SensorLed1Red+0x74>
 2e0:	f6 01       	movw	r30, r12
 2e2:	80 81       	ld	r24, Z
 2e4:	0e 15       	cp	r16, r14
 2e6:	1f 05       	cpc	r17, r15
 2e8:	39 f7       	brne	.-50     	; 0x2b8 <SensorLed1Red+0x5a>
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	df 90       	pop	r13
 300:	cf 90       	pop	r12
 302:	08 95       	ret

00000304 <SensorLed2Red>:
 304:	cf 92       	push	r12
 306:	df 92       	push	r13
 308:	ef 92       	push	r14
 30a:	ff 92       	push	r15
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <SensorLed2Red+0x12>
 316:	00 d0       	rcall	.+0      	; 0x318 <SensorLed2Red+0x14>
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 320:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 324:	20 81       	ld	r18, Z
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	00 90 70 01 	lds	r0, 0x0170	; 0x800170 <status_led2>
 32e:	02 c0       	rjmp	.+4      	; 0x334 <SensorLed2Red+0x30>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <SensorLed2Red+0x2c>
 338:	82 2b       	or	r24, r18
 33a:	80 83       	st	Z, r24
 33c:	19 82       	std	Y+1, r1	; 0x01
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	8a 83       	std	Y+2, r24	; 0x02
 342:	1b 82       	std	Y+3, r1	; 0x03
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	8c 83       	std	Y+4, r24	; 0x04
 348:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 34c:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 350:	8e 01       	movw	r16, r28
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
 356:	7e 01       	movw	r14, r28
 358:	85 e0       	ldi	r24, 0x05	; 5
 35a:	e8 0e       	add	r14, r24
 35c:	f1 1c       	adc	r15, r1
 35e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 362:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 366:	d8 01       	movw	r26, r16
 368:	8d 91       	ld	r24, X+
 36a:	8d 01       	movw	r16, r26
 36c:	09 95       	icall
 36e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 372:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 376:	09 95       	icall
 378:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 37c:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 380:	09 95       	icall
 382:	88 23       	and	r24, r24
 384:	c9 f3       	breq	.-14     	; 0x378 <SensorLed2Red+0x74>
 386:	f6 01       	movw	r30, r12
 388:	80 81       	ld	r24, Z
 38a:	0e 15       	cp	r16, r14
 38c:	1f 05       	cpc	r17, r15
 38e:	39 f7       	brne	.-50     	; 0x35e <SensorLed2Red+0x5a>
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	08 95       	ret

000003aa <SensorLed3Red>:
 3aa:	cf 92       	push	r12
 3ac:	df 92       	push	r13
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <SensorLed3Red+0x12>
 3bc:	00 d0       	rcall	.+0      	; 0x3be <SensorLed3Red+0x14>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 3c6:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 3ca:	20 81       	ld	r18, Z
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led3>
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <SensorLed3Red+0x30>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <SensorLed3Red+0x2c>
 3de:	82 2b       	or	r24, r18
 3e0:	80 83       	st	Z, r24
 3e2:	19 82       	std	Y+1, r1	; 0x01
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	8a 83       	std	Y+2, r24	; 0x02
 3e8:	1b 82       	std	Y+3, r1	; 0x03
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	8c 83       	std	Y+4, r24	; 0x04
 3ee:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 3f2:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 3f6:	8e 01       	movw	r16, r28
 3f8:	0f 5f       	subi	r16, 0xFF	; 255
 3fa:	1f 4f       	sbci	r17, 0xFF	; 255
 3fc:	7e 01       	movw	r14, r28
 3fe:	85 e0       	ldi	r24, 0x05	; 5
 400:	e8 0e       	add	r14, r24
 402:	f1 1c       	adc	r15, r1
 404:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 408:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 40c:	d8 01       	movw	r26, r16
 40e:	8d 91       	ld	r24, X+
 410:	8d 01       	movw	r16, r26
 412:	09 95       	icall
 414:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 418:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 41c:	09 95       	icall
 41e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 422:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 426:	09 95       	icall
 428:	88 23       	and	r24, r24
 42a:	c9 f3       	breq	.-14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 42c:	f6 01       	movw	r30, r12
 42e:	80 81       	ld	r24, Z
 430:	0e 15       	cp	r16, r14
 432:	1f 05       	cpc	r17, r15
 434:	39 f7       	brne	.-50     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	08 95       	ret

00000450 <SensorLed4Red>:
 450:	cf 92       	push	r12
 452:	df 92       	push	r13
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <SensorLed4Red+0x12>
 462:	00 d0       	rcall	.+0      	; 0x464 <SensorLed4Red+0x14>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 46c:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 470:	20 81       	ld	r18, Z
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	00 90 6e 01 	lds	r0, 0x016E	; 0x80016e <status_led4>
 47a:	02 c0       	rjmp	.+4      	; 0x480 <SensorLed4Red+0x30>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <SensorLed4Red+0x2c>
 484:	82 2b       	or	r24, r18
 486:	80 83       	st	Z, r24
 488:	19 82       	std	Y+1, r1	; 0x01
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	8a 83       	std	Y+2, r24	; 0x02
 48e:	1b 82       	std	Y+3, r1	; 0x03
 490:	87 e0       	ldi	r24, 0x07	; 7
 492:	8c 83       	std	Y+4, r24	; 0x04
 494:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 498:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 49c:	8e 01       	movw	r16, r28
 49e:	0f 5f       	subi	r16, 0xFF	; 255
 4a0:	1f 4f       	sbci	r17, 0xFF	; 255
 4a2:	7e 01       	movw	r14, r28
 4a4:	85 e0       	ldi	r24, 0x05	; 5
 4a6:	e8 0e       	add	r14, r24
 4a8:	f1 1c       	adc	r15, r1
 4aa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 4ae:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 4b2:	d8 01       	movw	r26, r16
 4b4:	8d 91       	ld	r24, X+
 4b6:	8d 01       	movw	r16, r26
 4b8:	09 95       	icall
 4ba:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 4be:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 4c2:	09 95       	icall
 4c4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 4c8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 4cc:	09 95       	icall
 4ce:	88 23       	and	r24, r24
 4d0:	c9 f3       	breq	.-14     	; 0x4c4 <SensorLed4Red+0x74>
 4d2:	f6 01       	movw	r30, r12
 4d4:	80 81       	ld	r24, Z
 4d6:	0e 15       	cp	r16, r14
 4d8:	1f 05       	cpc	r17, r15
 4da:	39 f7       	brne	.-50     	; 0x4aa <SensorLed4Red+0x5a>
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	08 95       	ret

000004f6 <SensorLed1Green>:
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	00 d0       	rcall	.+0      	; 0x508 <SensorLed1Green+0x12>
 508:	00 d0       	rcall	.+0      	; 0x50a <SensorLed1Green+0x14>
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 512:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 516:	20 81       	ld	r18, Z
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	00 90 71 01 	lds	r0, 0x0171	; 0x800171 <status_led1>
 520:	02 c0       	rjmp	.+4      	; 0x526 <SensorLed1Green+0x30>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <SensorLed1Green+0x2c>
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	80 83       	st	Z, r24
 530:	19 82       	std	Y+1, r1	; 0x01
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	8a 83       	std	Y+2, r24	; 0x02
 536:	1b 82       	std	Y+3, r1	; 0x03
 538:	1c 82       	std	Y+4, r1	; 0x04
 53a:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 53e:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 542:	8e 01       	movw	r16, r28
 544:	0f 5f       	subi	r16, 0xFF	; 255
 546:	1f 4f       	sbci	r17, 0xFF	; 255
 548:	7e 01       	movw	r14, r28
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	e8 0e       	add	r14, r24
 54e:	f1 1c       	adc	r15, r1
 550:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 554:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 558:	d8 01       	movw	r26, r16
 55a:	8d 91       	ld	r24, X+
 55c:	8d 01       	movw	r16, r26
 55e:	09 95       	icall
 560:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 564:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 568:	09 95       	icall
 56a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 56e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 572:	09 95       	icall
 574:	88 23       	and	r24, r24
 576:	c9 f3       	breq	.-14     	; 0x56a <SensorLed1Green+0x74>
 578:	f6 01       	movw	r30, r12
 57a:	80 81       	ld	r24, Z
 57c:	0e 15       	cp	r16, r14
 57e:	1f 05       	cpc	r17, r15
 580:	39 f7       	brne	.-50     	; 0x550 <SensorLed1Green+0x5a>
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	08 95       	ret

0000059c <SensorLed2Green>:
 59c:	cf 92       	push	r12
 59e:	df 92       	push	r13
 5a0:	ef 92       	push	r14
 5a2:	ff 92       	push	r15
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <SensorLed2Green+0x12>
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <SensorLed2Green+0x14>
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 5b8:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 5bc:	20 81       	ld	r18, Z
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	00 90 70 01 	lds	r0, 0x0170	; 0x800170 <status_led2>
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <SensorLed2Green+0x30>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <SensorLed2Green+0x2c>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	80 83       	st	Z, r24
 5d6:	19 82       	std	Y+1, r1	; 0x01
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	8a 83       	std	Y+2, r24	; 0x02
 5dc:	1b 82       	std	Y+3, r1	; 0x03
 5de:	8c 83       	std	Y+4, r24	; 0x04
 5e0:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 5e4:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 5e8:	8e 01       	movw	r16, r28
 5ea:	0f 5f       	subi	r16, 0xFF	; 255
 5ec:	1f 4f       	sbci	r17, 0xFF	; 255
 5ee:	7e 01       	movw	r14, r28
 5f0:	85 e0       	ldi	r24, 0x05	; 5
 5f2:	e8 0e       	add	r14, r24
 5f4:	f1 1c       	adc	r15, r1
 5f6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 5fa:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 5fe:	d8 01       	movw	r26, r16
 600:	8d 91       	ld	r24, X+
 602:	8d 01       	movw	r16, r26
 604:	09 95       	icall
 606:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 60a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 60e:	09 95       	icall
 610:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 614:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 618:	09 95       	icall
 61a:	88 23       	and	r24, r24
 61c:	c9 f3       	breq	.-14     	; 0x610 <SensorLed2Green+0x74>
 61e:	f6 01       	movw	r30, r12
 620:	80 81       	ld	r24, Z
 622:	0e 15       	cp	r16, r14
 624:	1f 05       	cpc	r17, r15
 626:	39 f7       	brne	.-50     	; 0x5f6 <SensorLed2Green+0x5a>
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	ff 90       	pop	r15
 63a:	ef 90       	pop	r14
 63c:	df 90       	pop	r13
 63e:	cf 90       	pop	r12
 640:	08 95       	ret

00000642 <SensorLed3Green>:
 642:	cf 92       	push	r12
 644:	df 92       	push	r13
 646:	ef 92       	push	r14
 648:	ff 92       	push	r15
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	00 d0       	rcall	.+0      	; 0x654 <SensorLed3Green+0x12>
 654:	00 d0       	rcall	.+0      	; 0x656 <SensorLed3Green+0x14>
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_port>
 65e:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_port+0x1>
 662:	20 81       	ld	r18, Z
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led3>
 66c:	02 c0       	rjmp	.+4      	; 0x672 <SensorLed3Green+0x30>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <SensorLed3Green+0x2c>
 676:	80 95       	com	r24
 678:	82 23       	and	r24, r18
 67a:	80 83       	st	Z, r24
 67c:	19 82       	std	Y+1, r1	; 0x01
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	8a 83       	std	Y+2, r24	; 0x02
 682:	1b 82       	std	Y+3, r1	; 0x03
 684:	84 e0       	ldi	r24, 0x04	; 4
 686:	8c 83       	std	Y+4, r24	; 0x04
 688:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 68c:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 690:	8e 01       	movw	r16, r28
 692:	0f 5f       	subi	r16, 0xFF	; 255
 694:	1f 4f       	sbci	r17, 0xFF	; 255
 696:	7e 01       	movw	r14, r28
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	e8 0e       	add	r14, r24
 69c:	f1 1c       	adc	r15, r1
 69e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 6a2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 6a6:	d8 01       	movw	r26, r16
 6a8:	8d 91       	ld	r24, X+
 6aa:	8d 01       	movw	r16, r26
 6ac:	09 95       	icall
 6ae:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 6b2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 6b6:	09 95       	icall
 6b8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 6bc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 6c0:	09 95       	icall
 6c2:	88 23       	and	r24, r24
 6c4:	c9 f3       	breq	.-14     	; 0x6b8 <SensorLed3Green+0x76>
 6c6:	f6 01       	movw	r30, r12
 6c8:	80 81       	ld	r24, Z
 6ca:	0e 15       	cp	r16, r14
 6cc:	1f 05       	cpc	r17, r15
 6ce:	39 f7       	brne	.-50     	; 0x69e <SensorLed3Green+0x5c>
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	df 90       	pop	r13
 6e6:	cf 90       	pop	r12
 6e8:	08 95       	ret

000006ea <LookupSensorCmd>:
 6ea:	89 30       	cpi	r24, 0x09	; 9
 6ec:	48 f4       	brcc	.+18     	; 0x700 <LookupSensorCmd+0x16>
 6ee:	e8 2f       	mov	r30, r24
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	e4 5e       	subi	r30, 0xE4	; 228
 6f8:	fe 4f       	sbci	r31, 0xFE	; 254
 6fa:	80 81       	ld	r24, Z
 6fc:	91 81       	ldd	r25, Z+1	; 0x01
 6fe:	08 95       	ret
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	08 95       	ret

00000706 <SpiSlaveWrite_StatusInvalid>:
 706:	cf 92       	push	r12
 708:	df 92       	push	r13
 70a:	ef 92       	push	r14
 70c:	ff 92       	push	r15
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	00 d0       	rcall	.+0      	; 0x718 <SpiSlaveWrite_StatusInvalid+0x12>
 718:	00 d0       	rcall	.+0      	; 0x71a <SpiSlaveWrite_StatusInvalid+0x14>
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	19 82       	std	Y+1, r1	; 0x01
 720:	92 e0       	ldi	r25, 0x02	; 2
 722:	9a 83       	std	Y+2, r25	; 0x02
 724:	9f ef       	ldi	r25, 0xFF	; 255
 726:	9b 83       	std	Y+3, r25	; 0x03
 728:	8c 83       	std	Y+4, r24	; 0x04
 72a:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <Spi_spdr>
 72e:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <Spi_spdr+0x1>
 732:	8e 01       	movw	r16, r28
 734:	0f 5f       	subi	r16, 0xFF	; 255
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	7e 01       	movw	r14, r28
 73a:	85 e0       	ldi	r24, 0x05	; 5
 73c:	e8 0e       	add	r14, r24
 73e:	f1 1c       	adc	r15, r1
 740:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 744:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 748:	d8 01       	movw	r26, r16
 74a:	8d 91       	ld	r24, X+
 74c:	8d 01       	movw	r16, r26
 74e:	09 95       	icall
 750:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 754:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 758:	09 95       	icall
 75a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 75e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 762:	09 95       	icall
 764:	88 23       	and	r24, r24
 766:	c9 f3       	breq	.-14     	; 0x75a <SpiSlaveWrite_StatusInvalid+0x54>
 768:	f6 01       	movw	r30, r12
 76a:	80 81       	ld	r24, Z
 76c:	0e 15       	cp	r16, r14
 76e:	1f 05       	cpc	r17, r15
 770:	39 f7       	brne	.-50     	; 0x740 <SpiSlaveWrite_StatusInvalid+0x3a>
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	1f 91       	pop	r17
 780:	0f 91       	pop	r16
 782:	ff 90       	pop	r15
 784:	ef 90       	pop	r14
 786:	df 90       	pop	r13
 788:	cf 90       	pop	r12
 78a:	08 95       	ret

0000078c <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 790:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Spi_ddr>
 794:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <Spi_ddr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 798:	80 81       	ld	r24, Z
 79a:	c1 e0       	ldi	r28, 0x01	; 1
 79c:	d0 e0       	ldi	r29, 0x00	; 0
 79e:	00 90 63 01 	lds	r0, 0x0163	; 0x800163 <Spi_Miso>
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <SpiSlaveInit+0x1c>
 7a4:	cc 0f       	add	r28, r28
 7a6:	dd 1f       	adc	r29, r29
 7a8:	0a 94       	dec	r0
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <SpiSlaveInit+0x18>
 7ac:	8c 2b       	or	r24, r28
 7ae:	80 83       	st	Z, r24
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 7b0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 7b4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 7b8:	09 95       	icall
    /* ------------------------ */
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
 7ba:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Spi_port>
 7be:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Spi_port+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 7c2:	80 81       	ld	r24, Z
 7c4:	c0 95       	com	r28
 7c6:	c8 23       	and	r28, r24
 7c8:	c0 83       	st	Z, r28
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 7ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 7ce:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
}
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 7d6:	09 94       	ijmp

000007d8 <StartAdcReadout>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 7d8:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <UartSpi_port>
 7dc:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <UartSpi_port+0x1>
 7e0:	20 81       	ld	r18, Z
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	00 90 56 01 	lds	r0, 0x0156	; 0x800156 <UartSpi_AdcConv>
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <StartAdcReadout+0x18>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	0a 94       	dec	r0
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <StartAdcReadout+0x14>
 7f4:	80 95       	com	r24
 7f6:	82 23       	and	r24, r18
 7f8:	80 83       	st	Z, r24
 7fa:	08 95       	ret

000007fc <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 7fc:	ef 92       	push	r14
 7fe:	ff 92       	push	r15
 800:	0f 93       	push	r16
 802:	1f 93       	push	r17
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 808:	00 91 57 01 	lds	r16, 0x0157	; 0x800157 <UartSpi_br>
 80c:	10 91 58 01 	lds	r17, 0x0158	; 0x800158 <UartSpi_br+0x1>
 810:	f8 01       	movw	r30, r16
 812:	11 82       	std	Z+1, r1	; 0x01
 814:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 816:	e0 90 5f 01 	lds	r14, 0x015F	; 0x80015f <UartSpi_ddr>
 81a:	f0 90 60 01 	lds	r15, 0x0160	; 0x800160 <UartSpi_ddr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 81e:	f7 01       	movw	r30, r14
 820:	20 81       	ld	r18, Z
 822:	c1 e0       	ldi	r28, 0x01	; 1
 824:	d0 e0       	ldi	r29, 0x00	; 0
 826:	ce 01       	movw	r24, r28
 828:	00 90 55 01 	lds	r0, 0x0155	; 0x800155 <UartSpi_Sck>
 82c:	02 c0       	rjmp	.+4      	; 0x832 <UartSpiInit+0x36>
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	0a 94       	dec	r0
 834:	e2 f7       	brpl	.-8      	; 0x82e <UartSpiInit+0x32>
 836:	82 2b       	or	r24, r18
 838:	80 83       	st	Z, r24
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 83a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <StartAdcReadout>
 83e:	f7 01       	movw	r30, r14
 840:	20 81       	ld	r18, Z
 842:	ce 01       	movw	r24, r28
 844:	00 90 56 01 	lds	r0, 0x0156	; 0x800156 <UartSpi_AdcConv>
 848:	02 c0       	rjmp	.+4      	; 0x84e <UartSpiInit+0x52>
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <UartSpiInit+0x4e>
 852:	82 2b       	or	r24, r18
 854:	80 83       	st	Z, r24
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 856:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <UartSpi_csrc>
 85a:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <UartSpi_csrc+0x1>
 85e:	20 81       	ld	r18, Z
 860:	ce 01       	movw	r24, r28
 862:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <UartSpi_ModeSelect0>
 866:	02 c0       	rjmp	.+4      	; 0x86c <UartSpiInit+0x70>
 868:	88 0f       	add	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	0a 94       	dec	r0
 86e:	e2 f7       	brpl	.-8      	; 0x868 <UartSpiInit+0x6c>
 870:	82 2b       	or	r24, r18
 872:	80 83       	st	Z, r24
 874:	20 81       	ld	r18, Z
 876:	ce 01       	movw	r24, r28
 878:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <UartSpi_ModeSelect1>
 87c:	02 c0       	rjmp	.+4      	; 0x882 <UartSpiInit+0x86>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e <UartSpiInit+0x82>
 886:	82 2b       	or	r24, r18
 888:	80 83       	st	Z, r24
 88a:	20 81       	ld	r18, Z
 88c:	ce 01       	movw	r24, r28
 88e:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <UartSpi_ClockPolarity>
 892:	02 c0       	rjmp	.+4      	; 0x898 <UartSpiInit+0x9c>
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	0a 94       	dec	r0
 89a:	e2 f7       	brpl	.-8      	; 0x894 <UartSpiInit+0x98>
 89c:	82 2b       	or	r24, r18
 89e:	80 83       	st	Z, r24
 8a0:	20 81       	ld	r18, Z
 8a2:	ce 01       	movw	r24, r28
 8a4:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <UartSpi_ClockPhase>
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <UartSpiInit+0xb2>
 8aa:	88 0f       	add	r24, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	0a 94       	dec	r0
 8b0:	e2 f7       	brpl	.-8      	; 0x8aa <UartSpiInit+0xae>
 8b2:	82 2b       	or	r24, r18
 8b4:	80 83       	st	Z, r24
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 8b6:	90 81       	ld	r25, Z
 8b8:	9e 01       	movw	r18, r28
 8ba:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <UartSpi_DataOrder>
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <UartSpiInit+0xc8>
 8c0:	22 0f       	add	r18, r18
 8c2:	33 1f       	adc	r19, r19
 8c4:	0a 94       	dec	r0
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <UartSpiInit+0xc4>
 8c8:	82 2f       	mov	r24, r18
 8ca:	80 95       	com	r24
 8cc:	89 23       	and	r24, r25
 8ce:	80 83       	st	Z, r24
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 8d0:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <UartSpi_csrb>
 8d4:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <UartSpi_csrb+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 8d8:	20 81       	ld	r18, Z
 8da:	ce 01       	movw	r24, r28
 8dc:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <UartSpi_RxEnable>
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <UartSpiInit+0xea>
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	0a 94       	dec	r0
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <UartSpiInit+0xe6>
 8ea:	82 2b       	or	r24, r18
 8ec:	80 83       	st	Z, r24
 8ee:	80 81       	ld	r24, Z
 8f0:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <UartSpi_TxEnable>
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <UartSpiInit+0xfe>
 8f6:	cc 0f       	add	r28, r28
 8f8:	dd 1f       	adc	r29, r29
 8fa:	0a 94       	dec	r0
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <UartSpiInit+0xfa>
 8fe:	c8 2b       	or	r28, r24
 900:	c0 83       	st	Z, r28
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 902:	f8 01       	movw	r30, r16
 904:	11 82       	std	Z+1, r1	; 0x01
 906:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	1f 91       	pop	r17
 90e:	0f 91       	pop	r16
 910:	ff 90       	pop	r15
 912:	ef 90       	pop	r14
 914:	08 95       	ret

00000916 <LisRunClkAt50kHz_Implementation>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 916:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <PwmResetCounterAtTop>
 91a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <PwmResetCounterAtTop+0x1>
 91e:	09 95       	icall
 920:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <PwmTopIsOcr0a>
 924:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <PwmTopIsOcr0a+0x1>
 928:	09 95       	icall
 92a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <PwmClkIsCpuClk>
 92e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <PwmClkIsCpuClk+0x1>
 932:	09 95       	icall
 934:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <Lis_clktop>
 938:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <Lis_clktop+0x1>
 93c:	88 ec       	ldi	r24, 0xC8	; 200
 93e:	80 83       	st	Z, r24
 940:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Lis_clkth>
 944:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Lis_clkth+0x1>
 948:	20 81       	ld	r18, Z
 94a:	26 95       	lsr	r18
 94c:	fc 01       	movw	r30, r24
 94e:	20 83       	st	Z, r18
 950:	08 95       	ret

00000952 <LisClkOn_Implementation>:
 952:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmEnableOutputSetUntilMatch>
 956:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmEnableOutputSetUntilMatch+0x1>
 95a:	09 94       	ijmp

0000095c <LisWriteCfg>:
 95c:	4f 92       	push	r4
 95e:	5f 92       	push	r5
 960:	6f 92       	push	r6
 962:	7f 92       	push	r7
 964:	8f 92       	push	r8
 966:	9f 92       	push	r9
 968:	af 92       	push	r10
 96a:	bf 92       	push	r11
 96c:	cf 92       	push	r12
 96e:	df 92       	push	r13
 970:	ef 92       	push	r14
 972:	ff 92       	push	r15
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	4c 01       	movw	r8, r24
 97e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Pwm_tifr0>
 982:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Pwm_tifr0+0x1>
 986:	80 81       	ld	r24, Z
 988:	21 e0       	ldi	r18, 0x01	; 1
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Pwm_Ocf0b>
 990:	02 c0       	rjmp	.+4      	; 0x996 <LisWriteCfg+0x3a>
 992:	22 0f       	add	r18, r18
 994:	33 1f       	adc	r19, r19
 996:	0a 94       	dec	r0
 998:	e2 f7       	brpl	.-8      	; 0x992 <LisWriteCfg+0x36>
 99a:	f2 2e       	mov	r15, r18
 99c:	82 2b       	or	r24, r18
 99e:	80 83       	st	Z, r24
 9a0:	80 81       	ld	r24, Z
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	82 23       	and	r24, r18
 9a6:	93 23       	and	r25, r19
 9a8:	89 2b       	or	r24, r25
 9aa:	d1 f3       	breq	.-12     	; 0x9a0 <LisWriteCfg+0x44>
 9ac:	80 81       	ld	r24, Z
 9ae:	82 2b       	or	r24, r18
 9b0:	80 83       	st	Z, r24
 9b2:	a0 90 46 01 	lds	r10, 0x0146	; 0x800146 <Lis_port2>
 9b6:	b0 90 47 01 	lds	r11, 0x0147	; 0x800147 <Lis_port2+0x1>
 9ba:	d5 01       	movw	r26, r10
 9bc:	4c 91       	ld	r20, X
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	2c 01       	movw	r4, r24
 9c4:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Lis_PixSelect>
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <LisWriteCfg+0x72>
 9ca:	44 0c       	add	r4, r4
 9cc:	55 1c       	adc	r5, r5
 9ce:	0a 94       	dec	r0
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <LisWriteCfg+0x6e>
 9d2:	44 29       	or	r20, r4
 9d4:	4c 93       	st	X, r20
 9d6:	ac 01       	movw	r20, r24
 9d8:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Pwm_Ocf0a>
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <LisWriteCfg+0x86>
 9de:	44 0f       	add	r20, r20
 9e0:	55 1f       	adc	r21, r21
 9e2:	0a 94       	dec	r0
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <LisWriteCfg+0x82>
 9e6:	e4 2e       	mov	r14, r20
 9e8:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <Lis_port1>
 9ec:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <Lis_port1+0x1>
 9f0:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Lis_Rst>
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <LisWriteCfg+0x9e>
 9f6:	88 0f       	add	r24, r24
 9f8:	99 1f       	adc	r25, r25
 9fa:	0a 94       	dec	r0
 9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <LisWriteCfg+0x9a>
 9fe:	c8 2e       	mov	r12, r24
 a00:	d8 2e       	mov	r13, r24
 a02:	d0 94       	com	r13
 a04:	84 01       	movw	r16, r8
 a06:	0c 5f       	subi	r16, 0xFC	; 252
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	34 01       	movw	r6, r8
 a0c:	cf ef       	ldi	r28, 0xFF	; 255
 a0e:	6c 1a       	sub	r6, r28
 a10:	7c 0a       	sbc	r7, r28
 a12:	e8 01       	movw	r28, r16
 a14:	8a 91       	ld	r24, -Y
 a16:	8e 01       	movw	r16, r28
 a18:	c8 2f       	mov	r28, r24
 a1a:	d0 e0       	ldi	r29, 0x00	; 0
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	ce 01       	movw	r24, r28
 a22:	06 2e       	mov	r0, r22
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <LisWriteCfg+0xce>
 a26:	95 95       	asr	r25
 a28:	87 95       	ror	r24
 a2a:	0a 94       	dec	r0
 a2c:	e2 f7       	brpl	.-8      	; 0xa26 <LisWriteCfg+0xca>
 a2e:	80 ff       	sbrs	r24, 0
 a30:	6b c0       	rjmp	.+214    	; 0xb08 <LisWriteCfg+0x1ac>
 a32:	8c 91       	ld	r24, X
 a34:	8c 29       	or	r24, r12
 a36:	8c 93       	st	X, r24
 a38:	80 81       	ld	r24, Z
 a3a:	8e 29       	or	r24, r14
 a3c:	80 83       	st	Z, r24
 a3e:	80 81       	ld	r24, Z
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	84 23       	and	r24, r20
 a44:	95 23       	and	r25, r21
 a46:	89 2b       	or	r24, r25
 a48:	d1 f3       	breq	.-12     	; 0xa3e <LisWriteCfg+0xe2>
 a4a:	80 81       	ld	r24, Z
 a4c:	8e 29       	or	r24, r14
 a4e:	80 83       	st	Z, r24
 a50:	80 81       	ld	r24, Z
 a52:	8f 29       	or	r24, r15
 a54:	80 83       	st	Z, r24
 a56:	80 81       	ld	r24, Z
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	82 23       	and	r24, r18
 a5c:	93 23       	and	r25, r19
 a5e:	89 2b       	or	r24, r25
 a60:	d1 f3       	breq	.-12     	; 0xa56 <LisWriteCfg+0xfa>
 a62:	80 81       	ld	r24, Z
 a64:	8f 29       	or	r24, r15
 a66:	80 83       	st	Z, r24
 a68:	6f 5f       	subi	r22, 0xFF	; 255
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	68 30       	cpi	r22, 0x08	; 8
 a6e:	71 05       	cpc	r23, r1
 a70:	b9 f6       	brne	.-82     	; 0xa20 <LisWriteCfg+0xc4>
 a72:	60 16       	cp	r6, r16
 a74:	71 06       	cpc	r7, r17
 a76:	69 f6       	brne	.-102    	; 0xa12 <LisWriteCfg+0xb6>
 a78:	e4 01       	movw	r28, r8
 a7a:	88 81       	ld	r24, Y
 a7c:	c8 2f       	mov	r28, r24
 a7e:	d0 e0       	ldi	r29, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	ce 01       	movw	r24, r28
 a86:	06 2e       	mov	r0, r22
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <LisWriteCfg+0x132>
 a8a:	95 95       	asr	r25
 a8c:	87 95       	ror	r24
 a8e:	0a 94       	dec	r0
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <LisWriteCfg+0x12e>
 a92:	80 ff       	sbrs	r24, 0
 a94:	3d c0       	rjmp	.+122    	; 0xb10 <LisWriteCfg+0x1b4>
 a96:	8c 91       	ld	r24, X
 a98:	8c 29       	or	r24, r12
 a9a:	8c 93       	st	X, r24
 a9c:	80 81       	ld	r24, Z
 a9e:	8e 29       	or	r24, r14
 aa0:	80 83       	st	Z, r24
 aa2:	80 81       	ld	r24, Z
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	84 23       	and	r24, r20
 aa8:	95 23       	and	r25, r21
 aaa:	89 2b       	or	r24, r25
 aac:	d1 f3       	breq	.-12     	; 0xaa2 <LisWriteCfg+0x146>
 aae:	80 81       	ld	r24, Z
 ab0:	8e 29       	or	r24, r14
 ab2:	80 83       	st	Z, r24
 ab4:	80 81       	ld	r24, Z
 ab6:	8f 29       	or	r24, r15
 ab8:	80 83       	st	Z, r24
 aba:	80 81       	ld	r24, Z
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	82 23       	and	r24, r18
 ac0:	93 23       	and	r25, r19
 ac2:	89 2b       	or	r24, r25
 ac4:	d1 f3       	breq	.-12     	; 0xaba <LisWriteCfg+0x15e>
 ac6:	80 81       	ld	r24, Z
 ac8:	8f 29       	or	r24, r15
 aca:	80 83       	st	Z, r24
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	64 30       	cpi	r22, 0x04	; 4
 ad2:	71 05       	cpc	r23, r1
 ad4:	b9 f6       	brne	.-82     	; 0xa84 <LisWriteCfg+0x128>
 ad6:	8c 91       	ld	r24, X
 ad8:	d8 22       	and	r13, r24
 ada:	dc 92       	st	X, r13
 adc:	f5 01       	movw	r30, r10
 ade:	80 81       	ld	r24, Z
 ae0:	40 94       	com	r4
 ae2:	48 22       	and	r4, r24
 ae4:	40 82       	st	Z, r4
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	1f 91       	pop	r17
 aec:	0f 91       	pop	r16
 aee:	ff 90       	pop	r15
 af0:	ef 90       	pop	r14
 af2:	df 90       	pop	r13
 af4:	cf 90       	pop	r12
 af6:	bf 90       	pop	r11
 af8:	af 90       	pop	r10
 afa:	9f 90       	pop	r9
 afc:	8f 90       	pop	r8
 afe:	7f 90       	pop	r7
 b00:	6f 90       	pop	r6
 b02:	5f 90       	pop	r5
 b04:	4f 90       	pop	r4
 b06:	08 95       	ret
 b08:	8c 91       	ld	r24, X
 b0a:	8d 21       	and	r24, r13
 b0c:	8c 93       	st	X, r24
 b0e:	94 cf       	rjmp	.-216    	; 0xa38 <LisWriteCfg+0xdc>
 b10:	8c 91       	ld	r24, X
 b12:	8d 21       	and	r24, r13
 b14:	8c 93       	st	X, r24
 b16:	c2 cf       	rjmp	.-124    	; 0xa9c <LisWriteCfg+0x140>

00000b18 <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 b18:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Lis_ddr2>
 b1c:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Lis_ddr2+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 b20:	40 81       	ld	r20, Z
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	9c 01       	movw	r18, r24
 b28:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Lis_PixSelect>
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <LisInit+0x1a>
 b2e:	22 0f       	add	r18, r18
 b30:	33 1f       	adc	r19, r19
 b32:	0a 94       	dec	r0
 b34:	e2 f7       	brpl	.-8      	; 0xb2e <LisInit+0x16>
 b36:	34 2f       	mov	r19, r20
 b38:	32 2b       	or	r19, r18
 b3a:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 b3c:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <Lis_port2>
 b40:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <Lis_port2+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 b44:	30 81       	ld	r19, Z
 b46:	20 95       	com	r18
 b48:	23 23       	and	r18, r19
 b4a:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 b4c:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Lis_ddr1>
 b50:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Lis_ddr1+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 b54:	40 81       	ld	r20, Z
 b56:	9c 01       	movw	r18, r24
 b58:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <Lis_Clk>
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <LisInit+0x4a>
 b5e:	22 0f       	add	r18, r18
 b60:	33 1f       	adc	r19, r19
 b62:	0a 94       	dec	r0
 b64:	e2 f7       	brpl	.-8      	; 0xb5e <LisInit+0x46>
 b66:	24 2b       	or	r18, r20
 b68:	20 83       	st	Z, r18
 b6a:	40 81       	ld	r20, Z
 b6c:	9c 01       	movw	r18, r24
 b6e:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Lis_Rst>
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <LisInit+0x60>
 b74:	22 0f       	add	r18, r18
 b76:	33 1f       	adc	r19, r19
 b78:	0a 94       	dec	r0
 b7a:	e2 f7       	brpl	.-8      	; 0xb74 <LisInit+0x5c>
 b7c:	34 2f       	mov	r19, r20
 b7e:	32 2b       	or	r19, r18
 b80:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 b82:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <Lis_port1>
 b86:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <Lis_port1+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 b8a:	3c 91       	ld	r19, X
 b8c:	20 95       	com	r18
 b8e:	23 23       	and	r18, r19
 b90:	2c 93       	st	X, r18
 b92:	20 81       	ld	r18, Z
 b94:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <Lis_Sync>
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <LisInit+0x86>
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	0a 94       	dec	r0
 ba0:	e2 f7       	brpl	.-8      	; 0xb9a <LisInit+0x82>
 ba2:	80 95       	com	r24
 ba4:	82 23       	and	r24, r18
 ba6:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 ba8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
 bac:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
 bb0:	09 95       	icall
    LisClkOn();
 bb2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
 bb6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
 bba:	09 94       	ijmp

00000bbc <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 bbc:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Pwm_tccr0a>
 bc0:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Pwm_tccr0a+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 bc4:	40 81       	ld	r20, Z
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	9c 01       	movw	r18, r24
 bcc:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Pwm_Wgm00>
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <ResetCounterAtTop+0x1a>
 bd2:	22 0f       	add	r18, r18
 bd4:	33 1f       	adc	r19, r19
 bd6:	0a 94       	dec	r0
 bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <ResetCounterAtTop+0x16>
 bda:	24 2b       	or	r18, r20
 bdc:	20 83       	st	Z, r18
 bde:	20 81       	ld	r18, Z
 be0:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Pwm_Wgm01>
 be4:	02 c0       	rjmp	.+4      	; 0xbea <ResetCounterAtTop+0x2e>
 be6:	88 0f       	add	r24, r24
 be8:	99 1f       	adc	r25, r25
 bea:	0a 94       	dec	r0
 bec:	e2 f7       	brpl	.-8      	; 0xbe6 <ResetCounterAtTop+0x2a>
 bee:	82 2b       	or	r24, r18
 bf0:	80 83       	st	Z, r24
 bf2:	08 95       	ret

00000bf4 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 bf4:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Pwm_tccr0b>
 bf8:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Pwm_tccr0b+0x1>
 bfc:	20 81       	ld	r18, Z
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Pwm_Wgm02>
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <TopIsOcr0a+0x18>
 c08:	88 0f       	add	r24, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	0a 94       	dec	r0
 c0e:	e2 f7       	brpl	.-8      	; 0xc08 <TopIsOcr0a+0x14>
 c10:	82 2b       	or	r24, r18
 c12:	80 83       	st	Z, r24
 c14:	08 95       	ret

00000c16 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 c16:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Pwm_tccr0b>
 c1a:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Pwm_tccr0b+0x1>
 c1e:	40 81       	ld	r20, Z
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	9c 01       	movw	r18, r24
 c26:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Pwm_Cs00>
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <PwmClkIsCpuClk_Implementation+0x1a>
 c2c:	22 0f       	add	r18, r18
 c2e:	33 1f       	adc	r19, r19
 c30:	0a 94       	dec	r0
 c32:	e2 f7       	brpl	.-8      	; 0xc2c <PwmClkIsCpuClk_Implementation+0x16>
 c34:	24 2b       	or	r18, r20
 c36:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 c38:	30 81       	ld	r19, Z
 c3a:	ac 01       	movw	r20, r24
 c3c:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Pwm_Cs01>
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <PwmClkIsCpuClk_Implementation+0x30>
 c42:	44 0f       	add	r20, r20
 c44:	55 1f       	adc	r21, r21
 c46:	0a 94       	dec	r0
 c48:	e2 f7       	brpl	.-8      	; 0xc42 <PwmClkIsCpuClk_Implementation+0x2c>
 c4a:	24 2f       	mov	r18, r20
 c4c:	20 95       	com	r18
 c4e:	23 23       	and	r18, r19
 c50:	20 83       	st	Z, r18
 c52:	20 81       	ld	r18, Z
 c54:	00 90 32 01 	lds	r0, 0x0132	; 0x800132 <Pwm_Cs02>
 c58:	02 c0       	rjmp	.+4      	; 0xc5e <PwmClkIsCpuClk_Implementation+0x48>
 c5a:	88 0f       	add	r24, r24
 c5c:	99 1f       	adc	r25, r25
 c5e:	0a 94       	dec	r0
 c60:	e2 f7       	brpl	.-8      	; 0xc5a <PwmClkIsCpuClk_Implementation+0x44>
 c62:	80 95       	com	r24
 c64:	82 23       	and	r24, r18
 c66:	80 83       	st	Z, r24
 c68:	08 95       	ret

00000c6a <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 c6a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Pwm_tccr0a>
 c6e:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Pwm_tccr0a+0x1>
 c72:	30 81       	ld	r19, Z
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	ac 01       	movw	r20, r24
 c7a:	00 90 31 01 	lds	r0, 0x0131	; 0x800131 <Pwm_Com0b0>
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <EnableOutputSetUntilMatch+0x1a>
 c80:	44 0f       	add	r20, r20
 c82:	55 1f       	adc	r21, r21
 c84:	0a 94       	dec	r0
 c86:	e2 f7       	brpl	.-8      	; 0xc80 <EnableOutputSetUntilMatch+0x16>
 c88:	24 2f       	mov	r18, r20
 c8a:	20 95       	com	r18
 c8c:	23 23       	and	r18, r19
 c8e:	20 83       	st	Z, r18
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 c90:	20 81       	ld	r18, Z
 c92:	00 90 30 01 	lds	r0, 0x0130	; 0x800130 <Pwm_Com0b1>
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <EnableOutputSetUntilMatch+0x32>
 c98:	88 0f       	add	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	0a 94       	dec	r0
 c9e:	e2 f7       	brpl	.-8      	; 0xc98 <EnableOutputSetUntilMatch+0x2e>
 ca0:	82 2b       	or	r24, r18
 ca2:	80 83       	st	Z, r24
 ca4:	08 95       	ret

00000ca6 <main>:
    uint8_t *pfour_bits = &four_bits;
    if (BitIsSet(pfour_bits, 0)) BiColorLedRed(status_led1);
    if (BitIsSet(pfour_bits, 1)) BiColorLedRed(status_led2);
    if (BitIsSet(pfour_bits, 2)) BiColorLedRed(status_led3);
    if (BitIsSet(pfour_bits, 3)) BiColorLedRed(status_led4);
}
 ca6:	38 9a       	sbi	0x07, 0	; 7
 ca8:	39 9a       	sbi	0x07, 1	; 7
 caa:	3a 9a       	sbi	0x07, 2	; 7
 cac:	3b 9a       	sbi	0x07, 3	; 7
 cae:	0e 94 c6 03 	call	0x78c	; 0x78c <SpiSlaveInit>
 cb2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <UartSpiInit>
 cb6:	0e 94 8c 05 	call	0xb18	; 0xb18 <LisInit>
 cba:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 cbe:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 cc2:	09 95       	icall
 cc4:	88 23       	and	r24, r24
 cc6:	c9 f3       	breq	.-14     	; 0xcba <main+0x14>
 cc8:	ce b5       	in	r28, 0x2e	; 46
 cca:	8c 2f       	mov	r24, r28
 ccc:	0e 94 75 03 	call	0x6ea	; 0x6ea <LookupSensorCmd>
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	19 f0       	breq	.+6      	; 0xcda <main+0x34>
 cd4:	fc 01       	movw	r30, r24
 cd6:	09 95       	icall
 cd8:	f0 cf       	rjmp	.-32     	; 0xcba <main+0x14>
 cda:	8c 2f       	mov	r24, r28
 cdc:	0e 94 83 03 	call	0x706	; 0x706 <SpiSlaveWrite_StatusInvalid>
 ce0:	ec cf       	rjmp	.-40     	; 0xcba <main+0x14>

00000ce2 <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 ce2:	1f 92       	push	r1
 ce4:	0f 92       	push	r0
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	0f 92       	push	r0
 cea:	11 24       	eor	r1, r1
 cec:	2f 93       	push	r18
 cee:	3f 93       	push	r19
 cf0:	4f 93       	push	r20
 cf2:	5f 93       	push	r21
 cf4:	6f 93       	push	r22
 cf6:	7f 93       	push	r23
 cf8:	8f 93       	push	r24
 cfa:	9f 93       	push	r25
 cfc:	af 93       	push	r26
 cfe:	bf 93       	push	r27
 d00:	ef 93       	push	r30
 d02:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 d04:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <__data_end>
 d08:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <__data_end+0x1>
 d0c:	09 95       	icall
}
 d0e:	ff 91       	pop	r31
 d10:	ef 91       	pop	r30
 d12:	bf 91       	pop	r27
 d14:	af 91       	pop	r26
 d16:	9f 91       	pop	r25
 d18:	8f 91       	pop	r24
 d1a:	7f 91       	pop	r23
 d1c:	6f 91       	pop	r22
 d1e:	5f 91       	pop	r21
 d20:	4f 91       	pop	r20
 d22:	3f 91       	pop	r19
 d24:	2f 91       	pop	r18
 d26:	0f 90       	pop	r0
 d28:	0f be       	out	0x3f, r0	; 63
 d2a:	0f 90       	pop	r0
 d2c:	1f 90       	pop	r1
 d2e:	18 95       	reti

00000d30 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 d30:	1f 92       	push	r1
 d32:	0f 92       	push	r0
 d34:	0f b6       	in	r0, 0x3f	; 63
 d36:	0f 92       	push	r0
 d38:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 d3a:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 d3c:	0f 90       	pop	r0
 d3e:	0f be       	out	0x3f, r0	; 63
 d40:	0f 90       	pop	r0
 d42:	1f 90       	pop	r1
 d44:	18 95       	reti

00000d46 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 d46:	1f 92       	push	r1
 d48:	0f 92       	push	r0
 d4a:	0f b6       	in	r0, 0x3f	; 63
 d4c:	0f 92       	push	r0
 d4e:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 d50:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 d52:	0f 90       	pop	r0
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	0f 90       	pop	r0
 d58:	1f 90       	pop	r1
 d5a:	18 95       	reti

00000d5c <_exit>:
 d5c:	f8 94       	cli

00000d5e <__stop_program>:
 d5e:	ff cf       	rjmp	.-2      	; 0xd5e <__stop_program>
