
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000ada  00000b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080016e  0080016e  00000bdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004528  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001556  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001770  00000000  00000000  00006a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f0  00000000  00000000  00008174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000135b  00000000  00000000  00008964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d11  00000000  00000000  00009cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e6       	ldi	r26, 0x6E	; 110
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <main>
  9e:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
  a6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiStatusRegister>
  aa:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiStatusRegister+0x1>
  ae:	09 95       	icall
  b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
  b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
  b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
  ba:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Spi_spsr>
  be:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Spi_spsr+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	08 95       	ret

000000c6 <EnableSpi_Implementation>:
  c6:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <Spi_spcr>
  ca:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <Spi_spcr+0x1>
  ce:	20 81       	ld	r18, Z
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <Spi_Enable>
  d8:	02 c0       	rjmp	.+4      	; 0xde <EnableSpi_Implementation+0x18>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <EnableSpi_Implementation+0x14>
  e2:	82 2b       	or	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <ReadSpiDataRegister_Implementation>:
  e8:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <Spi_spdr>
  ec:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <Spi_spdr+0x1>
  f0:	80 81       	ld	r24, Z
  f2:	08 95       	ret

000000f4 <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
    ClearBit(Spi_ddr, Spi_DataReady); // make it an input
    SetBit(Spi_port, Spi_DataReady); // enable pull-up
}
void SetDataReadyAsOutputIdlesHigh(void) // For SpiSlave only!
{
    SetBit(Spi_port, Spi_DataReady); // idle HIGH
  f8:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <Spi_port>
  fc:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 100:	20 81       	ld	r18, Z
 102:	c1 e0       	ldi	r28, 0x01	; 1
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	ce 01       	movw	r24, r28
 108:	00 90 5b 01 	lds	r0, 0x015B	; 0x80015b <Spi_DataReady>
 10c:	02 c0       	rjmp	.+4      	; 0x112 <SpiSlaveInit+0x1e>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <SpiSlaveInit+0x1a>
 116:	92 2f       	mov	r25, r18
 118:	98 2b       	or	r25, r24
 11a:	90 83       	st	Z, r25
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
 11c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <Spi_ddr>
 120:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <Spi_ddr+0x1>
 124:	90 81       	ld	r25, Z
 126:	89 2b       	or	r24, r25
 128:	80 83       	st	Z, r24
 12a:	20 81       	ld	r18, Z
 12c:	ce 01       	movw	r24, r28
 12e:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <Spi_Miso>
 132:	02 c0       	rjmp	.+4      	; 0x138 <SpiSlaveInit+0x44>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <SpiSlaveInit+0x40>
 13c:	82 2b       	or	r24, r18
 13e:	80 83       	st	Z, r24
{
    // Slave outputs LOW on DataReady to signal Master there is data to read.
    SetDataReadyAsOutputIdlesHigh();
    // TODO: do not drive MISO, that's why we have DataReady
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
 140:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <EnableSpi>
 144:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <EnableSpi+0x1>
 148:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
 14a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 14e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 152:	09 95       	icall
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
}
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
 154:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <GlobalInterruptDisable>
 158:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <GlobalInterruptDisable+0x1>
 15c:	09 95       	icall
    ClearPendingSpiInterrupt();
 15e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 162:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 166:	09 95       	icall
/*     // and disable with: */
/*     /1* ClearBit(Spi_spcr, Spi_InterruptEnable); // Disable SPI interrupt *1/ */
/* } */
static void EnableTransferCompleteInterrupt(void)
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
 168:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <Spi_spcr>
 16c:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <Spi_spcr+0x1>
 170:	80 81       	ld	r24, Z
 172:	00 90 59 01 	lds	r0, 0x0159	; 0x800159 <Spi_InterruptEnable>
 176:	02 c0       	rjmp	.+4      	; 0x17c <SpiSlaveInit+0x88>
 178:	cc 0f       	add	r28, r28
 17a:	dd 1f       	adc	r29, r29
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <SpiSlaveInit+0x84>
 180:	c8 2b       	or	r28, r24
 182:	c0 83       	st	Z, r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 184:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <GlobalInterruptEnable>
 188:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <GlobalInterruptEnable+0x1>
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
    // Slave uses interrupts to send and receive bytes over SPI.
    SpiEnableInterrupt();
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 190:	09 94       	ijmp

00000192 <StartAdcReadout>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 192:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <UartSpi_port>
 196:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <UartSpi_port+0x1>
 19a:	20 81       	ld	r18, Z
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <UartSpi_AdcConv>
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <StartAdcReadout+0x18>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <StartAdcReadout+0x14>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 1c2:	00 91 4f 01 	lds	r16, 0x014F	; 0x80014f <UartSpi_br>
 1c6:	10 91 50 01 	lds	r17, 0x0150	; 0x800150 <UartSpi_br+0x1>
 1ca:	f8 01       	movw	r30, r16
 1cc:	11 82       	std	Z+1, r1	; 0x01
 1ce:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 1d0:	e0 90 57 01 	lds	r14, 0x0157	; 0x800157 <UartSpi_ddr>
 1d4:	f0 90 58 01 	lds	r15, 0x0158	; 0x800158 <UartSpi_ddr+0x1>
 1d8:	f7 01       	movw	r30, r14
 1da:	20 81       	ld	r18, Z
 1dc:	c1 e0       	ldi	r28, 0x01	; 1
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <UartSpi_Sck>
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <UartSpiInit+0x36>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <UartSpiInit+0x32>
 1f0:	82 2b       	or	r24, r18
 1f2:	80 83       	st	Z, r24
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 1f4:	0e 94 c9 00 	call	0x192	; 0x192 <StartAdcReadout>
 1f8:	f7 01       	movw	r30, r14
 1fa:	20 81       	ld	r18, Z
 1fc:	ce 01       	movw	r24, r28
 1fe:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <UartSpi_AdcConv>
 202:	02 c0       	rjmp	.+4      	; 0x208 <UartSpiInit+0x52>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <UartSpiInit+0x4e>
 20c:	82 2b       	or	r24, r18
 20e:	80 83       	st	Z, r24
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 210:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <UartSpi_csrc>
 214:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <UartSpi_csrc+0x1>
 218:	20 81       	ld	r18, Z
 21a:	ce 01       	movw	r24, r28
 21c:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <UartSpi_ModeSelect0>
 220:	02 c0       	rjmp	.+4      	; 0x226 <UartSpiInit+0x70>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <UartSpiInit+0x6c>
 22a:	82 2b       	or	r24, r18
 22c:	80 83       	st	Z, r24
 22e:	20 81       	ld	r18, Z
 230:	ce 01       	movw	r24, r28
 232:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <UartSpi_ModeSelect1>
 236:	02 c0       	rjmp	.+4      	; 0x23c <UartSpiInit+0x86>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <UartSpiInit+0x82>
 240:	82 2b       	or	r24, r18
 242:	80 83       	st	Z, r24
 244:	20 81       	ld	r18, Z
 246:	ce 01       	movw	r24, r28
 248:	00 90 48 01 	lds	r0, 0x0148	; 0x800148 <UartSpi_ClockPolarity>
 24c:	02 c0       	rjmp	.+4      	; 0x252 <UartSpiInit+0x9c>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <UartSpiInit+0x98>
 256:	82 2b       	or	r24, r18
 258:	80 83       	st	Z, r24
 25a:	20 81       	ld	r18, Z
 25c:	ce 01       	movw	r24, r28
 25e:	00 90 47 01 	lds	r0, 0x0147	; 0x800147 <UartSpi_ClockPhase>
 262:	02 c0       	rjmp	.+4      	; 0x268 <UartSpiInit+0xb2>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <UartSpiInit+0xae>
 26c:	82 2b       	or	r24, r18
 26e:	80 83       	st	Z, r24
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 270:	90 81       	ld	r25, Z
 272:	9e 01       	movw	r18, r28
 274:	00 90 46 01 	lds	r0, 0x0146	; 0x800146 <UartSpi_DataOrder>
 278:	02 c0       	rjmp	.+4      	; 0x27e <UartSpiInit+0xc8>
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <UartSpiInit+0xc4>
 282:	82 2f       	mov	r24, r18
 284:	80 95       	com	r24
 286:	89 23       	and	r24, r25
 288:	80 83       	st	Z, r24
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 28a:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <UartSpi_csrb>
 28e:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <UartSpi_csrb+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 292:	20 81       	ld	r18, Z
 294:	ce 01       	movw	r24, r28
 296:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <UartSpi_RxEnable>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <UartSpiInit+0xea>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <UartSpiInit+0xe6>
 2a4:	82 2b       	or	r24, r18
 2a6:	80 83       	st	Z, r24
 2a8:	80 81       	ld	r24, Z
 2aa:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <UartSpi_TxEnable>
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <UartSpiInit+0xfe>
 2b0:	cc 0f       	add	r28, r28
 2b2:	dd 1f       	adc	r29, r29
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <UartSpiInit+0xfa>
 2b8:	c8 2b       	or	r28, r24
 2ba:	c0 83       	st	Z, r28
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 2bc:	f8 01       	movw	r30, r16
 2be:	11 82       	std	Z+1, r1	; 0x01
 2c0:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	08 95       	ret

000002d0 <LisRunClkAt50kHz_Implementation>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2d0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmResetCounterAtTop>
 2d4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmResetCounterAtTop+0x1>
 2d8:	09 95       	icall
 2da:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmTopIsOcr0a>
 2de:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmTopIsOcr0a+0x1>
 2e2:	09 95       	icall
 2e4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmClkIsCpuClk>
 2e8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmClkIsCpuClk+0x1>
 2ec:	09 95       	icall
 2ee:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Lis_clktop>
 2f2:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Lis_clktop+0x1>
 2f6:	88 ec       	ldi	r24, 0xC8	; 200
 2f8:	80 83       	st	Z, r24
 2fa:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <Lis_clkth>
 2fe:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <Lis_clkth+0x1>
 302:	20 81       	ld	r18, Z
 304:	26 95       	lsr	r18
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
 30a:	08 95       	ret

0000030c <LisClkOn_Implementation>:
 30c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <PwmEnableOutputSetUntilMatch>
 310:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <PwmEnableOutputSetUntilMatch+0x1>
 314:	09 94       	ijmp

00000316 <LisWriteCfg>:
 316:	4f 92       	push	r4
 318:	5f 92       	push	r5
 31a:	6f 92       	push	r6
 31c:	7f 92       	push	r7
 31e:	8f 92       	push	r8
 320:	9f 92       	push	r9
 322:	af 92       	push	r10
 324:	bf 92       	push	r11
 326:	cf 92       	push	r12
 328:	df 92       	push	r13
 32a:	ef 92       	push	r14
 32c:	ff 92       	push	r15
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	4c 01       	movw	r8, r24
 338:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Pwm_tifr0>
 33c:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Pwm_tifr0+0x1>
 340:	80 81       	ld	r24, Z
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	00 90 26 01 	lds	r0, 0x0126	; 0x800126 <Pwm_Ocf0b>
 34a:	02 c0       	rjmp	.+4      	; 0x350 <LisWriteCfg+0x3a>
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <LisWriteCfg+0x36>
 354:	f2 2e       	mov	r15, r18
 356:	82 2b       	or	r24, r18
 358:	80 83       	st	Z, r24
 35a:	80 81       	ld	r24, Z
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	82 23       	and	r24, r18
 360:	93 23       	and	r25, r19
 362:	89 2b       	or	r24, r25
 364:	d1 f3       	breq	.-12     	; 0x35a <LisWriteCfg+0x44>
 366:	80 81       	ld	r24, Z
 368:	82 2b       	or	r24, r18
 36a:	80 83       	st	Z, r24
 36c:	a0 90 3e 01 	lds	r10, 0x013E	; 0x80013e <Lis_port2>
 370:	b0 90 3f 01 	lds	r11, 0x013F	; 0x80013f <Lis_port2+0x1>
 374:	d5 01       	movw	r26, r10
 376:	4c 91       	ld	r20, X
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	2c 01       	movw	r4, r24
 37e:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Lis_PixSelect>
 382:	02 c0       	rjmp	.+4      	; 0x388 <LisWriteCfg+0x72>
 384:	44 0c       	add	r4, r4
 386:	55 1c       	adc	r5, r5
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <LisWriteCfg+0x6e>
 38c:	44 29       	or	r20, r4
 38e:	4c 93       	st	X, r20
 390:	ac 01       	movw	r20, r24
 392:	00 90 27 01 	lds	r0, 0x0127	; 0x800127 <Pwm_Ocf0a>
 396:	02 c0       	rjmp	.+4      	; 0x39c <LisWriteCfg+0x86>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <LisWriteCfg+0x82>
 3a0:	e4 2e       	mov	r14, r20
 3a2:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <Lis_port1>
 3a6:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <Lis_port1+0x1>
 3aa:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Lis_Rst>
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <LisWriteCfg+0x9e>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <LisWriteCfg+0x9a>
 3b8:	c8 2e       	mov	r12, r24
 3ba:	d8 2e       	mov	r13, r24
 3bc:	d0 94       	com	r13
 3be:	84 01       	movw	r16, r8
 3c0:	0c 5f       	subi	r16, 0xFC	; 252
 3c2:	1f 4f       	sbci	r17, 0xFF	; 255
 3c4:	34 01       	movw	r6, r8
 3c6:	cf ef       	ldi	r28, 0xFF	; 255
 3c8:	6c 1a       	sub	r6, r28
 3ca:	7c 0a       	sbc	r7, r28
 3cc:	e8 01       	movw	r28, r16
 3ce:	8a 91       	ld	r24, -Y
 3d0:	8e 01       	movw	r16, r28
 3d2:	c8 2f       	mov	r28, r24
 3d4:	d0 e0       	ldi	r29, 0x00	; 0
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	ce 01       	movw	r24, r28
 3dc:	06 2e       	mov	r0, r22
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <LisWriteCfg+0xce>
 3e0:	95 95       	asr	r25
 3e2:	87 95       	ror	r24
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <LisWriteCfg+0xca>
 3e8:	80 ff       	sbrs	r24, 0
 3ea:	6b c0       	rjmp	.+214    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 3ec:	8c 91       	ld	r24, X
 3ee:	8c 29       	or	r24, r12
 3f0:	8c 93       	st	X, r24
 3f2:	80 81       	ld	r24, Z
 3f4:	8e 29       	or	r24, r14
 3f6:	80 83       	st	Z, r24
 3f8:	80 81       	ld	r24, Z
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	84 23       	and	r24, r20
 3fe:	95 23       	and	r25, r21
 400:	89 2b       	or	r24, r25
 402:	d1 f3       	breq	.-12     	; 0x3f8 <LisWriteCfg+0xe2>
 404:	80 81       	ld	r24, Z
 406:	8e 29       	or	r24, r14
 408:	80 83       	st	Z, r24
 40a:	80 81       	ld	r24, Z
 40c:	8f 29       	or	r24, r15
 40e:	80 83       	st	Z, r24
 410:	80 81       	ld	r24, Z
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	82 23       	and	r24, r18
 416:	93 23       	and	r25, r19
 418:	89 2b       	or	r24, r25
 41a:	d1 f3       	breq	.-12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41c:	80 81       	ld	r24, Z
 41e:	8f 29       	or	r24, r15
 420:	80 83       	st	Z, r24
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	68 30       	cpi	r22, 0x08	; 8
 428:	71 05       	cpc	r23, r1
 42a:	b9 f6       	brne	.-82     	; 0x3da <LisWriteCfg+0xc4>
 42c:	60 16       	cp	r6, r16
 42e:	71 06       	cpc	r7, r17
 430:	69 f6       	brne	.-102    	; 0x3cc <LisWriteCfg+0xb6>
 432:	e4 01       	movw	r28, r8
 434:	88 81       	ld	r24, Y
 436:	c8 2f       	mov	r28, r24
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	ce 01       	movw	r24, r28
 440:	06 2e       	mov	r0, r22
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	80 ff       	sbrs	r24, 0
 44e:	3d c0       	rjmp	.+122    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 450:	8c 91       	ld	r24, X
 452:	8c 29       	or	r24, r12
 454:	8c 93       	st	X, r24
 456:	80 81       	ld	r24, Z
 458:	8e 29       	or	r24, r14
 45a:	80 83       	st	Z, r24
 45c:	80 81       	ld	r24, Z
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	84 23       	and	r24, r20
 462:	95 23       	and	r25, r21
 464:	89 2b       	or	r24, r25
 466:	d1 f3       	breq	.-12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 468:	80 81       	ld	r24, Z
 46a:	8e 29       	or	r24, r14
 46c:	80 83       	st	Z, r24
 46e:	80 81       	ld	r24, Z
 470:	8f 29       	or	r24, r15
 472:	80 83       	st	Z, r24
 474:	80 81       	ld	r24, Z
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	82 23       	and	r24, r18
 47a:	93 23       	and	r25, r19
 47c:	89 2b       	or	r24, r25
 47e:	d1 f3       	breq	.-12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 480:	80 81       	ld	r24, Z
 482:	8f 29       	or	r24, r15
 484:	80 83       	st	Z, r24
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	64 30       	cpi	r22, 0x04	; 4
 48c:	71 05       	cpc	r23, r1
 48e:	b9 f6       	brne	.-82     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 490:	8c 91       	ld	r24, X
 492:	d8 22       	and	r13, r24
 494:	dc 92       	st	X, r13
 496:	f5 01       	movw	r30, r10
 498:	80 81       	ld	r24, Z
 49a:	40 94       	com	r4
 49c:	48 22       	and	r4, r24
 49e:	40 82       	st	Z, r4
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	9f 90       	pop	r9
 4b6:	8f 90       	pop	r8
 4b8:	7f 90       	pop	r7
 4ba:	6f 90       	pop	r6
 4bc:	5f 90       	pop	r5
 4be:	4f 90       	pop	r4
 4c0:	08 95       	ret
 4c2:	8c 91       	ld	r24, X
 4c4:	8d 21       	and	r24, r13
 4c6:	8c 93       	st	X, r24
 4c8:	94 cf       	rjmp	.-216    	; 0x3f2 <LisWriteCfg+0xdc>
 4ca:	8c 91       	ld	r24, X
 4cc:	8d 21       	and	r24, r13
 4ce:	8c 93       	st	X, r24
 4d0:	c2 cf       	rjmp	.-124    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

000004d2 <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 4d2:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Lis_ddr2>
 4d6:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <Lis_ddr2+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 4da:	40 81       	ld	r20, Z
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9c 01       	movw	r18, r24
 4e2:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Lis_PixSelect>
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <LisInit+0x1a>
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <LisInit+0x16>
 4f0:	34 2f       	mov	r19, r20
 4f2:	32 2b       	or	r19, r18
 4f4:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 4f6:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Lis_port2>
 4fa:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <Lis_port2+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 4fe:	30 81       	ld	r19, Z
 500:	20 95       	com	r18
 502:	23 23       	and	r18, r19
 504:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 506:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <Lis_ddr1>
 50a:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <Lis_ddr1+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 50e:	40 81       	ld	r20, Z
 510:	9c 01       	movw	r18, r24
 512:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Lis_Clk>
 516:	02 c0       	rjmp	.+4      	; 0x51c <LisInit+0x4a>
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <LisInit+0x46>
 520:	24 2b       	or	r18, r20
 522:	20 83       	st	Z, r18
 524:	40 81       	ld	r20, Z
 526:	9c 01       	movw	r18, r24
 528:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Lis_Rst>
 52c:	02 c0       	rjmp	.+4      	; 0x532 <LisInit+0x60>
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <LisInit+0x5c>
 536:	34 2f       	mov	r19, r20
 538:	32 2b       	or	r19, r18
 53a:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 53c:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <Lis_port1>
 540:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <Lis_port1+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 544:	3c 91       	ld	r19, X
 546:	20 95       	com	r18
 548:	23 23       	and	r18, r19
 54a:	2c 93       	st	X, r18
 54c:	20 81       	ld	r18, Z
 54e:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Lis_Sync>
 552:	02 c0       	rjmp	.+4      	; 0x558 <LisInit+0x86>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <LisInit+0x82>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 562:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisRunClkAt50kHz>
 566:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisRunClkAt50kHz+0x1>
 56a:	09 95       	icall
    LisClkOn();
 56c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <LisClkOn>
 570:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <LisClkOn+0x1>
 574:	09 94       	ijmp

00000576 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 576:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Pwm_tccr0a>
 57a:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Pwm_tccr0a+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 57e:	40 81       	ld	r20, Z
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	9c 01       	movw	r18, r24
 586:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Pwm_Wgm00>
 58a:	02 c0       	rjmp	.+4      	; 0x590 <ResetCounterAtTop+0x1a>
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	0a 94       	dec	r0
 592:	e2 f7       	brpl	.-8      	; 0x58c <ResetCounterAtTop+0x16>
 594:	24 2b       	or	r18, r20
 596:	20 83       	st	Z, r18
 598:	20 81       	ld	r18, Z
 59a:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Pwm_Wgm01>
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <ResetCounterAtTop+0x2e>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <ResetCounterAtTop+0x2a>
 5a8:	82 2b       	or	r24, r18
 5aa:	80 83       	st	Z, r24
 5ac:	08 95       	ret

000005ae <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 5ae:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Pwm_tccr0b>
 5b2:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Pwm_tccr0b+0x1>
 5b6:	20 81       	ld	r18, Z
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <Pwm_Wgm02>
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <TopIsOcr0a+0x18>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <TopIsOcr0a+0x14>
 5ca:	82 2b       	or	r24, r18
 5cc:	80 83       	st	Z, r24
 5ce:	08 95       	ret

000005d0 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 5d0:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Pwm_tccr0b>
 5d4:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Pwm_tccr0b+0x1>
 5d8:	40 81       	ld	r20, Z
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	9c 01       	movw	r18, r24
 5e0:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <Pwm_Cs00>
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <PwmClkIsCpuClk_Implementation+0x1a>
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <PwmClkIsCpuClk_Implementation+0x16>
 5ee:	24 2b       	or	r18, r20
 5f0:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 5f2:	30 81       	ld	r19, Z
 5f4:	ac 01       	movw	r20, r24
 5f6:	00 90 2b 01 	lds	r0, 0x012B	; 0x80012b <Pwm_Cs01>
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <PwmClkIsCpuClk_Implementation+0x30>
 5fc:	44 0f       	add	r20, r20
 5fe:	55 1f       	adc	r21, r21
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <PwmClkIsCpuClk_Implementation+0x2c>
 604:	24 2f       	mov	r18, r20
 606:	20 95       	com	r18
 608:	23 23       	and	r18, r19
 60a:	20 83       	st	Z, r18
 60c:	20 81       	ld	r18, Z
 60e:	00 90 2a 01 	lds	r0, 0x012A	; 0x80012a <Pwm_Cs02>
 612:	02 c0       	rjmp	.+4      	; 0x618 <PwmClkIsCpuClk_Implementation+0x48>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	0a 94       	dec	r0
 61a:	e2 f7       	brpl	.-8      	; 0x614 <PwmClkIsCpuClk_Implementation+0x44>
 61c:	80 95       	com	r24
 61e:	82 23       	and	r24, r18
 620:	80 83       	st	Z, r24
 622:	08 95       	ret

00000624 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 624:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Pwm_tccr0a>
 628:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Pwm_tccr0a+0x1>
 62c:	30 81       	ld	r19, Z
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	ac 01       	movw	r20, r24
 634:	00 90 29 01 	lds	r0, 0x0129	; 0x800129 <Pwm_Com0b0>
 638:	02 c0       	rjmp	.+4      	; 0x63e <EnableOutputSetUntilMatch+0x1a>
 63a:	44 0f       	add	r20, r20
 63c:	55 1f       	adc	r21, r21
 63e:	0a 94       	dec	r0
 640:	e2 f7       	brpl	.-8      	; 0x63a <EnableOutputSetUntilMatch+0x16>
 642:	24 2f       	mov	r18, r20
 644:	20 95       	com	r18
 646:	23 23       	and	r18, r19
 648:	20 83       	st	Z, r18
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 64a:	20 81       	ld	r18, Z
 64c:	00 90 28 01 	lds	r0, 0x0128	; 0x800128 <Pwm_Com0b1>
 650:	02 c0       	rjmp	.+4      	; 0x656 <EnableOutputSetUntilMatch+0x32>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	0a 94       	dec	r0
 658:	e2 f7       	brpl	.-8      	; 0x652 <EnableOutputSetUntilMatch+0x2e>
 65a:	82 2b       	or	r24, r18
 65c:	80 83       	st	Z, r24
 65e:	08 95       	ret

00000660 <QueueInit>:
    return pq;
}
uint16_t QueueLength(volatile Queue_s * pq)
{ // Return length of Queue
    return pq->length;
}
 660:	ee e6       	ldi	r30, 0x6E	; 110
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	91 83       	std	Z+1, r25	; 0x01
 666:	80 83       	st	Z, r24
 668:	77 83       	std	Z+7, r23	; 0x07
 66a:	66 83       	std	Z+6, r22	; 0x06
 66c:	12 82       	std	Z+2, r1	; 0x02
 66e:	13 82       	std	Z+3, r1	; 0x03
 670:	15 82       	std	Z+5, r1	; 0x05
 672:	14 82       	std	Z+4, r1	; 0x04
 674:	cf 01       	movw	r24, r30
 676:	08 95       	ret

00000678 <QueuePush>:
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
 678:	fc 01       	movw	r30, r24
    pq->length--;
    return pq->buffer[pq->tail++];
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
 67a:	24 81       	ldd	r18, Z+4	; 0x04
 67c:	35 81       	ldd	r19, Z+5	; 0x05
 67e:	86 81       	ldd	r24, Z+6	; 0x06
 680:	97 81       	ldd	r25, Z+7	; 0x07
 682:	28 17       	cp	r18, r24
 684:	39 07       	cpc	r19, r25
 686:	b8 f4       	brcc	.+46     	; 0x6b6 <QueuePush+0x3e>
}
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
    if (QueueIsFull(pq)) return;
    // wrap head to beginning of buffer when it reaches the end of the buffer
    if (pq->head >= pq->max_length) pq->head = 0;
 688:	82 81       	ldd	r24, Z+2	; 0x02
 68a:	26 81       	ldd	r18, Z+6	; 0x06
 68c:	37 81       	ldd	r19, Z+7	; 0x07
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	82 17       	cp	r24, r18
 692:	93 07       	cpc	r25, r19
 694:	08 f0       	brcs	.+2      	; 0x698 <QueuePush+0x20>
 696:	12 82       	std	Z+2, r1	; 0x02
    pq->buffer[pq->head++] = data;
 698:	a0 81       	ld	r26, Z
 69a:	b1 81       	ldd	r27, Z+1	; 0x01
 69c:	82 81       	ldd	r24, Z+2	; 0x02
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	98 0f       	add	r25, r24
 6a2:	92 83       	std	Z+2, r25	; 0x02
 6a4:	a8 0f       	add	r26, r24
 6a6:	b1 1d       	adc	r27, r1
 6a8:	6c 93       	st	X, r22
    pq->length++;
 6aa:	84 81       	ldd	r24, Z+4	; 0x04
 6ac:	95 81       	ldd	r25, Z+5	; 0x05
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	95 83       	std	Z+5, r25	; 0x05
 6b2:	84 83       	std	Z+4, r24	; 0x04
 6b4:	08 95       	ret
 6b6:	08 95       	ret

000006b8 <QueuePop>:
}
uint8_t QueuePop(volatile Queue_s *pq)
{
 6b8:	fc 01       	movw	r30, r24
    if (pq->length >= pq->max_length) return true;
    return false;
}
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
 6ba:	84 81       	ldd	r24, Z+4	; 0x04
 6bc:	95 81       	ldd	r25, Z+5	; 0x05
 6be:	89 2b       	or	r24, r25
 6c0:	11 f4       	brne	.+4      	; 0x6c6 <QueuePop+0xe>
    pq->buffer[pq->head++] = data;
    pq->length++;
}
uint8_t QueuePop(volatile Queue_s *pq)
{
    if (QueueIsEmpty(pq)) return 0;
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	08 95       	ret
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
 6c6:	83 81       	ldd	r24, Z+3	; 0x03
 6c8:	26 81       	ldd	r18, Z+6	; 0x06
 6ca:	37 81       	ldd	r19, Z+7	; 0x07
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	82 17       	cp	r24, r18
 6d0:	93 07       	cpc	r25, r19
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <QueuePop+0x1e>
 6d4:	13 82       	std	Z+3, r1	; 0x03
    pq->length--;
 6d6:	84 81       	ldd	r24, Z+4	; 0x04
 6d8:	95 81       	ldd	r25, Z+5	; 0x05
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	95 83       	std	Z+5, r25	; 0x05
 6de:	84 83       	std	Z+4, r24	; 0x04
    return pq->buffer[pq->tail++];
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	23 81       	ldd	r18, Z+3	; 0x03
 6e6:	31 e0       	ldi	r19, 0x01	; 1
 6e8:	32 0f       	add	r19, r18
 6ea:	33 83       	std	Z+3, r19	; 0x03
 6ec:	fc 01       	movw	r30, r24
 6ee:	e2 0f       	add	r30, r18
 6f0:	f1 1d       	adc	r31, r1
 6f2:	80 81       	ld	r24, Z
 6f4:	08 95       	ret

000006f6 <QueueIsFull>:
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
 6f6:	fc 01       	movw	r30, r24
 6f8:	44 81       	ldd	r20, Z+4	; 0x04
 6fa:	55 81       	ldd	r21, Z+5	; 0x05
 6fc:	26 81       	ldd	r18, Z+6	; 0x06
 6fe:	37 81       	ldd	r19, Z+7	; 0x07
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	42 17       	cp	r20, r18
 704:	53 07       	cpc	r21, r19
 706:	08 f4       	brcc	.+2      	; 0x70a <QueueIsFull+0x14>
 708:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 70a:	08 95       	ret

0000070c <QueueIsEmpty>:
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
 70c:	fc 01       	movw	r30, r24
 70e:	24 81       	ldd	r18, Z+4	; 0x04
 710:	35 81       	ldd	r19, Z+5	; 0x05
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	23 2b       	or	r18, r19
 716:	09 f0       	breq	.+2      	; 0x71a <QueueIsEmpty+0xe>
 718:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 71a:	08 95       	ret

0000071c <NullCommand>:
void SpiSlaveWrite_StatusOk(sensor_cmd_key valid_cmd)
{
                             // | nbytes  | data           |
    uint8_t const StatusOk[] = {0x00, 0x02, 0x00, valid_cmd };
    SpiSlaveSendBytes(StatusOk,4);
}
 71c:	08 95       	ret

0000071e <WriteSpiMaster_Implementation>:
 71e:	4f 92       	push	r4
 720:	5f 92       	push	r5
 722:	6f 92       	push	r6
 724:	7f 92       	push	r7
 726:	8f 92       	push	r8
 728:	9f 92       	push	r9
 72a:	af 92       	push	r10
 72c:	bf 92       	push	r11
 72e:	cf 92       	push	r12
 730:	df 92       	push	r13
 732:	ef 92       	push	r14
 734:	ff 92       	push	r15
 736:	0f 93       	push	r16
 738:	1f 93       	push	r17
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	4b 01       	movw	r8, r22
 740:	61 15       	cp	r22, r1
 742:	71 05       	cpc	r23, r1
 744:	09 f4       	brne	.+2      	; 0x748 <WriteSpiMaster_Implementation+0x2a>
 746:	4a c0       	rjmp	.+148    	; 0x7dc <WriteSpiMaster_Implementation+0xbe>
 748:	a0 90 5d 01 	lds	r10, 0x015D	; 0x80015d <Spi_spdr>
 74c:	b0 90 5e 01 	lds	r11, 0x015E	; 0x80015e <Spi_spdr+0x1>
 750:	00 91 63 01 	lds	r16, 0x0163	; 0x800163 <Spi_port>
 754:	10 91 64 01 	lds	r17, 0x0164	; 0x800164 <Spi_port+0x1>
 758:	c0 91 69 01 	lds	r28, 0x0169	; 0x800169 <BiColorLed_port>
 75c:	d0 91 6a 01 	lds	r29, 0x016A	; 0x80016a <BiColorLed_port+0x1>
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	39 01       	movw	r6, r18
 766:	00 90 5b 01 	lds	r0, 0x015B	; 0x80015b <Spi_DataReady>
 76a:	02 c0       	rjmp	.+4      	; 0x770 <WriteSpiMaster_Implementation+0x52>
 76c:	66 0c       	add	r6, r6
 76e:	77 1c       	adc	r7, r7
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <WriteSpiMaster_Implementation+0x4e>
 774:	46 2c       	mov	r4, r6
 776:	60 94       	com	r6
 778:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <led_TxRx>
 77c:	02 c0       	rjmp	.+4      	; 0x782 <WriteSpiMaster_Implementation+0x64>
 77e:	22 0f       	add	r18, r18
 780:	33 1f       	adc	r19, r19
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <WriteSpiMaster_Implementation+0x60>
 786:	52 2e       	mov	r5, r18
 788:	72 2e       	mov	r7, r18
 78a:	70 94       	com	r7
 78c:	7c 01       	movw	r14, r24
 78e:	6c 01       	movw	r12, r24
 790:	c6 0e       	add	r12, r22
 792:	d7 1e       	adc	r13, r23
 794:	f7 01       	movw	r30, r14
 796:	81 91       	ld	r24, Z+
 798:	7f 01       	movw	r14, r30
 79a:	f5 01       	movw	r30, r10
 79c:	80 83       	st	Z, r24
 79e:	88 81       	ld	r24, Y
 7a0:	85 29       	or	r24, r5
 7a2:	88 83       	st	Y, r24
 7a4:	f8 01       	movw	r30, r16
 7a6:	80 81       	ld	r24, Z
 7a8:	86 21       	and	r24, r6
 7aa:	80 83       	st	Z, r24
 7ac:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 7b0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 7b4:	0e 94 86 03 	call	0x70c	; 0x70c <QueueIsEmpty>
 7b8:	81 11       	cpse	r24, r1
 7ba:	f8 cf       	rjmp	.-16     	; 0x7ac <WriteSpiMaster_Implementation+0x8e>
 7bc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 7c0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 7c4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <QueuePop>
 7c8:	88 81       	ld	r24, Y
 7ca:	87 21       	and	r24, r7
 7cc:	88 83       	st	Y, r24
 7ce:	f8 01       	movw	r30, r16
 7d0:	80 81       	ld	r24, Z
 7d2:	84 29       	or	r24, r4
 7d4:	80 83       	st	Z, r24
 7d6:	ec 14       	cp	r14, r12
 7d8:	fd 04       	cpc	r15, r13
 7da:	e1 f6       	brne	.-72     	; 0x794 <WriteSpiMaster_Implementation+0x76>
 7dc:	c4 01       	movw	r24, r8
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	df 90       	pop	r13
 7ec:	cf 90       	pop	r12
 7ee:	bf 90       	pop	r11
 7f0:	af 90       	pop	r10
 7f2:	9f 90       	pop	r9
 7f4:	8f 90       	pop	r8
 7f6:	7f 90       	pop	r7
 7f8:	6f 90       	pop	r6
 7fa:	5f 90       	pop	r5
 7fc:	4f 90       	pop	r4
 7fe:	08 95       	ret

00000800 <GetSensorLED>:
 800:	cf 93       	push	r28
 802:	df 93       	push	r29
 804:	00 d0       	rcall	.+0      	; 0x806 <GetSensorLED+0x6>
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 80e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 812:	0e 94 86 03 	call	0x70c	; 0x70c <QueueIsEmpty>
 816:	81 11       	cpse	r24, r1
 818:	f8 cf       	rjmp	.-16     	; 0x80a <GetSensorLED+0xa>
 81a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 81e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 822:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <QueuePop>
 826:	82 30       	cpi	r24, 0x02	; 2
 828:	18 f5       	brcc	.+70     	; 0x870 <GetSensorLED+0x70>
 82a:	81 11       	cpse	r24, r1
 82c:	5b c0       	rjmp	.+182    	; 0x8e4 <GetSensorLED+0xe4>
 82e:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <led_TxRx>
 832:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <BiColorLed_ddr>
 836:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <BiColorLed_ddr+0x1>
 83a:	80 81       	ld	r24, Z
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	02 2e       	mov	r0, r18
 840:	02 c0       	rjmp	.+4      	; 0x846 <GetSensorLED+0x46>
 842:	95 95       	asr	r25
 844:	87 95       	ror	r24
 846:	0a 94       	dec	r0
 848:	e2 f7       	brpl	.-8      	; 0x842 <GetSensorLED+0x42>
 84a:	80 fd       	sbrc	r24, 0
 84c:	30 c0       	rjmp	.+96     	; 0x8ae <GetSensorLED+0xae>
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	19 82       	std	Y+1, r1	; 0x01
 852:	8a 83       	std	Y+2, r24	; 0x02
 854:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <WriteSpiMaster>
 858:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <WriteSpiMaster+0x1>
 85c:	62 e0       	ldi	r22, 0x02	; 2
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	ce 01       	movw	r24, r28
 862:	01 96       	adiw	r24, 0x01	; 1
 864:	09 95       	icall
 866:	0f 90       	pop	r0
 868:	0f 90       	pop	r0
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	1a 82       	std	Y+2, r1	; 0x02
 876:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_port>
 87a:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_port+0x1>
 87e:	40 81       	ld	r20, Z
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	9c 01       	movw	r18, r24
 886:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <led_TxRx>
 88a:	02 c0       	rjmp	.+4      	; 0x890 <GetSensorLED+0x90>
 88c:	22 0f       	add	r18, r18
 88e:	33 1f       	adc	r19, r19
 890:	0a 94       	dec	r0
 892:	e2 f7       	brpl	.-8      	; 0x88c <GetSensorLED+0x8c>
 894:	24 2b       	or	r18, r20
 896:	20 83       	st	Z, r18
 898:	20 81       	ld	r18, Z
 89a:	00 90 67 01 	lds	r0, 0x0167	; 0x800167 <led_Done>
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <GetSensorLED+0xa4>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	0a 94       	dec	r0
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <GetSensorLED+0xa0>
 8a8:	82 2b       	or	r24, r18
 8aa:	80 83       	st	Z, r24
 8ac:	d3 cf       	rjmp	.-90     	; 0x854 <GetSensorLED+0x54>
 8ae:	80 81       	ld	r24, Z
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 2e       	mov	r0, r18
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <GetSensorLED+0xba>
 8b6:	95 95       	asr	r25
 8b8:	87 95       	ror	r24
 8ba:	0a 94       	dec	r0
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <GetSensorLED+0xb6>
 8be:	80 ff       	sbrs	r24, 0
 8c0:	0f c0       	rjmp	.+30     	; 0x8e0 <GetSensorLED+0xe0>
 8c2:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_port>
 8c6:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_port+0x1>
 8ca:	80 81       	ld	r24, Z
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <GetSensorLED+0xd4>
 8d0:	95 95       	asr	r25
 8d2:	87 95       	ror	r24
 8d4:	2a 95       	dec	r18
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <GetSensorLED+0xd0>
 8d8:	80 ff       	sbrs	r24, 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <GetSensorLED+0xe0>
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	b8 cf       	rjmp	.-144    	; 0x850 <GetSensorLED+0x50>
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	b6 cf       	rjmp	.-148    	; 0x850 <GetSensorLED+0x50>
 8e4:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <led_Done>
 8e8:	a4 cf       	rjmp	.-184    	; 0x832 <GetSensorLED+0x32>

000008ea <SensorCfgLis>:
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	00 d0       	rcall	.+0      	; 0x8f0 <SensorCfgLis+0x6>
 8f0:	00 d0       	rcall	.+0      	; 0x8f2 <SensorCfgLis+0x8>
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	8f e0       	ldi	r24, 0x0F	; 15
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	8a 83       	std	Y+2, r24	; 0x02
 8fe:	8b 83       	std	Y+3, r24	; 0x03
 900:	89 ef       	ldi	r24, 0xF9	; 249
 902:	8c 83       	std	Y+4, r24	; 0x04
 904:	ce 01       	movw	r24, r28
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	0e 94 8b 01 	call	0x316	; 0x316 <LisWriteCfg>
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	08 95       	ret

0000091a <LookupSensorCmd>:
 91a:	85 30       	cpi	r24, 0x05	; 5
 91c:	48 f4       	brcc	.+18     	; 0x930 <LookupSensorCmd+0x16>
 91e:	e8 2f       	mov	r30, r24
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	ee 0f       	add	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	e6 5e       	subi	r30, 0xE6	; 230
 928:	fe 4f       	sbci	r31, 0xFE	; 254
 92a:	80 81       	ld	r24, Z
 92c:	91 81       	ldd	r25, Z+1	; 0x01
 92e:	08 95       	ret
 930:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_port>
 934:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_port+0x1>
 938:	40 81       	ld	r20, Z
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	9c 01       	movw	r18, r24
 940:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <led_TxRx>
 944:	02 c0       	rjmp	.+4      	; 0x94a <LookupSensorCmd+0x30>
 946:	22 0f       	add	r18, r18
 948:	33 1f       	adc	r19, r19
 94a:	0a 94       	dec	r0
 94c:	e2 f7       	brpl	.-8      	; 0x946 <LookupSensorCmd+0x2c>
 94e:	24 2b       	or	r18, r20
 950:	20 83       	st	Z, r18
 952:	20 81       	ld	r18, Z
 954:	00 90 67 01 	lds	r0, 0x0167	; 0x800167 <led_Done>
 958:	02 c0       	rjmp	.+4      	; 0x95e <LookupSensorCmd+0x44>
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	0a 94       	dec	r0
 960:	e2 f7       	brpl	.-8      	; 0x95a <LookupSensorCmd+0x40>
 962:	82 2b       	or	r24, r18
 964:	80 83       	st	Z, r24
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	08 95       	ret

0000096c <LedsShowError>:
{
    ClearBit(BiColorLed_port, led_name);
}
inline void BiColorLedRed(uint8_t led_name)
{
    SetBit(BiColorLed_port, led_name);
 96c:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_port>
 970:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_port+0x1>
 974:	40 81       	ld	r20, Z
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	9c 01       	movw	r18, r24
 97c:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <led_TxRx>
 980:	02 c0       	rjmp	.+4      	; 0x986 <LedsShowError+0x1a>
 982:	22 0f       	add	r18, r18
 984:	33 1f       	adc	r19, r19
 986:	0a 94       	dec	r0
 988:	e2 f7       	brpl	.-8      	; 0x982 <LedsShowError+0x16>
 98a:	24 2b       	or	r18, r20
 98c:	20 83       	st	Z, r18
 98e:	20 81       	ld	r18, Z
 990:	00 90 67 01 	lds	r0, 0x0167	; 0x800167 <led_Done>
 994:	02 c0       	rjmp	.+4      	; 0x99a <LedsShowError+0x2e>
 996:	88 0f       	add	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	0a 94       	dec	r0
 99c:	e2 f7       	brpl	.-8      	; 0x996 <LedsShowError+0x2a>
 99e:	82 2b       	or	r24, r18
 9a0:	80 83       	st	Z, r24
 9a2:	08 95       	ret

000009a4 <ReplyCommandInvalid>:
    // first and second LEDs turn red to indicate error
    BiColorLedRed(led_TxRx);
    BiColorLedRed(led_Done);
}
void ReplyCommandInvalid(void)
{
 9a4:	cf 93       	push	r28
 9a6:	df 93       	push	r29
 9a8:	1f 92       	push	r1
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
    uint8_t cmd_invalid[] = {error};
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	89 83       	std	Y+1, r24	; 0x01
    WriteSpiMaster(cmd_invalid, 1);
 9b2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <WriteSpiMaster>
 9b6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <WriteSpiMaster+0x1>
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	ce 01       	movw	r24, r28
 9c0:	01 96       	adiw	r24, 0x01	; 1
 9c2:	09 95       	icall
}
 9c4:	0f 90       	pop	r0
 9c6:	df 91       	pop	r29
 9c8:	cf 91       	pop	r28
 9ca:	08 95       	ret

000009cc <main>:
 9cc:	47 b1       	in	r20, 0x07	; 7
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	9c 01       	movw	r18, r24
 9d4:	00 90 25 01 	lds	r0, 0x0125	; 0x800125 <led_0>
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <main+0x12>
 9da:	22 0f       	add	r18, r18
 9dc:	33 1f       	adc	r19, r19
 9de:	0a 94       	dec	r0
 9e0:	e2 f7       	brpl	.-8      	; 0x9da <main+0xe>
 9e2:	34 2f       	mov	r19, r20
 9e4:	32 2b       	or	r19, r18
 9e6:	37 b9       	out	0x07, r19	; 7
 9e8:	37 b1       	in	r19, 0x07	; 7
 9ea:	00 90 24 01 	lds	r0, 0x0124	; 0x800124 <led_1>
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <main+0x28>
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	0a 94       	dec	r0
 9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <main+0x24>
 9f8:	93 2f       	mov	r25, r19
 9fa:	98 2b       	or	r25, r24
 9fc:	97 b9       	out	0x07, r25	; 7
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 9fe:	98 b1       	in	r25, 0x08	; 8
 a00:	20 95       	com	r18
 a02:	29 23       	and	r18, r25
 a04:	28 b9       	out	0x08, r18	; 8
 a06:	98 b1       	in	r25, 0x08	; 8
 a08:	80 95       	com	r24
 a0a:	89 23       	and	r24, r25
 a0c:	88 b9       	out	0x08, r24	; 8
    // Turn both LEDs green.
    BiColorLedGreen(led_0);
    BiColorLedGreen(led_1);
    // Sensor is a SPI slave.
    // See SPI interrupt routine at `ISR(SPI_STC_vect)`.
    SpiSlaveInit();
 a0e:	0e 94 7a 00 	call	0xf4	; 0xf4 <SpiSlaveInit>
    // Create a FIFO buffer to queue bytes incoming over SPI.
    SpiFifo = QueueInit(spi_rx_buffer, max_length_of_queue);
 a12:	65 e0       	ldi	r22, 0x05	; 5
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	88 e7       	ldi	r24, 0x78	; 120
 a18:	91 e0       	ldi	r25, 0x01	; 1
 a1a:	0e 94 30 03 	call	0x660	; 0x660 <QueueInit>
 a1e:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <SpiFifo+0x1>
 a22:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <SpiFifo>
    // Use UART to talk to ADC with SPI interface.
    UartSpiInit();
 a26:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UartSpiInit>
    // Power up the linear array. Start 50kHz clock.
    LisInit();
 a2a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LisInit>
    // The following line of code should *never* be called.
    LedsShowError();
}
void Get_commands_from_SpiMaster(void)
{
    while (QueueIsEmpty(SpiFifo)); // idle until a command is received
 a2e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 a32:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 a36:	0e 94 86 03 	call	0x70c	; 0x70c <QueueIsEmpty>
 a3a:	81 11       	cpse	r24, r1
 a3c:	f8 cf       	rjmp	.-16     	; 0xa2e <main+0x62>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 a3e:	41 9a       	sbi	0x08, 1	; 8
    // Queue is no longer empty once a command byte is received over SPI.
    // The SPI ISR pushes the command byte onto the SPI Rx Queue.
    BiColorLedRed(led_Done); // Indicate command execution is not done.
    // Pop the command and execute it.
    SensorCmd* SensorCmdFn = LookupSensorCmd(QueuePop(SpiFifo));
 a40:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 a44:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 a48:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <QueuePop>
 a4c:	0e 94 8d 04 	call	0x91a	; 0x91a <LookupSensorCmd>
    if (SensorCmdFn == NULL) // Command is invalid.
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	21 f0       	breq	.+8      	; 0xa5c <main+0x90>
        ReplyCommandInvalid(); // tell SpiMaster command is invalid
        LedsShowError(); // indicate error on LEDs: invalid command
    }
    else // Command is valid.
    {
        SensorCmdFn(); // execute command
 a54:	fc 01       	movw	r30, r24
 a56:	09 95       	icall
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 a58:	41 98       	cbi	0x08, 1	; 8
 a5a:	e9 cf       	rjmp	.-46     	; 0xa2e <main+0x62>
    BiColorLedRed(led_Done); // Indicate command execution is not done.
    // Pop the command and execute it.
    SensorCmd* SensorCmdFn = LookupSensorCmd(QueuePop(SpiFifo));
    if (SensorCmdFn == NULL) // Command is invalid.
    {
        ReplyCommandInvalid(); // tell SpiMaster command is invalid
 a5c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <ReplyCommandInvalid>
        LedsShowError(); // indicate error on LEDs: invalid command
 a60:	0e 94 b6 04 	call	0x96c	; 0x96c <LedsShowError>
 a64:	e4 cf       	rjmp	.-56     	; 0xa2e <main+0x62>

00000a66 <__vector_17>:
        SensorCmdFn(); // execute command
        BiColorLedGreen(led_Done); // Indicate command execution is done.
    }
}
ISR(SPI_STC_vect)
{
 a66:	1f 92       	push	r1
 a68:	0f 92       	push	r0
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	0f 92       	push	r0
 a6e:	11 24       	eor	r1, r1
 a70:	2f 93       	push	r18
 a72:	3f 93       	push	r19
 a74:	4f 93       	push	r20
 a76:	5f 93       	push	r21
 a78:	6f 93       	push	r22
 a7a:	7f 93       	push	r23
 a7c:	8f 93       	push	r24
 a7e:	9f 93       	push	r25
 a80:	af 93       	push	r26
 a82:	bf 93       	push	r27
 a84:	ef 93       	push	r30
 a86:	ff 93       	push	r31
    // Program counter jumped from "client" code.
    // ISR is the same routine, whether "client" is in a SPI read or a SPI write.

    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) LedsShowError(); // TODO: add error handler
 a88:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 a8c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 a90:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <QueueIsFull>
 a94:	81 11       	cpse	r24, r1
 a96:	18 c0       	rjmp	.+48     	; 0xac8 <__vector_17+0x62>
    else
    {
        QueuePush(SpiFifo, *Spi_spdr); // "client" must pop data from SpiFifo queue
 a98:	6e b5       	in	r22, 0x2e	; 46
 a9a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <SpiFifo>
 a9e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <SpiFifo+0x1>
 aa2:	0e 94 3c 03 	call	0x678	; 0x678 <QueuePush>
    // so that it does not send the byte before the Slave has a chance to see
    // the queue is empty. The Slave waits for QueueIsEmpty to be true after
    // writing each byte to the Master (to avoid overwriting SPDR during a
    // transmission). So the Slave would hang if it does not get a chance to see
    // the queue is empty after the final byte is transmitted.
}
 aa6:	ff 91       	pop	r31
 aa8:	ef 91       	pop	r30
 aaa:	bf 91       	pop	r27
 aac:	af 91       	pop	r26
 aae:	9f 91       	pop	r25
 ab0:	8f 91       	pop	r24
 ab2:	7f 91       	pop	r23
 ab4:	6f 91       	pop	r22
 ab6:	5f 91       	pop	r21
 ab8:	4f 91       	pop	r20
 aba:	3f 91       	pop	r19
 abc:	2f 91       	pop	r18
 abe:	0f 90       	pop	r0
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	0f 90       	pop	r0
 ac4:	1f 90       	pop	r1
 ac6:	18 95       	reti
    // Program counter jumped from "client" code.
    // ISR is the same routine, whether "client" is in a SPI read or a SPI write.

    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) LedsShowError(); // TODO: add error handler
 ac8:	0e 94 b6 04 	call	0x96c	; 0x96c <LedsShowError>
 acc:	ec cf       	rjmp	.-40     	; 0xaa6 <__vector_17+0x40>

00000ace <GlobalInterruptEnable_Implementation>:
#include <avr/interrupt.h>      // defines macros `sei()` and `cli()`
#include <util/delay_basic.h>   // defines microsecond delay loop

// sei()
static void GlobalInterruptEnable_Implementation(void)
{ sei(); }
 ace:	78 94       	sei
 ad0:	08 95       	ret

00000ad2 <GlobalInterruptDisable_Implementation>:
void (*GlobalInterruptEnable)(void) = GlobalInterruptEnable_Implementation;

// cli()
static void GlobalInterruptDisable_Implementation(void)
{ cli(); }
 ad2:	f8 94       	cli
 ad4:	08 95       	ret

00000ad6 <_exit>:
 ad6:	f8 94       	cli

00000ad8 <__stop_program>:
 ad8:	ff cf       	rjmp	.-2      	; 0xad8 <__stop_program>
