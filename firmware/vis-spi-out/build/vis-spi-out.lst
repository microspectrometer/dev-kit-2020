
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000009c2  00000a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800176  00800176  00000acc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f1b  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c5  00000000  00000000  00004d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152e  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  0000762c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001283  00000000  00000000  00007d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001980  00000000  00000000  00008fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000a92b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 04 	call	0x914	; 0x914 <main>
  9e:	0c 94 df 04 	jmp	0x9be	; 0x9be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
void (*SpiSlaveSignalDataIsReady)(void) = SpiSlaveSignalDataIsReady_Implementation;

uint8_t SpiSlaveRead(void)
{
    while( !SpiTransferIsDone() );
    return ReadSpiDataRegister();
  a6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
  aa:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
  ae:	09 95       	icall
  b0:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
  b4:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
  b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
  ba:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <Spi_spsr>
  be:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <Spi_spsr+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	08 95       	ret

000000c6 <DisableSpi_Implementation>:
  c6:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <Spi_spcr>
  ca:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <Spi_spcr+0x1>
  ce:	20 81       	ld	r18, Z
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 90 63 01 	lds	r0, 0x0163	; 0x800163 <Spi_Enable>
  d8:	02 c0       	rjmp	.+4      	; 0xde <DisableSpi_Implementation+0x18>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <DisableSpi_Implementation+0x14>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <EnableSpi_Implementation>:
  ea:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <Spi_spcr>
  ee:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <Spi_spcr+0x1>
  f2:	20 81       	ld	r18, Z
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	00 90 63 01 	lds	r0, 0x0163	; 0x800163 <Spi_Enable>
  fc:	02 c0       	rjmp	.+4      	; 0x102 <EnableSpi_Implementation+0x18>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <EnableSpi_Implementation+0x14>
 106:	82 2b       	or	r24, r18
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <SpiTransferIsDone_Implementation>:
 10c:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <Spi_spsr>
 110:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <Spi_spsr+0x1>
 114:	80 81       	ld	r24, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Spi_InterruptFlag>
 11e:	02 c0       	rjmp	.+4      	; 0x124 <SpiTransferIsDone_Implementation+0x18>
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <SpiTransferIsDone_Implementation+0x14>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	28 23       	and	r18, r24
 12c:	39 23       	and	r19, r25
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	23 2b       	or	r18, r19
 132:	09 f4       	brne	.+2      	; 0x136 <SpiTransferIsDone_Implementation+0x2a>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret

00000138 <ReadSpiDataRegister_Implementation>:
 138:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <Spi_spdr>
 13c:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <Spi_spdr+0x1>
 140:	80 81       	ld	r24, Z
 142:	08 95       	ret

00000144 <SpiSlaveSignalDataIsReady_Implementation>:
 144:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_port>
 148:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_port+0x1>
 14c:	20 81       	ld	r18, Z
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	00 90 64 01 	lds	r0, 0x0164	; 0x800164 <Spi_Miso>
 156:	02 c0       	rjmp	.+4      	; 0x15c <SpiSlaveSignalDataIsReady_Implementation+0x18>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <SpiSlaveSignalDataIsReady_Implementation+0x14>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	80 83       	st	Z, r24
 166:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 16a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 16e:	09 95       	icall
 170:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 174:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 178:	09 94       	ijmp

0000017a <WriteSpiDataRegister_Implementation>:
 17a:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <Spi_spdr>
 17e:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <Spi_spdr+0x1>
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <SpiSlaveInit>:
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Spi_ddr>
 192:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Spi_ddr+0x1>
 196:	80 81       	ld	r24, Z
 198:	c1 e0       	ldi	r28, 0x01	; 1
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	8e 01       	movw	r16, r28
 19e:	00 90 64 01 	lds	r0, 0x0164	; 0x800164 <Spi_Miso>
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <SpiSlaveInit+0x22>
 1a4:	00 0f       	add	r16, r16
 1a6:	11 1f       	adc	r17, r17
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <SpiSlaveInit+0x1e>
 1ac:	80 2b       	or	r24, r16
 1ae:	80 83       	st	Z, r24
 1b0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 1b4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 1b8:	09 95       	icall
 1ba:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Spi_port>
 1be:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Spi_port+0x1>
 1c2:	80 81       	ld	r24, Z
 1c4:	00 95       	com	r16
 1c6:	08 23       	and	r16, r24
 1c8:	00 83       	st	Z, r16
 1ca:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <GlobalInterruptDisable>
 1ce:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <GlobalInterruptDisable+0x1>
 1d2:	09 95       	icall
 1d4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 1d8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
 1dc:	09 95       	icall
 1de:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <Spi_spcr>
 1e2:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <Spi_spcr+0x1>
 1e6:	80 81       	ld	r24, Z
 1e8:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Spi_InterruptEnable>
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <SpiSlaveInit+0x6c>
 1ee:	cc 0f       	add	r28, r28
 1f0:	dd 1f       	adc	r29, r29
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <SpiSlaveInit+0x68>
 1f6:	c8 2b       	or	r28, r24
 1f8:	c0 83       	st	Z, r28
 1fa:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <GlobalInterruptEnable>
 1fe:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <GlobalInterruptEnable+0x1>
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	09 94       	ijmp

0000020c <SpiSlaveSendBytes>:
}
void SpiSlaveSendBytes(uint8_t const *bytes, uint16_t const nbytes)
{
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 218:	61 15       	cp	r22, r1
 21a:	71 05       	cpc	r23, r1
 21c:	f9 f0       	breq	.+62     	; 0x25c <SpiSlaveSendBytes+0x50>
 21e:	e0 90 65 01 	lds	r14, 0x0165	; 0x800165 <Spi_spdr>
 222:	f0 90 66 01 	lds	r15, 0x0166	; 0x800166 <Spi_spdr+0x1>
 226:	ec 01       	movw	r28, r24
 228:	8c 01       	movw	r16, r24
 22a:	06 0f       	add	r16, r22
 22c:	17 1f       	adc	r17, r23
    {
        /* *Spi_spdr = bytes[byte_index]; */
        WriteSpiDataRegister(bytes[byte_index]);
 22e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 232:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 236:	89 91       	ld	r24, Y+
 238:	09 95       	icall
        SpiSlaveSignalDataIsReady();
 23a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 23e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 242:	09 95       	icall
        while ( !SpiTransferIsDone() );
 244:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 248:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 24c:	09 95       	icall
 24e:	88 23       	and	r24, r24
 250:	c9 f3       	breq	.-14     	; 0x244 <SpiSlaveSendBytes+0x38>
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 252:	f7 01       	movw	r30, r14
 254:	80 81       	ld	r24, Z
    return ReadSpiDataRegister();
}
void SpiSlaveSendBytes(uint8_t const *bytes, uint16_t const nbytes)
{
    uint16_t byte_index;
    for (byte_index = 0; byte_index < nbytes; byte_index++)
 256:	c0 17       	cp	r28, r16
 258:	d1 07       	cpc	r29, r17
 25a:	49 f7       	brne	.-46     	; 0x22e <SpiSlaveSendBytes+0x22>
    // The SPI master waits for MISO to go low after every read.
    // This gaurantees the next byte of data is ready.
    // The SPI master does not have to release SlaveSelect, but it can.
    // SlaveSelect being low should not impact the slave's ability to disable
    // SPI and pull MISO low.
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret

0000026a <StartAdcReadout>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 26a:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <UartSpi_port>
 26e:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <UartSpi_port+0x1>
 272:	20 81       	ld	r18, Z
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	00 90 56 01 	lds	r0, 0x0156	; 0x800156 <UartSpi_AdcConv>
 27c:	02 c0       	rjmp	.+4      	; 0x282 <StartAdcReadout+0x18>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <StartAdcReadout+0x14>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	80 83       	st	Z, r24
 28c:	08 95       	ret

0000028e <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 29a:	00 91 57 01 	lds	r16, 0x0157	; 0x800157 <UartSpi_br>
 29e:	10 91 58 01 	lds	r17, 0x0158	; 0x800158 <UartSpi_br+0x1>
 2a2:	f8 01       	movw	r30, r16
 2a4:	11 82       	std	Z+1, r1	; 0x01
 2a6:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 2a8:	e0 90 5f 01 	lds	r14, 0x015F	; 0x80015f <UartSpi_ddr>
 2ac:	f0 90 60 01 	lds	r15, 0x0160	; 0x800160 <UartSpi_ddr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2b0:	f7 01       	movw	r30, r14
 2b2:	20 81       	ld	r18, Z
 2b4:	c1 e0       	ldi	r28, 0x01	; 1
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 2b8:	ce 01       	movw	r24, r28
 2ba:	00 90 55 01 	lds	r0, 0x0155	; 0x800155 <UartSpi_Sck>
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <UartSpiInit+0x36>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <UartSpiInit+0x32>
 2c8:	82 2b       	or	r24, r18
 2ca:	80 83       	st	Z, r24
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 2cc:	0e 94 35 01 	call	0x26a	; 0x26a <StartAdcReadout>
 2d0:	f7 01       	movw	r30, r14
 2d2:	20 81       	ld	r18, Z
 2d4:	ce 01       	movw	r24, r28
 2d6:	00 90 56 01 	lds	r0, 0x0156	; 0x800156 <UartSpi_AdcConv>
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <UartSpiInit+0x52>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <UartSpiInit+0x4e>
 2e4:	82 2b       	or	r24, r18
 2e6:	80 83       	st	Z, r24
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 2e8:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <UartSpi_csrc>
 2ec:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <UartSpi_csrc+0x1>
 2f0:	20 81       	ld	r18, Z
 2f2:	ce 01       	movw	r24, r28
 2f4:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <UartSpi_ModeSelect0>
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <UartSpiInit+0x70>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <UartSpiInit+0x6c>
 302:	82 2b       	or	r24, r18
 304:	80 83       	st	Z, r24
 306:	20 81       	ld	r18, Z
 308:	ce 01       	movw	r24, r28
 30a:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <UartSpi_ModeSelect1>
 30e:	02 c0       	rjmp	.+4      	; 0x314 <UartSpiInit+0x86>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <UartSpiInit+0x82>
 318:	82 2b       	or	r24, r18
 31a:	80 83       	st	Z, r24
 31c:	20 81       	ld	r18, Z
 31e:	ce 01       	movw	r24, r28
 320:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <UartSpi_ClockPolarity>
 324:	02 c0       	rjmp	.+4      	; 0x32a <UartSpiInit+0x9c>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <UartSpiInit+0x98>
 32e:	82 2b       	or	r24, r18
 330:	80 83       	st	Z, r24
 332:	20 81       	ld	r18, Z
 334:	ce 01       	movw	r24, r28
 336:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <UartSpi_ClockPhase>
 33a:	02 c0       	rjmp	.+4      	; 0x340 <UartSpiInit+0xb2>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <UartSpiInit+0xae>
 344:	82 2b       	or	r24, r18
 346:	80 83       	st	Z, r24
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 348:	90 81       	ld	r25, Z
 34a:	9e 01       	movw	r18, r28
 34c:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <UartSpi_DataOrder>
 350:	02 c0       	rjmp	.+4      	; 0x356 <UartSpiInit+0xc8>
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	0a 94       	dec	r0
 358:	e2 f7       	brpl	.-8      	; 0x352 <UartSpiInit+0xc4>
 35a:	82 2f       	mov	r24, r18
 35c:	80 95       	com	r24
 35e:	89 23       	and	r24, r25
 360:	80 83       	st	Z, r24
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 362:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <UartSpi_csrb>
 366:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <UartSpi_csrb+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 36a:	20 81       	ld	r18, Z
 36c:	ce 01       	movw	r24, r28
 36e:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <UartSpi_RxEnable>
 372:	02 c0       	rjmp	.+4      	; 0x378 <UartSpiInit+0xea>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <UartSpiInit+0xe6>
 37c:	82 2b       	or	r24, r18
 37e:	80 83       	st	Z, r24
 380:	80 81       	ld	r24, Z
 382:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <UartSpi_TxEnable>
 386:	02 c0       	rjmp	.+4      	; 0x38c <UartSpiInit+0xfe>
 388:	cc 0f       	add	r28, r28
 38a:	dd 1f       	adc	r29, r29
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <UartSpiInit+0xfa>
 390:	c8 2b       	or	r28, r24
 392:	c0 83       	st	Z, r28
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 394:	f8 01       	movw	r30, r16
 396:	11 82       	std	Z+1, r1	; 0x01
 398:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	08 95       	ret

000003a8 <LisRunClkAt50kHz_Implementation>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 3a8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <PwmResetCounterAtTop>
 3ac:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <PwmResetCounterAtTop+0x1>
 3b0:	09 95       	icall
 3b2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <PwmTopIsOcr0a>
 3b6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <PwmTopIsOcr0a+0x1>
 3ba:	09 95       	icall
 3bc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <PwmClkIsCpuClk>
 3c0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <PwmClkIsCpuClk+0x1>
 3c4:	09 95       	icall
 3c6:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <Lis_clktop>
 3ca:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <Lis_clktop+0x1>
 3ce:	88 ec       	ldi	r24, 0xC8	; 200
 3d0:	80 83       	st	Z, r24
 3d2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Lis_clkth>
 3d6:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Lis_clkth+0x1>
 3da:	20 81       	ld	r18, Z
 3dc:	26 95       	lsr	r18
 3de:	fc 01       	movw	r30, r24
 3e0:	20 83       	st	Z, r18
 3e2:	08 95       	ret

000003e4 <LisClkOn_Implementation>:
 3e4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmEnableOutputSetUntilMatch>
 3e8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmEnableOutputSetUntilMatch+0x1>
 3ec:	09 94       	ijmp

000003ee <LisWriteCfg>:
 3ee:	4f 92       	push	r4
 3f0:	5f 92       	push	r5
 3f2:	6f 92       	push	r6
 3f4:	7f 92       	push	r7
 3f6:	8f 92       	push	r8
 3f8:	9f 92       	push	r9
 3fa:	af 92       	push	r10
 3fc:	bf 92       	push	r11
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	4c 01       	movw	r8, r24
 410:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Pwm_tifr0>
 414:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Pwm_tifr0+0x1>
 418:	80 81       	ld	r24, Z
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Pwm_Ocf0b>
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	f2 2e       	mov	r15, r18
 42e:	82 2b       	or	r24, r18
 430:	80 83       	st	Z, r24
 432:	80 81       	ld	r24, Z
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	82 23       	and	r24, r18
 438:	93 23       	and	r25, r19
 43a:	89 2b       	or	r24, r25
 43c:	d1 f3       	breq	.-12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43e:	80 81       	ld	r24, Z
 440:	82 2b       	or	r24, r18
 442:	80 83       	st	Z, r24
 444:	a0 90 46 01 	lds	r10, 0x0146	; 0x800146 <Lis_port2>
 448:	b0 90 47 01 	lds	r11, 0x0147	; 0x800147 <Lis_port2+0x1>
 44c:	d5 01       	movw	r26, r10
 44e:	4c 91       	ld	r20, X
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	2c 01       	movw	r4, r24
 456:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Lis_PixSelect>
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45c:	44 0c       	add	r4, r4
 45e:	55 1c       	adc	r5, r5
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	44 29       	or	r20, r4
 466:	4c 93       	st	X, r20
 468:	ac 01       	movw	r20, r24
 46a:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Pwm_Ocf0a>
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	44 0f       	add	r20, r20
 472:	55 1f       	adc	r21, r21
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 478:	e4 2e       	mov	r14, r20
 47a:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <Lis_port1>
 47e:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <Lis_port1+0x1>
 482:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Lis_Rst>
 486:	02 c0       	rjmp	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	c8 2e       	mov	r12, r24
 492:	d8 2e       	mov	r13, r24
 494:	d0 94       	com	r13
 496:	84 01       	movw	r16, r8
 498:	0c 5f       	subi	r16, 0xFC	; 252
 49a:	1f 4f       	sbci	r17, 0xFF	; 255
 49c:	34 01       	movw	r6, r8
 49e:	cf ef       	ldi	r28, 0xFF	; 255
 4a0:	6c 1a       	sub	r6, r28
 4a2:	7c 0a       	sbc	r7, r28
 4a4:	e8 01       	movw	r28, r16
 4a6:	8a 91       	ld	r24, -Y
 4a8:	8e 01       	movw	r16, r28
 4aa:	c8 2f       	mov	r28, r24
 4ac:	d0 e0       	ldi	r29, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	ce 01       	movw	r24, r28
 4b4:	06 2e       	mov	r0, r22
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b8:	95 95       	asr	r25
 4ba:	87 95       	ror	r24
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4c0:	80 ff       	sbrs	r24, 0
 4c2:	6b c0       	rjmp	.+214    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 4c4:	8c 91       	ld	r24, X
 4c6:	8c 29       	or	r24, r12
 4c8:	8c 93       	st	X, r24
 4ca:	80 81       	ld	r24, Z
 4cc:	8e 29       	or	r24, r14
 4ce:	80 83       	st	Z, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	84 23       	and	r24, r20
 4d6:	95 23       	and	r25, r21
 4d8:	89 2b       	or	r24, r25
 4da:	d1 f3       	breq	.-12     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4dc:	80 81       	ld	r24, Z
 4de:	8e 29       	or	r24, r14
 4e0:	80 83       	st	Z, r24
 4e2:	80 81       	ld	r24, Z
 4e4:	8f 29       	or	r24, r15
 4e6:	80 83       	st	Z, r24
 4e8:	80 81       	ld	r24, Z
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	82 23       	and	r24, r18
 4ee:	93 23       	and	r25, r19
 4f0:	89 2b       	or	r24, r25
 4f2:	d1 f3       	breq	.-12     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4f4:	80 81       	ld	r24, Z
 4f6:	8f 29       	or	r24, r15
 4f8:	80 83       	st	Z, r24
 4fa:	6f 5f       	subi	r22, 0xFF	; 255
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	68 30       	cpi	r22, 0x08	; 8
 500:	71 05       	cpc	r23, r1
 502:	b9 f6       	brne	.-82     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 504:	60 16       	cp	r6, r16
 506:	71 06       	cpc	r7, r17
 508:	69 f6       	brne	.-102    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 50a:	e4 01       	movw	r28, r8
 50c:	88 81       	ld	r24, Y
 50e:	c8 2f       	mov	r28, r24
 510:	d0 e0       	ldi	r29, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	ce 01       	movw	r24, r28
 518:	06 2e       	mov	r0, r22
 51a:	02 c0       	rjmp	.+4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51c:	95 95       	asr	r25
 51e:	87 95       	ror	r24
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 524:	80 ff       	sbrs	r24, 0
 526:	3d c0       	rjmp	.+122    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 528:	8c 91       	ld	r24, X
 52a:	8c 29       	or	r24, r12
 52c:	8c 93       	st	X, r24
 52e:	80 81       	ld	r24, Z
 530:	8e 29       	or	r24, r14
 532:	80 83       	st	Z, r24
 534:	80 81       	ld	r24, Z
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	84 23       	and	r24, r20
 53a:	95 23       	and	r25, r21
 53c:	89 2b       	or	r24, r25
 53e:	d1 f3       	breq	.-12     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 540:	80 81       	ld	r24, Z
 542:	8e 29       	or	r24, r14
 544:	80 83       	st	Z, r24
 546:	80 81       	ld	r24, Z
 548:	8f 29       	or	r24, r15
 54a:	80 83       	st	Z, r24
 54c:	80 81       	ld	r24, Z
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	82 23       	and	r24, r18
 552:	93 23       	and	r25, r19
 554:	89 2b       	or	r24, r25
 556:	d1 f3       	breq	.-12     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 558:	80 81       	ld	r24, Z
 55a:	8f 29       	or	r24, r15
 55c:	80 83       	st	Z, r24
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	64 30       	cpi	r22, 0x04	; 4
 564:	71 05       	cpc	r23, r1
 566:	b9 f6       	brne	.-82     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 568:	8c 91       	ld	r24, X
 56a:	d8 22       	and	r13, r24
 56c:	dc 92       	st	X, r13
 56e:	f5 01       	movw	r30, r10
 570:	80 81       	ld	r24, Z
 572:	40 94       	com	r4
 574:	48 22       	and	r4, r24
 576:	40 82       	st	Z, r4
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	df 90       	pop	r13
 586:	cf 90       	pop	r12
 588:	bf 90       	pop	r11
 58a:	af 90       	pop	r10
 58c:	9f 90       	pop	r9
 58e:	8f 90       	pop	r8
 590:	7f 90       	pop	r7
 592:	6f 90       	pop	r6
 594:	5f 90       	pop	r5
 596:	4f 90       	pop	r4
 598:	08 95       	ret
 59a:	8c 91       	ld	r24, X
 59c:	8d 21       	and	r24, r13
 59e:	8c 93       	st	X, r24
 5a0:	94 cf       	rjmp	.-216    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 5a2:	8c 91       	ld	r24, X
 5a4:	8d 21       	and	r24, r13
 5a6:	8c 93       	st	X, r24
 5a8:	c2 cf       	rjmp	.-124    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>

000005aa <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 5aa:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Lis_ddr2>
 5ae:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Lis_ddr2+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5b2:	40 81       	ld	r20, Z
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	9c 01       	movw	r18, r24
 5ba:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Lis_PixSelect>
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <LisInit+0x1a>
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
 5c4:	0a 94       	dec	r0
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <LisInit+0x16>
 5c8:	34 2f       	mov	r19, r20
 5ca:	32 2b       	or	r19, r18
 5cc:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 5ce:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <Lis_port2>
 5d2:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <Lis_port2+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 5d6:	30 81       	ld	r19, Z
 5d8:	20 95       	com	r18
 5da:	23 23       	and	r18, r19
 5dc:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 5de:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Lis_ddr1>
 5e2:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Lis_ddr1+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5e6:	40 81       	ld	r20, Z
 5e8:	9c 01       	movw	r18, r24
 5ea:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <Lis_Clk>
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <LisInit+0x4a>
 5f0:	22 0f       	add	r18, r18
 5f2:	33 1f       	adc	r19, r19
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <LisInit+0x46>
 5f8:	24 2b       	or	r18, r20
 5fa:	20 83       	st	Z, r18
 5fc:	40 81       	ld	r20, Z
 5fe:	9c 01       	movw	r18, r24
 600:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Lis_Rst>
 604:	02 c0       	rjmp	.+4      	; 0x60a <LisInit+0x60>
 606:	22 0f       	add	r18, r18
 608:	33 1f       	adc	r19, r19
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <LisInit+0x5c>
 60e:	34 2f       	mov	r19, r20
 610:	32 2b       	or	r19, r18
 612:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 614:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <Lis_port1>
 618:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <Lis_port1+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 61c:	3c 91       	ld	r19, X
 61e:	20 95       	com	r18
 620:	23 23       	and	r18, r19
 622:	2c 93       	st	X, r18
 624:	20 81       	ld	r18, Z
 626:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <Lis_Sync>
 62a:	02 c0       	rjmp	.+4      	; 0x630 <LisInit+0x86>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <LisInit+0x82>
 634:	80 95       	com	r24
 636:	82 23       	and	r24, r18
 638:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 63a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
 63e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
 642:	09 95       	icall
    LisClkOn();
 644:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
 648:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
 64c:	09 94       	ijmp

0000064e <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 64e:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Pwm_tccr0a>
 652:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Pwm_tccr0a+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 656:	40 81       	ld	r20, Z
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9c 01       	movw	r18, r24
 65e:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Pwm_Wgm00>
 662:	02 c0       	rjmp	.+4      	; 0x668 <ResetCounterAtTop+0x1a>
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	0a 94       	dec	r0
 66a:	e2 f7       	brpl	.-8      	; 0x664 <ResetCounterAtTop+0x16>
 66c:	24 2b       	or	r18, r20
 66e:	20 83       	st	Z, r18
 670:	20 81       	ld	r18, Z
 672:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Pwm_Wgm01>
 676:	02 c0       	rjmp	.+4      	; 0x67c <ResetCounterAtTop+0x2e>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <ResetCounterAtTop+0x2a>
 680:	82 2b       	or	r24, r18
 682:	80 83       	st	Z, r24
 684:	08 95       	ret

00000686 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 686:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Pwm_tccr0b>
 68a:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Pwm_tccr0b+0x1>
 68e:	20 81       	ld	r18, Z
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Pwm_Wgm02>
 698:	02 c0       	rjmp	.+4      	; 0x69e <TopIsOcr0a+0x18>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	0a 94       	dec	r0
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <TopIsOcr0a+0x14>
 6a2:	82 2b       	or	r24, r18
 6a4:	80 83       	st	Z, r24
 6a6:	08 95       	ret

000006a8 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 6a8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Pwm_tccr0b>
 6ac:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Pwm_tccr0b+0x1>
 6b0:	40 81       	ld	r20, Z
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	9c 01       	movw	r18, r24
 6b8:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Pwm_Cs00>
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <PwmClkIsCpuClk_Implementation+0x1a>
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	0a 94       	dec	r0
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <PwmClkIsCpuClk_Implementation+0x16>
 6c6:	24 2b       	or	r18, r20
 6c8:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 6ca:	30 81       	ld	r19, Z
 6cc:	ac 01       	movw	r20, r24
 6ce:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Pwm_Cs01>
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <PwmClkIsCpuClk_Implementation+0x30>
 6d4:	44 0f       	add	r20, r20
 6d6:	55 1f       	adc	r21, r21
 6d8:	0a 94       	dec	r0
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <PwmClkIsCpuClk_Implementation+0x2c>
 6dc:	24 2f       	mov	r18, r20
 6de:	20 95       	com	r18
 6e0:	23 23       	and	r18, r19
 6e2:	20 83       	st	Z, r18
 6e4:	20 81       	ld	r18, Z
 6e6:	00 90 32 01 	lds	r0, 0x0132	; 0x800132 <Pwm_Cs02>
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <PwmClkIsCpuClk_Implementation+0x48>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <PwmClkIsCpuClk_Implementation+0x44>
 6f4:	80 95       	com	r24
 6f6:	82 23       	and	r24, r18
 6f8:	80 83       	st	Z, r24
 6fa:	08 95       	ret

000006fc <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 6fc:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Pwm_tccr0a>
 700:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Pwm_tccr0a+0x1>
 704:	30 81       	ld	r19, Z
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	ac 01       	movw	r20, r24
 70c:	00 90 31 01 	lds	r0, 0x0131	; 0x800131 <Pwm_Com0b0>
 710:	02 c0       	rjmp	.+4      	; 0x716 <EnableOutputSetUntilMatch+0x1a>
 712:	44 0f       	add	r20, r20
 714:	55 1f       	adc	r21, r21
 716:	0a 94       	dec	r0
 718:	e2 f7       	brpl	.-8      	; 0x712 <EnableOutputSetUntilMatch+0x16>
 71a:	24 2f       	mov	r18, r20
 71c:	20 95       	com	r18
 71e:	23 23       	and	r18, r19
 720:	20 83       	st	Z, r18
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 722:	20 81       	ld	r18, Z
 724:	00 90 30 01 	lds	r0, 0x0130	; 0x800130 <Pwm_Com0b1>
 728:	02 c0       	rjmp	.+4      	; 0x72e <EnableOutputSetUntilMatch+0x32>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	0a 94       	dec	r0
 730:	e2 f7       	brpl	.-8      	; 0x72a <EnableOutputSetUntilMatch+0x2e>
 732:	82 2b       	or	r24, r18
 734:	80 83       	st	Z, r24
 736:	08 95       	ret

00000738 <NullCommand>:
void SpiSlaveWrite_StatusOk(sensor_cmd_key valid_cmd)
{
                             // | nbytes  | data           |
    uint8_t const StatusOk[] = {0x00, 0x02, 0x00, valid_cmd };
    SpiSlaveSendBytes(StatusOk,4);
}
 738:	08 95       	ret

0000073a <GetSensorLED>:
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	00 d0       	rcall	.+0      	; 0x740 <GetSensorLED+0x6>
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 748:	88 23       	and	r24, r24
 74a:	e1 f3       	breq	.-8      	; 0x744 <GetSensorLED+0xa>
 74c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <SpiData>
 750:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
 754:	82 30       	cpi	r24, 0x02	; 2
 756:	18 f5       	brcc	.+70     	; 0x79e <GetSensorLED+0x64>
 758:	81 11       	cpse	r24, r1
 75a:	5b c0       	rjmp	.+182    	; 0x812 <GetSensorLED+0xd8>
 75c:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <led_TxRx>
 760:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <BiColorLed_ddr>
 764:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <BiColorLed_ddr+0x1>
 768:	80 81       	ld	r24, Z
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	02 2e       	mov	r0, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <GetSensorLED+0x3a>
 770:	95 95       	asr	r25
 772:	87 95       	ror	r24
 774:	0a 94       	dec	r0
 776:	e2 f7       	brpl	.-8      	; 0x770 <GetSensorLED+0x36>
 778:	80 fd       	sbrc	r24, 0
 77a:	30 c0       	rjmp	.+96     	; 0x7dc <GetSensorLED+0xa2>
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	19 82       	std	Y+1, r1	; 0x01
 780:	8a 83       	std	Y+2, r24	; 0x02
 782:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <WriteSpiMaster>
 786:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <WriteSpiMaster+0x1>
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	ce 01       	movw	r24, r28
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	09 95       	icall
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	89 83       	std	Y+1, r24	; 0x01
 7a2:	1a 82       	std	Y+2, r1	; 0x02
 7a4:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <BiColorLed_port>
 7a8:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <BiColorLed_port+0x1>
 7ac:	40 81       	ld	r20, Z
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	9c 01       	movw	r18, r24
 7b4:	00 90 70 01 	lds	r0, 0x0170	; 0x800170 <led_TxRx>
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <GetSensorLED+0x84>
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	0a 94       	dec	r0
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <GetSensorLED+0x80>
 7c2:	24 2b       	or	r18, r20
 7c4:	20 83       	st	Z, r18
 7c6:	20 81       	ld	r18, Z
 7c8:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <led_Done>
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <GetSensorLED+0x98>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	0a 94       	dec	r0
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <GetSensorLED+0x94>
 7d6:	82 2b       	or	r24, r18
 7d8:	80 83       	st	Z, r24
 7da:	d3 cf       	rjmp	.-90     	; 0x782 <GetSensorLED+0x48>
 7dc:	80 81       	ld	r24, Z
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 2e       	mov	r0, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <GetSensorLED+0xae>
 7e4:	95 95       	asr	r25
 7e6:	87 95       	ror	r24
 7e8:	0a 94       	dec	r0
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <GetSensorLED+0xaa>
 7ec:	80 ff       	sbrs	r24, 0
 7ee:	0f c0       	rjmp	.+30     	; 0x80e <GetSensorLED+0xd4>
 7f0:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <BiColorLed_port>
 7f4:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <BiColorLed_port+0x1>
 7f8:	80 81       	ld	r24, Z
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <GetSensorLED+0xc8>
 7fe:	95 95       	asr	r25
 800:	87 95       	ror	r24
 802:	2a 95       	dec	r18
 804:	e2 f7       	brpl	.-8      	; 0x7fe <GetSensorLED+0xc4>
 806:	80 ff       	sbrs	r24, 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <GetSensorLED+0xd4>
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	b8 cf       	rjmp	.-144    	; 0x77e <GetSensorLED+0x44>
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	b6 cf       	rjmp	.-148    	; 0x77e <GetSensorLED+0x44>
 812:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <led_Done>
 816:	a4 cf       	rjmp	.-184    	; 0x760 <GetSensorLED+0x26>

00000818 <WriteSpiMaster_Implementation>:
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	7b 01       	movw	r14, r22
 826:	00 91 69 01 	lds	r16, 0x0169	; 0x800169 <Spi_spcr>
 82a:	10 91 6a 01 	lds	r17, 0x016A	; 0x80016a <Spi_spcr+0x1>
 82e:	f8 01       	movw	r30, r16
 830:	20 81       	ld	r18, Z
 832:	c1 e0       	ldi	r28, 0x01	; 1
 834:	d0 e0       	ldi	r29, 0x00	; 0
 836:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Spi_InterruptEnable>
 83a:	02 c0       	rjmp	.+4      	; 0x840 <WriteSpiMaster_Implementation+0x28>
 83c:	cc 0f       	add	r28, r28
 83e:	dd 1f       	adc	r29, r29
 840:	0a 94       	dec	r0
 842:	e2 f7       	brpl	.-8      	; 0x83c <WriteSpiMaster_Implementation+0x24>
 844:	3c 2f       	mov	r19, r28
 846:	30 95       	com	r19
 848:	23 23       	and	r18, r19
 84a:	20 83       	st	Z, r18
 84c:	0e 94 06 01 	call	0x20c	; 0x20c <SpiSlaveSendBytes>
 850:	f8 01       	movw	r30, r16
 852:	80 81       	ld	r24, Z
 854:	c8 2b       	or	r28, r24
 856:	c0 83       	st	Z, r28
 858:	c7 01       	movw	r24, r14
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	ff 90       	pop	r15
 864:	ef 90       	pop	r14
 866:	08 95       	ret

00000868 <SensorCfgLis>:
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	00 d0       	rcall	.+0      	; 0x86e <SensorCfgLis+0x6>
 86e:	00 d0       	rcall	.+0      	; 0x870 <SensorCfgLis+0x8>
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
 874:	8f e0       	ldi	r24, 0x0F	; 15
 876:	89 83       	std	Y+1, r24	; 0x01
 878:	8f ef       	ldi	r24, 0xFF	; 255
 87a:	8a 83       	std	Y+2, r24	; 0x02
 87c:	8b 83       	std	Y+3, r24	; 0x03
 87e:	89 ef       	ldi	r24, 0xF9	; 249
 880:	8c 83       	std	Y+4, r24	; 0x04
 882:	ce 01       	movw	r24, r28
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LisWriteCfg>
 88a:	0f 90       	pop	r0
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	08 95       	ret

00000898 <LookupSensorCmd>:
 898:	85 30       	cpi	r24, 0x05	; 5
 89a:	48 f4       	brcc	.+18     	; 0x8ae <LookupSensorCmd+0x16>
 89c:	e8 2f       	mov	r30, r24
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	ee 0f       	add	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	ee 5d       	subi	r30, 0xDE	; 222
 8a6:	fe 4f       	sbci	r31, 0xFE	; 254
 8a8:	80 81       	ld	r24, Z
 8aa:	91 81       	ldd	r25, Z+1	; 0x01
 8ac:	08 95       	ret
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	08 95       	ret

000008b4 <LedsShowError>:
{
    ClearBit(BiColorLed_port, led_name);
}
inline void BiColorLedRed(uint8_t led_name)
{
    SetBit(BiColorLed_port, led_name);
 8b4:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <BiColorLed_port>
 8b8:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <BiColorLed_port+0x1>
 8bc:	40 81       	ld	r20, Z
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	9c 01       	movw	r18, r24
 8c4:	00 90 70 01 	lds	r0, 0x0170	; 0x800170 <led_TxRx>
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <LedsShowError+0x1a>
 8ca:	22 0f       	add	r18, r18
 8cc:	33 1f       	adc	r19, r19
 8ce:	0a 94       	dec	r0
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <LedsShowError+0x16>
 8d2:	24 2b       	or	r18, r20
 8d4:	20 83       	st	Z, r18
 8d6:	20 81       	ld	r18, Z
 8d8:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <led_Done>
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <LedsShowError+0x2e>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	0a 94       	dec	r0
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <LedsShowError+0x2a>
 8e6:	82 2b       	or	r24, r18
 8e8:	80 83       	st	Z, r24
 8ea:	08 95       	ret

000008ec <ReplyCommandInvalid>:
    // first and second LEDs turn red to indicate error
    BiColorLedRed(led_TxRx);
    BiColorLedRed(led_Done);
}
void ReplyCommandInvalid(void)
{
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	1f 92       	push	r1
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
    uint8_t cmd_invalid[] = {error};
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	89 83       	std	Y+1, r24	; 0x01
    WriteSpiMaster(cmd_invalid, 1);
 8fa:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <WriteSpiMaster>
 8fe:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <WriteSpiMaster+0x1>
 902:	61 e0       	ldi	r22, 0x01	; 1
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	ce 01       	movw	r24, r28
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	09 95       	icall
}
 90c:	0f 90       	pop	r0
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <main>:
 914:	47 b1       	in	r20, 0x07	; 7
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	9c 01       	movw	r18, r24
 91c:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <led_0>
 920:	02 c0       	rjmp	.+4      	; 0x926 <main+0x12>
 922:	22 0f       	add	r18, r18
 924:	33 1f       	adc	r19, r19
 926:	0a 94       	dec	r0
 928:	e2 f7       	brpl	.-8      	; 0x922 <main+0xe>
 92a:	34 2f       	mov	r19, r20
 92c:	32 2b       	or	r19, r18
 92e:	37 b9       	out	0x07, r19	; 7
 930:	37 b1       	in	r19, 0x07	; 7
 932:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <led_1>
 936:	02 c0       	rjmp	.+4      	; 0x93c <main+0x28>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	0a 94       	dec	r0
 93e:	e2 f7       	brpl	.-8      	; 0x938 <main+0x24>
 940:	93 2f       	mov	r25, r19
 942:	98 2b       	or	r25, r24
 944:	97 b9       	out	0x07, r25	; 7
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 946:	98 b1       	in	r25, 0x08	; 8
 948:	20 95       	com	r18
 94a:	29 23       	and	r18, r25
 94c:	28 b9       	out	0x08, r18	; 8
 94e:	98 b1       	in	r25, 0x08	; 8
 950:	80 95       	com	r24
 952:	89 23       	and	r24, r25
 954:	88 b9       	out	0x08, r24	; 8
    BiColorLedGreen(led_0);
    BiColorLedGreen(led_1);
    // Sensor is a SPI slave.
    // For rx bytes, see SPI interrupt routine at `ISR(SPI_STC_vect)`.
    // For tx bytes, disable SPI interrupts.
    SpiSlaveInit();
 956:	0e 94 c3 00 	call	0x186	; 0x186 <SpiSlaveInit>
    // Use UART to talk to ADC with SPI interface.
    UartSpiInit();
 95a:	0e 94 47 01 	call	0x28e	; 0x28e <UartSpiInit>
    // Power up the linear array. Start 50kHz clock.
    LisInit();
 95e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LisInit>
    /* =====[ Initialize Global SPI Flags and Data Register Buffer ]===== */
    // Use globals because it is an easy way to share data with an ISR.
    HasSpiData = false; // global flag to track if there is SpiData
 962:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
    SpiData = 0x00; // global one-byte register to store SpiData
 966:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <SpiData>
    // The following line of code should *never* be called.
    LedsShowError();
}
void Get_commands_from_SpiMaster(void)
{
    while (!HasSpiData); // wait until there is SPI data to process
 96a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 96e:	88 23       	and	r24, r24
 970:	e1 f3       	breq	.-8      	; 0x96a <main+0x56>
    // The SPI data is a command to execute.
    SensorCmd* SensorCmdFn = LookupSensorCmd(SpiData);
 972:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <SpiData>
 976:	0e 94 4c 04 	call	0x898	; 0x898 <LookupSensorCmd>
    HasSpiData = false; // consumed the data, so clear the flag
 97a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
    if (SensorCmdFn == NULL) // Command is invalid.
 97e:	00 97       	sbiw	r24, 0x00	; 0
 980:	19 f0       	breq	.+6      	; 0x988 <main+0x74>
        LedsShowError(); // indicate invalid command error on LEDs
        // No command to execute.
    }
    else // Command is valid.
    {
        SensorCmdFn(); // execute command
 982:	fc 01       	movw	r30, r24
 984:	09 95       	icall
 986:	f1 cf       	rjmp	.-30     	; 0x96a <main+0x56>
    // The SPI data is a command to execute.
    SensorCmd* SensorCmdFn = LookupSensorCmd(SpiData);
    HasSpiData = false; // consumed the data, so clear the flag
    if (SensorCmdFn == NULL) // Command is invalid.
    {
        ReplyCommandInvalid(); // tell SpiMaster command is invalid
 988:	0e 94 76 04 	call	0x8ec	; 0x8ec <ReplyCommandInvalid>
        LedsShowError(); // indicate invalid command error on LEDs
 98c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LedsShowError>
 990:	ec cf       	rjmp	.-40     	; 0x96a <main+0x56>

00000992 <__vector_17>:
        // Command is done.
    }
    // Processor is idle.
}
ISR(SPI_STC_vect)
{
 992:	1f 92       	push	r1
 994:	0f 92       	push	r0
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	0f 92       	push	r0
 99a:	11 24       	eor	r1, r1
 99c:	8f 93       	push	r24
    HasSpiData = true;
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>
    SpiData = *Spi_spdr;
 9a4:	8e b5       	in	r24, 0x2e	; 46
 9a6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <SpiData>
}
 9aa:	8f 91       	pop	r24
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <GlobalInterruptEnable_Implementation>:
#include <avr/interrupt.h>      // defines macros `sei()` and `cli()`
#include <util/delay_basic.h>   // defines microsecond delay loop

// sei()
static void GlobalInterruptEnable_Implementation(void)
{ sei(); }
 9b6:	78 94       	sei
 9b8:	08 95       	ret

000009ba <GlobalInterruptDisable_Implementation>:
void (*GlobalInterruptEnable)(void) = GlobalInterruptEnable_Implementation;

// cli()
static void GlobalInterruptDisable_Implementation(void)
{ cli(); }
 9ba:	f8 94       	cli
 9bc:	08 95       	ret

000009be <_exit>:
 9be:	f8 94       	cli

000009c0 <__stop_program>:
 9c0:	ff cf       	rjmp	.-2      	; 0x9c0 <__stop_program>
