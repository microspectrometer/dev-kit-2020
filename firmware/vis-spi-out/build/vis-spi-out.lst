
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000a60  00000af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000634  00800144  00800144  00000b38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003661  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd7  00000000  00000000  00004581  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001817  00000000  00000000  00005558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e8  00000000  00000000  00006d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000168d  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001822  00000000  00000000  00008ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  0000a507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 04 	call	0x954	; 0x954 <main>
  9e:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
  a6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiStatusRegister>
  aa:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiStatusRegister+0x1>
  ae:	09 95       	icall
  b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
  b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
  b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
  ba:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Spi_spsr>
  be:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Spi_spsr+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	08 95       	ret

000000c6 <EnableSpi_Implementation>:
  c6:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Spi_spcr>
  ca:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <Spi_spcr+0x1>
  ce:	20 81       	ld	r18, Z
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_Enable>
  d8:	02 c0       	rjmp	.+4      	; 0xde <EnableSpi_Implementation+0x18>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <EnableSpi_Implementation+0x14>
  e2:	82 2b       	or	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <ReadSpiDataRegister_Implementation>:
  e8:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Spi_spdr>
  ec:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Spi_spdr+0x1>
  f0:	80 81       	ld	r24, Z
  f2:	08 95       	ret

000000f4 <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
    ClearBit(Spi_ddr, Spi_DataReady); // make it an input
    SetBit(Spi_port, Spi_DataReady); // enable pull-up
}
void SetDataReadyAsOutputIdlesHigh(void) // For SpiSlave only!
{
    SetBit(Spi_port, Spi_DataReady); // idle HIGH
  f8:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Spi_port>
  fc:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Spi_port+0x1>
 100:	20 81       	ld	r18, Z
 102:	c1 e0       	ldi	r28, 0x01	; 1
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	ce 01       	movw	r24, r28
 108:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_DataReady>
 10c:	02 c0       	rjmp	.+4      	; 0x112 <SpiSlaveInit+0x1e>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <SpiSlaveInit+0x1a>
 116:	92 2f       	mov	r25, r18
 118:	98 2b       	or	r25, r24
 11a:	90 83       	st	Z, r25
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
 11c:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Spi_ddr>
 120:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <Spi_ddr+0x1>
 124:	90 81       	ld	r25, Z
 126:	89 2b       	or	r24, r25
 128:	80 83       	st	Z, r24
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 12a:	20 81       	ld	r18, Z
 12c:	ce 01       	movw	r24, r28
 12e:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Spi_Miso>
 132:	02 c0       	rjmp	.+4      	; 0x138 <SpiSlaveInit+0x44>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <SpiSlaveInit+0x40>
 13c:	82 2b       	or	r24, r18
 13e:	80 83       	st	Z, r24
{
    // Slave outputs LOW on DataReady to signal Master there is data to read.
    SetDataReadyAsOutputIdlesHigh();
    // TODO: do not drive MISO, that's why we have DataReady
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
 140:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <EnableSpi>
 144:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <EnableSpi+0x1>
 148:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
 14a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 14e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 152:	09 95       	icall
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
}
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
 154:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <GlobalInterruptDisable>
 158:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <GlobalInterruptDisable+0x1>
 15c:	09 95       	icall
    ClearPendingSpiInterrupt();
 15e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 162:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 166:	09 95       	icall
/*     // and disable with: */
/*     /1* ClearBit(Spi_spcr, Spi_InterruptEnable); // Disable SPI interrupt *1/ */
/* } */
static void EnableTransferCompleteInterrupt(void)
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
 168:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <Spi_spcr>
 16c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <Spi_spcr+0x1>
 170:	80 81       	ld	r24, Z
 172:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_InterruptEnable>
 176:	02 c0       	rjmp	.+4      	; 0x17c <SpiSlaveInit+0x88>
 178:	cc 0f       	add	r28, r28
 17a:	dd 1f       	adc	r29, r29
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <SpiSlaveInit+0x84>
 180:	c8 2b       	or	r28, r24
 182:	c0 83       	st	Z, r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 184:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <GlobalInterruptEnable>
 188:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <GlobalInterruptEnable+0x1>
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
    // Slave uses interrupts to send and receive bytes over SPI.
    SpiEnableInterrupt();
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 190:	09 94       	ijmp

00000192 <QueueInit>:
    return pq;
}
uint16_t QueueLength(volatile Queue_s * pq)
{ // Return length of Queue
    return pq->length;
}
 192:	e4 e4       	ldi	r30, 0x44	; 68
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
 19a:	77 83       	std	Z+7, r23	; 0x07
 19c:	66 83       	std	Z+6, r22	; 0x06
 19e:	12 82       	std	Z+2, r1	; 0x02
 1a0:	13 82       	std	Z+3, r1	; 0x03
 1a2:	15 82       	std	Z+5, r1	; 0x05
 1a4:	14 82       	std	Z+4, r1	; 0x04
 1a6:	cf 01       	movw	r24, r30
 1a8:	08 95       	ret

000001aa <QueuePush>:
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
 1aa:	fc 01       	movw	r30, r24
    pq->length--;
    return pq->buffer[pq->tail++];
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
 1ac:	24 81       	ldd	r18, Z+4	; 0x04
 1ae:	35 81       	ldd	r19, Z+5	; 0x05
 1b0:	86 81       	ldd	r24, Z+6	; 0x06
 1b2:	97 81       	ldd	r25, Z+7	; 0x07
 1b4:	28 17       	cp	r18, r24
 1b6:	39 07       	cpc	r19, r25
 1b8:	b8 f4       	brcc	.+46     	; 0x1e8 <QueuePush+0x3e>
}
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
    if (QueueIsFull(pq)) return;
    // wrap head to beginning of buffer when it reaches the end of the buffer
    if (pq->head >= pq->max_length) pq->head = 0;
 1ba:	82 81       	ldd	r24, Z+2	; 0x02
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	82 17       	cp	r24, r18
 1c4:	93 07       	cpc	r25, r19
 1c6:	08 f0       	brcs	.+2      	; 0x1ca <QueuePush+0x20>
 1c8:	12 82       	std	Z+2, r1	; 0x02
    pq->buffer[pq->head++] = data;
 1ca:	a0 81       	ld	r26, Z
 1cc:	b1 81       	ldd	r27, Z+1	; 0x01
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	98 0f       	add	r25, r24
 1d4:	92 83       	std	Z+2, r25	; 0x02
 1d6:	a8 0f       	add	r26, r24
 1d8:	b1 1d       	adc	r27, r1
 1da:	6c 93       	st	X, r22
    pq->length++;
 1dc:	84 81       	ldd	r24, Z+4	; 0x04
 1de:	95 81       	ldd	r25, Z+5	; 0x05
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	95 83       	std	Z+5, r25	; 0x05
 1e4:	84 83       	std	Z+4, r24	; 0x04
 1e6:	08 95       	ret
 1e8:	08 95       	ret

000001ea <QueuePop>:
}
uint8_t QueuePop(volatile Queue_s *pq)
{
 1ea:	fc 01       	movw	r30, r24
    if (pq->length >= pq->max_length) return true;
    return false;
}
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
 1ec:	84 81       	ldd	r24, Z+4	; 0x04
 1ee:	95 81       	ldd	r25, Z+5	; 0x05
 1f0:	89 2b       	or	r24, r25
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <QueuePop+0xe>
    pq->buffer[pq->head++] = data;
    pq->length++;
}
uint8_t QueuePop(volatile Queue_s *pq)
{
    if (QueueIsEmpty(pq)) return 0;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
 1f8:	83 81       	ldd	r24, Z+3	; 0x03
 1fa:	26 81       	ldd	r18, Z+6	; 0x06
 1fc:	37 81       	ldd	r19, Z+7	; 0x07
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	82 17       	cp	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	08 f0       	brcs	.+2      	; 0x208 <QueuePop+0x1e>
 206:	13 82       	std	Z+3, r1	; 0x03
    pq->length--;
 208:	84 81       	ldd	r24, Z+4	; 0x04
 20a:	95 81       	ldd	r25, Z+5	; 0x05
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	95 83       	std	Z+5, r25	; 0x05
 210:	84 83       	std	Z+4, r24	; 0x04
    return pq->buffer[pq->tail++];
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	23 81       	ldd	r18, Z+3	; 0x03
 218:	31 e0       	ldi	r19, 0x01	; 1
 21a:	32 0f       	add	r19, r18
 21c:	33 83       	std	Z+3, r19	; 0x03
 21e:	fc 01       	movw	r30, r24
 220:	e2 0f       	add	r30, r18
 222:	f1 1d       	adc	r31, r1
 224:	80 81       	ld	r24, Z
 226:	08 95       	ret

00000228 <QueueIsFull>:
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
 228:	fc 01       	movw	r30, r24
 22a:	44 81       	ldd	r20, Z+4	; 0x04
 22c:	55 81       	ldd	r21, Z+5	; 0x05
 22e:	26 81       	ldd	r18, Z+6	; 0x06
 230:	37 81       	ldd	r19, Z+7	; 0x07
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	42 17       	cp	r20, r18
 236:	53 07       	cpc	r21, r19
 238:	08 f4       	brcc	.+2      	; 0x23c <QueueIsFull+0x14>
 23a:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 23c:	08 95       	ret

0000023e <QueueIsEmpty>:
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
 23e:	fc 01       	movw	r30, r24
 240:	24 81       	ldd	r18, Z+4	; 0x04
 242:	35 81       	ldd	r19, Z+5	; 0x05
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	23 2b       	or	r18, r19
 248:	09 f0       	breq	.+2      	; 0x24c <QueueIsEmpty+0xe>
 24a:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 24c:	08 95       	ret

0000024e <GlobalInterruptEnable_Implementation>:
    // clear rising edge flag
    SetBit(Pwm_tifr0, Pwm_Ocf0a); // sbi	0x15, 1	; 21
    // wait until rising edge flag sets
    while(BitIsClear(Pwm_tifr0, Pwm_Ocf0a)); // sbis	0x15, 1	; 21
    // clear rising edge flag
    SetBit(Pwm_tifr0, Pwm_Ocf0a); // sbi	0x15, 1	; 21
 24e:	78 94       	sei
 250:	08 95       	ret

00000252 <GlobalInterruptDisable_Implementation>:
 252:	f8 94       	cli
 254:	08 95       	ret

00000256 <NullCommand>:
 256:	08 95       	ret

00000258 <GetSensorConfig>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <GetSensorConfig+0x6>
 25e:	00 d0       	rcall	.+0      	; 0x260 <GetSensorConfig+0x8>
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	1c 82       	std	Y+4, r1	; 0x04
 266:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 26a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	ce 01       	movw	r24, r28
 274:	04 96       	adiw	r24, 0x04	; 4
 276:	09 95       	icall
 278:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <gain>
 282:	8a 83       	std	Y+2, r24	; 0x02
 284:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <active_rows>
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 28e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	ce 01       	movw	r24, r28
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	09 95       	icall
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <ProgramPhotodiodeArray_Implementation>:
 2aa:	cf 92       	push	r12
 2ac:	df 92       	push	r13
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	6b 01       	movw	r12, r22
 2b4:	7c 01       	movw	r14, r24
 2b6:	aa 9a       	sbi	0x15, 2	; 21
 2b8:	aa 9b       	sbis	0x15, 2	; 21
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <ProgramPhotodiodeArray_Implementation+0xe>
 2bc:	aa 9a       	sbi	0x15, 2	; 21
 2be:	28 9a       	sbi	0x05, 0	; 5
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	ca 01       	movw	r24, r20
 2ca:	02 2e       	mov	r0, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <ProgramPhotodiodeArray_Implementation+0x28>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <ProgramPhotodiodeArray_Implementation+0x24>
 2d6:	09 2e       	mov	r0, r25
 2d8:	00 0c       	add	r0, r0
 2da:	aa 0b       	sbc	r26, r26
 2dc:	bb 0b       	sbc	r27, r27
 2de:	8c 21       	and	r24, r12
 2e0:	9d 21       	and	r25, r13
 2e2:	ae 21       	and	r26, r14
 2e4:	bf 21       	and	r27, r15
 2e6:	89 2b       	or	r24, r25
 2e8:	8a 2b       	or	r24, r26
 2ea:	8b 2b       	or	r24, r27
 2ec:	a9 f0       	breq	.+42     	; 0x318 <ProgramPhotodiodeArray_Implementation+0x6e>
 2ee:	5e 9a       	sbi	0x0b, 6	; 11
 2f0:	a9 9a       	sbi	0x15, 1	; 21
 2f2:	a9 9b       	sbis	0x15, 1	; 21
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <ProgramPhotodiodeArray_Implementation+0x48>
 2f6:	a9 9a       	sbi	0x15, 1	; 21
 2f8:	aa 9a       	sbi	0x15, 2	; 21
 2fa:	aa 9b       	sbis	0x15, 2	; 21
 2fc:	fe cf       	rjmp	.-4      	; 0x2fa <ProgramPhotodiodeArray_Implementation+0x50>
 2fe:	aa 9a       	sbi	0x15, 2	; 21
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	2c 31       	cpi	r18, 0x1C	; 28
 306:	31 05       	cpc	r19, r1
 308:	f9 f6       	brne	.-66     	; 0x2c8 <ProgramPhotodiodeArray_Implementation+0x1e>
 30a:	5e 98       	cbi	0x0b, 6	; 11
 30c:	28 98       	cbi	0x05, 0	; 5
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	df 90       	pop	r13
 314:	cf 90       	pop	r12
 316:	08 95       	ret
 318:	5e 98       	cbi	0x0b, 6	; 11
 31a:	ea cf       	rjmp	.-44     	; 0x2f0 <ProgramPhotodiodeArray_Implementation+0x46>

0000031c <GetExposure>:
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <GetExposure+0x6>
 322:	1f 92       	push	r1
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	1b 82       	std	Y+3, r1	; 0x03
 32a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 32e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	ce 01       	movw	r24, r28
 338:	03 96       	adiw	r24, 0x03	; 3
 33a:	09 95       	icall
 33c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <exposure_ticks>
 340:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <exposure_ticks+0x1>
 344:	99 83       	std	Y+1, r25	; 0x01
 346:	8a 83       	std	Y+2, r24	; 0x02
 348:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 34c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	09 95       	icall
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <StartAdcReadout>:
 366:	5a 98       	cbi	0x0b, 2	; 11
 368:	08 95       	ret

0000036a <LisRunClkAt50kHz_Implementation>:
 36a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmResetCounterAtTop>
 36e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmResetCounterAtTop+0x1>
 372:	09 95       	icall
 374:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <PwmTopIsOcr0a>
 378:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <PwmTopIsOcr0a+0x1>
 37c:	09 95       	icall
 37e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <PwmClkIsCpuClk>
 382:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <PwmClkIsCpuClk+0x1>
 386:	09 95       	icall
 388:	88 ec       	ldi	r24, 0xC8	; 200
 38a:	87 bd       	out	0x27, r24	; 39
 38c:	87 b5       	in	r24, 0x27	; 39
 38e:	86 95       	lsr	r24
 390:	88 bd       	out	0x28, r24	; 40
 392:	08 95       	ret

00000394 <LisClkOn_Implementation>:
 394:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <PwmEnableOutputSetUntilMatch>
 398:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <PwmEnableOutputSetUntilMatch+0x1>
 39c:	09 94       	ijmp

0000039e <ResetCounterAtTop>:
 39e:	84 b5       	in	r24, 0x24	; 36
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	84 bd       	out	0x24, r24	; 36
 3a4:	84 b5       	in	r24, 0x24	; 36
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	84 bd       	out	0x24, r24	; 36
 3aa:	08 95       	ret

000003ac <TopIsOcr0a>:
 3ac:	85 b5       	in	r24, 0x25	; 37
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	85 bd       	out	0x25, r24	; 37
 3b2:	08 95       	ret

000003b4 <PwmClkIsCpuClk_Implementation>:
 3b4:	85 b5       	in	r24, 0x25	; 37
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	85 bd       	out	0x25, r24	; 37
 3ba:	85 b5       	in	r24, 0x25	; 37
 3bc:	8d 7f       	andi	r24, 0xFD	; 253
 3be:	85 bd       	out	0x25, r24	; 37
 3c0:	85 b5       	in	r24, 0x25	; 37
 3c2:	8b 7f       	andi	r24, 0xFB	; 251
 3c4:	85 bd       	out	0x25, r24	; 37
 3c6:	08 95       	ret

000003c8 <EnableOutputSetUntilMatch>:
 3c8:	84 b5       	in	r24, 0x24	; 36
 3ca:	8f 7e       	andi	r24, 0xEF	; 239
 3cc:	84 bd       	out	0x24, r24	; 36
 3ce:	84 b5       	in	r24, 0x24	; 36
 3d0:	80 62       	ori	r24, 0x20	; 32
 3d2:	84 bd       	out	0x24, r24	; 36
 3d4:	08 95       	ret

000003d6 <WriteSpiMaster_Implementation>:
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	7b 01       	movw	r14, r22
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	c9 f0       	breq	.+50     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ea:	ec 01       	movw	r28, r24
 3ec:	8c 01       	movw	r16, r24
 3ee:	06 0f       	add	r16, r22
 3f0:	17 1f       	adc	r17, r23
 3f2:	89 91       	ld	r24, Y+
 3f4:	8e bd       	out	0x2e, r24	; 46
 3f6:	29 98       	cbi	0x05, 1	; 5
 3f8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 3fc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 400:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 404:	81 11       	cpse	r24, r1
 406:	f8 cf       	rjmp	.-16     	; 0x3f8 <WriteSpiMaster_Implementation+0x22>
 408:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 40c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 410:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 414:	29 9a       	sbi	0x05, 1	; 5
 416:	c0 17       	cp	r28, r16
 418:	d1 07       	cpc	r29, r17
 41a:	59 f7       	brne	.-42     	; 0x3f2 <WriteSpiMaster_Implementation+0x1c>
 41c:	c7 01       	movw	r24, r14
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	08 95       	ret

0000042c <GetSensorLED>:
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	00 d0       	rcall	.+0      	; 0x432 <GetSensorLED+0x6>
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 43a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 43e:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 442:	81 11       	cpse	r24, r1
 444:	f8 cf       	rjmp	.-16     	; 0x436 <GetSensorLED+0xa>
 446:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 44a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 44e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	78 f5       	brcc	.+94     	; 0x4b4 <GetSensorLED+0x88>
 456:	97 b1       	in	r25, 0x07	; 7
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <GetSensorLED+0x36>
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <GetSensorLED+0x32>
 466:	89 2f       	mov	r24, r25
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	82 23       	and	r24, r18
 46c:	93 23       	and	r25, r19
 46e:	89 2b       	or	r24, r25
 470:	89 f4       	brne	.+34     	; 0x494 <GetSensorLED+0x68>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	19 82       	std	Y+1, r1	; 0x01
 476:	8a 83       	std	Y+2, r24	; 0x02
 478:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 47c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	09 95       	icall
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret
 494:	87 b1       	in	r24, 0x07	; 7
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	82 23       	and	r24, r18
 49a:	93 23       	and	r25, r19
 49c:	89 2b       	or	r24, r25
 49e:	41 f0       	breq	.+16     	; 0x4b0 <GetSensorLED+0x84>
 4a0:	88 b1       	in	r24, 0x08	; 8
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	28 23       	and	r18, r24
 4a6:	39 23       	and	r19, r25
 4a8:	23 2b       	or	r18, r19
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <GetSensorLED+0x84>
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	e2 cf       	rjmp	.-60     	; 0x474 <GetSensorLED+0x48>
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	e0 cf       	rjmp	.-64     	; 0x474 <GetSensorLED+0x48>
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 4bc:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	ce 01       	movw	r24, r28
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	09 95       	icall
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <SetSensorLED>:
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	1f 92       	push	r1
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 4e4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 4e8:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 4ec:	81 11       	cpse	r24, r1
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <SetSensorLED+0xc>
 4f0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 4f4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 4f8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 4fc:	18 2f       	mov	r17, r24
 4fe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 502:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 506:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 50a:	81 11       	cpse	r24, r1
 50c:	f8 cf       	rjmp	.-16     	; 0x4fe <SetSensorLED+0x2a>
 50e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 512:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 516:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 51a:	12 30       	cpi	r17, 0x02	; 2
 51c:	30 f4       	brcc	.+12     	; 0x52a <SetSensorLED+0x56>
 51e:	88 23       	and	r24, r24
 520:	a1 f0       	breq	.+40     	; 0x54a <SetSensorLED+0x76>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	89 f1       	breq	.+98     	; 0x588 <SetSensorLED+0xb4>
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	01 f1       	breq	.+64     	; 0x56a <SetSensorLED+0x96>
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 532:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	09 95       	icall
 540:	0f 90       	pop	r0
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	08 95       	ret
 54a:	27 b1       	in	r18, 0x07	; 7
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	01 c0       	rjmp	.+2      	; 0x554 <SetSensorLED+0x80>
 552:	88 0f       	add	r24, r24
 554:	1a 95       	dec	r17
 556:	ea f7       	brpl	.-6      	; 0x552 <SetSensorLED+0x7e>
 558:	80 95       	com	r24
 55a:	92 2f       	mov	r25, r18
 55c:	98 23       	and	r25, r24
 55e:	97 b9       	out	0x07, r25	; 7
 560:	98 b1       	in	r25, 0x08	; 8
 562:	89 23       	and	r24, r25
 564:	88 b9       	out	0x08, r24	; 8
 566:	19 82       	std	Y+1, r1	; 0x01
 568:	e2 cf       	rjmp	.-60     	; 0x52e <SetSensorLED+0x5a>
 56a:	28 b1       	in	r18, 0x08	; 8
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	01 c0       	rjmp	.+2      	; 0x574 <SetSensorLED+0xa0>
 572:	88 0f       	add	r24, r24
 574:	1a 95       	dec	r17
 576:	ea f7       	brpl	.-6      	; 0x572 <SetSensorLED+0x9e>
 578:	92 2f       	mov	r25, r18
 57a:	98 2b       	or	r25, r24
 57c:	98 b9       	out	0x08, r25	; 8
 57e:	97 b1       	in	r25, 0x07	; 7
 580:	89 2b       	or	r24, r25
 582:	87 b9       	out	0x07, r24	; 7
 584:	19 82       	std	Y+1, r1	; 0x01
 586:	d3 cf       	rjmp	.-90     	; 0x52e <SetSensorLED+0x5a>
 588:	28 b1       	in	r18, 0x08	; 8
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	01 c0       	rjmp	.+2      	; 0x592 <SetSensorLED+0xbe>
 590:	88 0f       	add	r24, r24
 592:	1a 95       	dec	r17
 594:	ea f7       	brpl	.-6      	; 0x590 <SetSensorLED+0xbc>
 596:	98 2f       	mov	r25, r24
 598:	90 95       	com	r25
 59a:	92 23       	and	r25, r18
 59c:	ef cf       	rjmp	.-34     	; 0x57c <SetSensorLED+0xa8>

0000059e <SetExposure>:
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	1f 92       	push	r1
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 5b0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 5b4:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 5b8:	81 11       	cpse	r24, r1
 5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <SetExposure+0xe>
 5bc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 5c0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 5c4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 5c8:	08 2f       	mov	r16, r24
 5ca:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 5ce:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 5d2:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 5d6:	81 11       	cpse	r24, r1
 5d8:	f8 cf       	rjmp	.-16     	; 0x5ca <SetExposure+0x2c>
 5da:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 5de:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 5e2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 5e6:	18 2f       	mov	r17, r24
 5e8:	19 82       	std	Y+1, r1	; 0x01
 5ea:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 5ee:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	ce 01       	movw	r24, r28
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	09 95       	icall
 5fc:	81 2f       	mov	r24, r17
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	90 2b       	or	r25, r16
 602:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <exposure_ticks+0x1>
 606:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <exposure_ticks>
 60a:	0f 90       	pop	r0
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <CaptureFrame>:
 616:	ef 92       	push	r14
 618:	ff 92       	push	r15
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	00 d0       	rcall	.+0      	; 0x624 <CaptureFrame+0xe>
 624:	1f 92       	push	r1
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	1b 82       	std	Y+3, r1	; 0x03
 62c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 630:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	ce 01       	movw	r24, r28
 63a:	03 96       	adiw	r24, 0x03	; 3
 63c:	09 95       	icall
 63e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <GetFrame>
 642:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <GetFrame+0x1>
 646:	09 95       	icall
 648:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	09 f4       	brne	.+2      	; 0x652 <CaptureFrame+0x3c>
 650:	44 c0       	rjmp	.+136    	; 0x6da <CaptureFrame+0xc4>
 652:	90 e1       	ldi	r25, 0x10	; 16
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	9a 83       	std	Y+2, r25	; 0x02
 65a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 65e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 662:	62 e0       	ldi	r22, 0x02	; 2
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	09 95       	icall
 66c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 670:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	ce 01       	movw	r24, r28
 67a:	03 96       	adiw	r24, 0x03	; 3
 67c:	09 95       	icall
 67e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	61 f1       	breq	.+88     	; 0x6de <CaptureFrame+0xc8>
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	96 e0       	ldi	r25, 0x06	; 6
 68a:	08 e5       	ldi	r16, 0x58	; 88
 68c:	11 e0       	ldi	r17, 0x01	; 1
 68e:	9c 01       	movw	r18, r24
 690:	28 5a       	subi	r18, 0xA8	; 168
 692:	3e 4f       	sbci	r19, 0xFE	; 254
 694:	79 01       	movw	r14, r18
 696:	f8 01       	movw	r30, r16
 698:	80 81       	ld	r24, Z
 69a:	8e bd       	out	0x2e, r24	; 46
 69c:	29 98       	cbi	0x05, 1	; 5
 69e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 6a2:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 6a6:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 6aa:	81 11       	cpse	r24, r1
 6ac:	f8 cf       	rjmp	.-16     	; 0x69e <CaptureFrame+0x88>
 6ae:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 6b2:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 6b6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 6ba:	29 9a       	sbi	0x05, 1	; 5
 6bc:	0f 5f       	subi	r16, 0xFF	; 255
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
 6c0:	0e 15       	cp	r16, r14
 6c2:	1f 05       	cpc	r17, r15
 6c4:	41 f7       	brne	.-48     	; 0x696 <CaptureFrame+0x80>
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	08 95       	ret
 6da:	98 e8       	ldi	r25, 0x88	; 136
 6dc:	bc cf       	rjmp	.-136    	; 0x656 <CaptureFrame+0x40>
 6de:	80 e1       	ldi	r24, 0x10	; 16
 6e0:	93 e0       	ldi	r25, 0x03	; 3
 6e2:	d3 cf       	rjmp	.-90     	; 0x68a <CaptureFrame+0x74>

000006e4 <GetFrame_Implementation>:
 6e4:	aa 9a       	sbi	0x15, 2	; 21
 6e6:	aa 9b       	sbis	0x15, 2	; 21
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <GetFrame_Implementation+0x2>
 6ea:	aa 9a       	sbi	0x15, 2	; 21
 6ec:	5e 9a       	sbi	0x0b, 6	; 11
 6ee:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <exposure_ticks>
 6f2:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <exposure_ticks+0x1>
 6f6:	89 2b       	or	r24, r25
 6f8:	91 f0       	breq	.+36     	; 0x71e <GetFrame_Implementation+0x3a>
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	aa 9a       	sbi	0x15, 2	; 21
 700:	aa 9b       	sbis	0x15, 2	; 21
 702:	fe cf       	rjmp	.-4      	; 0x700 <GetFrame_Implementation+0x1c>
 704:	aa 9a       	sbi	0x15, 2	; 21
 706:	ac 01       	movw	r20, r24
 708:	4f 5f       	subi	r20, 0xFF	; 255
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <exposure_ticks>
 710:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <exposure_ticks+0x1>
 714:	82 17       	cp	r24, r18
 716:	93 07       	cpc	r25, r19
 718:	10 f4       	brcc	.+4      	; 0x71e <GetFrame_Implementation+0x3a>
 71a:	ca 01       	movw	r24, r20
 71c:	f0 cf       	rjmp	.-32     	; 0x6fe <GetFrame_Implementation+0x1a>
 71e:	5e 98       	cbi	0x0b, 6	; 11
 720:	4f 9b       	sbis	0x09, 7	; 9
 722:	fe cf       	rjmp	.-4      	; 0x720 <GetFrame_Implementation+0x3c>
 724:	4f 99       	sbic	0x09, 7	; 9
 726:	fe cf       	rjmp	.-4      	; 0x724 <GetFrame_Implementation+0x40>
 728:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	81 f1       	breq	.+96     	; 0x790 <GetFrame_Implementation+0xac>
 730:	40 e1       	ldi	r20, 0x10	; 16
 732:	53 e0       	ldi	r21, 0x03	; 3
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	48 5a       	subi	r20, 0xA8	; 168
 73a:	5e 4f       	sbci	r21, 0xFE	; 254
 73c:	e8 e5       	ldi	r30, 0x58	; 88
 73e:	f1 e0       	ldi	r31, 0x01	; 1
 740:	a9 9a       	sbi	0x15, 1	; 21
 742:	a9 9b       	sbis	0x15, 1	; 21
 744:	fe cf       	rjmp	.-4      	; 0x742 <GetFrame_Implementation+0x5e>
 746:	a9 9a       	sbi	0x15, 1	; 21
 748:	5a 9a       	sbi	0x0b, 2	; 11
 74a:	aa 9a       	sbi	0x15, 2	; 21
 74c:	aa 9b       	sbis	0x15, 2	; 21
 74e:	fe cf       	rjmp	.-4      	; 0x74c <GetFrame_Implementation+0x68>
 750:	aa 9a       	sbi	0x15, 2	; 21
 752:	5a 98       	cbi	0x0b, 2	; 11
 754:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 758:	85 ff       	sbrs	r24, 5
 75a:	fc cf       	rjmp	.-8      	; 0x754 <GetFrame_Implementation+0x70>
 75c:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 760:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 764:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 768:	87 ff       	sbrs	r24, 7
 76a:	fc cf       	rjmp	.-8      	; 0x764 <GetFrame_Implementation+0x80>
 76c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 770:	80 83       	st	Z, r24
 772:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 776:	87 ff       	sbrs	r24, 7
 778:	fc cf       	rjmp	.-8      	; 0x772 <GetFrame_Implementation+0x8e>
 77a:	cf 01       	movw	r24, r30
 77c:	02 96       	adiw	r24, 0x02	; 2
 77e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 782:	21 83       	std	Z+1, r18	; 0x01
 784:	48 17       	cp	r20, r24
 786:	59 07       	cpc	r21, r25
 788:	11 f0       	breq	.+4      	; 0x78e <GetFrame_Implementation+0xaa>
 78a:	fc 01       	movw	r30, r24
 78c:	d9 cf       	rjmp	.-78     	; 0x740 <GetFrame_Implementation+0x5c>
 78e:	08 95       	ret
 790:	48 e8       	ldi	r20, 0x88	; 136
 792:	51 e0       	ldi	r21, 0x01	; 1
 794:	cf cf       	rjmp	.-98     	; 0x734 <GetFrame_Implementation+0x50>

00000796 <SetSensorConfig>:
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	1f 92       	push	r1
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 7a8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 7ac:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 7b0:	81 11       	cpse	r24, r1
 7b2:	f8 cf       	rjmp	.-16     	; 0x7a4 <SetSensorConfig+0xe>
 7b4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 7b8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 7bc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 7c0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <binning>
 7c4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 7c8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 7cc:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 7d0:	81 11       	cpse	r24, r1
 7d2:	f8 cf       	rjmp	.-16     	; 0x7c4 <SetSensorConfig+0x2e>
 7d4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 7d8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 7dc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 7e0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <gain>
 7e4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 7e8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 7ec:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 7f0:	81 11       	cpse	r24, r1
 7f2:	f8 cf       	rjmp	.-16     	; 0x7e4 <SetSensorConfig+0x4e>
 7f4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 7f8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 7fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
 800:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <active_rows>
 804:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <binning>
 808:	92 30       	cpi	r25, 0x02	; 2
 80a:	48 f4       	brcc	.+18     	; 0x81e <SetSensorConfig+0x88>
 80c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <gain>
 810:	91 30       	cpi	r25, 0x01	; 1
 812:	b1 f0       	breq	.+44     	; 0x840 <SetSensorConfig+0xaa>
 814:	95 32       	cpi	r25, 0x25	; 37
 816:	a1 f0       	breq	.+40     	; 0x840 <SetSensorConfig+0xaa>
 818:	94 50       	subi	r25, 0x04	; 4
 81a:	92 30       	cpi	r25, 0x02	; 2
 81c:	88 f0       	brcs	.+34     	; 0x840 <SetSensorConfig+0xaa>
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 826:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	ce 01       	movw	r24, r28
 830:	01 96       	adiw	r24, 0x01	; 1
 832:	09 95       	icall
 834:	0f 90       	pop	r0
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	08 95       	ret
 840:	80 7e       	andi	r24, 0xE0	; 224
 842:	69 f7       	brne	.-38     	; 0x81e <SetSensorConfig+0x88>
 844:	19 82       	std	Y+1, r1	; 0x01
 846:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 84a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 84e:	61 e0       	ldi	r22, 0x01	; 1
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	ce 01       	movw	r24, r28
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	09 95       	icall
 858:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <ProgramPhotodiodeArray>
 85c:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <ProgramPhotodiodeArray+0x1>
 860:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <active_rows>
 864:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <gain>
 868:	a1 e0       	ldi	r26, 0x01	; 1
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	50 e0       	ldi	r21, 0x00	; 0
 86e:	40 e0       	ldi	r20, 0x00	; 0
 870:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <binning>
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	09 f0       	breq	.+2      	; 0x87a <SetSensorConfig+0xe4>
 878:	a0 e0       	ldi	r26, 0x00	; 0
 87a:	6a 2f       	mov	r22, r26
 87c:	7f 2f       	mov	r23, r31
 87e:	85 2f       	mov	r24, r21
 880:	94 2f       	mov	r25, r20
 882:	35 32       	cpi	r19, 0x25	; 37
 884:	49 f1       	breq	.+82     	; 0x8d8 <SetSensorConfig+0x142>
 886:	34 30       	cpi	r19, 0x04	; 4
 888:	49 f1       	breq	.+82     	; 0x8dc <SetSensorConfig+0x146>
 88a:	35 30       	cpi	r19, 0x05	; 5
 88c:	49 f1       	breq	.+82     	; 0x8e0 <SetSensorConfig+0x14a>
 88e:	20 ff       	sbrs	r18, 0
 890:	03 c0       	rjmp	.+6      	; 0x898 <SetSensorConfig+0x102>
 892:	68 60       	ori	r22, 0x08	; 8
 894:	71 62       	ori	r23, 0x21	; 33
 896:	84 68       	ori	r24, 0x84	; 132
 898:	21 ff       	sbrs	r18, 1
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <SetSensorConfig+0x10e>
 89c:	60 61       	ori	r22, 0x10	; 16
 89e:	72 64       	ori	r23, 0x42	; 66
 8a0:	88 60       	ori	r24, 0x08	; 8
 8a2:	91 60       	ori	r25, 0x01	; 1
 8a4:	22 ff       	sbrs	r18, 2
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <SetSensorConfig+0x11a>
 8a8:	60 62       	ori	r22, 0x20	; 32
 8aa:	74 68       	ori	r23, 0x84	; 132
 8ac:	80 61       	ori	r24, 0x10	; 16
 8ae:	92 60       	ori	r25, 0x02	; 2
 8b0:	23 ff       	sbrs	r18, 3
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <SetSensorConfig+0x126>
 8b4:	60 64       	ori	r22, 0x40	; 64
 8b6:	78 60       	ori	r23, 0x08	; 8
 8b8:	81 62       	ori	r24, 0x21	; 33
 8ba:	94 60       	ori	r25, 0x04	; 4
 8bc:	24 ff       	sbrs	r18, 4
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <SetSensorConfig+0x132>
 8c0:	60 68       	ori	r22, 0x80	; 128
 8c2:	70 61       	ori	r23, 0x10	; 16
 8c4:	82 64       	ori	r24, 0x42	; 66
 8c6:	98 60       	ori	r25, 0x08	; 8
 8c8:	f8 01       	movw	r30, r16
 8ca:	09 95       	icall
 8cc:	0f 90       	pop	r0
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	1f 91       	pop	r17
 8d4:	0f 91       	pop	r16
 8d6:	08 95       	ret
 8d8:	64 60       	ori	r22, 0x04	; 4
 8da:	d9 cf       	rjmp	.-78     	; 0x88e <SetSensorConfig+0xf8>
 8dc:	62 60       	ori	r22, 0x02	; 2
 8de:	d7 cf       	rjmp	.-82     	; 0x88e <SetSensorConfig+0xf8>
 8e0:	66 60       	ori	r22, 0x06	; 6
 8e2:	d5 cf       	rjmp	.-86     	; 0x88e <SetSensorConfig+0xf8>

000008e4 <UartSpiInit>:
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	c4 ec       	ldi	r28, 0xC4	; 196
 8ea:	d0 e0       	ldi	r29, 0x00	; 0
 8ec:	19 82       	std	Y+1, r1	; 0x01
 8ee:	18 82       	st	Y, r1
 8f0:	54 9a       	sbi	0x0a, 4	; 10
 8f2:	0e 94 b3 01 	call	0x366	; 0x366 <StartAdcReadout>
 8f6:	52 9a       	sbi	0x0a, 2	; 10
 8f8:	e2 ec       	ldi	r30, 0xC2	; 194
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	80 64       	ori	r24, 0x40	; 64
 900:	80 83       	st	Z, r24
 902:	80 81       	ld	r24, Z
 904:	80 68       	ori	r24, 0x80	; 128
 906:	80 83       	st	Z, r24
 908:	80 81       	ld	r24, Z
 90a:	81 60       	ori	r24, 0x01	; 1
 90c:	80 83       	st	Z, r24
 90e:	80 81       	ld	r24, Z
 910:	82 60       	ori	r24, 0x02	; 2
 912:	80 83       	st	Z, r24
 914:	80 81       	ld	r24, Z
 916:	8b 7f       	andi	r24, 0xFB	; 251
 918:	80 83       	st	Z, r24
 91a:	e1 ec       	ldi	r30, 0xC1	; 193
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	80 61       	ori	r24, 0x10	; 16
 922:	80 83       	st	Z, r24
 924:	80 81       	ld	r24, Z
 926:	88 60       	ori	r24, 0x08	; 8
 928:	80 83       	st	Z, r24
 92a:	19 82       	std	Y+1, r1	; 0x01
 92c:	18 82       	st	Y, r1
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	08 95       	ret

00000934 <LisInit>:
 934:	20 9a       	sbi	0x04, 0	; 4
 936:	28 98       	cbi	0x05, 0	; 5
 938:	55 9a       	sbi	0x0a, 5	; 10
 93a:	56 9a       	sbi	0x0a, 6	; 10
 93c:	5e 98       	cbi	0x0b, 6	; 11
 93e:	57 98       	cbi	0x0a, 7	; 10
 940:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
 944:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
 948:	09 95       	icall
 94a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
 94e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
 952:	09 94       	ijmp

00000954 <main>:
/* =====[ Allocate memory for one Frame of pixel data ]===== */
/* #define npixels 784 */
uint8_t volatile frame[npixels*2];

int main()
{
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	1f 92       	push	r1
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
inline void BiColorLedOn(uint8_t led_name)
{
    /** LED defaults to green when turned on.
     * To blink red, remember to turn the LED
     * red *each time* it is turned on. */
    SetBit(BiColorLed_ddr, led_name);
 95e:	38 9a       	sbi	0x07, 0	; 7
 960:	39 9a       	sbi	0x07, 1	; 7
/* =====[ API ]===== */
/** These are all commands. Read them as actions, not queries.
 * */
inline void BiColorLedGreen(uint8_t led_name)
{
    ClearBit(BiColorLed_port, led_name);
 962:	40 98       	cbi	0x08, 0	; 8
 964:	41 98       	cbi	0x08, 1	; 8
    // Turn both LEDs green.
    BiColorLedGreen(led_0);
    BiColorLedGreen(led_1);
    // Sensor is a SPI slave.
    // See SPI interrupt routine at `ISR(SPI_STC_vect)`.
    SpiSlaveInit();
 966:	0e 94 7a 00 	call	0xf4	; 0xf4 <SpiSlaveInit>
    // Create a FIFO buffer to queue bytes incoming over SPI.
    SpiFifo = QueueInit(spi_rx_buffer, max_length_of_queue);
 96a:	65 e0       	ldi	r22, 0x05	; 5
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	81 e5       	ldi	r24, 0x51	; 81
 970:	91 e0       	ldi	r25, 0x01	; 1
 972:	0e 94 c9 00 	call	0x192	; 0x192 <QueueInit>
 976:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <SpiFifo+0x1>
 97a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <SpiFifo>
    // Use UART to talk to ADC with SPI interface.
    UartSpiInit();
 97e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <UartSpiInit>
    // Power up the linear array. Start 50kHz clock.
    LisInit();
 982:	0e 94 9a 04 	call	0x934	; 0x934 <LisInit>
    // Use globals because it is an easy way to share data with an ISR.
    /* HasSpiData = false; // global flag to track if there is SpiData */
    /* SpiData = 0x00; // global one-byte register to store SpiData */
    /* =====[ Initialize Globals: Photodiode Array Config ]===== */
    // Use globals because it is an easy way to share data with lib SensorVis
    binning = binning_on; // default to 392 pixels
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <binning>
    gain = gain1x; // default to 1x gain
 98c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <gain>
    active_rows = all_rows_active; // default to using all 5 pixel rows
 990:	8f e1       	ldi	r24, 0x1F	; 31
 992:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <active_rows>
    exposure_ticks = 50; // multiply by 20us to get integration time in seconds
 996:	82 e3       	ldi	r24, 0x32	; 50
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <exposure_ticks+0x1>
 99e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <exposure_ticks>

/* --------------------------------------------------------------------------------------- */
/* Define command functions in jump table */
void ReplyCommandInvalid(void)
{
    uint8_t cmd_invalid[] = {invalid_cmd};
 9a2:	12 e0       	ldi	r17, 0x02	; 2
    // Loop forever acting on commands from the SPI Master.
    while(1) Get_commands_from_SpiMaster();
}
void Get_commands_from_SpiMaster(void)
{
    while (QueueIsEmpty(SpiFifo)); // idle until a command is received
 9a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 9a8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 9ac:	0e 94 1f 01 	call	0x23e	; 0x23e <QueueIsEmpty>
 9b0:	81 11       	cpse	r24, r1
 9b2:	f8 cf       	rjmp	.-16     	; 0x9a4 <main+0x50>
    // Queue is no longer empty once a command byte is received over SPI.
    // The SPI ISR pushes the command byte onto the SPI Rx Queue.
    // Pop the command and execute it.
    SensorCmd* SensorCmdFn = LookupSensorCmd(QueuePop(SpiFifo));
 9b4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 9b8:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 9bc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <QueuePop>
        GetExposure, // 9
        SetExposure, // 10
        CaptureFrame, // 11
        };
    // Return func ptr. Prevent attempts at out-of-bounds access.
    if (key < sizeof(pf)/sizeof(*pf)) return pf[key];
 9c0:	8c 30       	cpi	r24, 0x0C	; 12
 9c2:	58 f0       	brcs	.+22     	; 0x9da <main+0x86>

/* --------------------------------------------------------------------------------------- */
/* Define command functions in jump table */
void ReplyCommandInvalid(void)
{
    uint8_t cmd_invalid[] = {invalid_cmd};
 9c4:	19 83       	std	Y+1, r17	; 0x01
    WriteSpiMaster(cmd_invalid, 1);
 9c6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <WriteSpiMaster>
 9ca:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <WriteSpiMaster+0x1>
 9ce:	61 e0       	ldi	r22, 0x01	; 1
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	ce 01       	movw	r24, r28
 9d4:	01 96       	adiw	r24, 0x01	; 1
 9d6:	09 95       	icall
 9d8:	e5 cf       	rjmp	.-54     	; 0x9a4 <main+0x50>
        GetExposure, // 9
        SetExposure, // 10
        CaptureFrame, // 11
        };
    // Return func ptr. Prevent attempts at out-of-bounds access.
    if (key < sizeof(pf)/sizeof(*pf)) return pf[key];
 9da:	e8 2f       	mov	r30, r24
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31
 9e2:	e2 5e       	subi	r30, 0xE2	; 226
 9e4:	fe 4f       	sbci	r31, 0xFE	; 254
 9e6:	01 90       	ld	r0, Z+
 9e8:	f0 81       	ld	r31, Z
 9ea:	e0 2d       	mov	r30, r0
    if (SensorCmdFn == NULL) ReplyCommandInvalid();
 9ec:	30 97       	sbiw	r30, 0x00	; 0
 9ee:	51 f3       	breq	.-44     	; 0x9c4 <main+0x70>
    else SensorCmdFn();
 9f0:	09 95       	icall
 9f2:	d8 cf       	rjmp	.-80     	; 0x9a4 <main+0x50>

000009f4 <__vector_17>:
}
ISR(SPI_STC_vect)
{
 9f4:	1f 92       	push	r1
 9f6:	0f 92       	push	r0
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	0f 92       	push	r0
 9fc:	11 24       	eor	r1, r1
 9fe:	2f 93       	push	r18
 a00:	3f 93       	push	r19
 a02:	4f 93       	push	r20
 a04:	5f 93       	push	r21
 a06:	6f 93       	push	r22
 a08:	7f 93       	push	r23
 a0a:	8f 93       	push	r24
 a0c:	9f 93       	push	r25
 a0e:	af 93       	push	r26
 a10:	bf 93       	push	r27
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
    // Program counter jumped from "client" code.
    // ISR is the same routine, whether "client" is in a SPI read or a SPI write.

    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) DEBUG_LedsShowError(); // TODO: add error handler
 a16:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 a1a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 a1e:	0e 94 14 01 	call	0x228	; 0x228 <QueueIsFull>
 a22:	88 23       	and	r24, r24
 a24:	99 f0       	breq	.+38     	; 0xa4c <__vector_17+0x58>
}
inline void BiColorLedRed(uint8_t led_name)
{
    SetBit(BiColorLed_port, led_name);
 a26:	40 9a       	sbi	0x08, 0	; 8
 a28:	41 9a       	sbi	0x08, 1	; 8
    // so that it does not send the byte before the Slave has a chance to see
    // the queue is empty. The Slave waits for QueueIsEmpty to be true after
    // writing each byte to the Master (to avoid overwriting SPDR during a
    // transmission). So the Slave would hang if it does not get a chance to see
    // the queue is empty after the final byte is transmitted.
}
 a2a:	ff 91       	pop	r31
 a2c:	ef 91       	pop	r30
 a2e:	bf 91       	pop	r27
 a30:	af 91       	pop	r26
 a32:	9f 91       	pop	r25
 a34:	8f 91       	pop	r24
 a36:	7f 91       	pop	r23
 a38:	6f 91       	pop	r22
 a3a:	5f 91       	pop	r21
 a3c:	4f 91       	pop	r20
 a3e:	3f 91       	pop	r19
 a40:	2f 91       	pop	r18
 a42:	0f 90       	pop	r0
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	0f 90       	pop	r0
 a48:	1f 90       	pop	r1
 a4a:	18 95       	reti
    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) DEBUG_LedsShowError(); // TODO: add error handler
    else
    {
        QueuePush(SpiFifo, *Spi_spdr); // "client" must pop data from SpiFifo queue
 a4c:	6e b5       	in	r22, 0x2e	; 46
 a4e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <SpiFifo>
 a52:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <SpiFifo+0x1>
 a56:	0e 94 d5 00 	call	0x1aa	; 0x1aa <QueuePush>
    // so that it does not send the byte before the Slave has a chance to see
    // the queue is empty. The Slave waits for QueueIsEmpty to be true after
    // writing each byte to the Master (to avoid overwriting SPDR during a
    // transmission). So the Slave would hang if it does not get a chance to see
    // the queue is empty after the final byte is transmitted.
}
 a5a:	e7 cf       	rjmp	.-50     	; 0xa2a <__vector_17+0x36>

00000a5c <_exit>:
 a5c:	f8 94       	cli

00000a5e <__stop_program>:
 a5e:	ff cf       	rjmp	.-2      	; 0xa5e <__stop_program>
