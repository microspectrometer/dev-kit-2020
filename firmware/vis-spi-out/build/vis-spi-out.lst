
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000948  000009dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000948  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080016c  0080016c  00000a48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043fe  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001533  00000000  00000000  000051fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000177b  00000000  00000000  00006731  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  00007eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013c0  00000000  00000000  000086a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bea  00000000  00000000  00009a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000b64e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 37       	cpi	r26, 0x7B	; 123
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 04 	call	0x842	; 0x842 <main>
  9e:	0c 94 a2 04 	jmp	0x944	; 0x944 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
  a6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiStatusRegister>
  aa:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiStatusRegister+0x1>
  ae:	09 95       	icall
  b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <ReadSpiDataRegister>
  b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <ReadSpiDataRegister+0x1>
  b8:	09 94       	ijmp

000000ba <ReadSpiStatusRegister_Implementation>:
  ba:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <Spi_spsr>
  be:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <Spi_spsr+0x1>
  c2:	80 81       	ld	r24, Z
  c4:	08 95       	ret

000000c6 <EnableSpi_Implementation>:
  c6:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Spi_spcr>
  ca:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Spi_spcr+0x1>
  ce:	20 81       	ld	r18, Z
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	00 90 58 01 	lds	r0, 0x0158	; 0x800158 <Spi_Enable>
  d8:	02 c0       	rjmp	.+4      	; 0xde <EnableSpi_Implementation+0x18>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <EnableSpi_Implementation+0x14>
  e2:	82 2b       	or	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <ReadSpiDataRegister_Implementation>:
  e8:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <Spi_spdr>
  ec:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <Spi_spdr+0x1>
  f0:	80 81       	ld	r24, Z
  f2:	08 95       	ret

000000f4 <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
    ClearBit(Spi_ddr, Spi_DataReady); // make it an input
    SetBit(Spi_port, Spi_DataReady); // enable pull-up
}
void SetDataReadyAsOutputIdlesHigh(void) // For SpiSlave only!
{
    SetBit(Spi_port, Spi_DataReady); // idle HIGH
  f8:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <Spi_port>
  fc:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 100:	20 81       	ld	r18, Z
 102:	c1 e0       	ldi	r28, 0x01	; 1
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	ce 01       	movw	r24, r28
 108:	00 90 59 01 	lds	r0, 0x0159	; 0x800159 <Spi_DataReady>
 10c:	02 c0       	rjmp	.+4      	; 0x112 <SpiSlaveInit+0x1e>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <SpiSlaveInit+0x1a>
 116:	92 2f       	mov	r25, r18
 118:	98 2b       	or	r25, r24
 11a:	90 83       	st	Z, r25
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
 11c:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <Spi_ddr>
 120:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <Spi_ddr+0x1>
 124:	90 81       	ld	r25, Z
 126:	89 2b       	or	r24, r25
 128:	80 83       	st	Z, r24
 12a:	20 81       	ld	r18, Z
 12c:	ce 01       	movw	r24, r28
 12e:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <Spi_Miso>
 132:	02 c0       	rjmp	.+4      	; 0x138 <SpiSlaveInit+0x44>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <SpiSlaveInit+0x40>
 13c:	82 2b       	or	r24, r18
 13e:	80 83       	st	Z, r24
{
    // Slave outputs LOW on DataReady to signal Master there is data to read.
    SetDataReadyAsOutputIdlesHigh();
    // TODO: do not drive MISO, that's why we have DataReady
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
 140:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <EnableSpi>
 144:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <EnableSpi+0x1>
 148:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
 14a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 14e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 152:	09 95       	icall
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
}
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
 154:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <GlobalInterruptDisable>
 158:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <GlobalInterruptDisable+0x1>
 15c:	09 95       	icall
    ClearPendingSpiInterrupt();
 15e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ClearPendingSpiInterrupt>
 162:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ClearPendingSpiInterrupt+0x1>
 166:	09 95       	icall
/*     // and disable with: */
/*     /1* ClearBit(Spi_spcr, Spi_InterruptEnable); // Disable SPI interrupt *1/ */
/* } */
static void EnableTransferCompleteInterrupt(void)
{
    SetBit(Spi_spcr, Spi_InterruptEnable);
 168:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Spi_spcr>
 16c:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Spi_spcr+0x1>
 170:	80 81       	ld	r24, Z
 172:	00 90 57 01 	lds	r0, 0x0157	; 0x800157 <Spi_InterruptEnable>
 176:	02 c0       	rjmp	.+4      	; 0x17c <SpiSlaveInit+0x88>
 178:	cc 0f       	add	r28, r28
 17a:	dd 1f       	adc	r29, r29
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <SpiSlaveInit+0x84>
 180:	c8 2b       	or	r28, r24
 182:	c0 83       	st	Z, r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 184:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <GlobalInterruptEnable>
 188:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <GlobalInterruptEnable+0x1>
    SetMisoAsOutput(); // pin-direction is user-defined
    EnableSpi();
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
    // Slave uses interrupts to send and receive bytes over SPI.
    SpiEnableInterrupt();
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
void SpiEnableInterrupt(void)
{
    GlobalInterruptDisable();
    ClearPendingSpiInterrupt();
    EnableTransferCompleteInterrupt();
    GlobalInterruptEnable();
 190:	09 94       	ijmp

00000192 <StartAdcReadout>:
uint8_t (*UartSpiReadDataRegister)(void) = ReadDataRegister;
static void Transfer16bits(void)
{
    uint8_t byte_to_send = 0x00; // arbitrary choice -- write zeroes
    *UartSpi_data = byte_to_send;  // load tx buffer and start SPI transmission
    *UartSpi_data = byte_to_send;  // this makes it a 16-bit transmission ?
 192:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <UartSpi_port>
 196:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <UartSpi_port+0x1>
 19a:	20 81       	ld	r18, Z
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <UartSpi_AdcConv>
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <StartAdcReadout+0x18>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <StartAdcReadout+0x14>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 1b6:	ef 92       	push	r14
 1b8:	ff 92       	push	r15
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 1c2:	00 91 4d 01 	lds	r16, 0x014D	; 0x80014d <UartSpi_br>
 1c6:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <UartSpi_br+0x1>
 1ca:	f8 01       	movw	r30, r16
 1cc:	11 82       	std	Z+1, r1	; 0x01
 1ce:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 1d0:	e0 90 55 01 	lds	r14, 0x0155	; 0x800155 <UartSpi_ddr>
 1d4:	f0 90 56 01 	lds	r15, 0x0156	; 0x800156 <UartSpi_ddr+0x1>
 1d8:	f7 01       	movw	r30, r14
 1da:	20 81       	ld	r18, Z
 1dc:	c1 e0       	ldi	r28, 0x01	; 1
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <UartSpi_Sck>
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <UartSpiInit+0x36>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <UartSpiInit+0x32>
 1f0:	82 2b       	or	r24, r18
 1f2:	80 83       	st	Z, r24
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 1f4:	0e 94 c9 00 	call	0x192	; 0x192 <StartAdcReadout>
 1f8:	f7 01       	movw	r30, r14
 1fa:	20 81       	ld	r18, Z
 1fc:	ce 01       	movw	r24, r28
 1fe:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <UartSpi_AdcConv>
 202:	02 c0       	rjmp	.+4      	; 0x208 <UartSpiInit+0x52>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <UartSpiInit+0x4e>
 20c:	82 2b       	or	r24, r18
 20e:	80 83       	st	Z, r24
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 210:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <UartSpi_csrc>
 214:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <UartSpi_csrc+0x1>
 218:	20 81       	ld	r18, Z
 21a:	ce 01       	movw	r24, r28
 21c:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <UartSpi_ModeSelect0>
 220:	02 c0       	rjmp	.+4      	; 0x226 <UartSpiInit+0x70>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <UartSpiInit+0x6c>
 22a:	82 2b       	or	r24, r18
 22c:	80 83       	st	Z, r24
 22e:	20 81       	ld	r18, Z
 230:	ce 01       	movw	r24, r28
 232:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <UartSpi_ModeSelect1>
 236:	02 c0       	rjmp	.+4      	; 0x23c <UartSpiInit+0x86>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <UartSpiInit+0x82>
 240:	82 2b       	or	r24, r18
 242:	80 83       	st	Z, r24
 244:	20 81       	ld	r18, Z
 246:	ce 01       	movw	r24, r28
 248:	00 90 46 01 	lds	r0, 0x0146	; 0x800146 <UartSpi_ClockPolarity>
 24c:	02 c0       	rjmp	.+4      	; 0x252 <UartSpiInit+0x9c>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <UartSpiInit+0x98>
 256:	82 2b       	or	r24, r18
 258:	80 83       	st	Z, r24
 25a:	20 81       	ld	r18, Z
 25c:	ce 01       	movw	r24, r28
 25e:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <UartSpi_ClockPhase>
 262:	02 c0       	rjmp	.+4      	; 0x268 <UartSpiInit+0xb2>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <UartSpiInit+0xae>
 26c:	82 2b       	or	r24, r18
 26e:	80 83       	st	Z, r24
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 270:	90 81       	ld	r25, Z
 272:	9e 01       	movw	r18, r28
 274:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <UartSpi_DataOrder>
 278:	02 c0       	rjmp	.+4      	; 0x27e <UartSpiInit+0xc8>
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <UartSpiInit+0xc4>
 282:	82 2f       	mov	r24, r18
 284:	80 95       	com	r24
 286:	89 23       	and	r24, r25
 288:	80 83       	st	Z, r24
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 28a:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <UartSpi_csrb>
 28e:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <UartSpi_csrb+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 292:	20 81       	ld	r18, Z
 294:	ce 01       	movw	r24, r28
 296:	00 90 48 01 	lds	r0, 0x0148	; 0x800148 <UartSpi_RxEnable>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <UartSpiInit+0xea>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <UartSpiInit+0xe6>
 2a4:	82 2b       	or	r24, r18
 2a6:	80 83       	st	Z, r24
 2a8:	80 81       	ld	r24, Z
 2aa:	00 90 47 01 	lds	r0, 0x0147	; 0x800147 <UartSpi_TxEnable>
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <UartSpiInit+0xfe>
 2b0:	cc 0f       	add	r28, r28
 2b2:	dd 1f       	adc	r29, r29
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <UartSpiInit+0xfa>
 2b8:	c8 2b       	or	r28, r24
 2ba:	c0 83       	st	Z, r28
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 2bc:	f8 01       	movw	r30, r16
 2be:	11 82       	std	Z+1, r1	; 0x01
 2c0:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	ff 90       	pop	r15
 2cc:	ef 90       	pop	r14
 2ce:	08 95       	ret

000002d0 <LisRunClkAt50kHz_Implementation>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2d0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <PwmResetCounterAtTop>
 2d4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <PwmResetCounterAtTop+0x1>
 2d8:	09 95       	icall
 2da:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <PwmTopIsOcr0a>
 2de:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <PwmTopIsOcr0a+0x1>
 2e2:	09 95       	icall
 2e4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <PwmClkIsCpuClk>
 2e8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <PwmClkIsCpuClk+0x1>
 2ec:	09 95       	icall
 2ee:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Lis_clktop>
 2f2:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Lis_clktop+0x1>
 2f6:	88 ec       	ldi	r24, 0xC8	; 200
 2f8:	80 83       	st	Z, r24
 2fa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <Lis_clkth>
 2fe:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <Lis_clkth+0x1>
 302:	20 81       	ld	r18, Z
 304:	26 95       	lsr	r18
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
 30a:	08 95       	ret

0000030c <LisClkOn_Implementation>:
 30c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <PwmEnableOutputSetUntilMatch>
 310:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <PwmEnableOutputSetUntilMatch+0x1>
 314:	09 94       	ijmp

00000316 <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 316:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Lis_ddr2>
 31a:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Lis_ddr2+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 31e:	40 81       	ld	r20, Z
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 01       	movw	r18, r24
 326:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Lis_PixSelect>
 32a:	02 c0       	rjmp	.+4      	; 0x330 <LisInit+0x1a>
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <LisInit+0x16>
 334:	34 2f       	mov	r19, r20
 336:	32 2b       	or	r19, r18
 338:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 33a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <Lis_port2>
 33e:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <Lis_port2+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 342:	30 81       	ld	r19, Z
 344:	20 95       	com	r18
 346:	23 23       	and	r18, r19
 348:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 34a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <Lis_ddr1>
 34e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <Lis_ddr1+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 352:	40 81       	ld	r20, Z
 354:	9c 01       	movw	r18, r24
 356:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Lis_Clk>
 35a:	02 c0       	rjmp	.+4      	; 0x360 <LisInit+0x4a>
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <LisInit+0x46>
 364:	24 2b       	or	r18, r20
 366:	20 83       	st	Z, r18
 368:	40 81       	ld	r20, Z
 36a:	9c 01       	movw	r18, r24
 36c:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Lis_Rst>
 370:	02 c0       	rjmp	.+4      	; 0x376 <LisInit+0x60>
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <LisInit+0x5c>
 37a:	34 2f       	mov	r19, r20
 37c:	32 2b       	or	r19, r18
 37e:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 380:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <Lis_port1>
 384:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <Lis_port1+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 388:	3c 91       	ld	r19, X
 38a:	20 95       	com	r18
 38c:	23 23       	and	r18, r19
 38e:	2c 93       	st	X, r18
 390:	20 81       	ld	r18, Z
 392:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Lis_Sync>
 396:	02 c0       	rjmp	.+4      	; 0x39c <LisInit+0x86>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <LisInit+0x82>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 3a6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <LisRunClkAt50kHz>
 3aa:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <LisRunClkAt50kHz+0x1>
 3ae:	09 95       	icall
    LisClkOn();
 3b0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <LisClkOn>
 3b4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <LisClkOn+0x1>
 3b8:	09 94       	ijmp

000003ba <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 3ba:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Pwm_tccr0a>
 3be:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Pwm_tccr0a+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 3c2:	40 81       	ld	r20, Z
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	9c 01       	movw	r18, r24
 3ca:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Pwm_Wgm00>
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <ResetCounterAtTop+0x1a>
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <ResetCounterAtTop+0x16>
 3d8:	24 2b       	or	r18, r20
 3da:	20 83       	st	Z, r18
 3dc:	20 81       	ld	r18, Z
 3de:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Pwm_Wgm01>
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <ResetCounterAtTop+0x2e>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <ResetCounterAtTop+0x2a>
 3ec:	82 2b       	or	r24, r18
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 3f2:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Pwm_tccr0b>
 3f6:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Pwm_tccr0b+0x1>
 3fa:	20 81       	ld	r18, Z
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <Pwm_Wgm02>
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	80 83       	st	Z, r24
 412:	08 95       	ret

00000414 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 414:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <Pwm_tccr0b>
 418:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <Pwm_tccr0b+0x1>
 41c:	40 81       	ld	r20, Z
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	9c 01       	movw	r18, r24
 424:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <Pwm_Cs00>
 428:	02 c0       	rjmp	.+4      	; 0x42e <PwmClkIsCpuClk_Implementation+0x1a>
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <PwmClkIsCpuClk_Implementation+0x16>
 432:	24 2b       	or	r18, r20
 434:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 436:	30 81       	ld	r19, Z
 438:	ac 01       	movw	r20, r24
 43a:	00 90 2b 01 	lds	r0, 0x012B	; 0x80012b <Pwm_Cs01>
 43e:	02 c0       	rjmp	.+4      	; 0x444 <PwmClkIsCpuClk_Implementation+0x30>
 440:	44 0f       	add	r20, r20
 442:	55 1f       	adc	r21, r21
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <PwmClkIsCpuClk_Implementation+0x2c>
 448:	24 2f       	mov	r18, r20
 44a:	20 95       	com	r18
 44c:	23 23       	and	r18, r19
 44e:	20 83       	st	Z, r18
 450:	20 81       	ld	r18, Z
 452:	00 90 2a 01 	lds	r0, 0x012A	; 0x80012a <Pwm_Cs02>
 456:	02 c0       	rjmp	.+4      	; 0x45c <PwmClkIsCpuClk_Implementation+0x48>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <PwmClkIsCpuClk_Implementation+0x44>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	80 83       	st	Z, r24
 466:	08 95       	ret

00000468 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 468:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Pwm_tccr0a>
 46c:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Pwm_tccr0a+0x1>
 470:	30 81       	ld	r19, Z
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	ac 01       	movw	r20, r24
 478:	00 90 29 01 	lds	r0, 0x0129	; 0x800129 <Pwm_Com0b0>
 47c:	02 c0       	rjmp	.+4      	; 0x482 <EnableOutputSetUntilMatch+0x1a>
 47e:	44 0f       	add	r20, r20
 480:	55 1f       	adc	r21, r21
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <EnableOutputSetUntilMatch+0x16>
 486:	24 2f       	mov	r18, r20
 488:	20 95       	com	r18
 48a:	23 23       	and	r18, r19
 48c:	20 83       	st	Z, r18
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 48e:	20 81       	ld	r18, Z
 490:	00 90 28 01 	lds	r0, 0x0128	; 0x800128 <Pwm_Com0b1>
 494:	02 c0       	rjmp	.+4      	; 0x49a <EnableOutputSetUntilMatch+0x32>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <EnableOutputSetUntilMatch+0x2e>
 49e:	82 2b       	or	r24, r18
 4a0:	80 83       	st	Z, r24
 4a2:	08 95       	ret

000004a4 <QueueInit>:
    return pq;
}
uint16_t QueueLength(volatile Queue_s * pq)
{ // Return length of Queue
    return pq->length;
}
 4a4:	ec e6       	ldi	r30, 0x6C	; 108
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	91 83       	std	Z+1, r25	; 0x01
 4aa:	80 83       	st	Z, r24
 4ac:	77 83       	std	Z+7, r23	; 0x07
 4ae:	66 83       	std	Z+6, r22	; 0x06
 4b0:	12 82       	std	Z+2, r1	; 0x02
 4b2:	13 82       	std	Z+3, r1	; 0x03
 4b4:	15 82       	std	Z+5, r1	; 0x05
 4b6:	14 82       	std	Z+4, r1	; 0x04
 4b8:	cf 01       	movw	r24, r30
 4ba:	08 95       	ret

000004bc <QueuePush>:
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
 4bc:	fc 01       	movw	r30, r24
    pq->length--;
    return pq->buffer[pq->tail++];
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
 4be:	24 81       	ldd	r18, Z+4	; 0x04
 4c0:	35 81       	ldd	r19, Z+5	; 0x05
 4c2:	86 81       	ldd	r24, Z+6	; 0x06
 4c4:	97 81       	ldd	r25, Z+7	; 0x07
 4c6:	28 17       	cp	r18, r24
 4c8:	39 07       	cpc	r19, r25
 4ca:	b8 f4       	brcc	.+46     	; 0x4fa <QueuePush+0x3e>
}
void QueuePush(volatile Queue_s * pq, uint8_t data)
{ // Push data onto the Queue
    if (QueueIsFull(pq)) return;
    // wrap head to beginning of buffer when it reaches the end of the buffer
    if (pq->head >= pq->max_length) pq->head = 0;
 4cc:	82 81       	ldd	r24, Z+2	; 0x02
 4ce:	26 81       	ldd	r18, Z+6	; 0x06
 4d0:	37 81       	ldd	r19, Z+7	; 0x07
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	82 17       	cp	r24, r18
 4d6:	93 07       	cpc	r25, r19
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <QueuePush+0x20>
 4da:	12 82       	std	Z+2, r1	; 0x02
    pq->buffer[pq->head++] = data;
 4dc:	a0 81       	ld	r26, Z
 4de:	b1 81       	ldd	r27, Z+1	; 0x01
 4e0:	82 81       	ldd	r24, Z+2	; 0x02
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	98 0f       	add	r25, r24
 4e6:	92 83       	std	Z+2, r25	; 0x02
 4e8:	a8 0f       	add	r26, r24
 4ea:	b1 1d       	adc	r27, r1
 4ec:	6c 93       	st	X, r22
    pq->length++;
 4ee:	84 81       	ldd	r24, Z+4	; 0x04
 4f0:	95 81       	ldd	r25, Z+5	; 0x05
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	95 83       	std	Z+5, r25	; 0x05
 4f6:	84 83       	std	Z+4, r24	; 0x04
 4f8:	08 95       	ret
 4fa:	08 95       	ret

000004fc <QueuePop>:
}
uint8_t QueuePop(volatile Queue_s *pq)
{
 4fc:	fc 01       	movw	r30, r24
    if (pq->length >= pq->max_length) return true;
    return false;
}
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
 4fe:	84 81       	ldd	r24, Z+4	; 0x04
 500:	95 81       	ldd	r25, Z+5	; 0x05
 502:	89 2b       	or	r24, r25
 504:	11 f4       	brne	.+4      	; 0x50a <QueuePop+0xe>
    pq->buffer[pq->head++] = data;
    pq->length++;
}
uint8_t QueuePop(volatile Queue_s *pq)
{
    if (QueueIsEmpty(pq)) return 0;
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	08 95       	ret
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
 50a:	83 81       	ldd	r24, Z+3	; 0x03
 50c:	26 81       	ldd	r18, Z+6	; 0x06
 50e:	37 81       	ldd	r19, Z+7	; 0x07
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	82 17       	cp	r24, r18
 514:	93 07       	cpc	r25, r19
 516:	08 f0       	brcs	.+2      	; 0x51a <QueuePop+0x1e>
 518:	13 82       	std	Z+3, r1	; 0x03
    pq->length--;
 51a:	84 81       	ldd	r24, Z+4	; 0x04
 51c:	95 81       	ldd	r25, Z+5	; 0x05
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	95 83       	std	Z+5, r25	; 0x05
 522:	84 83       	std	Z+4, r24	; 0x04
    return pq->buffer[pq->tail++];
 524:	80 81       	ld	r24, Z
 526:	91 81       	ldd	r25, Z+1	; 0x01
 528:	23 81       	ldd	r18, Z+3	; 0x03
 52a:	31 e0       	ldi	r19, 0x01	; 1
 52c:	32 0f       	add	r19, r18
 52e:	33 83       	std	Z+3, r19	; 0x03
 530:	fc 01       	movw	r30, r24
 532:	e2 0f       	add	r30, r18
 534:	f1 1d       	adc	r31, r1
 536:	80 81       	ld	r24, Z
 538:	08 95       	ret

0000053a <QueueIsFull>:
}
bool QueueIsFull(volatile Queue_s * pq)
{ // Return true if Queue is full
    if (pq->length >= pq->max_length) return true;
 53a:	fc 01       	movw	r30, r24
 53c:	44 81       	ldd	r20, Z+4	; 0x04
 53e:	55 81       	ldd	r21, Z+5	; 0x05
 540:	26 81       	ldd	r18, Z+6	; 0x06
 542:	37 81       	ldd	r19, Z+7	; 0x07
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	42 17       	cp	r20, r18
 548:	53 07       	cpc	r21, r19
 54a:	08 f4       	brcc	.+2      	; 0x54e <QueueIsFull+0x14>
 54c:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 54e:	08 95       	ret

00000550 <QueueIsEmpty>:
bool QueueIsEmpty(volatile Queue_s * pq)
{ // Return true if Queue is empty
    if (pq->length == 0) return true;
 550:	fc 01       	movw	r30, r24
 552:	24 81       	ldd	r18, Z+4	; 0x04
 554:	35 81       	ldd	r19, Z+5	; 0x05
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	23 2b       	or	r18, r19
 55a:	09 f0       	breq	.+2      	; 0x55e <QueueIsEmpty+0xe>
 55c:	80 e0       	ldi	r24, 0x00	; 0
    return false;
}
 55e:	08 95       	ret

00000560 <NullCommand>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 560:	08 95       	ret

00000562 <WriteSpiMaster_Implementation>:
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	5b 01       	movw	r10, r22
 57c:	61 15       	cp	r22, r1
 57e:	71 05       	cpc	r23, r1
 580:	a1 f1       	breq	.+104    	; 0x5ea <WriteSpiMaster_Implementation+0x88>
 582:	c0 90 5b 01 	lds	r12, 0x015B	; 0x80015b <Spi_spdr>
 586:	d0 90 5c 01 	lds	r13, 0x015C	; 0x80015c <Spi_spdr+0x1>
 58a:	c0 91 61 01 	lds	r28, 0x0161	; 0x800161 <Spi_port>
 58e:	d0 91 62 01 	lds	r29, 0x0162	; 0x800162 <Spi_port+0x1>
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	00 90 59 01 	lds	r0, 0x0159	; 0x800159 <Spi_DataReady>
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <WriteSpiMaster_Implementation+0x3e>
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <WriteSpiMaster_Implementation+0x3a>
 5a4:	82 2e       	mov	r8, r18
 5a6:	92 2e       	mov	r9, r18
 5a8:	90 94       	com	r9
 5aa:	8c 01       	movw	r16, r24
 5ac:	7c 01       	movw	r14, r24
 5ae:	e6 0e       	add	r14, r22
 5b0:	f7 1e       	adc	r15, r23
 5b2:	f8 01       	movw	r30, r16
 5b4:	81 91       	ld	r24, Z+
 5b6:	8f 01       	movw	r16, r30
 5b8:	f6 01       	movw	r30, r12
 5ba:	80 83       	st	Z, r24
 5bc:	88 81       	ld	r24, Y
 5be:	89 21       	and	r24, r9
 5c0:	88 83       	st	Y, r24
 5c2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 5c6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 5ca:	0e 94 a8 02 	call	0x550	; 0x550 <QueueIsEmpty>
 5ce:	81 11       	cpse	r24, r1
 5d0:	f8 cf       	rjmp	.-16     	; 0x5c2 <WriteSpiMaster_Implementation+0x60>
 5d2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 5d6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 5da:	0e 94 7e 02 	call	0x4fc	; 0x4fc <QueuePop>
 5de:	88 81       	ld	r24, Y
 5e0:	88 29       	or	r24, r8
 5e2:	88 83       	st	Y, r24
 5e4:	0e 15       	cp	r16, r14
 5e6:	1f 05       	cpc	r17, r15
 5e8:	21 f7       	brne	.-56     	; 0x5b2 <WriteSpiMaster_Implementation+0x50>
 5ea:	c5 01       	movw	r24, r10
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	df 90       	pop	r13
 5fa:	cf 90       	pop	r12
 5fc:	bf 90       	pop	r11
 5fe:	af 90       	pop	r10
 600:	9f 90       	pop	r9
 602:	8f 90       	pop	r8
 604:	08 95       	ret

00000606 <GetSensorLED>:
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	00 d0       	rcall	.+0      	; 0x60c <GetSensorLED+0x6>
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 614:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 618:	0e 94 a8 02 	call	0x550	; 0x550 <QueueIsEmpty>
 61c:	81 11       	cpse	r24, r1
 61e:	f8 cf       	rjmp	.-16     	; 0x610 <GetSensorLED+0xa>
 620:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 624:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 628:	0e 94 7e 02 	call	0x4fc	; 0x4fc <QueuePop>
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	18 f5       	brcc	.+70     	; 0x676 <GetSensorLED+0x70>
 630:	81 11       	cpse	r24, r1
 632:	4c c0       	rjmp	.+152    	; 0x6cc <GetSensorLED+0xc6>
 634:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <led_TxRx>
 638:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_ddr>
 63c:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_ddr+0x1>
 640:	80 81       	ld	r24, Z
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 2e       	mov	r0, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <GetSensorLED+0x46>
 648:	95 95       	asr	r25
 64a:	87 95       	ror	r24
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <GetSensorLED+0x42>
 650:	80 fd       	sbrc	r24, 0
 652:	21 c0       	rjmp	.+66     	; 0x696 <GetSensorLED+0x90>
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	19 82       	std	Y+1, r1	; 0x01
 658:	8a 83       	std	Y+2, r24	; 0x02
 65a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <WriteSpiMaster>
 65e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <WriteSpiMaster+0x1>
 662:	62 e0       	ldi	r22, 0x02	; 2
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	09 95       	icall
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	89 83       	std	Y+1, r24	; 0x01
 67a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <WriteSpiMaster>
 67e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <WriteSpiMaster+0x1>
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	09 95       	icall
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret
 696:	80 81       	ld	r24, Z
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 2e       	mov	r0, r18
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <GetSensorLED+0x9c>
 69e:	95 95       	asr	r25
 6a0:	87 95       	ror	r24
 6a2:	0a 94       	dec	r0
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <GetSensorLED+0x98>
 6a6:	80 ff       	sbrs	r24, 0
 6a8:	0f c0       	rjmp	.+30     	; 0x6c8 <GetSensorLED+0xc2>
 6aa:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <BiColorLed_port>
 6ae:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <BiColorLed_port+0x1>
 6b2:	80 81       	ld	r24, Z
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <GetSensorLED+0xb6>
 6b8:	95 95       	asr	r25
 6ba:	87 95       	ror	r24
 6bc:	2a 95       	dec	r18
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <GetSensorLED+0xb2>
 6c0:	80 ff       	sbrs	r24, 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <GetSensorLED+0xc2>
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	c7 cf       	rjmp	.-114    	; 0x656 <GetSensorLED+0x50>
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	c5 cf       	rjmp	.-118    	; 0x656 <GetSensorLED+0x50>
 6cc:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <led_Done>
 6d0:	b3 cf       	rjmp	.-154    	; 0x638 <GetSensorLED+0x32>

000006d2 <SetSensorLED>:
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	1f 92       	push	r1
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 6e2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 6e6:	0e 94 a8 02 	call	0x550	; 0x550 <QueueIsEmpty>
 6ea:	81 11       	cpse	r24, r1
 6ec:	f8 cf       	rjmp	.-16     	; 0x6de <SetSensorLED+0xc>
 6ee:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 6f2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 6f6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <QueuePop>
 6fa:	18 2f       	mov	r17, r24
 6fc:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 700:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 704:	0e 94 a8 02 	call	0x550	; 0x550 <QueueIsEmpty>
 708:	81 11       	cpse	r24, r1
 70a:	f8 cf       	rjmp	.-16     	; 0x6fc <SetSensorLED+0x2a>
 70c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 710:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 714:	0e 94 7e 02 	call	0x4fc	; 0x4fc <QueuePop>
 718:	12 30       	cpi	r17, 0x02	; 2
 71a:	38 f4       	brcc	.+14     	; 0x72a <SetSensorLED+0x58>
 71c:	88 23       	and	r24, r24
 71e:	a9 f0       	breq	.+42     	; 0x74a <SetSensorLED+0x78>
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	09 f4       	brne	.+2      	; 0x726 <SetSensorLED+0x54>
 724:	41 c0       	rjmp	.+130    	; 0x7a8 <SetSensorLED+0xd6>
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	41 f1       	breq	.+80     	; 0x77a <SetSensorLED+0xa8>
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	89 83       	std	Y+1, r24	; 0x01
 72e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <WriteSpiMaster>
 732:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <WriteSpiMaster+0x1>
 736:	61 e0       	ldi	r22, 0x01	; 1
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	ce 01       	movw	r24, r28
 73c:	01 96       	adiw	r24, 0x01	; 1
 73e:	09 95       	icall
 740:	0f 90       	pop	r0
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	08 95       	ret
 74a:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_ddr>
 74e:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_ddr+0x1>
 752:	20 81       	ld	r18, Z
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	01 c0       	rjmp	.+2      	; 0x75c <SetSensorLED+0x8a>
 75a:	88 0f       	add	r24, r24
 75c:	1a 95       	dec	r17
 75e:	ea f7       	brpl	.-6      	; 0x75a <SetSensorLED+0x88>
 760:	80 95       	com	r24
 762:	92 2f       	mov	r25, r18
 764:	98 23       	and	r25, r24
 766:	90 83       	st	Z, r25
 768:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <BiColorLed_port>
 76c:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <BiColorLed_port+0x1>
 770:	90 81       	ld	r25, Z
 772:	89 23       	and	r24, r25
 774:	80 83       	st	Z, r24
 776:	19 82       	std	Y+1, r1	; 0x01
 778:	da cf       	rjmp	.-76     	; 0x72e <SetSensorLED+0x5c>
 77a:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <BiColorLed_port>
 77e:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <BiColorLed_port+0x1>
 782:	20 81       	ld	r18, Z
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	01 c0       	rjmp	.+2      	; 0x78c <SetSensorLED+0xba>
 78a:	88 0f       	add	r24, r24
 78c:	1a 95       	dec	r17
 78e:	ea f7       	brpl	.-6      	; 0x78a <SetSensorLED+0xb8>
 790:	92 2f       	mov	r25, r18
 792:	98 2b       	or	r25, r24
 794:	90 83       	st	Z, r25
 796:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <BiColorLed_ddr>
 79a:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <BiColorLed_ddr+0x1>
 79e:	90 81       	ld	r25, Z
 7a0:	89 2b       	or	r24, r25
 7a2:	80 83       	st	Z, r24
 7a4:	19 82       	std	Y+1, r1	; 0x01
 7a6:	c3 cf       	rjmp	.-122    	; 0x72e <SetSensorLED+0x5c>
 7a8:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <BiColorLed_port>
 7ac:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <BiColorLed_port+0x1>
 7b0:	20 81       	ld	r18, Z
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	01 c0       	rjmp	.+2      	; 0x7ba <SetSensorLED+0xe8>
 7b8:	88 0f       	add	r24, r24
 7ba:	1a 95       	dec	r17
 7bc:	ea f7       	brpl	.-6      	; 0x7b8 <SetSensorLED+0xe6>
 7be:	98 2f       	mov	r25, r24
 7c0:	90 95       	com	r25
 7c2:	92 23       	and	r25, r18
 7c4:	e7 cf       	rjmp	.-50     	; 0x794 <SetSensorLED+0xc2>

000007c6 <LookupSensorCmd>:
 7c6:	86 30       	cpi	r24, 0x06	; 6
 7c8:	48 f4       	brcc	.+18     	; 0x7dc <LookupSensorCmd+0x16>
 7ca:	e8 2f       	mov	r30, r24
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	ee 0f       	add	r30, r30
 7d0:	ff 1f       	adc	r31, r31
 7d2:	e6 5e       	subi	r30, 0xE6	; 230
 7d4:	fe 4f       	sbci	r31, 0xFE	; 254
 7d6:	80 81       	ld	r24, Z
 7d8:	91 81       	ldd	r25, Z+1	; 0x01
 7da:	08 95       	ret
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	08 95       	ret

000007e2 <DEBUG_LedsShowError>:
 7e2:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <BiColorLed_port>
 7e6:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <BiColorLed_port+0x1>
 7ea:	40 81       	ld	r20, Z
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	9c 01       	movw	r18, r24
 7f2:	00 90 66 01 	lds	r0, 0x0166	; 0x800166 <led_TxRx>
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DEBUG_LedsShowError+0x1a>
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	0a 94       	dec	r0
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DEBUG_LedsShowError+0x16>
 800:	24 2b       	or	r18, r20
 802:	20 83       	st	Z, r18
 804:	20 81       	ld	r18, Z
 806:	00 90 65 01 	lds	r0, 0x0165	; 0x800165 <led_Done>
 80a:	02 c0       	rjmp	.+4      	; 0x810 <DEBUG_LedsShowError+0x2e>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	0a 94       	dec	r0
 812:	e2 f7       	brpl	.-8      	; 0x80c <DEBUG_LedsShowError+0x2a>
 814:	82 2b       	or	r24, r18
 816:	80 83       	st	Z, r24
 818:	08 95       	ret

0000081a <ReplyCommandInvalid>:
    // first and second LEDs turn green to indicate error cleared
    BiColorLedGreen(led_TxRx);
    BiColorLedGreen(led_Done);
}
void ReplyCommandInvalid(void)
{
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	1f 92       	push	r1
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
    uint8_t cmd_invalid[] = {invalid_cmd};
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	89 83       	std	Y+1, r24	; 0x01
    WriteSpiMaster(cmd_invalid, 1);
 828:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <WriteSpiMaster>
 82c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <WriteSpiMaster+0x1>
 830:	61 e0       	ldi	r22, 0x01	; 1
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	ce 01       	movw	r24, r28
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	09 95       	icall
}
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <main>:
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 842:	47 b1       	in	r20, 0x07	; 7
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	9c 01       	movw	r18, r24
 84a:	00 90 27 01 	lds	r0, 0x0127	; 0x800127 <led_0>
 84e:	02 c0       	rjmp	.+4      	; 0x854 <main+0x12>
 850:	22 0f       	add	r18, r18
 852:	33 1f       	adc	r19, r19
 854:	0a 94       	dec	r0
 856:	e2 f7       	brpl	.-8      	; 0x850 <main+0xe>
 858:	34 2f       	mov	r19, r20
 85a:	32 2b       	or	r19, r18
 85c:	37 b9       	out	0x07, r19	; 7
 85e:	37 b1       	in	r19, 0x07	; 7
 860:	00 90 26 01 	lds	r0, 0x0126	; 0x800126 <led_1>
 864:	02 c0       	rjmp	.+4      	; 0x86a <main+0x28>
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	0a 94       	dec	r0
 86c:	e2 f7       	brpl	.-8      	; 0x866 <main+0x24>
 86e:	93 2f       	mov	r25, r19
 870:	98 2b       	or	r25, r24
 872:	97 b9       	out	0x07, r25	; 7
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 874:	98 b1       	in	r25, 0x08	; 8
 876:	20 95       	com	r18
 878:	29 23       	and	r18, r25
 87a:	28 b9       	out	0x08, r18	; 8
 87c:	98 b1       	in	r25, 0x08	; 8
 87e:	80 95       	com	r24
 880:	89 23       	and	r24, r25
 882:	88 b9       	out	0x08, r24	; 8
    // Turn both LEDs green.
    BiColorLedGreen(led_0);
    BiColorLedGreen(led_1);
    // Sensor is a SPI slave.
    // See SPI interrupt routine at `ISR(SPI_STC_vect)`.
    SpiSlaveInit();
 884:	0e 94 7a 00 	call	0xf4	; 0xf4 <SpiSlaveInit>
    // Create a FIFO buffer to queue bytes incoming over SPI.
    SpiFifo = QueueInit(spi_rx_buffer, max_length_of_queue);
 888:	65 e0       	ldi	r22, 0x05	; 5
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	86 e7       	ldi	r24, 0x76	; 118
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	0e 94 52 02 	call	0x4a4	; 0x4a4 <QueueInit>
 894:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <SpiFifo+0x1>
 898:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SpiFifo>
    // Use UART to talk to ADC with SPI interface.
    UartSpiInit();
 89c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UartSpiInit>
    // Power up the linear array. Start 50kHz clock.
    LisInit();
 8a0:	0e 94 8b 01 	call	0x316	; 0x316 <LisInit>
    // Loop forever acting on commands from the SPI Master.
    while(1) Get_commands_from_SpiMaster();
}
void Get_commands_from_SpiMaster(void)
{
    while (QueueIsEmpty(SpiFifo)); // idle until a command is received
 8a4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 8a8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 8ac:	0e 94 a8 02 	call	0x550	; 0x550 <QueueIsEmpty>
 8b0:	81 11       	cpse	r24, r1
 8b2:	f8 cf       	rjmp	.-16     	; 0x8a4 <main+0x62>
    // Queue is no longer empty once a command byte is received over SPI.
    // The SPI ISR pushes the command byte onto the SPI Rx Queue.
    // Pop the command and execute it.
    SensorCmd* SensorCmdFn = LookupSensorCmd(QueuePop(SpiFifo));
 8b4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 8b8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 8bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <QueuePop>
 8c0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LookupSensorCmd>
    if (SensorCmdFn == NULL) ReplyCommandInvalid();
 8c4:	00 97       	sbiw	r24, 0x00	; 0
 8c6:	19 f0       	breq	.+6      	; 0x8ce <main+0x8c>
    else SensorCmdFn();
 8c8:	fc 01       	movw	r30, r24
 8ca:	09 95       	icall
 8cc:	eb cf       	rjmp	.-42     	; 0x8a4 <main+0x62>
    while (QueueIsEmpty(SpiFifo)); // idle until a command is received
    // Queue is no longer empty once a command byte is received over SPI.
    // The SPI ISR pushes the command byte onto the SPI Rx Queue.
    // Pop the command and execute it.
    SensorCmd* SensorCmdFn = LookupSensorCmd(QueuePop(SpiFifo));
    if (SensorCmdFn == NULL) ReplyCommandInvalid();
 8ce:	0e 94 0d 04 	call	0x81a	; 0x81a <ReplyCommandInvalid>
 8d2:	e8 cf       	rjmp	.-48     	; 0x8a4 <main+0x62>

000008d4 <__vector_17>:
    else SensorCmdFn();
}
ISR(SPI_STC_vect)
{
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	11 24       	eor	r1, r1
 8de:	2f 93       	push	r18
 8e0:	3f 93       	push	r19
 8e2:	4f 93       	push	r20
 8e4:	5f 93       	push	r21
 8e6:	6f 93       	push	r22
 8e8:	7f 93       	push	r23
 8ea:	8f 93       	push	r24
 8ec:	9f 93       	push	r25
 8ee:	af 93       	push	r26
 8f0:	bf 93       	push	r27
 8f2:	ef 93       	push	r30
 8f4:	ff 93       	push	r31
    // Program counter jumped from "client" code.
    // ISR is the same routine, whether "client" is in a SPI read or a SPI write.

    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) DEBUG_LedsShowError(); // TODO: add error handler
 8f6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 8fa:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 8fe:	0e 94 9d 02 	call	0x53a	; 0x53a <QueueIsFull>
 902:	81 11       	cpse	r24, r1
 904:	18 c0       	rjmp	.+48     	; 0x936 <__stack+0x37>
    else
    {
        QueuePush(SpiFifo, *Spi_spdr); // "client" must pop data from SpiFifo queue
 906:	6e b5       	in	r22, 0x2e	; 46
 908:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SpiFifo>
 90c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SpiFifo+0x1>
 910:	0e 94 5e 02 	call	0x4bc	; 0x4bc <QueuePush>
    // so that it does not send the byte before the Slave has a chance to see
    // the queue is empty. The Slave waits for QueueIsEmpty to be true after
    // writing each byte to the Master (to avoid overwriting SPDR during a
    // transmission). So the Slave would hang if it does not get a chance to see
    // the queue is empty after the final byte is transmitted.
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0f be       	out	0x3f, r0	; 63
 930:	0f 90       	pop	r0
 932:	1f 90       	pop	r1
 934:	18 95       	reti
    // Program counter jumped from "client" code.
    // ISR is the same routine, whether "client" is in a SPI read or a SPI write.

    // Client stuck in loop `while (QueueIsEmpty(SpiFifo));` when ISR is called
    //
    if (QueueIsFull(SpiFifo)) DEBUG_LedsShowError(); // TODO: add error handler
 936:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DEBUG_LedsShowError>
 93a:	ec cf       	rjmp	.-40     	; 0x914 <__stack+0x15>

0000093c <GlobalInterruptEnable_Implementation>:
#include <avr/interrupt.h>      // defines macros `sei()` and `cli()`
#include <util/delay_basic.h>   // defines microsecond delay loop

// sei()
static void GlobalInterruptEnable_Implementation(void)
{ sei(); }
 93c:	78 94       	sei
 93e:	08 95       	ret

00000940 <GlobalInterruptDisable_Implementation>:
void (*GlobalInterruptEnable)(void) = GlobalInterruptEnable_Implementation;

// cli()
static void GlobalInterruptDisable_Implementation(void)
{ cli(); }
 940:	f8 94       	cli
 942:	08 95       	ret

00000944 <_exit>:
 944:	f8 94       	cli

00000946 <__stop_program>:
 946:	ff cf       	rjmp	.-2      	; 0x946 <__stop_program>
