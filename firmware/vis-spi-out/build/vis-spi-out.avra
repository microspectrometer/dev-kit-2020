
build/vis-spi-out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000202c  000020c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000202c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000654  00800118  00800118  000020d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c79a  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f2  00000000  00000000  0000eaea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c23  00000000  00000000  0000fbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000710  00000000  00000000  00013800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000100b  00000000  00000000  00013f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006bcc  00000000  00000000  00014f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f50  00000000  00000000  0001bae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
       c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      44:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_17>
      48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
      68:	cb 01       	movw	r24, r22
      6a:	bb 01       	movw	r22, r22
      6c:	bb 01       	movw	r22, r22
      6e:	d6 01       	movw	r26, r12
      70:	d3 04       	cpc	r13, r3
      72:	bb 01       	movw	r22, r22
      74:	bb 01       	movw	r22, r22
      76:	82 05       	cpc	r24, r2
      78:	ee 05       	cpc	r30, r14
      7a:	c1 05       	cpc	r28, r1
      7c:	6a 04       	cpc	r6, r10
      7e:	33 05       	cpc	r19, r3
      80:	23 07       	cpc	r18, r19
      82:	54 06       	cpc	r5, r20
      84:	1e 02       	muls	r17, r30
      86:	4e 07       	cpc	r20, r30

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	11 e0       	ldi	r17, 0x01	; 1
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	ec e2       	ldi	r30, 0x2C	; 44
      9c:	f0 e2       	ldi	r31, 0x20	; 32
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a8 31       	cpi	r26, 0x18	; 24
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
      aa:	27 e0       	ldi	r18, 0x07	; 7
      ac:	a8 e1       	ldi	r26, 0x18	; 24
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
      b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
      b4:	ac 36       	cpi	r26, 0x6C	; 108
      b6:	b2 07       	cpc	r27, r18
      b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
      ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
      be:	0c 94 14 10 	jmp	0x2028	; 0x2028 <_exit>

000000c2 <__bad_interrupt>:
      c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:
static void loop(void);
static void setup_IndicatorLEDs(void);
static void setup_SpiCommunication(void);
static void setup_DetectorReadout(void);
int main()
{
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	c2 57       	subi	r28, 0x72	; 114
      d0:	d1 09       	sbc	r29, r1
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      dc:	38 9a       	sbi	0x07, 0	; 7
      de:	39 9a       	sbi	0x07, 1	; 7
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
      e0:	40 98       	cbi	0x08, 0	; 8
      e2:	41 98       	cbi	0x08, 1	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      e4:	29 9a       	sbi	0x05, 1	; 5
      e6:	21 9a       	sbi	0x04, 1	; 4
      e8:	24 9a       	sbi	0x04, 4	; 4
      ea:	8c b5       	in	r24, 0x2c	; 44
      ec:	80 64       	ori	r24, 0x40	; 64
      ee:	8c bd       	out	0x2c, r24	; 44
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
      f0:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
      f2:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
      f4:	8e b5       	in	r24, 0x2e	; 46
      f6:	8c b5       	in	r24, 0x2c	; 44
      f8:	80 68       	ori	r24, 0x80	; 128
      fa:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
      fc:	78 94       	sei
      * - initializes Queue with length 0\n 
      * */
    // Create a pointer to the global Queue.
    volatile Queue_s * pq = &Queue;
    // Assign Queue to access the array
    pq->buffer = buffer;
      fe:	8b e1       	ldi	r24, 0x1B	; 27
     100:	91 e0       	ldi	r25, 0x01	; 1
     102:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <Queue+0x1>
     106:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <Queue>
    // Store array size (this is the maximum length of the Queue)
    pq->max_length = buffer_size_in_bytes;
     10a:	88 e1       	ldi	r24, 0x18	; 24
     10c:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <Queue+0x5>
    // Empty the Rx Buffer: by setting head/tail index to first byte
    pq->head = 0;
     110:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <Queue+0x2>
    pq->tail = 0;
     114:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <Queue+0x3>
    // queue length is 0
    pq->length = 0;
     118:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <Queue+0x4>
     *   - see details in Queue_s
     * */
    // Configure as SPI slave, interrupts run `ISR(SPI_STC_vect)`
    SpiSlaveInit();
    // Queue incoming SPI bytes in a FIFO buffer.
    SpiFifo = QueueInit(spi_rx_buffer, max_length_of_queue);
     11c:	84 e6       	ldi	r24, 0x64	; 100
     11e:	97 e0       	ldi	r25, 0x07	; 7
     120:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
     124:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
    /** Configure USART to clock ADC SCK at `fosc/2 = 5MHz`
     *  - `fosc = 10MHz` (10MHz external oscillator)
     *  - **baudrate** in bits per second `= fosc/(2*(UBBR0+1))`
     *  - set `UBBR0=0` for **baudrate** `= fosc/2`
     * */
    *UartSpi_UBRR0 = 0;
     128:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     12c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     130:	54 9a       	sbi	0x0a, 4	; 10
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     132:	5a 98       	cbi	0x0b, 2	; 11
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     134:	52 9a       	sbi	0x0a, 2	; 10
     136:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     13a:	80 64       	ori	r24, 0x40	; 64
     13c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     140:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     144:	80 68       	ori	r24, 0x80	; 128
     146:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     14a:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     154:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     158:	82 60       	ori	r24, 0x02	; 2
     15a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     15e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     162:	8b 7f       	andi	r24, 0xFB	; 251
     164:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     168:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     16c:	80 61       	ori	r24, 0x10	; 16
     16e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     172:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     176:	88 60       	ori	r24, 0x08	; 8
     178:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     180:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     184:	20 9a       	sbi	0x04, 0	; 4
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     186:	28 98       	cbi	0x05, 0	; 5
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     188:	55 9a       	sbi	0x0a, 5	; 10
     18a:	56 9a       	sbi	0x0a, 6	; 10
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     18c:	5e 98       	cbi	0x0b, 6	; 11
     18e:	57 98       	cbi	0x0a, 7	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     190:	84 b5       	in	r24, 0x24	; 36
     192:	81 60       	ori	r24, 0x01	; 1
     194:	84 bd       	out	0x24, r24	; 36
     196:	84 b5       	in	r24, 0x24	; 36
     198:	82 60       	ori	r24, 0x02	; 2
     19a:	84 bd       	out	0x24, r24	; 36
     19c:	85 b5       	in	r24, 0x25	; 37
     19e:	88 60       	ori	r24, 0x08	; 8
     1a0:	85 bd       	out	0x25, r24	; 37
     1a2:	85 b5       	in	r24, 0x25	; 37
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	85 bd       	out	0x25, r24	; 37
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1a8:	85 b5       	in	r24, 0x25	; 37
     1aa:	8d 7f       	andi	r24, 0xFD	; 253
     1ac:	85 bd       	out	0x25, r24	; 37
     1ae:	85 b5       	in	r24, 0x25	; 37
     1b0:	8b 7f       	andi	r24, 0xFB	; 251
     1b2:	85 bd       	out	0x25, r24	; 37
    ResetPwmTimerAtTop();
    PwmTimerTopIsOCR0A();
    PwmTimerClockedByCpu_NoPrescaling();
    // timer top = 10MHz CPU clock / desired 50kHz PWM frequency
    // 10.0e6/50.0e3 = 200.0 tics
    *Lis_OCR0A = 200;
     1b4:	88 ec       	ldi	r24, 0xC8	; 200
     1b6:	87 bd       	out	0x27, r24	; 39
    // duty cycle = OCR0B/OCR0A
    // 50% = 100/200
    *Lis_OCR0B = 100;
     1b8:	84 e6       	ldi	r24, 0x64	; 100
     1ba:	88 bd       	out	0x28, r24	; 40
     1bc:	84 b5       	in	r24, 0x24	; 36
     1be:	8f 7e       	andi	r24, 0xEF	; 239
     1c0:	84 bd       	out	0x24, r24	; 36
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1c2:	84 b5       	in	r24, 0x24	; 36
     1c4:	80 62       	ori	r24, 0x20	; 32
     1c6:	84 bd       	out	0x24, r24	; 36
#ifdef S13131
    S13131PinSetup();
    S13131StartClocking();
#endif
    // Initialize exposure time to 1 millisecond
    exposure_ticks = 50; // 50 ticks = (1.0e-3 s)/(20.0e-6 s/tick)
     1c8:	82 e3       	ldi	r24, 0x32	; 50
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <exposure_ticks+0x1>
     1d0:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <exposure_ticks>
    // sts	0x011D, r25	; 0x80011d <exposure_ticks+0x1>
    // 1c8:	sts	0x011C, r24	; 0x80011c <exposure_ticks>

#ifdef LIS
    // Initialize LIS-770i configuration globals
    binning = BINNING_ON;
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <binning>
    gain = GAIN_1X;
     1da:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <gain>
    active_rows = ALL_ROWS_ACTIVE;
     1de:	8f e1       	ldi	r24, 0x1F	; 31
     1e0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <active_rows>
        config[2] |= row4_mask[1];
        config[3] |= row4_mask[0];
    }
    if (active_rows&(1<<row5))
    {
        config[0] |= row5_mask[3];
     1e4:	89 ef       	ldi	r24, 0xF9	; 249
     1e6:	89 83       	std	Y+1, r24	; 0x01
        config[1] |= row5_mask[2];
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	8a 83       	std	Y+2, r24	; 0x02
        config[2] |= row5_mask[1];
     1ec:	8b 83       	std	Y+3, r24	; 0x03
        config[3] |= row5_mask[0];
     1ee:	8f e0       	ldi	r24, 0x0F	; 15
     1f0:	8c 83       	std	Y+4, r24	; 0x04
     1f2:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
     1f4:	aa 9b       	sbis	0x15, 2	; 21
     1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0x12e>
     1f8:	28 9a       	sbi	0x05, 0	; 5
     1fa:	fe 01       	movw	r30, r28
     1fc:	31 96       	adiw	r30, 0x01	; 1
     1fe:	9e 01       	movw	r18, r28
     200:	2c 5f       	subi	r18, 0xFC	; 252
     202:	3f 4f       	sbci	r19, 0xFF	; 255
     204:	3e 83       	std	Y+6, r19	; 0x06
     206:	2d 83       	std	Y+5, r18	; 0x05
      * - waits for LisClk LOW\n 
      * */
    // Set up pin `Lis_Rst` with value to write
    BitIsSet((uint8_t *)config, bit_index) ?
        SetBit(Lis_port1, Lis_Rst)
        :
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	70 e0       	ldi	r23, 0x00	; 0
static void loop(void);
static void setup_IndicatorLEDs(void);
static void setup_SpiCommunication(void);
static void setup_DetectorReadout(void);
int main()
{
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
    *reg_addr &= ~(1<<bit);
}
// Read bits
inline bool BitIsSet(register_address reg_addr, bit_index bit)
{
    return *reg_addr & 1<<bit;
     210:	80 81       	ld	r24, Z
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ab 01       	movw	r20, r22
     216:	02 2e       	mov	r0, r18
     218:	02 c0       	rjmp	.+4      	; 0x21e <main+0x158>
     21a:	44 0f       	add	r20, r20
     21c:	55 1f       	adc	r21, r21
     21e:	0a 94       	dec	r0
     220:	e2 f7       	brpl	.-8      	; 0x21a <main+0x154>
     222:	84 23       	and	r24, r20
     224:	95 23       	and	r25, r21
     226:	89 2b       	or	r24, r25
     228:	09 f4       	brne	.+2      	; 0x22c <main+0x166>
     22a:	b7 c0       	rjmp	.+366    	; 0x39a <main+0x2d4>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     22c:	5e 9a       	sbi	0x0b, 6	; 11
     22e:	a9 9a       	sbi	0x15, 1	; 21
      * - waits until flag PwmTimerMatchesOCF0A is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0A
    SetBit(Lis_TIFR0, Lis_OCF0A);
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0A));
     230:	a9 9b       	sbis	0x15, 1	; 21
     232:	fe cf       	rjmp	.-4      	; 0x230 <main+0x16a>
     234:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
     236:	aa 9b       	sbis	0x15, 2	; 21
     238:	fe cf       	rjmp	.-4      	; 0x236 <main+0x170>
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
      * - writes 28bits starting at byte0 bit0 and ending at byte3 bit3\n 
      * */
    // Write all bits in the first three bytes of config
    for (uint8_t cfg_byte_i = 0; cfg_byte_i < 3; cfg_byte_i++)
    {
        for (uint8_t bit_i = 0; bit_i<8; bit_i++)
     23e:	28 30       	cpi	r18, 0x08	; 8
     240:	31 05       	cpc	r19, r1
     242:	31 f7       	brne	.-52     	; 0x210 <main+0x14a>
        {
            _WriteLisConfigBit(config, bit_i);
        }
        config++;
     244:	31 96       	adiw	r30, 0x01	; 1
{
    /** Write28bitLisConfig behavior:\n 
      * - writes 28bits starting at byte0 bit0 and ending at byte3 bit3\n 
      * */
    // Write all bits in the first three bytes of config
    for (uint8_t cfg_byte_i = 0; cfg_byte_i < 3; cfg_byte_i++)
     246:	4d 81       	ldd	r20, Y+5	; 0x05
     248:	5e 81       	ldd	r21, Y+6	; 0x06
     24a:	e4 17       	cp	r30, r20
     24c:	f5 07       	cpc	r31, r21
     24e:	f1 f6       	brne	.-68     	; 0x20c <main+0x146>
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
      * - waits for LisClk LOW\n 
      * */
    // Set up pin `Lis_Rst` with value to write
    BitIsSet((uint8_t *)config, bit_index) ?
        SetBit(Lis_port1, Lis_Rst)
        :
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	70 e0       	ldi	r23, 0x00	; 0
    *reg_addr &= ~(1<<bit);
}
// Read bits
inline bool BitIsSet(register_address reg_addr, bit_index bit)
{
    return *reg_addr & 1<<bit;
     258:	8c 81       	ldd	r24, Y+4	; 0x04
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	9b 01       	movw	r18, r22
     25e:	04 2e       	mov	r0, r20
     260:	02 c0       	rjmp	.+4      	; 0x266 <main+0x1a0>
     262:	22 0f       	add	r18, r18
     264:	33 1f       	adc	r19, r19
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <main+0x19c>
     26a:	82 23       	and	r24, r18
     26c:	93 23       	and	r25, r19
     26e:	89 2b       	or	r24, r25
     270:	09 f4       	brne	.+2      	; 0x274 <main+0x1ae>
     272:	95 c0       	rjmp	.+298    	; 0x39e <main+0x2d8>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     274:	5e 9a       	sbi	0x0b, 6	; 11
     276:	a9 9a       	sbi	0x15, 1	; 21
      * - waits until flag PwmTimerMatchesOCF0A is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0A
    SetBit(Lis_TIFR0, Lis_OCF0A);
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0A));
     278:	a9 9b       	sbis	0x15, 1	; 21
     27a:	fe cf       	rjmp	.-4      	; 0x278 <main+0x1b2>
     27c:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
     27e:	aa 9b       	sbis	0x15, 2	; 21
     280:	fe cf       	rjmp	.-4      	; 0x27e <main+0x1b8>
     282:	4f 5f       	subi	r20, 0xFF	; 255
     284:	5f 4f       	sbci	r21, 0xFF	; 255
        }
        config++;
    }
    // Write first four bits of last byte of config
    uint8_t bit_i = 0;
    while(bit_i < 4) _WriteLisConfigBit(config, bit_i++);
     286:	44 30       	cpi	r20, 0x04	; 4
     288:	51 05       	cpc	r21, r1
     28a:	31 f7       	brne	.-52     	; 0x258 <main+0x192>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     28c:	5e 98       	cbi	0x0b, 6	; 11
     28e:	28 98       	cbi	0x05, 0	; 5
#endif
    /* ------------------------------- */
    /* | Initialize AutoExposeConfig | */
    /* ------------------------------- */
    // Initialize default auto-expose maximum number of tries
    max_tries = 12;
     290:	8c e0       	ldi	r24, 0x0C	; 12
     292:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <max_tries>
#ifdef LIS
    // Initialize default auto-expose pixel range to all 392 pixels.
    // Recommend user application trims pixel range to match wavelength map.
    start_pixel = 7; // first 6 pixels are optically meaningless
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <start_pixel+0x1>
     29e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <start_pixel>
    stop_pixel = 392;
     2a2:	88 e8       	ldi	r24, 0x88	; 136
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <stop_pixel+0x1>
     2aa:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <stop_pixel>
#ifdef S13131
    start_pixel = 1;
    stop_pixel = 512;
#endif
    // Initialize default auto-expose target peak range to 46420 ± 3277 counts
    target = 46420;
     2ae:	84 e5       	ldi	r24, 0x54	; 84
     2b0:	95 eb       	ldi	r25, 0xB5	; 181
     2b2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <target+0x1>
     2b6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <target>
    target_tolerance = 3277;
     2ba:	8d ec       	ldi	r24, 0xCD	; 205
     2bc:	9c e0       	ldi	r25, 0x0C	; 12
     2be:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <target_tolerance+0x1>
     2c2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <target_tolerance>
    // Hard-code conservative estimate on dark offset
    // AutoExpose calculates gain ONLY when signal is above max_dark.
    // SetAutoExposeConfig guarantees target is not below max_dark.
    max_dark = 4500;
     2c6:	84 e9       	ldi	r24, 0x94	; 148
     2c8:	91 e1       	ldi	r25, 0x11	; 17
     2ca:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <max_dark+0x1>
     2ce:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <max_dark>
    // Hard-code minimum exposure time used by auto-expose.
#ifdef LIS
    // keep lower limit well-away from 1 cycle
    min_exposure = 5; // cycles
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <min_exposure+0x1>
     2da:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <min_exposure>
    // 9 is the minimum set by the internal S13131-512 logic
    min_exposure = 9; // cycles
#endif
    // Initialize default auto-expose maximum exposure time to try.
    // upper limit is 1.3s, but 200ms is a practical default limit
    max_exposure = 10000; // cycles
     2de:	80 e1       	ldi	r24, 0x10	; 16
     2e0:	97 e2       	ldi	r25, 0x27	; 39
     2e2:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <max_exposure+0x1>
     2e6:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <max_exposure>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     2ea:	55 24       	eor	r5, r5
     2ec:	53 94       	inc	r5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2ee:	8f e0       	ldi	r24, 0x0F	; 15
     2f0:	48 2e       	mov	r4, r24
      * - waits for LisClk LOW\n 
      * */
    // Set up pin `Lis_Rst` with value to write
    BitIsSet((uint8_t *)config, bit_index) ?
        SetBit(Lis_port1, Lis_Rst)
        :
     2f2:	22 24       	eor	r2, r2
     2f4:	23 94       	inc	r2
     2f6:	31 2c       	mov	r3, r1
    setup_DetectorReadout();
}
void loop(void)
{
    // Catch errors
    if (QueueIsFull(SpiFifo)) // 7 cycles
     2f8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
     2fc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x1>
{ //! Return true if Queue is full
    /** QueueIsFull behavior:\n 
      * - returns true if Queue is full\n 
      * - returns false if Queue is not full\n 
      * */
    if (pq->length >= pq->max_length) return true;
     300:	94 81       	ldd	r25, Z+4	; 0x04
     302:	85 81       	ldd	r24, Z+5	; 0x05
     304:	98 17       	cp	r25, r24
     306:	28 f0       	brcs	.+10     	; 0x312 <main+0x24c>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     308:	40 9a       	sbi	0x08, 0	; 8
     30a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
     30e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x1>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     312:	84 81       	ldd	r24, Z+4	; 0x04
     314:	88 23       	and	r24, r24
     316:	e9 f3       	breq	.-6      	; 0x312 <main+0x24c>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     318:	38 98       	cbi	0x07, 0	; 7
    // Idle until a command is received
    while (QueueIsEmpty(SpiFifo)); // 5 cycles
    // Execute the command.
    // BUSY
    BiColorLedOff(led_0);
    switch(QueuePop(SpiFifo))
     31a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end>
     31e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x1>
     322:	14 96       	adiw	r26, 0x04	; 4
     324:	8c 91       	ld	r24, X
     326:	14 97       	sbiw	r26, 0x04	; 4
     328:	88 23       	and	r24, r24
     32a:	a9 f1       	breq	.+106    	; 0x396 <main+0x2d0>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     32c:	13 96       	adiw	r26, 0x03	; 3
     32e:	9c 91       	ld	r25, X
     330:	13 97       	sbiw	r26, 0x03	; 3
     332:	15 96       	adiw	r26, 0x05	; 5
     334:	8c 91       	ld	r24, X
     336:	15 97       	sbiw	r26, 0x05	; 5
     338:	98 17       	cp	r25, r24
     33a:	18 f0       	brcs	.+6      	; 0x342 <main+0x27c>
     33c:	13 96       	adiw	r26, 0x03	; 3
     33e:	1c 92       	st	X, r1
     340:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     342:	14 96       	adiw	r26, 0x04	; 4
     344:	8c 91       	ld	r24, X
     346:	14 97       	sbiw	r26, 0x04	; 4
     348:	81 50       	subi	r24, 0x01	; 1
     34a:	14 96       	adiw	r26, 0x04	; 4
     34c:	8c 93       	st	X, r24
     34e:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     350:	ed 91       	ld	r30, X+
     352:	fc 91       	ld	r31, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	13 96       	adiw	r26, 0x03	; 3
     358:	8c 91       	ld	r24, X
     35a:	13 97       	sbiw	r26, 0x03	; 3
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	98 0f       	add	r25, r24
     360:	13 96       	adiw	r26, 0x03	; 3
     362:	9c 93       	st	X, r25
     364:	13 97       	sbiw	r26, 0x03	; 3
     366:	e8 0f       	add	r30, r24
     368:	f1 1d       	adc	r31, r1
     36a:	80 81       	ld	r24, Z
     36c:	48 2f       	mov	r20, r24
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	40 31       	cpi	r20, 0x10	; 16
     372:	51 05       	cpc	r21, r1
     374:	b0 f0       	brcs	.+44     	; 0x3a2 <main+0x2dc>
     376:	5e bc       	out	0x2e, r5	; 46
     378:	8c b5       	in	r24, 0x2c	; 44
     37a:	8f 77       	andi	r24, 0x7F	; 127
     37c:	8c bd       	out	0x2c, r24	; 44
     37e:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     380:	0d b4       	in	r0, 0x2d	; 45
     382:	07 fe       	sbrs	r0, 7
     384:	fd cf       	rjmp	.-6      	; 0x380 <main+0x2ba>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     386:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     388:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     38a:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     38c:	8e b5       	in	r24, 0x2e	; 46
     38e:	8c b5       	in	r24, 0x2c	; 44
     390:	80 68       	ori	r24, 0x80	; 128
     392:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     394:	78 94       	sei
     396:	38 9a       	sbi	0x07, 0	; 7
     398:	af cf       	rjmp	.-162    	; 0x2f8 <main+0x232>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     39a:	5e 98       	cbi	0x0b, 6	; 11
     39c:	48 cf       	rjmp	.-368    	; 0x22e <main+0x168>
     39e:	5e 98       	cbi	0x0b, 6	; 11
     3a0:	6a cf       	rjmp	.-300    	; 0x276 <main+0x1b0>
     3a2:	fa 01       	movw	r30, r20
     3a4:	ec 5c       	subi	r30, 0xCC	; 204
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__tablejump2__>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	8c 91       	ld	r24, X
     3b0:	14 97       	sbiw	r26, 0x04	; 4
     3b2:	88 23       	and	r24, r24
     3b4:	d9 f3       	breq	.-10     	; 0x3ac <main+0x2e6>
     3b6:	14 96       	adiw	r26, 0x04	; 4
     3b8:	8c 91       	ld	r24, X
     3ba:	14 97       	sbiw	r26, 0x04	; 4
     3bc:	88 23       	and	r24, r24
     3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x2fc>
     3c0:	10 c6       	rjmp	.+3104   	; 0xfe2 <__stack+0x6e3>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     3c2:	13 96       	adiw	r26, 0x03	; 3
     3c4:	9c 91       	ld	r25, X
     3c6:	13 97       	sbiw	r26, 0x03	; 3
     3c8:	15 96       	adiw	r26, 0x05	; 5
     3ca:	8c 91       	ld	r24, X
     3cc:	15 97       	sbiw	r26, 0x05	; 5
     3ce:	98 17       	cp	r25, r24
     3d0:	18 f0       	brcs	.+6      	; 0x3d8 <main+0x312>
     3d2:	13 96       	adiw	r26, 0x03	; 3
     3d4:	1c 92       	st	X, r1
     3d6:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     3d8:	14 96       	adiw	r26, 0x04	; 4
     3da:	8c 91       	ld	r24, X
     3dc:	14 97       	sbiw	r26, 0x04	; 4
     3de:	81 50       	subi	r24, 0x01	; 1
     3e0:	14 96       	adiw	r26, 0x04	; 4
     3e2:	8c 93       	st	X, r24
     3e4:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     3e6:	ed 91       	ld	r30, X+
     3e8:	fc 91       	ld	r31, X
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	13 96       	adiw	r26, 0x03	; 3
     3ee:	8c 91       	ld	r24, X
     3f0:	13 97       	sbiw	r26, 0x03	; 3
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	98 0f       	add	r25, r24
     3f6:	13 96       	adiw	r26, 0x03	; 3
     3f8:	9c 93       	st	X, r25
     3fa:	e8 0f       	add	r30, r24
     3fc:	f1 1d       	adc	r31, r1
     3fe:	80 81       	ld	r24, Z
    while (QueueIsEmpty(SpiFifo));
    
    // read led_num
    uint8_t led_num = QueuePop(SpiFifo);

    if (LedNumIsValid(led_num))
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	08 f4       	brcc	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     404:	f0 c5       	rjmp	.+3040   	; 0xfe6 <__stack+0x6e7>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     406:	5e bc       	out	0x2e, r5	; 46
     408:	8c b5       	in	r24, 0x2c	; 44
     40a:	8f 77       	andi	r24, 0x7F	; 127
     40c:	8c bd       	out	0x2c, r24	; 44
     40e:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     410:	0d b4       	in	r0, 0x2d	; 45
     412:	07 fe       	sbrs	r0, 7
     414:	fd cf       	rjmp	.-6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     416:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     418:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     41a:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     41c:	8e b5       	in	r24, 0x2e	; 46
     41e:	8c b5       	in	r24, 0x2c	; 44
     420:	80 68       	ori	r24, 0x80	; 128
     422:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     424:	78 94       	sei
    }
    else // led_num is invalid
    {
        // send ERROR and pad second byte
        SpiSlaveTxByte(ERROR);
        SpiSlaveTxByte(PADDING);
     426:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     42a:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     42c:	8c b5       	in	r24, 0x2c	; 44
     42e:	8f 77       	andi	r24, 0x7F	; 127
     430:	8c bd       	out	0x2c, r24	; 44
     432:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     434:	0d b4       	in	r0, 0x2d	; 45
     436:	07 fe       	sbrs	r0, 7
     438:	fd cf       	rjmp	.-6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     43a:	a5 cf       	rjmp	.-182    	; 0x386 <main+0x2c0>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     43c:	14 96       	adiw	r26, 0x04	; 4
     43e:	8c 91       	ld	r24, X
     440:	14 97       	sbiw	r26, 0x04	; 4
     442:	88 23       	and	r24, r24
     444:	d9 f3       	breq	.-10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     446:	14 96       	adiw	r26, 0x04	; 4
     448:	7c 90       	ld	r7, X
     44a:	14 97       	sbiw	r26, 0x04	; 4
     44c:	77 20       	and	r7, r7
     44e:	01 f1       	breq	.+64     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     450:	13 96       	adiw	r26, 0x03	; 3
     452:	9c 91       	ld	r25, X
     454:	13 97       	sbiw	r26, 0x03	; 3
     456:	15 96       	adiw	r26, 0x05	; 5
     458:	8c 91       	ld	r24, X
     45a:	15 97       	sbiw	r26, 0x05	; 5
     45c:	98 17       	cp	r25, r24
     45e:	18 f0       	brcs	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     460:	13 96       	adiw	r26, 0x03	; 3
     462:	1c 92       	st	X, r1
     464:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     466:	14 96       	adiw	r26, 0x04	; 4
     468:	8c 91       	ld	r24, X
     46a:	14 97       	sbiw	r26, 0x04	; 4
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	14 96       	adiw	r26, 0x04	; 4
     470:	8c 93       	st	X, r24
     472:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     474:	ed 91       	ld	r30, X+
     476:	fc 91       	ld	r31, X
     478:	11 97       	sbiw	r26, 0x01	; 1
     47a:	13 96       	adiw	r26, 0x03	; 3
     47c:	8c 91       	ld	r24, X
     47e:	13 97       	sbiw	r26, 0x03	; 3
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	98 0f       	add	r25, r24
     484:	13 96       	adiw	r26, 0x03	; 3
     486:	9c 93       	st	X, r25
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	e8 0f       	add	r30, r24
     48c:	f1 1d       	adc	r31, r1
     48e:	70 80       	ld	r7, Z
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     490:	14 96       	adiw	r26, 0x04	; 4
     492:	8c 91       	ld	r24, X
     494:	14 97       	sbiw	r26, 0x04	; 4
     496:	88 23       	and	r24, r24
     498:	d9 f3       	breq	.-10     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     49a:	14 96       	adiw	r26, 0x04	; 4
     49c:	8c 91       	ld	r24, X
     49e:	14 97       	sbiw	r26, 0x04	; 4
     4a0:	88 23       	and	r24, r24
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a4:	da c5       	rjmp	.+2996   	; 0x105a <__stack+0x75b>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     4a6:	13 96       	adiw	r26, 0x03	; 3
     4a8:	9c 91       	ld	r25, X
     4aa:	13 97       	sbiw	r26, 0x03	; 3
     4ac:	15 96       	adiw	r26, 0x05	; 5
     4ae:	8c 91       	ld	r24, X
     4b0:	15 97       	sbiw	r26, 0x05	; 5
     4b2:	98 17       	cp	r25, r24
     4b4:	18 f0       	brcs	.+6      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4b6:	13 96       	adiw	r26, 0x03	; 3
     4b8:	1c 92       	st	X, r1
     4ba:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     4bc:	14 96       	adiw	r26, 0x04	; 4
     4be:	8c 91       	ld	r24, X
     4c0:	14 97       	sbiw	r26, 0x04	; 4
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	14 96       	adiw	r26, 0x04	; 4
     4c6:	8c 93       	st	X, r24
     4c8:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     4ca:	ed 91       	ld	r30, X+
     4cc:	fc 91       	ld	r31, X
     4ce:	11 97       	sbiw	r26, 0x01	; 1
     4d0:	13 96       	adiw	r26, 0x03	; 3
     4d2:	8c 91       	ld	r24, X
     4d4:	13 97       	sbiw	r26, 0x03	; 3
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	98 0f       	add	r25, r24
     4da:	13 96       	adiw	r26, 0x03	; 3
     4dc:	9c 93       	st	X, r25
     4de:	13 97       	sbiw	r26, 0x03	; 3
     4e0:	e8 0f       	add	r30, r24
     4e2:	f1 1d       	adc	r31, r1
     4e4:	60 81       	ld	r22, Z
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	76 2f       	mov	r23, r22
     4ea:	66 27       	eor	r22, r22
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     4ec:	14 96       	adiw	r26, 0x04	; 4
     4ee:	8c 91       	ld	r24, X
     4f0:	14 97       	sbiw	r26, 0x04	; 4
     4f2:	88 23       	and	r24, r24
     4f4:	d9 f3       	breq	.-10     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4f6:	14 96       	adiw	r26, 0x04	; 4
     4f8:	8c 91       	ld	r24, X
     4fa:	14 97       	sbiw	r26, 0x04	; 4
     4fc:	88 23       	and	r24, r24
     4fe:	09 f4       	brne	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     500:	a9 c5       	rjmp	.+2898   	; 0x1054 <__stack+0x755>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     502:	13 96       	adiw	r26, 0x03	; 3
     504:	9c 91       	ld	r25, X
     506:	13 97       	sbiw	r26, 0x03	; 3
     508:	15 96       	adiw	r26, 0x05	; 5
     50a:	8c 91       	ld	r24, X
     50c:	15 97       	sbiw	r26, 0x05	; 5
     50e:	98 17       	cp	r25, r24
     510:	18 f0       	brcs	.+6      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     512:	13 96       	adiw	r26, 0x03	; 3
     514:	1c 92       	st	X, r1
     516:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     518:	14 96       	adiw	r26, 0x04	; 4
     51a:	8c 91       	ld	r24, X
     51c:	14 97       	sbiw	r26, 0x04	; 4
     51e:	81 50       	subi	r24, 0x01	; 1
     520:	14 96       	adiw	r26, 0x04	; 4
     522:	8c 93       	st	X, r24
     524:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     526:	ed 91       	ld	r30, X+
     528:	fc 91       	ld	r31, X
     52a:	11 97       	sbiw	r26, 0x01	; 1
     52c:	13 96       	adiw	r26, 0x03	; 3
     52e:	8c 91       	ld	r24, X
     530:	13 97       	sbiw	r26, 0x03	; 3
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	98 0f       	add	r25, r24
     536:	13 96       	adiw	r26, 0x03	; 3
     538:	9c 93       	st	X, r25
     53a:	13 97       	sbiw	r26, 0x03	; 3
     53c:	e8 0f       	add	r30, r24
     53e:	f1 1d       	adc	r31, r1
     540:	a0 80       	ld	r10, Z
     542:	b1 2c       	mov	r11, r1
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     544:	14 96       	adiw	r26, 0x04	; 4
     546:	8c 91       	ld	r24, X
     548:	14 97       	sbiw	r26, 0x04	; 4
     54a:	88 23       	and	r24, r24
     54c:	d9 f3       	breq	.-10     	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     54e:	14 96       	adiw	r26, 0x04	; 4
     550:	8c 91       	ld	r24, X
     552:	14 97       	sbiw	r26, 0x04	; 4
     554:	88 23       	and	r24, r24
     556:	09 f4       	brne	.+2      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
     558:	7a c5       	rjmp	.+2804   	; 0x104e <__stack+0x74f>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     55a:	13 96       	adiw	r26, 0x03	; 3
     55c:	9c 91       	ld	r25, X
     55e:	13 97       	sbiw	r26, 0x03	; 3
     560:	15 96       	adiw	r26, 0x05	; 5
     562:	8c 91       	ld	r24, X
     564:	15 97       	sbiw	r26, 0x05	; 5
     566:	98 17       	cp	r25, r24
     568:	18 f0       	brcs	.+6      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
     56a:	13 96       	adiw	r26, 0x03	; 3
     56c:	1c 92       	st	X, r1
     56e:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     570:	14 96       	adiw	r26, 0x04	; 4
     572:	8c 91       	ld	r24, X
     574:	14 97       	sbiw	r26, 0x04	; 4
     576:	81 50       	subi	r24, 0x01	; 1
     578:	14 96       	adiw	r26, 0x04	; 4
     57a:	8c 93       	st	X, r24
     57c:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     57e:	ed 91       	ld	r30, X+
     580:	fc 91       	ld	r31, X
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	13 96       	adiw	r26, 0x03	; 3
     586:	8c 91       	ld	r24, X
     588:	13 97       	sbiw	r26, 0x03	; 3
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	98 0f       	add	r25, r24
     58e:	13 96       	adiw	r26, 0x03	; 3
     590:	9c 93       	st	X, r25
     592:	13 97       	sbiw	r26, 0x03	; 3
     594:	e8 0f       	add	r30, r24
     596:	f1 1d       	adc	r31, r1
     598:	80 80       	ld	r8, Z
     59a:	91 2c       	mov	r9, r1
     59c:	98 2c       	mov	r9, r8
     59e:	88 24       	eor	r8, r8
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     5a0:	14 96       	adiw	r26, 0x04	; 4
     5a2:	8c 91       	ld	r24, X
     5a4:	14 97       	sbiw	r26, 0x04	; 4
     5a6:	88 23       	and	r24, r24
     5a8:	d9 f3       	breq	.-10     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
     5aa:	14 96       	adiw	r26, 0x04	; 4
     5ac:	8c 91       	ld	r24, X
     5ae:	14 97       	sbiw	r26, 0x04	; 4
     5b0:	88 23       	and	r24, r24
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     5b4:	49 c5       	rjmp	.+2706   	; 0x1048 <__stack+0x749>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	9c 91       	ld	r25, X
     5ba:	13 97       	sbiw	r26, 0x03	; 3
     5bc:	15 96       	adiw	r26, 0x05	; 5
     5be:	8c 91       	ld	r24, X
     5c0:	15 97       	sbiw	r26, 0x05	; 5
     5c2:	98 17       	cp	r25, r24
     5c4:	18 f0       	brcs	.+6      	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
     5c6:	13 96       	adiw	r26, 0x03	; 3
     5c8:	1c 92       	st	X, r1
     5ca:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     5cc:	14 96       	adiw	r26, 0x04	; 4
     5ce:	8c 91       	ld	r24, X
     5d0:	14 97       	sbiw	r26, 0x04	; 4
     5d2:	81 50       	subi	r24, 0x01	; 1
     5d4:	14 96       	adiw	r26, 0x04	; 4
     5d6:	8c 93       	st	X, r24
     5d8:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     5da:	ed 91       	ld	r30, X+
     5dc:	fc 91       	ld	r31, X
     5de:	11 97       	sbiw	r26, 0x01	; 1
     5e0:	13 96       	adiw	r26, 0x03	; 3
     5e2:	8c 91       	ld	r24, X
     5e4:	13 97       	sbiw	r26, 0x03	; 3
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	98 0f       	add	r25, r24
     5ea:	13 96       	adiw	r26, 0x03	; 3
     5ec:	9c 93       	st	X, r25
     5ee:	13 97       	sbiw	r26, 0x03	; 3
     5f0:	e8 0f       	add	r30, r24
     5f2:	f1 1d       	adc	r31, r1
     5f4:	c0 80       	ld	r12, Z
     5f6:	d1 2c       	mov	r13, r1
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     5f8:	14 96       	adiw	r26, 0x04	; 4
     5fa:	8c 91       	ld	r24, X
     5fc:	14 97       	sbiw	r26, 0x04	; 4
     5fe:	88 23       	and	r24, r24
     600:	d9 f3       	breq	.-10     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
     602:	14 96       	adiw	r26, 0x04	; 4
     604:	8c 91       	ld	r24, X
     606:	14 97       	sbiw	r26, 0x04	; 4
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
     60c:	4c c5       	rjmp	.+2712   	; 0x10a6 <__stack+0x7a7>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     60e:	13 96       	adiw	r26, 0x03	; 3
     610:	9c 91       	ld	r25, X
     612:	13 97       	sbiw	r26, 0x03	; 3
     614:	15 96       	adiw	r26, 0x05	; 5
     616:	8c 91       	ld	r24, X
     618:	15 97       	sbiw	r26, 0x05	; 5
     61a:	98 17       	cp	r25, r24
     61c:	18 f0       	brcs	.+6      	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
     61e:	13 96       	adiw	r26, 0x03	; 3
     620:	1c 92       	st	X, r1
     622:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     624:	14 96       	adiw	r26, 0x04	; 4
     626:	8c 91       	ld	r24, X
     628:	14 97       	sbiw	r26, 0x04	; 4
     62a:	81 50       	subi	r24, 0x01	; 1
     62c:	14 96       	adiw	r26, 0x04	; 4
     62e:	8c 93       	st	X, r24
     630:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     632:	ed 91       	ld	r30, X+
     634:	fc 91       	ld	r31, X
     636:	11 97       	sbiw	r26, 0x01	; 1
     638:	13 96       	adiw	r26, 0x03	; 3
     63a:	8c 91       	ld	r24, X
     63c:	13 97       	sbiw	r26, 0x03	; 3
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	98 0f       	add	r25, r24
     642:	13 96       	adiw	r26, 0x03	; 3
     644:	9c 93       	st	X, r25
     646:	13 97       	sbiw	r26, 0x03	; 3
     648:	e8 0f       	add	r30, r24
     64a:	f1 1d       	adc	r31, r1
     64c:	80 81       	ld	r24, Z
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	98 2f       	mov	r25, r24
     652:	88 27       	eor	r24, r24
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     654:	14 96       	adiw	r26, 0x04	; 4
     656:	2c 91       	ld	r18, X
     658:	14 97       	sbiw	r26, 0x04	; 4
     65a:	22 23       	and	r18, r18
     65c:	d9 f3       	breq	.-10     	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
     65e:	14 96       	adiw	r26, 0x04	; 4
     660:	2c 91       	ld	r18, X
     662:	14 97       	sbiw	r26, 0x04	; 4
     664:	22 23       	and	r18, r18
     666:	09 f4       	brne	.+2      	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
     668:	1b c5       	rjmp	.+2614   	; 0x10a0 <__stack+0x7a1>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     66a:	13 96       	adiw	r26, 0x03	; 3
     66c:	3c 91       	ld	r19, X
     66e:	13 97       	sbiw	r26, 0x03	; 3
     670:	15 96       	adiw	r26, 0x05	; 5
     672:	2c 91       	ld	r18, X
     674:	15 97       	sbiw	r26, 0x05	; 5
     676:	32 17       	cp	r19, r18
     678:	18 f0       	brcs	.+6      	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
     67a:	13 96       	adiw	r26, 0x03	; 3
     67c:	1c 92       	st	X, r1
     67e:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     680:	14 96       	adiw	r26, 0x04	; 4
     682:	2c 91       	ld	r18, X
     684:	14 97       	sbiw	r26, 0x04	; 4
     686:	21 50       	subi	r18, 0x01	; 1
     688:	14 96       	adiw	r26, 0x04	; 4
     68a:	2c 93       	st	X, r18
     68c:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	13 96       	adiw	r26, 0x03	; 3
     696:	2c 91       	ld	r18, X
     698:	13 97       	sbiw	r26, 0x03	; 3
     69a:	31 e0       	ldi	r19, 0x01	; 1
     69c:	32 0f       	add	r19, r18
     69e:	13 96       	adiw	r26, 0x03	; 3
     6a0:	3c 93       	st	X, r19
     6a2:	13 97       	sbiw	r26, 0x03	; 3
     6a4:	e2 0f       	add	r30, r18
     6a6:	f1 1d       	adc	r31, r1
     6a8:	00 81       	ld	r16, Z
     6aa:	10 e0       	ldi	r17, 0x00	; 0
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     6ac:	14 96       	adiw	r26, 0x04	; 4
     6ae:	2c 91       	ld	r18, X
     6b0:	14 97       	sbiw	r26, 0x04	; 4
     6b2:	22 23       	and	r18, r18
     6b4:	d9 f3       	breq	.-10     	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
     6b6:	14 96       	adiw	r26, 0x04	; 4
     6b8:	2c 91       	ld	r18, X
     6ba:	14 97       	sbiw	r26, 0x04	; 4
     6bc:	22 23       	and	r18, r18
     6be:	09 f4       	brne	.+2      	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
     6c0:	ec c4       	rjmp	.+2520   	; 0x109a <__stack+0x79b>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     6c2:	13 96       	adiw	r26, 0x03	; 3
     6c4:	3c 91       	ld	r19, X
     6c6:	13 97       	sbiw	r26, 0x03	; 3
     6c8:	15 96       	adiw	r26, 0x05	; 5
     6ca:	2c 91       	ld	r18, X
     6cc:	15 97       	sbiw	r26, 0x05	; 5
     6ce:	32 17       	cp	r19, r18
     6d0:	18 f0       	brcs	.+6      	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
     6d2:	13 96       	adiw	r26, 0x03	; 3
     6d4:	1c 92       	st	X, r1
     6d6:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     6d8:	14 96       	adiw	r26, 0x04	; 4
     6da:	2c 91       	ld	r18, X
     6dc:	14 97       	sbiw	r26, 0x04	; 4
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	14 96       	adiw	r26, 0x04	; 4
     6e2:	2c 93       	st	X, r18
     6e4:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     6e6:	ed 91       	ld	r30, X+
     6e8:	fc 91       	ld	r31, X
     6ea:	11 97       	sbiw	r26, 0x01	; 1
     6ec:	13 96       	adiw	r26, 0x03	; 3
     6ee:	2c 91       	ld	r18, X
     6f0:	13 97       	sbiw	r26, 0x03	; 3
     6f2:	31 e0       	ldi	r19, 0x01	; 1
     6f4:	32 0f       	add	r19, r18
     6f6:	13 96       	adiw	r26, 0x03	; 3
     6f8:	3c 93       	st	X, r19
     6fa:	13 97       	sbiw	r26, 0x03	; 3
     6fc:	e2 0f       	add	r30, r18
     6fe:	f1 1d       	adc	r31, r1
     700:	40 81       	ld	r20, Z
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	54 2f       	mov	r21, r20
     706:	44 27       	eor	r20, r20
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     708:	14 96       	adiw	r26, 0x04	; 4
     70a:	2c 91       	ld	r18, X
     70c:	14 97       	sbiw	r26, 0x04	; 4
     70e:	22 23       	and	r18, r18
     710:	d9 f3       	breq	.-10     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
     712:	14 96       	adiw	r26, 0x04	; 4
     714:	2c 91       	ld	r18, X
     716:	14 97       	sbiw	r26, 0x04	; 4
     718:	22 23       	and	r18, r18
     71a:	09 f4       	brne	.+2      	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
     71c:	b7 c4       	rjmp	.+2414   	; 0x108c <__stack+0x78d>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     71e:	13 96       	adiw	r26, 0x03	; 3
     720:	3c 91       	ld	r19, X
     722:	13 97       	sbiw	r26, 0x03	; 3
     724:	15 96       	adiw	r26, 0x05	; 5
     726:	2c 91       	ld	r18, X
     728:	15 97       	sbiw	r26, 0x05	; 5
     72a:	32 17       	cp	r19, r18
     72c:	18 f0       	brcs	.+6      	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
     72e:	13 96       	adiw	r26, 0x03	; 3
     730:	1c 92       	st	X, r1
     732:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     734:	14 96       	adiw	r26, 0x04	; 4
     736:	2c 91       	ld	r18, X
     738:	14 97       	sbiw	r26, 0x04	; 4
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	14 96       	adiw	r26, 0x04	; 4
     73e:	2c 93       	st	X, r18
     740:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     742:	ed 91       	ld	r30, X+
     744:	fc 91       	ld	r31, X
     746:	11 97       	sbiw	r26, 0x01	; 1
     748:	13 96       	adiw	r26, 0x03	; 3
     74a:	2c 91       	ld	r18, X
     74c:	13 97       	sbiw	r26, 0x03	; 3
     74e:	31 e0       	ldi	r19, 0x01	; 1
     750:	32 0f       	add	r19, r18
     752:	13 96       	adiw	r26, 0x03	; 3
     754:	3c 93       	st	X, r19
     756:	13 97       	sbiw	r26, 0x03	; 3
     758:	e2 0f       	add	r30, r18
     75a:	f1 1d       	adc	r31, r1
     75c:	e0 81       	ld	r30, Z
     75e:	2e 2f       	mov	r18, r30
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	e3 96       	adiw	r28, 0x33	; 51
     764:	3f af       	std	Y+63, r19	; 0x3f
     766:	2e af       	std	Y+62, r18	; 0x3e
     768:	e3 97       	sbiw	r28, 0x33	; 51
     76a:	f9 01       	movw	r30, r18
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     76c:	14 96       	adiw	r26, 0x04	; 4
     76e:	2c 91       	ld	r18, X
     770:	14 97       	sbiw	r26, 0x04	; 4
     772:	22 23       	and	r18, r18
     774:	d9 f3       	breq	.-10     	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
     776:	e3 96       	adiw	r28, 0x33	; 51
     778:	ff af       	std	Y+63, r31	; 0x3f
     77a:	ee af       	std	Y+62, r30	; 0x3e
     77c:	e3 97       	sbiw	r28, 0x33	; 51
     77e:	14 96       	adiw	r26, 0x04	; 4
     780:	2c 91       	ld	r18, X
     782:	14 97       	sbiw	r26, 0x04	; 4
     784:	22 23       	and	r18, r18
     786:	09 f4       	brne	.+2      	; 0x78a <__EEPROM_REGION_LENGTH__+0x38a>
     788:	94 c4       	rjmp	.+2344   	; 0x10b2 <__stack+0x7b3>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     78a:	13 96       	adiw	r26, 0x03	; 3
     78c:	3c 91       	ld	r19, X
     78e:	13 97       	sbiw	r26, 0x03	; 3
     790:	15 96       	adiw	r26, 0x05	; 5
     792:	2c 91       	ld	r18, X
     794:	15 97       	sbiw	r26, 0x05	; 5
     796:	32 17       	cp	r19, r18
     798:	18 f0       	brcs	.+6      	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
     79a:	13 96       	adiw	r26, 0x03	; 3
     79c:	1c 92       	st	X, r1
     79e:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     7a0:	14 96       	adiw	r26, 0x04	; 4
     7a2:	2c 91       	ld	r18, X
     7a4:	14 97       	sbiw	r26, 0x04	; 4
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	14 96       	adiw	r26, 0x04	; 4
     7aa:	2c 93       	st	X, r18
     7ac:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     7ae:	2d 91       	ld	r18, X+
     7b0:	3c 91       	ld	r19, X
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	13 96       	adiw	r26, 0x03	; 3
     7b6:	fc 90       	ld	r15, X
     7b8:	13 97       	sbiw	r26, 0x03	; 3
     7ba:	ee 24       	eor	r14, r14
     7bc:	e3 94       	inc	r14
     7be:	ef 0c       	add	r14, r15
     7c0:	13 96       	adiw	r26, 0x03	; 3
     7c2:	ec 92       	st	X, r14
     7c4:	13 97       	sbiw	r26, 0x03	; 3
     7c6:	2f 0d       	add	r18, r15
     7c8:	31 1d       	adc	r19, r1
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	32 2f       	mov	r19, r18
     7d2:	22 27       	eor	r18, r18
     7d4:	e3 96       	adiw	r28, 0x33	; 51
     7d6:	ee ad       	ldd	r30, Y+62	; 0x3e
     7d8:	ff ad       	ldd	r31, Y+63	; 0x3f
     7da:	e3 97       	sbiw	r28, 0x33	; 51
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     7dc:	14 96       	adiw	r26, 0x04	; 4
     7de:	fc 90       	ld	r15, X
     7e0:	14 97       	sbiw	r26, 0x04	; 4
     7e2:	ff 20       	and	r15, r15
     7e4:	d9 f3       	breq	.-10     	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
     7e6:	e3 96       	adiw	r28, 0x33	; 51
     7e8:	ff af       	std	Y+63, r31	; 0x3f
     7ea:	ee af       	std	Y+62, r30	; 0x3e
     7ec:	e3 97       	sbiw	r28, 0x33	; 51
     7ee:	14 96       	adiw	r26, 0x04	; 4
     7f0:	fc 90       	ld	r15, X
     7f2:	14 97       	sbiw	r26, 0x04	; 4
     7f4:	ff 20       	and	r15, r15
     7f6:	09 f4       	brne	.+2      	; 0x7fa <__EEPROM_REGION_LENGTH__+0x3fa>
     7f8:	59 c4       	rjmp	.+2226   	; 0x10ac <__stack+0x7ad>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     7fa:	13 96       	adiw	r26, 0x03	; 3
     7fc:	ec 90       	ld	r14, X
     7fe:	13 97       	sbiw	r26, 0x03	; 3
     800:	15 96       	adiw	r26, 0x05	; 5
     802:	fc 90       	ld	r15, X
     804:	15 97       	sbiw	r26, 0x05	; 5
     806:	ef 14       	cp	r14, r15
     808:	18 f0       	brcs	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80a:	13 96       	adiw	r26, 0x03	; 3
     80c:	1c 92       	st	X, r1
     80e:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     810:	14 96       	adiw	r26, 0x04	; 4
     812:	fc 90       	ld	r15, X
     814:	14 97       	sbiw	r26, 0x04	; 4
     816:	fa 94       	dec	r15
     818:	14 96       	adiw	r26, 0x04	; 4
     81a:	fc 92       	st	X, r15
     81c:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     81e:	ed 90       	ld	r14, X+
     820:	fc 90       	ld	r15, X
     822:	11 97       	sbiw	r26, 0x01	; 1
     824:	13 96       	adiw	r26, 0x03	; 3
     826:	6c 90       	ld	r6, X
     828:	13 97       	sbiw	r26, 0x03	; 3
     82a:	f1 e0       	ldi	r31, 0x01	; 1
     82c:	f6 0d       	add	r31, r6
     82e:	13 96       	adiw	r26, 0x03	; 3
     830:	fc 93       	st	X, r31
     832:	d7 01       	movw	r26, r14
     834:	a6 0d       	add	r26, r6
     836:	b1 1d       	adc	r27, r1
     838:	ac 91       	ld	r26, X
     83a:	b0 e0       	ldi	r27, 0x00	; 0
        uint16_t new_stop_pixel,
        uint16_t new_target
        )
{
    // Check max_tries is valid
    if (new_max_tries == 0) return false;
     83c:	77 20       	and	r7, r7
     83e:	09 f4       	brne	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	76 c3       	rjmp	.+1772   	; 0xf2e <__stack+0x62f>
    // get target
    while (QueueIsEmpty(SpiFifo));
    msb = QueuePop(SpiFifo);
    while (QueueIsEmpty(SpiFifo));
    lsb = QueuePop(SpiFifo);
    uint16_t new_target = (uint16_t)(msb << 8) | lsb;
     842:	80 2b       	or	r24, r16
     844:	91 2b       	or	r25, r17
{
    // Check max_tries is valid
    if (new_max_tries == 0) return false;

    // Check target is valid
    if (new_target < 4500) return false;
     846:	84 39       	cpi	r24, 0x94	; 148
     848:	f1 e1       	ldi	r31, 0x11	; 17
     84a:	9f 07       	cpc	r25, r31
     84c:	08 f4       	brcc	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     84e:	6f c3       	rjmp	.+1758   	; 0xf2e <__stack+0x62f>
    // get start pixel
    while (QueueIsEmpty(SpiFifo));
    msb = QueuePop(SpiFifo);
    while (QueueIsEmpty(SpiFifo));
    lsb = QueuePop(SpiFifo);
    uint16_t new_start_pixel = (uint16_t)(msb << 8) | lsb;
     850:	6a 29       	or	r22, r10
     852:	7b 29       	or	r23, r11
    // get stop pixel
    while (QueueIsEmpty(SpiFifo));
    msb = QueuePop(SpiFifo);
    while (QueueIsEmpty(SpiFifo));
    lsb = QueuePop(SpiFifo);
    uint16_t new_stop_pixel = (uint16_t)(msb << 8) | lsb;
     854:	c8 28       	or	r12, r8
     856:	d9 28       	or	r13, r9

    // Check target is valid
    if (new_target < 4500) return false;

    // Check stop_pixel is not less than start_pixel
    if (new_stop_pixel < new_start_pixel) return false;
     858:	c6 16       	cp	r12, r22
     85a:	d7 06       	cpc	r13, r23
     85c:	08 f4       	brcc	.+2      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     85e:	67 c3       	rjmp	.+1742   	; 0xf2e <__stack+0x62f>

#ifdef LIS
    // Check start_pixel and stop_pixel are in range
    if (binning == BINNING_ON)
     860:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <binning>
     864:	11 30       	cpi	r17, 0x01	; 1
     866:	09 f4       	brne	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     868:	55 c3       	rjmp	.+1706   	; 0xf14 <__stack+0x615>
        if ((new_start_pixel < 7) || (new_start_pixel > 392)) return false;
        if ((new_stop_pixel < 7) || (new_stop_pixel > 392)) return false;
    }
    else // (binning == BINNING_OFF)
    {
        if ((new_start_pixel < 14) || (new_start_pixel > 784)) return false;
     86a:	8b 01       	movw	r16, r22
     86c:	0e 50       	subi	r16, 0x0E	; 14
     86e:	11 09       	sbc	r17, r1
     870:	03 30       	cpi	r16, 0x03	; 3
     872:	13 40       	sbci	r17, 0x03	; 3
     874:	08 f0       	brcs	.+2      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     876:	5b c3       	rjmp	.+1718   	; 0xf2e <__stack+0x62f>
        if ((new_stop_pixel < 14) || (new_stop_pixel > 784)) return false;
     878:	86 01       	movw	r16, r12
     87a:	0e 50       	subi	r16, 0x0E	; 14
     87c:	11 09       	sbc	r17, r1
     87e:	03 30       	cpi	r16, 0x03	; 3
     880:	13 40       	sbci	r17, 0x03	; 3
     882:	08 f0       	brcs	.+2      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     884:	54 c3       	rjmp	.+1704   	; 0xf2e <__stack+0x62f>
        SpiSlaveTxByte(ERROR);
    }
    else // new config is valid
    {
        // update global config
        max_tries = new_max_tries;
     886:	70 92 3f 01 	sts	0x013F, r7	; 0x80013f <max_tries>
        start_pixel = new_start_pixel;
     88a:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <start_pixel+0x1>
     88e:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <start_pixel>
        stop_pixel = new_stop_pixel;
     892:	d0 92 3a 01 	sts	0x013A, r13	; 0x80013a <stop_pixel+0x1>
     896:	c0 92 39 01 	sts	0x0139, r12	; 0x800139 <stop_pixel>
        target = new_target;
     89a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <target+0x1>
     89e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <target>
        target_tolerance = new_target_tolerance;
     8a2:	e3 96       	adiw	r28, 0x33	; 51
     8a4:	8e ad       	ldd	r24, Y+62	; 0x3e
     8a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     8a8:	e3 97       	sbiw	r28, 0x33	; 51
     8aa:	48 2b       	or	r20, r24
     8ac:	59 2b       	or	r21, r25
     8ae:	50 93 38 01 	sts	0x0138, r21	; 0x800138 <target_tolerance+0x1>
     8b2:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <target_tolerance>
        max_exposure = new_max_exposure;
     8b6:	2a 2b       	or	r18, r26
     8b8:	3b 2b       	or	r19, r27
     8ba:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <max_exposure+0x1>
     8be:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <max_exposure>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     8c2:	1e bc       	out	0x2e, r1	; 46
     8c4:	8c b5       	in	r24, 0x2c	; 44
     8c6:	8f 77       	andi	r24, 0x7F	; 127
     8c8:	8c bd       	out	0x2c, r24	; 44
     8ca:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     8cc:	0d b4       	in	r0, 0x2d	; 45
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     8d2:	59 cd       	rjmp	.-1358   	; 0x386 <main+0x2c0>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     8d4:	14 96       	adiw	r26, 0x04	; 4
     8d6:	8c 91       	ld	r24, X
     8d8:	14 97       	sbiw	r26, 0x04	; 4
     8da:	88 23       	and	r24, r24
     8dc:	d9 f3       	breq	.-10     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
     8de:	14 96       	adiw	r26, 0x04	; 4
     8e0:	8c 91       	ld	r24, X
     8e2:	14 97       	sbiw	r26, 0x04	; 4
     8e4:	88 23       	and	r24, r24
     8e6:	09 f4       	brne	.+2      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     8e8:	ce c3       	rjmp	.+1948   	; 0x1086 <__stack+0x787>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	9c 91       	ld	r25, X
     8ee:	13 97       	sbiw	r26, 0x03	; 3
     8f0:	15 96       	adiw	r26, 0x05	; 5
     8f2:	8c 91       	ld	r24, X
     8f4:	15 97       	sbiw	r26, 0x05	; 5
     8f6:	98 17       	cp	r25, r24
     8f8:	18 f0       	brcs	.+6      	; 0x900 <__stack+0x1>
     8fa:	13 96       	adiw	r26, 0x03	; 3
     8fc:	1c 92       	st	X, r1
     8fe:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     900:	14 96       	adiw	r26, 0x04	; 4
     902:	8c 91       	ld	r24, X
     904:	14 97       	sbiw	r26, 0x04	; 4
     906:	81 50       	subi	r24, 0x01	; 1
     908:	14 96       	adiw	r26, 0x04	; 4
     90a:	8c 93       	st	X, r24
     90c:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     90e:	ed 91       	ld	r30, X+
     910:	fc 91       	ld	r31, X
     912:	11 97       	sbiw	r26, 0x01	; 1
     914:	13 96       	adiw	r26, 0x03	; 3
     916:	8c 91       	ld	r24, X
     918:	13 97       	sbiw	r26, 0x03	; 3
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	98 0f       	add	r25, r24
     91e:	13 96       	adiw	r26, 0x03	; 3
     920:	9c 93       	st	X, r25
     922:	13 97       	sbiw	r26, 0x03	; 3
     924:	e8 0f       	add	r30, r24
     926:	f1 1d       	adc	r31, r1
     928:	80 81       	ld	r24, Z
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	38 2f       	mov	r19, r24
     92e:	22 27       	eor	r18, r18
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     930:	14 96       	adiw	r26, 0x04	; 4
     932:	8c 91       	ld	r24, X
     934:	14 97       	sbiw	r26, 0x04	; 4
     936:	88 23       	and	r24, r24
     938:	d9 f3       	breq	.-10     	; 0x930 <__stack+0x31>
     93a:	14 96       	adiw	r26, 0x04	; 4
     93c:	8c 91       	ld	r24, X
     93e:	14 97       	sbiw	r26, 0x04	; 4
     940:	88 23       	and	r24, r24
     942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
     944:	7e c3       	rjmp	.+1788   	; 0x1042 <__stack+0x743>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	9c 91       	ld	r25, X
     94a:	13 97       	sbiw	r26, 0x03	; 3
     94c:	15 96       	adiw	r26, 0x05	; 5
     94e:	8c 91       	ld	r24, X
     950:	15 97       	sbiw	r26, 0x05	; 5
     952:	98 17       	cp	r25, r24
     954:	18 f0       	brcs	.+6      	; 0x95c <__stack+0x5d>
     956:	13 96       	adiw	r26, 0x03	; 3
     958:	1c 92       	st	X, r1
     95a:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     95c:	14 96       	adiw	r26, 0x04	; 4
     95e:	8c 91       	ld	r24, X
     960:	14 97       	sbiw	r26, 0x04	; 4
     962:	81 50       	subi	r24, 0x01	; 1
     964:	14 96       	adiw	r26, 0x04	; 4
     966:	8c 93       	st	X, r24
     968:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	13 96       	adiw	r26, 0x03	; 3
     972:	8c 91       	ld	r24, X
     974:	13 97       	sbiw	r26, 0x03	; 3
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	98 0f       	add	r25, r24
     97a:	13 96       	adiw	r26, 0x03	; 3
     97c:	9c 93       	st	X, r25
     97e:	e8 0f       	add	r30, r24
     980:	f1 1d       	adc	r31, r1
     982:	90 81       	ld	r25, Z
     984:	89 2f       	mov	r24, r25
     986:	90 e0       	ldi	r25, 0x00	; 0

    // read exposure_LSB
    uint8_t exposure_LSB = QueuePop(SpiFifo);

    // update global exposure_ticks
    exposure_ticks = (exposure_MSB << 8) | exposure_LSB;
     988:	82 2b       	or	r24, r18
     98a:	93 2b       	or	r25, r19
     98c:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <exposure_ticks+0x1>
     990:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <exposure_ticks>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     994:	1e bc       	out	0x2e, r1	; 46
     996:	8c b5       	in	r24, 0x2c	; 44
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	8c bd       	out	0x2c, r24	; 44
     99c:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     99e:	0d b4       	in	r0, 0x2d	; 45
     9a0:	07 fe       	sbrs	r0, 7
     9a2:	fd cf       	rjmp	.-6      	; 0x99e <__stack+0x9f>
     9a4:	f0 cc       	rjmp	.-1568   	; 0x386 <main+0x2c0>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     9a6:	14 96       	adiw	r26, 0x04	; 4
     9a8:	8c 91       	ld	r24, X
     9aa:	14 97       	sbiw	r26, 0x04	; 4
     9ac:	88 23       	and	r24, r24
     9ae:	d9 f3       	breq	.-10     	; 0x9a6 <__stack+0xa7>
     9b0:	14 96       	adiw	r26, 0x04	; 4
     9b2:	9c 91       	ld	r25, X
     9b4:	14 97       	sbiw	r26, 0x04	; 4
     9b6:	99 23       	and	r25, r25
     9b8:	01 f1       	breq	.+64     	; 0x9fa <__stack+0xfb>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     9ba:	13 96       	adiw	r26, 0x03	; 3
     9bc:	9c 91       	ld	r25, X
     9be:	13 97       	sbiw	r26, 0x03	; 3
     9c0:	15 96       	adiw	r26, 0x05	; 5
     9c2:	8c 91       	ld	r24, X
     9c4:	15 97       	sbiw	r26, 0x05	; 5
     9c6:	98 17       	cp	r25, r24
     9c8:	18 f0       	brcs	.+6      	; 0x9d0 <__stack+0xd1>
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	1c 92       	st	X, r1
     9ce:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     9d0:	14 96       	adiw	r26, 0x04	; 4
     9d2:	8c 91       	ld	r24, X
     9d4:	14 97       	sbiw	r26, 0x04	; 4
     9d6:	81 50       	subi	r24, 0x01	; 1
     9d8:	14 96       	adiw	r26, 0x04	; 4
     9da:	8c 93       	st	X, r24
     9dc:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     9de:	ed 91       	ld	r30, X+
     9e0:	fc 91       	ld	r31, X
     9e2:	11 97       	sbiw	r26, 0x01	; 1
     9e4:	13 96       	adiw	r26, 0x03	; 3
     9e6:	8c 91       	ld	r24, X
     9e8:	13 97       	sbiw	r26, 0x03	; 3
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	98 0f       	add	r25, r24
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	9c 93       	st	X, r25
     9f2:	13 97       	sbiw	r26, 0x03	; 3
     9f4:	e8 0f       	add	r30, r24
     9f6:	f1 1d       	adc	r31, r1
     9f8:	90 81       	ld	r25, Z
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     9fa:	14 96       	adiw	r26, 0x04	; 4
     9fc:	8c 91       	ld	r24, X
     9fe:	14 97       	sbiw	r26, 0x04	; 4
     a00:	88 23       	and	r24, r24
     a02:	d9 f3       	breq	.-10     	; 0x9fa <__stack+0xfb>
     a04:	14 96       	adiw	r26, 0x04	; 4
     a06:	8c 91       	ld	r24, X
     a08:	14 97       	sbiw	r26, 0x04	; 4
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x111>
     a0e:	28 c3       	rjmp	.+1616   	; 0x1060 <__stack+0x761>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     a10:	13 96       	adiw	r26, 0x03	; 3
     a12:	2c 91       	ld	r18, X
     a14:	13 97       	sbiw	r26, 0x03	; 3
     a16:	15 96       	adiw	r26, 0x05	; 5
     a18:	8c 91       	ld	r24, X
     a1a:	15 97       	sbiw	r26, 0x05	; 5
     a1c:	28 17       	cp	r18, r24
     a1e:	18 f0       	brcs	.+6      	; 0xa26 <__stack+0x127>
     a20:	13 96       	adiw	r26, 0x03	; 3
     a22:	1c 92       	st	X, r1
     a24:	13 97       	sbiw	r26, 0x03	; 3
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     a26:	14 96       	adiw	r26, 0x04	; 4
     a28:	8c 91       	ld	r24, X
     a2a:	14 97       	sbiw	r26, 0x04	; 4
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	8c 93       	st	X, r24
     a32:	14 97       	sbiw	r26, 0x04	; 4
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     a34:	ed 91       	ld	r30, X+
     a36:	fc 91       	ld	r31, X
     a38:	11 97       	sbiw	r26, 0x01	; 1
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	8c 91       	ld	r24, X
     a3e:	13 97       	sbiw	r26, 0x03	; 3
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	28 0f       	add	r18, r24
     a44:	13 96       	adiw	r26, 0x03	; 3
     a46:	2c 93       	st	X, r18
     a48:	e8 0f       	add	r30, r24
     a4a:	f1 1d       	adc	r31, r1
     a4c:	80 81       	ld	r24, Z
    while (QueueIsEmpty(SpiFifo));

    // read led_setting
    uint8_t led_setting = QueuePop(SpiFifo);

    if (!LedNumIsValid(led_num)) // led_num is invalid
     a4e:	92 30       	cpi	r25, 0x02	; 2
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__stack+0x155>
     a52:	ad c7       	rjmp	.+3930   	; 0x19ae <__stack+0x10af>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     a54:	5e bc       	out	0x2e, r5	; 46
     a56:	8c b5       	in	r24, 0x2c	; 44
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	8c bd       	out	0x2c, r24	; 44
     a5c:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     a5e:	0d b4       	in	r0, 0x2d	; 45
     a60:	07 fe       	sbrs	r0, 7
     a62:	fd cf       	rjmp	.-6      	; 0xa5e <__stack+0x15f>
     a64:	90 cc       	rjmp	.-1760   	; 0x386 <main+0x2c0>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     a66:	1e bc       	out	0x2e, r1	; 46
     a68:	8c b5       	in	r24, 0x2c	; 44
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	8c bd       	out	0x2c, r24	; 44
     a6e:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     a70:	0d b4       	in	r0, 0x2d	; 45
     a72:	07 fe       	sbrs	r0, 7
     a74:	fd cf       	rjmp	.-6      	; 0xa70 <__stack+0x171>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a76:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     a78:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     a7a:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     a7c:	8e b5       	in	r24, 0x2e	; 46
     a7e:	8c b5       	in	r24, 0x2c	; 44
     a80:	80 68       	ori	r24, 0x80	; 128
     a82:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     a84:	78 94       	sei
    SpiSlaveTxByte(OK);

#ifdef LIS
    // determine number of pixels
    uint16_t num_pixels;
    if (binning == BINNING_OFF) num_pixels = MAX_NUM_PIXELS;
     a86:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <binning>
     a8a:	81 11       	cpse	r24, r1
     a8c:	a3 c2       	rjmp	.+1350   	; 0xfd4 <__stack+0x6d5>
     a8e:	40 e2       	ldi	r20, 0x20	; 32
     a90:	56 e0       	ldi	r21, 0x06	; 6
     a92:	90 e1       	ldi	r25, 0x10	; 16
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	20 e1       	ldi	r18, 0x10	; 16
     a98:	33 e0       	ldi	r19, 0x03	; 3
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     a9a:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a9c:	8c b5       	in	r24, 0x2c	; 44
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	8c bd       	out	0x2c, r24	; 44
     aa2:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     aa4:	0d b4       	in	r0, 0x2d	; 45
     aa6:	07 fe       	sbrs	r0, 7
     aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <__stack+0x1a5>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     aaa:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     aac:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     aae:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     ab0:	8e b5       	in	r24, 0x2e	; 46
     ab2:	8c b5       	in	r24, 0x2c	; 44
     ab4:	80 68       	ori	r24, 0x80	; 128
     ab6:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     ab8:	78 94       	sei
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     aba:	9e bd       	out	0x2e, r25	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     abc:	8c b5       	in	r24, 0x2c	; 44
     abe:	8f 77       	andi	r24, 0x7F	; 127
     ac0:	8c bd       	out	0x2c, r24	; 44
     ac2:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     ac4:	0d b4       	in	r0, 0x2d	; 45
     ac6:	07 fe       	sbrs	r0, 7
     ac8:	fd cf       	rjmp	.-6      	; 0xac4 <__stack+0x1c5>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     aca:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     acc:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     ace:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     ad0:	8e b5       	in	r24, 0x2e	; 46
     ad2:	8c b5       	in	r24, 0x2c	; 44
     ad4:	80 68       	ori	r24, 0x80	; 128
     ad6:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     ad8:	78 94       	sei
     ada:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
     adc:	aa 9b       	sbis	0x15, 2	; 21
     ade:	fe cf       	rjmp	.-4      	; 0xadc <__stack+0x1dd>
     ae0:	5e 9a       	sbi	0x0b, 6	; 11

    // start exposure
    SetBit(Lis_port1, Lis_Rst); // sbi	0x0b, 6

    // count falling edges as ticks
    uint16_t tick_count = 0;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
    while (tick_count++ < exposure_ticks)
     ae6:	fc 01       	movw	r30, r24
     ae8:	31 96       	adiw	r30, 0x01	; 1
     aea:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <exposure_ticks>
     aee:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <exposure_ticks+0x1>
     af2:	86 17       	cp	r24, r22
     af4:	97 07       	cpc	r25, r23
     af6:	08 f0       	brcs	.+2      	; 0xafa <__stack+0x1fb>
     af8:	23 c2       	rjmp	.+1094   	; 0xf40 <__stack+0x641>
     afa:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
     afc:	aa 9b       	sbis	0x15, 2	; 21
     afe:	fe cf       	rjmp	.-4      	; 0xafc <__stack+0x1fd>
    // start exposure
    SetBit(Lis_port1, Lis_Rst); // sbi	0x0b, 6

    // count falling edges as ticks
    uint16_t tick_count = 0;
    while (tick_count++ < exposure_ticks)
     b00:	cf 01       	movw	r24, r30
     b02:	f1 cf       	rjmp	.-30     	; 0xae6 <__stack+0x1e7>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     b04:	1e bc       	out	0x2e, r1	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b06:	8c b5       	in	r24, 0x2c	; 44
     b08:	8f 77       	andi	r24, 0x7F	; 127
     b0a:	8c bd       	out	0x2c, r24	; 44
     b0c:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <__stack+0x20f>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b14:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     b16:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     b18:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     b1a:	8e b5       	in	r24, 0x2e	; 46
     b1c:	8c b5       	in	r24, 0x2c	; 44
     b1e:	80 68       	ori	r24, 0x80	; 128
     b20:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     b22:	78 94       	sei
      * - sends gain\n 
      * - sends row bitmap\n 
      * */

    SpiSlaveTxByte(OK);
    SpiSlaveTxByte(binning);
     b24:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <binning>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     b28:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b2a:	8c b5       	in	r24, 0x2c	; 44
     b2c:	8f 77       	andi	r24, 0x7F	; 127
     b2e:	8c bd       	out	0x2c, r24	; 44
     b30:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     b32:	0d b4       	in	r0, 0x2d	; 45
     b34:	07 fe       	sbrs	r0, 7
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <__stack+0x233>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b38:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     b3a:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     b3c:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     b3e:	8e b5       	in	r24, 0x2e	; 46
     b40:	8c b5       	in	r24, 0x2c	; 44
     b42:	80 68       	ori	r24, 0x80	; 128
     b44:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     b46:	78 94       	sei
    SpiSlaveTxByte(gain);
     b48:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <gain>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     b4c:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b4e:	8c b5       	in	r24, 0x2c	; 44
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	8c bd       	out	0x2c, r24	; 44
     b54:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     b56:	0d b4       	in	r0, 0x2d	; 45
     b58:	07 fe       	sbrs	r0, 7
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <__stack+0x257>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b5c:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     b5e:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     b60:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     b62:	8e b5       	in	r24, 0x2e	; 46
     b64:	8c b5       	in	r24, 0x2c	; 44
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     b6a:	78 94       	sei
    SpiSlaveTxByte(active_rows);
     b6c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <active_rows>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     b70:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b72:	8c b5       	in	r24, 0x2c	; 44
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c bd       	out	0x2c, r24	; 44
     b78:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     b7a:	0d b4       	in	r0, 0x2d	; 45
     b7c:	07 fe       	sbrs	r0, 7
     b7e:	fd cf       	rjmp	.-6      	; 0xb7a <__stack+0x27b>
     b80:	02 cc       	rjmp	.-2044   	; 0x386 <main+0x2c0>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     b82:	1e bc       	out	0x2e, r1	; 46
     b84:	8c b5       	in	r24, 0x2c	; 44
     b86:	8f 77       	andi	r24, 0x7F	; 127
     b88:	8c bd       	out	0x2c, r24	; 44
     b8a:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     b8c:	0d b4       	in	r0, 0x2d	; 45
     b8e:	07 fe       	sbrs	r0, 7
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <__stack+0x28d>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b92:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     b94:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     b96:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     b98:	8e b5       	in	r24, 0x2e	; 46
     b9a:	8c b5       	in	r24, 0x2c	; 44
     b9c:	80 68       	ori	r24, 0x80	; 128
     b9e:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     ba0:	78 94       	sei
inline uint8_t MSB(uint16_t msb_lsb)
{
    /** MSB behavior:\n 
      * - returns most significant bit of 16bit input\n 
      * */
    return msb_lsb >> 8;
     ba2:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <exposure_ticks+0x1>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     ba6:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ba8:	8c b5       	in	r24, 0x2c	; 44
     baa:	8f 77       	andi	r24, 0x7F	; 127
     bac:	8c bd       	out	0x2c, r24	; 44
     bae:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     bb0:	0d b4       	in	r0, 0x2d	; 45
     bb2:	07 fe       	sbrs	r0, 7
     bb4:	fd cf       	rjmp	.-6      	; 0xbb0 <__stack+0x2b1>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bb6:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     bb8:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     bba:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     bbc:	8e b5       	in	r24, 0x2e	; 46
     bbe:	8c b5       	in	r24, 0x2c	; 44
     bc0:	80 68       	ori	r24, 0x80	; 128
     bc2:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     bc4:	78 94       	sei
inline uint8_t LSB(uint16_t msb_lsb)
{
    /** LSB behavior:\n 
      * - returns least significant bit of 16bit input\n 
      * */
    return msb_lsb & 0xFF;
     bc6:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <exposure_ticks>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     bca:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bcc:	8c b5       	in	r24, 0x2c	; 44
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	8c bd       	out	0x2c, r24	; 44
     bd2:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     bd4:	0d b4       	in	r0, 0x2d	; 45
     bd6:	07 fe       	sbrs	r0, 7
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <__stack+0x2d5>
     bda:	d5 cb       	rjmp	.-2134   	; 0x386 <main+0x2c0>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     bdc:	1e bc       	out	0x2e, r1	; 46
     bde:	9c b5       	in	r25, 0x2c	; 44
     be0:	9f 77       	andi	r25, 0x7F	; 127
     be2:	9c bd       	out	0x2c, r25	; 44
     be4:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     be6:	0d b4       	in	r0, 0x2d	; 45
     be8:	07 fe       	sbrs	r0, 7
     bea:	fd cf       	rjmp	.-6      	; 0xbe6 <__stack+0x2e7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bec:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     bee:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     bf0:	9d b5       	in	r25, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     bf2:	9e b5       	in	r25, 0x2e	; 46
     bf4:	9c b5       	in	r25, 0x2c	; 44
     bf6:	90 68       	ori	r25, 0x80	; 128
     bf8:	9c bd       	out	0x2c, r25	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     bfa:	78 94       	sei
     bfc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
     c00:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x1>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     c04:	94 81       	ldd	r25, Z+4	; 0x04
     c06:	99 23       	and	r25, r25
     c08:	e9 f3       	breq	.-6      	; 0xc04 <__stack+0x305>
     c0a:	34 81       	ldd	r19, Z+4	; 0x04
     c0c:	33 23       	and	r19, r19
     c0e:	89 f0       	breq	.+34     	; 0xc32 <__stack+0x333>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     c10:	23 81       	ldd	r18, Z+3	; 0x03
     c12:	95 81       	ldd	r25, Z+5	; 0x05
     c14:	29 17       	cp	r18, r25
     c16:	08 f0       	brcs	.+2      	; 0xc1a <__stack+0x31b>
     c18:	13 82       	std	Z+3, r1	; 0x03
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     c1a:	94 81       	ldd	r25, Z+4	; 0x04
     c1c:	91 50       	subi	r25, 0x01	; 1
     c1e:	94 83       	std	Z+4, r25	; 0x04
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     c20:	a0 81       	ld	r26, Z
     c22:	b1 81       	ldd	r27, Z+1	; 0x01
     c24:	93 81       	ldd	r25, Z+3	; 0x03
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	29 0f       	add	r18, r25
     c2a:	23 83       	std	Z+3, r18	; 0x03
     c2c:	a9 0f       	add	r26, r25
     c2e:	b1 1d       	adc	r27, r1
     c30:	3c 91       	ld	r19, X
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     c32:	94 81       	ldd	r25, Z+4	; 0x04
     c34:	99 23       	and	r25, r25
     c36:	e9 f3       	breq	.-6      	; 0xc32 <__stack+0x333>
     c38:	24 81       	ldd	r18, Z+4	; 0x04
     c3a:	22 23       	and	r18, r18
     c3c:	89 f0       	breq	.+34     	; 0xc60 <__stack+0x361>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     c3e:	23 81       	ldd	r18, Z+3	; 0x03
     c40:	95 81       	ldd	r25, Z+5	; 0x05
     c42:	29 17       	cp	r18, r25
     c44:	08 f0       	brcs	.+2      	; 0xc48 <__stack+0x349>
     c46:	13 82       	std	Z+3, r1	; 0x03
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     c48:	94 81       	ldd	r25, Z+4	; 0x04
     c4a:	91 50       	subi	r25, 0x01	; 1
     c4c:	94 83       	std	Z+4, r25	; 0x04
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     c4e:	a0 81       	ld	r26, Z
     c50:	b1 81       	ldd	r27, Z+1	; 0x01
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	21 e0       	ldi	r18, 0x01	; 1
     c56:	29 0f       	add	r18, r25
     c58:	23 83       	std	Z+3, r18	; 0x03
     c5a:	a9 0f       	add	r26, r25
     c5c:	b1 1d       	adc	r27, r1
     c5e:	2c 91       	ld	r18, X
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     c60:	94 81       	ldd	r25, Z+4	; 0x04
     c62:	99 23       	and	r25, r25
     c64:	e9 f3       	breq	.-6      	; 0xc60 <__stack+0x361>
     c66:	94 81       	ldd	r25, Z+4	; 0x04
     c68:	99 23       	and	r25, r25
     c6a:	91 f0       	breq	.+36     	; 0xc90 <__stack+0x391>
      * - returns 0 if Queue is empty\n 
      * - hits end of buffer and wraps around if Queue is not empty\n 
      * */
    if (QueueIsEmpty(pq)) return 0;
    // wrap tail to beginning of buffer when it reaches the end of the buffer
    if (pq->tail >= pq->max_length) pq->tail = 0;
     c6c:	43 81       	ldd	r20, Z+3	; 0x03
     c6e:	95 81       	ldd	r25, Z+5	; 0x05
     c70:	49 17       	cp	r20, r25
     c72:	08 f0       	brcs	.+2      	; 0xc76 <__stack+0x377>
     c74:	13 82       	std	Z+3, r1	; 0x03
    //  1c0:	cp	r25, r24
    //  1c2:	brcs	.+2      	; 0x1c6 <main+0x120>
    //  1c4:	std	Z+3, r1	; 0x03
    // Total number of cycles: 9
    // Total number of instructions: 5
    pq->length--;
     c76:	94 81       	ldd	r25, Z+4	; 0x04
     c78:	91 50       	subi	r25, 0x01	; 1
     c7a:	94 83       	std	Z+4, r25	; 0x04
    //  1c8:	subi	r24, 0x01	; 1
    //  1ca:	std	Z+4, r24	; 0x04
    // Total number of cycles: 5
    // Total number of instructions: 3
    // Return the byte. Remove byte from Queue by advancing "tail".
    return pq->buffer[pq->tail++];
     c7c:	40 81       	ld	r20, Z
     c7e:	51 81       	ldd	r21, Z+1	; 0x01
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	69 0f       	add	r22, r25
     c86:	63 83       	std	Z+3, r22	; 0x03
     c88:	fa 01       	movw	r30, r20
     c8a:	e9 0f       	add	r30, r25
     c8c:	f1 1d       	adc	r31, r1
     c8e:	90 81       	ld	r25, Z
            (gain == GAIN_1X)  ||
            (gain == GAIN_2X5) ||
            (gain == GAIN_4X)  ||
            (gain == GAIN_5X)
        )
        &&
     c90:	32 30       	cpi	r19, 0x02	; 2
     c92:	08 f4       	brcc	.+2      	; 0xc96 <__stack+0x397>
     c94:	11 c2       	rjmp	.+1058   	; 0x10b8 <__stack+0x7b9>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     c96:	5e bc       	out	0x2e, r5	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c98:	8c b5       	in	r24, 0x2c	; 44
     c9a:	8f 77       	andi	r24, 0x7F	; 127
     c9c:	8c bd       	out	0x2c, r24	; 44
     c9e:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     ca0:	0d b4       	in	r0, 0x2d	; 45
     ca2:	07 fe       	sbrs	r0, 7
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <__stack+0x3a1>
     ca6:	6f cb       	rjmp	.-2338   	; 0x386 <main+0x2c0>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     ca8:	1e bc       	out	0x2e, r1	; 46
     caa:	8c b5       	in	r24, 0x2c	; 44
     cac:	8f 77       	andi	r24, 0x7F	; 127
     cae:	8c bd       	out	0x2c, r24	; 44
     cb0:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     cb2:	0d b4       	in	r0, 0x2d	; 45
     cb4:	07 fe       	sbrs	r0, 7
     cb6:	fd cf       	rjmp	.-6      	; 0xcb2 <__stack+0x3b3>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cb8:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     cba:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     cbc:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     cbe:	8e b5       	in	r24, 0x2e	; 46
     cc0:	8c b5       	in	r24, 0x2c	; 44
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     cc6:	78 94       	sei
}

inline void GetAutoExposeConfig(void)
{
    SpiSlaveTxByte(OK);
    SpiSlaveTxByte(max_tries);
     cc8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <max_tries>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     ccc:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     cce:	8c b5       	in	r24, 0x2c	; 44
     cd0:	8f 77       	andi	r24, 0x7F	; 127
     cd2:	8c bd       	out	0x2c, r24	; 44
     cd4:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     cd6:	0d b4       	in	r0, 0x2d	; 45
     cd8:	07 fe       	sbrs	r0, 7
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <__stack+0x3d7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cdc:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     cde:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     ce0:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     ce2:	8e b5       	in	r24, 0x2e	; 46
     ce4:	8c b5       	in	r24, 0x2c	; 44
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     cea:	78 94       	sei
inline uint8_t MSB(uint16_t msb_lsb)
{
    /** MSB behavior:\n 
      * - returns most significant bit of 16bit input\n 
      * */
    return msb_lsb >> 8;
     cec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <start_pixel+0x1>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     cf0:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     cf2:	8c b5       	in	r24, 0x2c	; 44
     cf4:	8f 77       	andi	r24, 0x7F	; 127
     cf6:	8c bd       	out	0x2c, r24	; 44
     cf8:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     cfa:	0d b4       	in	r0, 0x2d	; 45
     cfc:	07 fe       	sbrs	r0, 7
     cfe:	fd cf       	rjmp	.-6      	; 0xcfa <__stack+0x3fb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d00:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     d02:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     d04:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     d06:	8e b5       	in	r24, 0x2e	; 46
     d08:	8c b5       	in	r24, 0x2c	; 44
     d0a:	80 68       	ori	r24, 0x80	; 128
     d0c:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     d0e:	78 94       	sei
inline uint8_t LSB(uint16_t msb_lsb)
{
    /** LSB behavior:\n 
      * - returns least significant bit of 16bit input\n 
      * */
    return msb_lsb & 0xFF;
     d10:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <start_pixel>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     d14:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d16:	8c b5       	in	r24, 0x2c	; 44
     d18:	8f 77       	andi	r24, 0x7F	; 127
     d1a:	8c bd       	out	0x2c, r24	; 44
     d1c:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     d1e:	0d b4       	in	r0, 0x2d	; 45
     d20:	07 fe       	sbrs	r0, 7
     d22:	fd cf       	rjmp	.-6      	; 0xd1e <__stack+0x41f>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d24:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     d26:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     d28:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     d2a:	8e b5       	in	r24, 0x2e	; 46
     d2c:	8c b5       	in	r24, 0x2c	; 44
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     d32:	78 94       	sei
inline uint8_t MSB(uint16_t msb_lsb)
{
    /** MSB behavior:\n 
      * - returns most significant bit of 16bit input\n 
      * */
    return msb_lsb >> 8;
     d34:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <stop_pixel+0x1>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     d38:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d3a:	8c b5       	in	r24, 0x2c	; 44
     d3c:	8f 77       	andi	r24, 0x7F	; 127
     d3e:	8c bd       	out	0x2c, r24	; 44
     d40:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     d42:	0d b4       	in	r0, 0x2d	; 45
     d44:	07 fe       	sbrs	r0, 7
     d46:	fd cf       	rjmp	.-6      	; 0xd42 <__stack+0x443>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d48:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     d4a:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     d4c:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     d4e:	8e b5       	in	r24, 0x2e	; 46
     d50:	8c b5       	in	r24, 0x2c	; 44
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     d56:	78 94       	sei
inline uint8_t LSB(uint16_t msb_lsb)
{
    /** LSB behavior:\n 
      * - returns least significant bit of 16bit input\n 
      * */
    return msb_lsb & 0xFF;
     d58:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <stop_pixel>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     d5c:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d5e:	8c b5       	in	r24, 0x2c	; 44
     d60:	8f 77       	andi	r24, 0x7F	; 127
     d62:	8c bd       	out	0x2c, r24	; 44
     d64:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     d66:	0d b4       	in	r0, 0x2d	; 45
     d68:	07 fe       	sbrs	r0, 7
     d6a:	fd cf       	rjmp	.-6      	; 0xd66 <__stack+0x467>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d6c:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     d6e:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     d70:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     d72:	8e b5       	in	r24, 0x2e	; 46
     d74:	8c b5       	in	r24, 0x2c	; 44
     d76:	80 68       	ori	r24, 0x80	; 128
     d78:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     d7a:	78 94       	sei
inline uint8_t MSB(uint16_t msb_lsb)
{
    /** MSB behavior:\n 
      * - returns most significant bit of 16bit input\n 
      * */
    return msb_lsb >> 8;
     d7c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <target+0x1>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     d80:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d82:	8c b5       	in	r24, 0x2c	; 44
     d84:	8f 77       	andi	r24, 0x7F	; 127
     d86:	8c bd       	out	0x2c, r24	; 44
     d88:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     d8a:	0d b4       	in	r0, 0x2d	; 45
     d8c:	07 fe       	sbrs	r0, 7
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <__stack+0x48b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d90:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     d92:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     d94:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     d96:	8e b5       	in	r24, 0x2e	; 46
     d98:	8c b5       	in	r24, 0x2c	; 44
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     d9e:	78 94       	sei
inline uint8_t LSB(uint16_t msb_lsb)
{
    /** LSB behavior:\n 
      * - returns least significant bit of 16bit input\n 
      * */
    return msb_lsb & 0xFF;
     da0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <target>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     da4:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     da6:	8c b5       	in	r24, 0x2c	; 44
     da8:	8f 77       	andi	r24, 0x7F	; 127
     daa:	8c bd       	out	0x2c, r24	; 44
     dac:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     dae:	0d b4       	in	r0, 0x2d	; 45
     db0:	07 fe       	sbrs	r0, 7
     db2:	fd cf       	rjmp	.-6      	; 0xdae <__stack+0x4af>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     db4:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     db6:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     db8:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     dba:	8e b5       	in	r24, 0x2e	; 46
     dbc:	8c b5       	in	r24, 0x2c	; 44
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     dc2:	78 94       	sei
inline uint8_t MSB(uint16_t msb_lsb)
{
    /** MSB behavior:\n 
      * - returns most significant bit of 16bit input\n 
      * */
    return msb_lsb >> 8;
     dc4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <target_tolerance+0x1>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     dc8:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     dca:	8c b5       	in	r24, 0x2c	; 44
     dcc:	8f 77       	andi	r24, 0x7F	; 127
     dce:	8c bd       	out	0x2c, r24	; 44
     dd0:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     dd2:	0d b4       	in	r0, 0x2d	; 45
     dd4:	07 fe       	sbrs	r0, 7
     dd6:	fd cf       	rjmp	.-6      	; 0xdd2 <__stack+0x4d3>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     dd8:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     dda:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     ddc:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     dde:	8e b5       	in	r24, 0x2e	; 46
     de0:	8c b5       	in	r24, 0x2c	; 44
     de2:	80 68       	ori	r24, 0x80	; 128
     de4:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     de6:	78 94       	sei
inline uint8_t LSB(uint16_t msb_lsb)
{
    /** LSB behavior:\n 
      * - returns least significant bit of 16bit input\n 
      * */
    return msb_lsb & 0xFF;
     de8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <target_tolerance>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     dec:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     dee:	8c b5       	in	r24, 0x2c	; 44
     df0:	8f 77       	andi	r24, 0x7F	; 127
     df2:	8c bd       	out	0x2c, r24	; 44
     df4:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     df6:	0d b4       	in	r0, 0x2d	; 45
     df8:	07 fe       	sbrs	r0, 7
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <__stack+0x4f7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     dfc:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     dfe:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     e00:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     e02:	8e b5       	in	r24, 0x2e	; 46
     e04:	8c b5       	in	r24, 0x2c	; 44
     e06:	80 68       	ori	r24, 0x80	; 128
     e08:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     e0a:	78 94       	sei
inline uint8_t MSB(uint16_t msb_lsb)
{
    /** MSB behavior:\n 
      * - returns most significant bit of 16bit input\n 
      * */
    return msb_lsb >> 8;
     e0c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <max_exposure+0x1>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     e10:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e12:	8c b5       	in	r24, 0x2c	; 44
     e14:	8f 77       	andi	r24, 0x7F	; 127
     e16:	8c bd       	out	0x2c, r24	; 44
     e18:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     e1a:	0d b4       	in	r0, 0x2d	; 45
     e1c:	07 fe       	sbrs	r0, 7
     e1e:	fd cf       	rjmp	.-6      	; 0xe1a <__stack+0x51b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e20:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     e22:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     e24:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     e26:	8e b5       	in	r24, 0x2e	; 46
     e28:	8c b5       	in	r24, 0x2c	; 44
     e2a:	80 68       	ori	r24, 0x80	; 128
     e2c:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     e2e:	78 94       	sei
inline uint8_t LSB(uint16_t msb_lsb)
{
    /** LSB behavior:\n 
      * - returns least significant bit of 16bit input\n 
      * */
    return msb_lsb & 0xFF;
     e30:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <max_exposure>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     e34:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e36:	8c b5       	in	r24, 0x2c	; 44
     e38:	8f 77       	andi	r24, 0x7F	; 127
     e3a:	8c bd       	out	0x2c, r24	; 44
     e3c:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     e3e:	0d b4       	in	r0, 0x2d	; 45
     e40:	07 fe       	sbrs	r0, 7
     e42:	fd cf       	rjmp	.-6      	; 0xe3e <__stack+0x53f>
     e44:	a0 ca       	rjmp	.-2752   	; 0x386 <main+0x2c0>

inline void AutoExposure(void)
{

    // auto-expose, report result:
    uint16_t result = AutoExpose();
     e46:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <AutoExpose>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     e4a:	1e bc       	out	0x2e, r1	; 46
     e4c:	2c b5       	in	r18, 0x2c	; 44
     e4e:	2f 77       	andi	r18, 0x7F	; 127
     e50:	2c bd       	out	0x2c, r18	; 44
     e52:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     e54:	0d b4       	in	r0, 0x2d	; 45
     e56:	07 fe       	sbrs	r0, 7
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <__stack+0x555>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e5a:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     e5c:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     e5e:	2d b5       	in	r18, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     e60:	2e b5       	in	r18, 0x2e	; 46
     e62:	2c b5       	in	r18, 0x2c	; 44
     e64:	20 68       	ori	r18, 0x80	; 128
     e66:	2c bd       	out	0x2c, r18	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     e68:	78 94       	sei
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     e6a:	9e bd       	out	0x2e, r25	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e6c:	9c b5       	in	r25, 0x2c	; 44
     e6e:	9f 77       	andi	r25, 0x7F	; 127
     e70:	9c bd       	out	0x2c, r25	; 44
     e72:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     e74:	0d b4       	in	r0, 0x2d	; 45
     e76:	07 fe       	sbrs	r0, 7
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <__stack+0x575>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e7a:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     e7c:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     e7e:	9d b5       	in	r25, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     e80:	9e b5       	in	r25, 0x2e	; 46
     e82:	9c b5       	in	r25, 0x2c	; 44
     e84:	90 68       	ori	r25, 0x80	; 128
     e86:	9c bd       	out	0x2c, r25	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     e88:	78 94       	sei
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     e8a:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e8c:	8c b5       	in	r24, 0x2c	; 44
     e8e:	8f 77       	andi	r24, 0x7F	; 127
     e90:	8c bd       	out	0x2c, r24	; 44
     e92:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     e94:	0d b4       	in	r0, 0x2d	; 45
     e96:	07 fe       	sbrs	r0, 7
     e98:	fd cf       	rjmp	.-6      	; 0xe94 <__stack+0x595>
     e9a:	75 ca       	rjmp	.-2838   	; 0x386 <main+0x2c0>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     e9c:	1e bc       	out	0x2e, r1	; 46
     e9e:	8c b5       	in	r24, 0x2c	; 44
     ea0:	8f 77       	andi	r24, 0x7F	; 127
     ea2:	8c bd       	out	0x2c, r24	; 44
     ea4:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     ea6:	0d b4       	in	r0, 0x2d	; 45
     ea8:	07 fe       	sbrs	r0, 7
     eaa:	fd cf       	rjmp	.-6      	; 0xea6 <__stack+0x5a7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     eac:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     eae:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     eb0:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     eb2:	8e b5       	in	r24, 0x2e	; 46
     eb4:	8c b5       	in	r24, 0x2c	; 44
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     eba:	78 94       	sei
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     ebc:	85 e3       	ldi	r24, 0x35	; 53
     ebe:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ec0:	8c b5       	in	r24, 0x2c	; 44
     ec2:	8f 77       	andi	r24, 0x7F	; 127
     ec4:	8c bd       	out	0x2c, r24	; 44
     ec6:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     ec8:	0d b4       	in	r0, 0x2d	; 45
     eca:	07 fe       	sbrs	r0, 7
     ecc:	fd cf       	rjmp	.-6      	; 0xec8 <__stack+0x5c9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ece:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     ed0:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     ed2:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     ed4:	8e b5       	in	r24, 0x2e	; 46
     ed6:	8c b5       	in	r24, 0x2c	; 44
     ed8:	80 68       	ori	r24, 0x80	; 128
     eda:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     edc:	78 94       	sei
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     ede:	8e e1       	ldi	r24, 0x1E	; 30
     ee0:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ee2:	8c b5       	in	r24, 0x2c	; 44
     ee4:	8f 77       	andi	r24, 0x7F	; 127
     ee6:	8c bd       	out	0x2c, r24	; 44
     ee8:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     eea:	0d b4       	in	r0, 0x2d	; 45
     eec:	07 fe       	sbrs	r0, 7
     eee:	fd cf       	rjmp	.-6      	; 0xeea <__stack+0x5eb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ef0:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     ef2:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     ef4:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     ef6:	8e b5       	in	r24, 0x2e	; 46
     ef8:	8c b5       	in	r24, 0x2c	; 44
     efa:	80 68       	ori	r24, 0x80	; 128
     efc:	8c bd       	out	0x2c, r24	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
     efe:	78 94       	sei
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     f00:	89 ea       	ldi	r24, 0xA9	; 169
     f02:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f04:	8c b5       	in	r24, 0x2c	; 44
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	8c bd       	out	0x2c, r24	; 44
     f0a:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     f0c:	0d b4       	in	r0, 0x2d	; 45
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <__stack+0x60d>
     f12:	39 ca       	rjmp	.-2958   	; 0x386 <main+0x2c0>

#ifdef LIS
    // Check start_pixel and stop_pixel are in range
    if (binning == BINNING_ON)
    {
        if ((new_start_pixel < 7) || (new_start_pixel > 392)) return false;
     f14:	8b 01       	movw	r16, r22
     f16:	07 50       	subi	r16, 0x07	; 7
     f18:	11 09       	sbc	r17, r1
     f1a:	02 38       	cpi	r16, 0x82	; 130
     f1c:	11 40       	sbci	r17, 0x01	; 1
     f1e:	38 f4       	brcc	.+14     	; 0xf2e <__stack+0x62f>
        if ((new_stop_pixel < 7) || (new_stop_pixel > 392)) return false;
     f20:	86 01       	movw	r16, r12
     f22:	07 50       	subi	r16, 0x07	; 7
     f24:	11 09       	sbc	r17, r1
     f26:	02 38       	cpi	r16, 0x82	; 130
     f28:	11 40       	sbci	r17, 0x01	; 1
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <__stack+0x62f>
     f2c:	ac cc       	rjmp	.-1704   	; 0x886 <__DATA_REGION_LENGTH__+0x86>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     f2e:	5e bc       	out	0x2e, r5	; 46
     f30:	8c b5       	in	r24, 0x2c	; 44
     f32:	8f 77       	andi	r24, 0x7F	; 127
     f34:	8c bd       	out	0x2c, r24	; 44
     f36:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     f38:	0d b4       	in	r0, 0x2d	; 45
     f3a:	07 fe       	sbrs	r0, 7
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <__stack+0x639>
     f3e:	23 ca       	rjmp	.-3002   	; 0x386 <main+0x2c0>
     f40:	5e 98       	cbi	0x0b, 6	; 11
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     f42:	89 b1       	in	r24, 0x09	; 9
      * - LOOP: wait for least significant byte of ADC readout\n 
      * - LOOP: save LSB to frame buffer\n 
      * */

    // wait for SYNC pulse to signify readout starts
    while( BitIsClear(Lis_pin1, Lis_Sync) ); // wait for SYNC HIGH
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	88 0f       	add	r24, r24
     f48:	89 2f       	mov	r24, r25
     f4a:	88 1f       	adc	r24, r24
     f4c:	99 0b       	sbc	r25, r25
     f4e:	89 2b       	or	r24, r25
     f50:	c1 f3       	breq	.-16     	; 0xf42 <__stack+0x643>
    while(   BitIsSet(Lis_pin1, Lis_Sync) ); // wait for SYNC LOW
     f52:	4f 99       	sbic	0x09, 7	; 9
     f54:	fe cf       	rjmp	.-4      	; 0xf52 <__stack+0x653>
     f56:	a4 e4       	ldi	r26, 0x44	; 68
     f58:	b1 e0       	ldi	r27, 0x01	; 1
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	2c 5b       	subi	r18, 0xBC	; 188
     f60:	3e 4f       	sbci	r19, 0xFE	; 254
     f62:	fd 01       	movw	r30, r26
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f64:	a9 9a       	sbi	0x15, 1	; 21
      * - waits until flag PwmTimerMatchesOCF0A is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0A
    SetBit(Lis_TIFR0, Lis_OCF0A);
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0A));
     f66:	a9 9b       	sbis	0x15, 1	; 21
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <__stack+0x667>
     f6a:	5a 9a       	sbi	0x0b, 2	; 11
     f6c:	84 2d       	mov	r24, r4
     f6e:	8a 95       	dec	r24
     f70:	f1 f7       	brne	.-4      	; 0xf6e <__stack+0x66f>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f72:	5a 98       	cbi	0x0b, 2	; 11
}
inline void StartAdcReadout(void)
{
    ClearBit(UartSpi_port, UartSpi_AdcConv);
    // write two dummy bytes to transfer 16 bits
    *UartSpi_UDR0 = 0x00; *UartSpi_UDR0 = 0x00;
     f74:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f78:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     f7c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

        // start 16-bit ADC readout
        StartAdcReadout();

        // wait for MSB of ADC readout
        while (BitIsClear(UartSpi_UCSR0A, UartSpi_RXC0));
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 0f       	add	r24, r24
     f84:	89 2f       	mov	r24, r25
     f86:	88 1f       	adc	r24, r24
     f88:	99 0b       	sbc	r25, r25
     f8a:	89 2b       	or	r24, r25
     f8c:	b9 f3       	breq	.-18     	; 0xf7c <__stack+0x67d>

        // save MSB to frame buffer
        *(pframe++) = *UartSpi_UDR0;
     f8e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     f92:	80 83       	st	Z, r24
     f94:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

        // wait for LSB of ADC readout
        while (BitIsClear(UartSpi_UCSR0A, UartSpi_RXC0));
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 0f       	add	r24, r24
     f9c:	89 2f       	mov	r24, r25
     f9e:	88 1f       	adc	r24, r24
     fa0:	99 0b       	sbc	r25, r25
     fa2:	89 2b       	or	r24, r25
     fa4:	b9 f3       	breq	.-18     	; 0xf94 <__stack+0x695>

        // save LSB to frame buffer
        *(pframe++) = *UartSpi_UDR0;
     fa6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     faa:	81 83       	std	Z+1, r24	; 0x01
     fac:	32 96       	adiw	r30, 0x02	; 2
    /* --------------------------------------------------------- */
    /* | LOOP: read one pixel on each rising edge of Lis clock | */
    /* --------------------------------------------------------- */
    uint16_t pixel_count = 0;
    uint8_t *pframe = frame;
    while( pixel_count++ < num_pixels)
     fae:	e2 17       	cp	r30, r18
     fb0:	f3 07       	cpc	r31, r19
     fb2:	c1 f6       	brne	.-80     	; 0xf64 <__stack+0x665>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fb4:	8c b5       	in	r24, 0x2c	; 44
     fb6:	8f 77       	andi	r24, 0x7F	; 127
     fb8:	8c bd       	out	0x2c, r24	; 44
     fba:	4c 5b       	subi	r20, 0xBC	; 188
     fbc:	5e 4f       	sbci	r21, 0xFE	; 254
    uint16_t byte_count = 0;
    uint16_t nbytes = 2*num_pixels;
    while( byte_count++ < nbytes )
    {
        // load the SPI data register with the next byte
        *Spi_SPDR = *(pframe++);
     fbe:	8d 91       	ld	r24, X+
     fc0:	8e bd       	out	0x2e, r24	; 46
     fc2:	29 98       	cbi	0x05, 1	; 5

        _SignalDataReady();

        // Wait for a byte from the SPI Master.
        while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     fc4:	0d b4       	in	r0, 0x2d	; 45
     fc6:	07 fe       	sbrs	r0, 7
     fc8:	fd cf       	rjmp	.-6      	; 0xfc4 <__stack+0x6c5>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     fca:	29 9a       	sbi	0x05, 1	; 5
    // start at MSB of first pixel
    uint8_t *pframe = frame;

    uint16_t byte_count = 0;
    uint16_t nbytes = 2*num_pixels;
    while( byte_count++ < nbytes )
     fcc:	a4 17       	cp	r26, r20
     fce:	b5 07       	cpc	r27, r21
     fd0:	b1 f7       	brne	.-20     	; 0xfbe <__stack+0x6bf>
     fd2:	da c9       	rjmp	.-3148   	; 0x388 <main+0x2c2>
    SpiSlaveTxByte(OK);

#ifdef LIS
    // determine number of pixels
    uint16_t num_pixels;
    if (binning == BINNING_OFF) num_pixels = MAX_NUM_PIXELS;
     fd4:	40 e1       	ldi	r20, 0x10	; 16
     fd6:	53 e0       	ldi	r21, 0x03	; 3
     fd8:	98 e8       	ldi	r25, 0x88	; 136
     fda:	81 e0       	ldi	r24, 0x01	; 1
    else num_pixels = MAX_NUM_PIXELS/2;
     fdc:	28 e8       	ldi	r18, 0x88	; 136
     fde:	31 e0       	ldi	r19, 0x01	; 1
     fe0:	5c cd       	rjmp	.-1352   	; 0xa9a <__stack+0x19b>
{ //! Return true if Queue is empty
    /** QueueIsEmpty behavior:\n 
      * - returns true if Queue is empty\n 
      * - returns false if Queue is not empty\n 
      * */
    if (pq->length == 0) return true;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
     fe6:	1e bc       	out	0x2e, r1	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fe8:	2c b5       	in	r18, 0x2c	; 44
     fea:	2f 77       	andi	r18, 0x7F	; 127
     fec:	2c bd       	out	0x2c, r18	; 44
     fee:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
     ff0:	0d b4       	in	r0, 0x2d	; 45
     ff2:	07 fe       	sbrs	r0, 7
     ff4:	fd cf       	rjmp	.-6      	; 0xff0 <__stack+0x6f1>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ff6:	29 9a       	sbi	0x05, 1	; 5
     *   - alternatively, SPIF is cleared by first reading the
     *     SPI status register, then accessing the SPI data
     *     register\n 
     * */
    // Global interrupt disable
    cli(); // cli
     ff8:	f8 94       	cli
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
     ffa:	2d b5       	in	r18, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
     ffc:	2e b5       	in	r18, 0x2e	; 46
     ffe:	2c b5       	in	r18, 0x2c	; 44
    1000:	20 68       	ori	r18, 0x80	; 128
    1002:	2c bd       	out	0x2c, r18	; 44
    // out 0x2c, r24
    // This is three instructions because SPCR is outside the
    // address range for using `sbi`.
    //
    // Global interrupt enable
    sei(); // sei
    1004:	78 94       	sei
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    1006:	27 b1       	in	r18, 0x07	; 7
      * - returns GREEN if LED is on and green\n 
      * - returns RED if LED is on and red\n 
      * - see led_state in StatusCodes.h
      * */

    if (BitIsClear(BiColorLed_ddr, led_num))
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	08 2e       	mov	r0, r24
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <__stack+0x713>
    100e:	35 95       	asr	r19
    1010:	27 95       	ror	r18
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <__stack+0x70f>
    1016:	20 ff       	sbrs	r18, 0
    1018:	dd c4       	rjmp	.+2490   	; 0x19d4 <__stack+0x10d5>
    101a:	28 b1       	in	r18, 0x08	; 8
        return OFF;
    else // LED is on
        return BitIsClear(BiColorLed_port, led_num)
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <__stack+0x727>
    1022:	f5 95       	asr	r31
    1024:	e7 95       	ror	r30
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <__stack+0x723>
    102a:	e0 fd       	sbrc	r30, 0
    102c:	2a c5       	rjmp	.+2644   	; 0x1a82 <__stack+0x1183>
    102e:	81 e0       	ldi	r24, 0x01	; 1
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
    1030:	8e bd       	out	0x2e, r24	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1032:	8c b5       	in	r24, 0x2c	; 44
    1034:	8f 77       	andi	r24, 0x7F	; 127
    1036:	8c bd       	out	0x2c, r24	; 44
    1038:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
    103a:	0d b4       	in	r0, 0x2d	; 45
    103c:	07 fe       	sbrs	r0, 7
    103e:	fd cf       	rjmp	.-6      	; 0x103a <__stack+0x73b>
    1040:	a2 c9       	rjmp	.-3260   	; 0x386 <main+0x2c0>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 cc       	rjmp	.-1728   	; 0x988 <__stack+0x89>
    1048:	c1 2c       	mov	r12, r1
    104a:	d1 2c       	mov	r13, r1
    104c:	d5 ca       	rjmp	.-2646   	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
    104e:	81 2c       	mov	r8, r1
    1050:	91 2c       	mov	r9, r1
    1052:	a6 ca       	rjmp	.-2740   	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
    1054:	a1 2c       	mov	r10, r1
    1056:	b1 2c       	mov	r11, r1
    1058:	75 ca       	rjmp	.-2838   	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	46 ca       	rjmp	.-2932   	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
    while (QueueIsEmpty(SpiFifo));

    // read led_setting
    uint8_t led_setting = QueuePop(SpiFifo);

    if (!LedNumIsValid(led_num)) // led_num is invalid
    1060:	92 30       	cpi	r25, 0x02	; 2
    1062:	08 f0       	brcs	.+2      	; 0x1066 <__stack+0x767>
    1064:	f7 cc       	rjmp	.-1554   	; 0xa54 <__stack+0x155>
    }
    else // led_num and led_setting are valid
    {
        // lookup led_num
        uint8_t led;
        switch (led_num)
    1066:	91 30       	cpi	r25, 0x01	; 1
    1068:	09 f4       	brne	.+2      	; 0x106c <__stack+0x76d>
    106a:	09 c5       	rjmp	.+2578   	; 0x1a7e <__stack+0x117f>
    106c:	8e ef       	ldi	r24, 0xFE	; 254
    106e:	97 b1       	in	r25, 0x07	; 7
    1070:	89 23       	and	r24, r25
    1072:	87 b9       	out	0x07, r24	; 7
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
    1074:	1e bc       	out	0x2e, r1	; 46
    1076:	8c b5       	in	r24, 0x2c	; 44
    1078:	8f 77       	andi	r24, 0x7F	; 127
    107a:	8c bd       	out	0x2c, r24	; 44
    107c:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
    107e:	0d b4       	in	r0, 0x2d	; 45
    1080:	07 fe       	sbrs	r0, 7
    1082:	fd cf       	rjmp	.-6      	; 0x107e <__stack+0x77f>
    1084:	80 c9       	rjmp	.-3328   	; 0x386 <main+0x2c0>
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	52 cc       	rjmp	.-1884   	; 0x930 <__stack+0x31>
    108c:	e3 96       	adiw	r28, 0x33	; 51
    108e:	1f ae       	std	Y+63, r1	; 0x3f
    1090:	1e ae       	std	Y+62, r1	; 0x3e
    1092:	e3 97       	sbiw	r28, 0x33	; 51
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	69 cb       	rjmp	.-2350   	; 0x76c <__EEPROM_REGION_LENGTH__+0x36c>
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	34 cb       	rjmp	.-2456   	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
    10a0:	00 e0       	ldi	r16, 0x00	; 0
    10a2:	10 e0       	ldi	r17, 0x00	; 0
    10a4:	03 cb       	rjmp	.-2554   	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	d4 ca       	rjmp	.-2648   	; 0x654 <__EEPROM_REGION_LENGTH__+0x254>
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	c5 cb       	rjmp	.-2166   	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	92 cb       	rjmp	.-2268   	; 0x7dc <__EEPROM_REGION_LENGTH__+0x3dc>
      * */
    return
        (
            (binning == BINNING_OFF) || (binning == BINNING_ON)
        )
        &&
    10b8:	21 30       	cpi	r18, 0x01	; 1
    10ba:	39 f0       	breq	.+14     	; 0x10ca <__stack+0x7cb>
        (
            (gain == GAIN_1X)  ||
    10bc:	25 32       	cpi	r18, 0x25	; 37
    10be:	29 f0       	breq	.+10     	; 0x10ca <__stack+0x7cb>
            (gain == GAIN_2X5) ||
    10c0:	4c ef       	ldi	r20, 0xFC	; 252
    10c2:	42 0f       	add	r20, r18
    10c4:	42 30       	cpi	r20, 0x02	; 2
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__stack+0x7cb>
    10c8:	e6 cd       	rjmp	.-1076   	; 0xc96 <__stack+0x397>
            (gain == GAIN_4X)  ||
            (gain == GAIN_5X)
        )
        &&
    10ca:	49 2f       	mov	r20, r25
    10cc:	40 7e       	andi	r20, 0xE0	; 224
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__stack+0x7d3>
    10d0:	e2 cd       	rjmp	.-1084   	; 0xc96 <__stack+0x397>
        // Reply with error if any config value is invalid
        SpiSlaveTxByte(ERROR);
        return;
    }
    // New config is valid, update global config
    binning     = new_binning;
    10d2:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <binning>
    gain        = new_gain;
    10d6:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <gain>
    active_rows = new_active_rows;
    10da:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <active_rows>
    // std	Y+3, r24	; 0x03
    // ldi	r24, 0x0F	; 15
    // std	Y+4, r24	; 0x04

    // Clear all bits in array at input address `config`.
    config[0]=0x00; config[1]=0x00; config[2]=0x00; config[3]=0x00;
    10de:	19 82       	std	Y+1, r1	; 0x01
    10e0:	1a 82       	std	Y+2, r1	; 0x02
    10e2:	1b 82       	std	Y+3, r1	; 0x03
    10e4:	1c 82       	std	Y+4, r1	; 0x04
    // binning is bit 0 of byte 0
    uint8_t bit = 0;
    if (BINNING_ON == binning) config[0] |= 1<<(bit++);
    10e6:	31 30       	cpi	r19, 0x01	; 1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <__stack+0x7ed>
    10ea:	07 c3       	rjmp	.+1550   	; 0x16fa <__stack+0xdfb>
    10ec:	b8 2e       	mov	r11, r24
    10ee:	04 e8       	ldi	r16, 0x84	; 132
    10f0:	e1 96       	adiw	r28, 0x31	; 49
    10f2:	0f af       	std	Y+63, r16	; 0x3f
    10f4:	e1 97       	sbiw	r28, 0x31	; 49
    10f6:	34 ec       	ldi	r19, 0xC4	; 196
    10f8:	e0 96       	adiw	r28, 0x30	; 48
    10fa:	3f af       	std	Y+63, r19	; 0x3f
    10fc:	e0 97       	sbiw	r28, 0x30	; 48
    10fe:	44 e4       	ldi	r20, 0x44	; 68
    1100:	af 96       	adiw	r28, 0x2f	; 47
    1102:	4f af       	std	Y+63, r20	; 0x3f
    1104:	af 97       	sbiw	r28, 0x2f	; 47
    1106:	54 ea       	ldi	r21, 0xA4	; 164
    1108:	ae 96       	adiw	r28, 0x2e	; 46
    110a:	5f af       	std	Y+63, r21	; 0x3f
    110c:	ae 97       	sbiw	r28, 0x2e	; 46
    110e:	a4 ee       	ldi	r26, 0xE4	; 228
    1110:	ad 96       	adiw	r28, 0x2d	; 45
    1112:	af af       	std	Y+63, r26	; 0x3f
    1114:	ad 97       	sbiw	r28, 0x2d	; 45
    1116:	e4 e6       	ldi	r30, 0x64	; 100
    1118:	ac 96       	adiw	r28, 0x2c	; 44
    111a:	ef af       	std	Y+63, r30	; 0x3f
    111c:	ac 97       	sbiw	r28, 0x2c	; 44
    111e:	f4 e2       	ldi	r31, 0x24	; 36
    1120:	ab 96       	adiw	r28, 0x2b	; 43
    1122:	ff af       	std	Y+63, r31	; 0x3f
    1124:	ab 97       	sbiw	r28, 0x2b	; 43
    1126:	04 e9       	ldi	r16, 0x94	; 148
    1128:	aa 96       	adiw	r28, 0x2a	; 42
    112a:	0f af       	std	Y+63, r16	; 0x3f
    112c:	aa 97       	sbiw	r28, 0x2a	; 42
    112e:	34 ed       	ldi	r19, 0xD4	; 212
    1130:	a9 96       	adiw	r28, 0x29	; 41
    1132:	3f af       	std	Y+63, r19	; 0x3f
    1134:	a9 97       	sbiw	r28, 0x29	; 41
    1136:	44 e5       	ldi	r20, 0x54	; 84
    1138:	a8 96       	adiw	r28, 0x28	; 40
    113a:	4f af       	std	Y+63, r20	; 0x3f
    113c:	a8 97       	sbiw	r28, 0x28	; 40
    113e:	54 eb       	ldi	r21, 0xB4	; 180
    1140:	a7 96       	adiw	r28, 0x27	; 39
    1142:	5f af       	std	Y+63, r21	; 0x3f
    1144:	a7 97       	sbiw	r28, 0x27	; 39
    1146:	a4 ef       	ldi	r26, 0xF4	; 244
    1148:	a6 96       	adiw	r28, 0x26	; 38
    114a:	af af       	std	Y+63, r26	; 0x3f
    114c:	a6 97       	sbiw	r28, 0x26	; 38
    114e:	e4 e7       	ldi	r30, 0x74	; 116
    1150:	a5 96       	adiw	r28, 0x25	; 37
    1152:	ef af       	std	Y+63, r30	; 0x3f
    1154:	a5 97       	sbiw	r28, 0x25	; 37
    1156:	f4 e3       	ldi	r31, 0x34	; 52
    1158:	a4 96       	adiw	r28, 0x24	; 36
    115a:	ff af       	std	Y+63, r31	; 0x3f
    115c:	a4 97       	sbiw	r28, 0x24	; 36
    115e:	04 e1       	ldi	r16, 0x14	; 20
    1160:	a3 96       	adiw	r28, 0x23	; 35
    1162:	0f af       	std	Y+63, r16	; 0x3f
    1164:	a3 97       	sbiw	r28, 0x23	; 35
    1166:	3c e8       	ldi	r19, 0x8C	; 140
    1168:	a2 96       	adiw	r28, 0x22	; 34
    116a:	3f af       	std	Y+63, r19	; 0x3f
    116c:	a2 97       	sbiw	r28, 0x22	; 34
    116e:	4c ec       	ldi	r20, 0xCC	; 204
    1170:	a1 96       	adiw	r28, 0x21	; 33
    1172:	4f af       	std	Y+63, r20	; 0x3f
    1174:	a1 97       	sbiw	r28, 0x21	; 33
    1176:	5c e4       	ldi	r21, 0x4C	; 76
    1178:	a0 96       	adiw	r28, 0x20	; 32
    117a:	5f af       	std	Y+63, r21	; 0x3f
    117c:	a0 97       	sbiw	r28, 0x20	; 32
    117e:	ac ea       	ldi	r26, 0xAC	; 172
    1180:	6f 96       	adiw	r28, 0x1f	; 31
    1182:	af af       	std	Y+63, r26	; 0x3f
    1184:	6f 97       	sbiw	r28, 0x1f	; 31
    1186:	ec ee       	ldi	r30, 0xEC	; 236
    1188:	6e 96       	adiw	r28, 0x1e	; 30
    118a:	ef af       	std	Y+63, r30	; 0x3f
    118c:	6e 97       	sbiw	r28, 0x1e	; 30
    118e:	fc e6       	ldi	r31, 0x6C	; 108
    1190:	6d 96       	adiw	r28, 0x1d	; 29
    1192:	ff af       	std	Y+63, r31	; 0x3f
    1194:	6d 97       	sbiw	r28, 0x1d	; 29
    1196:	0c e2       	ldi	r16, 0x2C	; 44
    1198:	6c 96       	adiw	r28, 0x1c	; 28
    119a:	0f af       	std	Y+63, r16	; 0x3f
    119c:	6c 97       	sbiw	r28, 0x1c	; 28
    119e:	3c e9       	ldi	r19, 0x9C	; 156
    11a0:	6b 96       	adiw	r28, 0x1b	; 27
    11a2:	3f af       	std	Y+63, r19	; 0x3f
    11a4:	6b 97       	sbiw	r28, 0x1b	; 27
    11a6:	4c ed       	ldi	r20, 0xDC	; 220
    11a8:	6a 96       	adiw	r28, 0x1a	; 26
    11aa:	4f af       	std	Y+63, r20	; 0x3f
    11ac:	6a 97       	sbiw	r28, 0x1a	; 26
    11ae:	5c e5       	ldi	r21, 0x5C	; 92
    11b0:	69 96       	adiw	r28, 0x19	; 25
    11b2:	5f af       	std	Y+63, r21	; 0x3f
    11b4:	69 97       	sbiw	r28, 0x19	; 25
    11b6:	ac eb       	ldi	r26, 0xBC	; 188
    11b8:	68 96       	adiw	r28, 0x18	; 24
    11ba:	af af       	std	Y+63, r26	; 0x3f
    11bc:	68 97       	sbiw	r28, 0x18	; 24
    11be:	ec ef       	ldi	r30, 0xFC	; 252
    11c0:	67 96       	adiw	r28, 0x17	; 23
    11c2:	ef af       	std	Y+63, r30	; 0x3f
    11c4:	67 97       	sbiw	r28, 0x17	; 23
    11c6:	fc e7       	ldi	r31, 0x7C	; 124
    11c8:	66 96       	adiw	r28, 0x16	; 22
    11ca:	ff af       	std	Y+63, r31	; 0x3f
    11cc:	66 97       	sbiw	r28, 0x16	; 22
    11ce:	0c e3       	ldi	r16, 0x3C	; 60
    11d0:	65 96       	adiw	r28, 0x15	; 21
    11d2:	0f af       	std	Y+63, r16	; 0x3f
    11d4:	65 97       	sbiw	r28, 0x15	; 21
    11d6:	3c e1       	ldi	r19, 0x1C	; 28
    11d8:	64 96       	adiw	r28, 0x14	; 20
    11da:	3f af       	std	Y+63, r19	; 0x3f
    11dc:	64 97       	sbiw	r28, 0x14	; 20
    11de:	4c e0       	ldi	r20, 0x0C	; 12
    11e0:	63 96       	adiw	r28, 0x13	; 19
    11e2:	4f af       	std	Y+63, r20	; 0x3f
    11e4:	63 97       	sbiw	r28, 0x13	; 19
    11e6:	52 e8       	ldi	r21, 0x82	; 130
    11e8:	62 96       	adiw	r28, 0x12	; 18
    11ea:	5f af       	std	Y+63, r21	; 0x3f
    11ec:	62 97       	sbiw	r28, 0x12	; 18
    11ee:	a2 ec       	ldi	r26, 0xC2	; 194
    11f0:	61 96       	adiw	r28, 0x11	; 17
    11f2:	af af       	std	Y+63, r26	; 0x3f
    11f4:	61 97       	sbiw	r28, 0x11	; 17
    11f6:	e2 e4       	ldi	r30, 0x42	; 66
    11f8:	60 96       	adiw	r28, 0x10	; 16
    11fa:	ef af       	std	Y+63, r30	; 0x3f
    11fc:	60 97       	sbiw	r28, 0x10	; 16
    11fe:	f2 ea       	ldi	r31, 0xA2	; 162
    1200:	2f 96       	adiw	r28, 0x0f	; 15
    1202:	ff af       	std	Y+63, r31	; 0x3f
    1204:	2f 97       	sbiw	r28, 0x0f	; 15
    1206:	02 ee       	ldi	r16, 0xE2	; 226
    1208:	2e 96       	adiw	r28, 0x0e	; 14
    120a:	0f af       	std	Y+63, r16	; 0x3f
    120c:	2e 97       	sbiw	r28, 0x0e	; 14
    120e:	32 e6       	ldi	r19, 0x62	; 98
    1210:	2d 96       	adiw	r28, 0x0d	; 13
    1212:	3f af       	std	Y+63, r19	; 0x3f
    1214:	2d 97       	sbiw	r28, 0x0d	; 13
    1216:	42 e2       	ldi	r20, 0x22	; 34
    1218:	2c 96       	adiw	r28, 0x0c	; 12
    121a:	4f af       	std	Y+63, r20	; 0x3f
    121c:	2c 97       	sbiw	r28, 0x0c	; 12
    121e:	52 e9       	ldi	r21, 0x92	; 146
    1220:	2b 96       	adiw	r28, 0x0b	; 11
    1222:	5f af       	std	Y+63, r21	; 0x3f
    1224:	2b 97       	sbiw	r28, 0x0b	; 11
    1226:	a2 ed       	ldi	r26, 0xD2	; 210
    1228:	2a 96       	adiw	r28, 0x0a	; 10
    122a:	af af       	std	Y+63, r26	; 0x3f
    122c:	2a 97       	sbiw	r28, 0x0a	; 10
    122e:	e2 e5       	ldi	r30, 0x52	; 82
    1230:	29 96       	adiw	r28, 0x09	; 9
    1232:	ef af       	std	Y+63, r30	; 0x3f
    1234:	29 97       	sbiw	r28, 0x09	; 9
    1236:	f2 eb       	ldi	r31, 0xB2	; 178
    1238:	28 96       	adiw	r28, 0x08	; 8
    123a:	ff af       	std	Y+63, r31	; 0x3f
    123c:	28 97       	sbiw	r28, 0x08	; 8
    123e:	02 ef       	ldi	r16, 0xF2	; 242
    1240:	27 96       	adiw	r28, 0x07	; 7
    1242:	0f af       	std	Y+63, r16	; 0x3f
    1244:	27 97       	sbiw	r28, 0x07	; 7
    1246:	32 e7       	ldi	r19, 0x72	; 114
    1248:	26 96       	adiw	r28, 0x06	; 6
    124a:	3f af       	std	Y+63, r19	; 0x3f
    124c:	26 97       	sbiw	r28, 0x06	; 6
    124e:	42 e3       	ldi	r20, 0x32	; 50
    1250:	25 96       	adiw	r28, 0x05	; 5
    1252:	4f af       	std	Y+63, r20	; 0x3f
    1254:	25 97       	sbiw	r28, 0x05	; 5
    1256:	52 e1       	ldi	r21, 0x12	; 18
    1258:	24 96       	adiw	r28, 0x04	; 4
    125a:	5f af       	std	Y+63, r21	; 0x3f
    125c:	24 97       	sbiw	r28, 0x04	; 4
    125e:	aa e8       	ldi	r26, 0x8A	; 138
    1260:	23 96       	adiw	r28, 0x03	; 3
    1262:	af af       	std	Y+63, r26	; 0x3f
    1264:	23 97       	sbiw	r28, 0x03	; 3
    1266:	ea ec       	ldi	r30, 0xCA	; 202
    1268:	22 96       	adiw	r28, 0x02	; 2
    126a:	ef af       	std	Y+63, r30	; 0x3f
    126c:	22 97       	sbiw	r28, 0x02	; 2
    126e:	fa e4       	ldi	r31, 0x4A	; 74
    1270:	21 96       	adiw	r28, 0x01	; 1
    1272:	ff af       	std	Y+63, r31	; 0x3f
    1274:	21 97       	sbiw	r28, 0x01	; 1
    1276:	0a ea       	ldi	r16, 0xAA	; 170
    1278:	0f af       	std	Y+63, r16	; 0x3f
    127a:	3a ee       	ldi	r19, 0xEA	; 234
    127c:	3e af       	std	Y+62, r19	; 0x3e
    127e:	4a e6       	ldi	r20, 0x6A	; 106
    1280:	4d af       	std	Y+61, r20	; 0x3d
    1282:	5a e2       	ldi	r21, 0x2A	; 42
    1284:	5c af       	std	Y+60, r21	; 0x3c
    1286:	aa e9       	ldi	r26, 0x9A	; 154
    1288:	ab af       	std	Y+59, r26	; 0x3b
    128a:	ea ed       	ldi	r30, 0xDA	; 218
    128c:	ea af       	std	Y+58, r30	; 0x3a
    128e:	fa e5       	ldi	r31, 0x5A	; 90
    1290:	f9 af       	std	Y+57, r31	; 0x39
    1292:	0a eb       	ldi	r16, 0xBA	; 186
    1294:	08 af       	std	Y+56, r16	; 0x38
    1296:	3a ef       	ldi	r19, 0xFA	; 250
    1298:	3f ab       	std	Y+55, r19	; 0x37
    129a:	4a e7       	ldi	r20, 0x7A	; 122
    129c:	4e ab       	std	Y+54, r20	; 0x36
    129e:	5a e3       	ldi	r21, 0x3A	; 58
    12a0:	5d ab       	std	Y+53, r21	; 0x35
    12a2:	aa e1       	ldi	r26, 0x1A	; 26
    12a4:	ac ab       	std	Y+52, r26	; 0x34
    12a6:	ea e0       	ldi	r30, 0x0A	; 10
    12a8:	eb ab       	std	Y+51, r30	; 0x33
    12aa:	30 e8       	ldi	r19, 0x80	; 128
    12ac:	50 ec       	ldi	r21, 0xC0	; 192
    12ae:	40 e4       	ldi	r20, 0x40	; 64
    12b0:	f0 ea       	ldi	r31, 0xA0	; 160
    12b2:	e0 ee       	ldi	r30, 0xE0	; 224
    12b4:	70 e6       	ldi	r23, 0x60	; 96
    12b6:	60 e2       	ldi	r22, 0x20	; 32
    12b8:	a0 e9       	ldi	r26, 0x90	; 144
    12ba:	ca 2e       	mov	r12, r26
    12bc:	b0 ed       	ldi	r27, 0xD0	; 208
    12be:	db 2e       	mov	r13, r27
    12c0:	10 e5       	ldi	r17, 0x50	; 80
    12c2:	e1 2e       	mov	r14, r17
    12c4:	00 eb       	ldi	r16, 0xB0	; 176
    12c6:	f0 2e       	mov	r15, r16
    12c8:	00 ef       	ldi	r16, 0xF0	; 240
    12ca:	e2 96       	adiw	r28, 0x32	; 50
    12cc:	0f af       	std	Y+63, r16	; 0x3f
    12ce:	e2 97       	sbiw	r28, 0x32	; 50
    12d0:	10 e7       	ldi	r17, 0x70	; 112
    12d2:	b0 e3       	ldi	r27, 0x30	; 48
    12d4:	a0 e1       	ldi	r26, 0x10	; 16
    12d6:	08 e8       	ldi	r16, 0x88	; 136
    12d8:	60 2e       	mov	r6, r16
    12da:	08 ec       	ldi	r16, 0xC8	; 200
    12dc:	70 2e       	mov	r7, r16
    12de:	08 e4       	ldi	r16, 0x48	; 72
    12e0:	80 2e       	mov	r8, r16
    12e2:	08 ea       	ldi	r16, 0xA8	; 168
    12e4:	90 2e       	mov	r9, r16
    12e6:	08 ee       	ldi	r16, 0xE8	; 232
    12e8:	a0 2e       	mov	r10, r16
    12ea:	08 e6       	ldi	r16, 0x68	; 104
    12ec:	08 8b       	std	Y+16, r16	; 0x10
    12ee:	08 e2       	ldi	r16, 0x28	; 40
    12f0:	0f 87       	std	Y+15, r16	; 0x0f
    12f2:	08 e9       	ldi	r16, 0x98	; 152
    12f4:	0e 87       	std	Y+14, r16	; 0x0e
    12f6:	08 ed       	ldi	r16, 0xD8	; 216
    12f8:	0d 87       	std	Y+13, r16	; 0x0d
    12fa:	08 e5       	ldi	r16, 0x58	; 88
    12fc:	0c 87       	std	Y+12, r16	; 0x0c
    12fe:	08 eb       	ldi	r16, 0xB8	; 184
    1300:	0b 87       	std	Y+11, r16	; 0x0b
    1302:	08 ef       	ldi	r16, 0xF8	; 248
    1304:	0a 87       	std	Y+10, r16	; 0x0a
    1306:	08 e7       	ldi	r16, 0x78	; 120
    1308:	09 87       	std	Y+9, r16	; 0x09
    130a:	08 e3       	ldi	r16, 0x38	; 56
    130c:	08 87       	std	Y+8, r16	; 0x08
    130e:	08 e1       	ldi	r16, 0x18	; 24
    1310:	0f 83       	std	Y+7, r16	; 0x07
    1312:	06 e8       	ldi	r16, 0x86	; 134
    1314:	0a ab       	std	Y+50, r16	; 0x32
    1316:	06 ec       	ldi	r16, 0xC6	; 198
    1318:	09 ab       	std	Y+49, r16	; 0x31
    131a:	06 e4       	ldi	r16, 0x46	; 70
    131c:	08 ab       	std	Y+48, r16	; 0x30
    131e:	06 ea       	ldi	r16, 0xA6	; 166
    1320:	0f a7       	std	Y+47, r16	; 0x2f
    1322:	06 ee       	ldi	r16, 0xE6	; 230
    1324:	0e a7       	std	Y+46, r16	; 0x2e
    1326:	06 e6       	ldi	r16, 0x66	; 102
    1328:	0d a7       	std	Y+45, r16	; 0x2d
    132a:	06 e2       	ldi	r16, 0x26	; 38
    132c:	0c a7       	std	Y+44, r16	; 0x2c
    132e:	06 e9       	ldi	r16, 0x96	; 150
    1330:	0b a7       	std	Y+43, r16	; 0x2b
    1332:	06 ed       	ldi	r16, 0xD6	; 214
    1334:	0a a7       	std	Y+42, r16	; 0x2a
    1336:	06 e5       	ldi	r16, 0x56	; 86
    1338:	09 a7       	std	Y+41, r16	; 0x29
    133a:	06 eb       	ldi	r16, 0xB6	; 182
    133c:	08 a7       	std	Y+40, r16	; 0x28
    133e:	06 ef       	ldi	r16, 0xF6	; 246
    1340:	0f a3       	std	Y+39, r16	; 0x27
    1342:	06 e7       	ldi	r16, 0x76	; 118
    1344:	0e a3       	std	Y+38, r16	; 0x26
    1346:	06 e3       	ldi	r16, 0x36	; 54
    1348:	0d a3       	std	Y+37, r16	; 0x25
    134a:	06 e1       	ldi	r16, 0x16	; 22
    134c:	0c a3       	std	Y+36, r16	; 0x24
    134e:	0e e8       	ldi	r16, 0x8E	; 142
    1350:	0b a3       	std	Y+35, r16	; 0x23
    1352:	0e ec       	ldi	r16, 0xCE	; 206
    1354:	0a a3       	std	Y+34, r16	; 0x22
    1356:	0e e4       	ldi	r16, 0x4E	; 78
    1358:	09 a3       	std	Y+33, r16	; 0x21
    135a:	0e ea       	ldi	r16, 0xAE	; 174
    135c:	08 a3       	std	Y+32, r16	; 0x20
    135e:	0e ee       	ldi	r16, 0xEE	; 238
    1360:	0f 8f       	std	Y+31, r16	; 0x1f
    1362:	0e e6       	ldi	r16, 0x6E	; 110
    1364:	0e 8f       	std	Y+30, r16	; 0x1e
    1366:	0e e2       	ldi	r16, 0x2E	; 46
    1368:	0d 8f       	std	Y+29, r16	; 0x1d
    136a:	0e e9       	ldi	r16, 0x9E	; 158
    136c:	0c 8f       	std	Y+28, r16	; 0x1c
    136e:	0e ed       	ldi	r16, 0xDE	; 222
    1370:	0b 8f       	std	Y+27, r16	; 0x1b
    1372:	0e e5       	ldi	r16, 0x5E	; 94
    1374:	09 8b       	std	Y+17, r16	; 0x11
    1376:	0e eb       	ldi	r16, 0xBE	; 190
    1378:	0a 8b       	std	Y+18, r16	; 0x12
    137a:	0e ef       	ldi	r16, 0xFE	; 254
    137c:	0b 8b       	std	Y+19, r16	; 0x13
    137e:	0e e7       	ldi	r16, 0x7E	; 126
    1380:	0c 8b       	std	Y+20, r16	; 0x14
    1382:	0e e3       	ldi	r16, 0x3E	; 62
    1384:	0d 8b       	std	Y+21, r16	; 0x15
    1386:	0e e1       	ldi	r16, 0x1E	; 30
    1388:	0e 8b       	std	Y+22, r16	; 0x16
    138a:	0e e0       	ldi	r16, 0x0E	; 14
    138c:	0f 8b       	std	Y+23, r16	; 0x17
    138e:	06 e0       	ldi	r16, 0x06	; 6
    1390:	08 8f       	std	Y+24, r16	; 0x18
    1392:	02 e0       	ldi	r16, 0x02	; 2
    1394:	09 8f       	std	Y+25, r16	; 0x19
    1396:	04 e0       	ldi	r16, 0x04	; 4
    1398:	0a 8f       	std	Y+26, r16	; 0x1a
    else bit++;
    // bit 1 of byte 0 is datasheet "gain bit G2"
    // bit 2 of byte 0 is datasheet "gain bit G1"
    // {G2,G1}: {0,0} 1x; {0,1} 2.5x; {1,0} 4x; {1,1} 5x
    if      (GAIN_2X5 == gain) { bit++; config[0] |= 1<<(bit++); }
    139a:	25 32       	cpi	r18, 0x25	; 37
    139c:	09 f4       	brne	.+2      	; 0x13a0 <__stack+0xaa1>
    139e:	40 c1       	rjmp	.+640    	; 0x1620 <__stack+0xd21>
    else if (GAIN_4X == gain)  { config[0] |= 1<<(bit++); bit++; }
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <__stack+0xaa7>
    13a4:	19 c3       	rjmp	.+1586   	; 0x19d8 <__stack+0x10d9>
    else if (GAIN_5X == gain)  { config[0] |= 1<<(bit++); config[0] |= 1<<(bit++); }
    13a6:	25 30       	cpi	r18, 0x05	; 5
    13a8:	09 f4       	brne	.+2      	; 0x13ac <__stack+0xaad>
    13aa:	6d c3       	rjmp	.+1754   	; 0x1a86 <__stack+0x1187>
    uint8_t const row4 = 3; uint8_t const row4_mask[] = {0x04,0x21,0x08,0x40};
    uint8_t const row5 = 4; uint8_t const row5_mask[] = {0x08,0x42,0x10,0x80};
    // byte orders are mirrored below because
    // rowN_mask[] is big endian, but
    // config[] is little endian
    if (active_rows&(1<<row1))
    13ac:	90 ff       	sbrs	r25, 0
    13ae:	fe c0       	rjmp	.+508    	; 0x15ac <__stack+0xcad>
    {
        config[0] |= row1_mask[3];
    13b0:	b9 82       	std	Y+1, r11	; 0x01
        config[1] |= row1_mask[2];
    13b2:	21 e2       	ldi	r18, 0x21	; 33
    13b4:	2a 83       	std	Y+2, r18	; 0x02
        config[2] |= row1_mask[1];
    13b6:	24 e8       	ldi	r18, 0x84	; 132
    13b8:	2b 83       	std	Y+3, r18	; 0x03
    13ba:	36 2d       	mov	r19, r6
    13bc:	57 2d       	mov	r21, r7
    13be:	48 2d       	mov	r20, r8
    13c0:	f9 2d       	mov	r31, r9
    13c2:	ea 2d       	mov	r30, r10
    13c4:	78 89       	ldd	r23, Y+16	; 0x10
    13c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    13c8:	ce 84       	ldd	r12, Y+14	; 0x0e
    13ca:	dd 84       	ldd	r13, Y+13	; 0x0d
    13cc:	ec 84       	ldd	r14, Y+12	; 0x0c
    13ce:	fb 84       	ldd	r15, Y+11	; 0x0b
    13d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    13d2:	e2 96       	adiw	r28, 0x32	; 50
    13d4:	af af       	std	Y+63, r26	; 0x3f
    13d6:	e2 97       	sbiw	r28, 0x32	; 50
    13d8:	19 85       	ldd	r17, Y+9	; 0x09
    13da:	b8 85       	ldd	r27, Y+8	; 0x08
    13dc:	af 81       	ldd	r26, Y+7	; 0x07
    13de:	26 ec       	ldi	r18, 0xC6	; 198
    13e0:	01 e3       	ldi	r16, 0x31	; 49
    13e2:	b0 2e       	mov	r11, r16
    13e4:	07 ee       	ldi	r16, 0xE7	; 231
    13e6:	90 2e       	mov	r9, r16
    13e8:	09 e3       	ldi	r16, 0x39	; 57
    13ea:	a0 2e       	mov	r10, r16
    13ec:	05 ea       	ldi	r16, 0xA5	; 165
    13ee:	80 2e       	mov	r8, r16
    13f0:	09 e2       	ldi	r16, 0x29	; 41
    13f2:	70 2e       	mov	r7, r16
    13f4:	06 ed       	ldi	r16, 0xD6	; 214
    13f6:	0d 87       	std	Y+13, r16	; 0x0d
    13f8:	05 eb       	ldi	r16, 0xB5	; 181
    13fa:	0c 87       	std	Y+12, r16	; 0x0c
    13fc:	07 ef       	ldi	r16, 0xF7	; 247
    13fe:	0b 87       	std	Y+11, r16	; 0x0b
    1400:	0d eb       	ldi	r16, 0xBD	; 189
    1402:	0a 87       	std	Y+10, r16	; 0x0a
    1404:	05 eb       	ldi	r16, 0xB5	; 181
    1406:	09 87       	std	Y+9, r16	; 0x09
    1408:	0d ea       	ldi	r16, 0xAD	; 173
    140a:	08 87       	std	Y+8, r16	; 0x08
    140c:	04 e9       	ldi	r16, 0x94	; 148
    140e:	60 2e       	mov	r6, r16
    1410:	05 ea       	ldi	r16, 0xA5	; 165
    1412:	0f 83       	std	Y+7, r16	; 0x07
    1414:	0e ec       	ldi	r16, 0xCE	; 206
    1416:	0d 8f       	std	Y+29, r16	; 0x1d
    1418:	03 e7       	ldi	r16, 0x73	; 115
    141a:	0c 8f       	std	Y+28, r16	; 0x1c
    141c:	0f ee       	ldi	r16, 0xEF	; 239
    141e:	0b 8f       	std	Y+27, r16	; 0x1b
    1420:	0b e7       	ldi	r16, 0x7B	; 123
    1422:	0a 8f       	std	Y+26, r16	; 0x1a
    1424:	0d ea       	ldi	r16, 0xAD	; 173
    1426:	09 8f       	std	Y+25, r16	; 0x19
    1428:	0b e6       	ldi	r16, 0x6B	; 107
    142a:	08 8f       	std	Y+24, r16	; 0x18
    142c:	0e ed       	ldi	r16, 0xDE	; 222
    142e:	0f 8b       	std	Y+23, r16	; 0x17
    1430:	07 ef       	ldi	r16, 0xF7	; 247
    1432:	0e 8b       	std	Y+22, r16	; 0x16
    1434:	0f ef       	ldi	r16, 0xFF	; 255
    1436:	0d 8b       	std	Y+21, r16	; 0x15
    1438:	0c 8b       	std	Y+20, r16	; 0x14
    143a:	0d eb       	ldi	r16, 0xBD	; 189
    143c:	0b 8b       	std	Y+19, r16	; 0x13
    143e:	0f ee       	ldi	r16, 0xEF	; 239
    1440:	0a 8b       	std	Y+18, r16	; 0x12
    1442:	0c e9       	ldi	r16, 0x9C	; 156
    1444:	09 8b       	std	Y+17, r16	; 0x11
    1446:	07 ee       	ldi	r16, 0xE7	; 231
    1448:	08 8b       	std	Y+16, r16	; 0x10
    144a:	0c e8       	ldi	r16, 0x8C	; 140
    144c:	0f 87       	std	Y+15, r16	; 0x0f
    144e:	03 e6       	ldi	r16, 0x63	; 99
    1450:	0e 87       	std	Y+14, r16	; 0x0e
        config[3] |= row1_mask[0];
    }
    if (active_rows&(1<<row2))
    1452:	91 ff       	sbrs	r25, 1
    1454:	a2 c0       	rjmp	.+324    	; 0x159a <__stack+0xc9b>
    {
        config[0] |= row2_mask[3];
    1456:	a9 83       	std	Y+1, r26	; 0x01
        config[1] |= row2_mask[2];
    1458:	2e 85       	ldd	r18, Y+14	; 0x0e
    145a:	2a 83       	std	Y+2, r18	; 0x02
        config[2] |= row2_mask[1];
    145c:	3f 85       	ldd	r19, Y+15	; 0x0f
    145e:	3b 83       	std	Y+3, r19	; 0x03
        config[3] |= row2_mask[0];
    1460:	5c 82       	std	Y+4, r5	; 0x04
    1462:	3c 2d       	mov	r19, r12
    1464:	5d 2d       	mov	r21, r13
    1466:	4e 2d       	mov	r20, r14
    1468:	ff 2d       	mov	r31, r15
    146a:	e2 96       	adiw	r28, 0x32	; 50
    146c:	ef ad       	ldd	r30, Y+63	; 0x3f
    146e:	e2 97       	sbiw	r28, 0x32	; 50
    1470:	71 2f       	mov	r23, r17
    1472:	6b 2f       	mov	r22, r27
    1474:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1476:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1478:	9b 8c       	ldd	r9, Y+27	; 0x1b
    147a:	aa 8c       	ldd	r10, Y+26	; 0x1a
    147c:	89 8c       	ldd	r8, Y+25	; 0x19
    147e:	78 8c       	ldd	r7, Y+24	; 0x18
    1480:	8f 89       	ldd	r24, Y+23	; 0x17
    1482:	8d 87       	std	Y+13, r24	; 0x0d
    1484:	ae 89       	ldd	r26, Y+22	; 0x16
    1486:	ac 87       	std	Y+12, r26	; 0x0c
    1488:	0d 89       	ldd	r16, Y+21	; 0x15
    148a:	0b 87       	std	Y+11, r16	; 0x0b
    148c:	8c 89       	ldd	r24, Y+20	; 0x14
    148e:	8a 87       	std	Y+10, r24	; 0x0a
    1490:	ab 89       	ldd	r26, Y+19	; 0x13
    1492:	a9 87       	std	Y+9, r26	; 0x09
    1494:	0a 89       	ldd	r16, Y+18	; 0x12
    1496:	08 87       	std	Y+8, r16	; 0x08
    1498:	69 88       	ldd	r6, Y+17	; 0x11
    149a:	88 89       	ldd	r24, Y+16	; 0x10
    149c:	8f 83       	std	Y+7, r24	; 0x07
    149e:	89 e0       	ldi	r24, 0x09	; 9
    14a0:	ad e0       	ldi	r26, 0x0D	; 13
    14a2:	b5 e0       	ldi	r27, 0x05	; 5
    14a4:	0b e0       	ldi	r16, 0x0B	; 11
    14a6:	1f e0       	ldi	r17, 0x0F	; 15
    14a8:	f1 2e       	mov	r15, r17
    14aa:	17 e0       	ldi	r17, 0x07	; 7
    14ac:	e1 2e       	mov	r14, r17
    14ae:	13 e0       	ldi	r17, 0x03	; 3
    }
    if (active_rows&(1<<row3))
    14b0:	92 ff       	sbrs	r25, 2
    14b2:	11 c0       	rjmp	.+34     	; 0x14d6 <__stack+0xbd7>
    {
        config[0] |= row3_mask[3];
    14b4:	69 83       	std	Y+1, r22	; 0x01
        config[1] |= row3_mask[2];
    14b6:	af 81       	ldd	r26, Y+7	; 0x07
    14b8:	aa 83       	std	Y+2, r26	; 0x02
        config[2] |= row3_mask[1];
    14ba:	6b 82       	std	Y+3, r6	; 0x03
        config[3] |= row3_mask[0];
    14bc:	1c 83       	std	Y+4, r17	; 0x04
    14be:	3f 2f       	mov	r19, r31
    14c0:	5e 2f       	mov	r21, r30
    14c2:	47 2f       	mov	r20, r23
    14c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14c6:	bc 84       	ldd	r11, Y+12	; 0x0c
    14c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    14cc:	89 84       	ldd	r8, Y+9	; 0x09
    14ce:	78 84       	ldd	r7, Y+8	; 0x08
    14d0:	80 2f       	mov	r24, r16
    14d2:	af 2d       	mov	r26, r15
    14d4:	be 2d       	mov	r27, r14
    }
    if (active_rows&(1<<row4))
    14d6:	93 ff       	sbrs	r25, 3
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <__stack+0xbeb>
    {
        config[0] |= row4_mask[3];
    14da:	49 83       	std	Y+1, r20	; 0x01
        config[1] |= row4_mask[2];
    14dc:	7a 82       	std	Y+2, r7	; 0x02
        config[2] |= row4_mask[1];
    14de:	8b 82       	std	Y+3, r8	; 0x03
        config[3] |= row4_mask[0];
    14e0:	bc 83       	std	Y+4, r27	; 0x04
    14e2:	35 2f       	mov	r19, r21
    14e4:	29 2d       	mov	r18, r9
    14e6:	ba 2c       	mov	r11, r10
    14e8:	8a 2f       	mov	r24, r26
    }
    if (active_rows&(1<<row5))
    14ea:	94 ff       	sbrs	r25, 4
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <__stack+0xbf7>
    {
        config[0] |= row5_mask[3];
    14ee:	39 83       	std	Y+1, r19	; 0x01
        config[1] |= row5_mask[2];
    14f0:	ba 82       	std	Y+2, r11	; 0x02
        config[2] |= row5_mask[1];
    14f2:	2b 83       	std	Y+3, r18	; 0x03
        config[3] |= row5_mask[0];
    14f4:	8c 83       	std	Y+4, r24	; 0x04
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    14f6:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
    14f8:	aa 9b       	sbis	0x15, 2	; 21
    14fa:	fe cf       	rjmp	.-4      	; 0x14f8 <__stack+0xbf9>
    14fc:	28 9a       	sbi	0x05, 0	; 5
    14fe:	fe 01       	movw	r30, r28
    1500:	31 96       	adiw	r30, 0x01	; 1
    if (active_rows&(1<<row4))
    {
        config[0] |= row4_mask[3];
        config[1] |= row4_mask[2];
        config[2] |= row4_mask[1];
        config[3] |= row4_mask[0];
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    *reg_addr &= ~(1<<bit);
}
// Read bits
inline bool BitIsSet(register_address reg_addr, bit_index bit)
{
    return *reg_addr & 1<<bit;
    1506:	80 81       	ld	r24, Z
      * - waits for LisClk LOW\n 
      * */
    // Set up pin `Lis_Rst` with value to write
    BitIsSet((uint8_t *)config, bit_index) ?
        SetBit(Lis_port1, Lis_Rst)
        :
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a1 01       	movw	r20, r2
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <__stack+0xc15>
    1510:	44 0f       	add	r20, r20
    1512:	55 1f       	adc	r21, r21
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <__stack+0xc11>
    1518:	84 23       	and	r24, r20
    151a:	95 23       	and	r25, r21
    151c:	89 2b       	or	r24, r25
    151e:	c9 f1       	breq	.+114    	; 0x1592 <__stack+0xc93>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1520:	5e 9a       	sbi	0x0b, 6	; 11
    1522:	a9 9a       	sbi	0x15, 1	; 21
      * - waits until flag PwmTimerMatchesOCF0A is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0A
    SetBit(Lis_TIFR0, Lis_OCF0A);
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0A));
    1524:	a9 9b       	sbis	0x15, 1	; 21
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <__stack+0xc25>
    1528:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
    152a:	aa 9b       	sbis	0x15, 2	; 21
    152c:	fe cf       	rjmp	.-4      	; 0x152a <__stack+0xc2b>
    152e:	2f 5f       	subi	r18, 0xFF	; 255
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
      * - writes 28bits starting at byte0 bit0 and ending at byte3 bit3\n 
      * */
    // Write all bits in the first three bytes of config
    for (uint8_t cfg_byte_i = 0; cfg_byte_i < 3; cfg_byte_i++)
    {
        for (uint8_t bit_i = 0; bit_i<8; bit_i++)
    1532:	28 30       	cpi	r18, 0x08	; 8
    1534:	31 05       	cpc	r19, r1
    1536:	39 f7       	brne	.-50     	; 0x1506 <__stack+0xc07>
        {
            _WriteLisConfigBit(config, bit_i);
        }
        config++;
    1538:	31 96       	adiw	r30, 0x01	; 1
{
    /** Write28bitLisConfig behavior:\n 
      * - writes 28bits starting at byte0 bit0 and ending at byte3 bit3\n 
      * */
    // Write all bits in the first three bytes of config
    for (uint8_t cfg_byte_i = 0; cfg_byte_i < 3; cfg_byte_i++)
    153a:	2d 81       	ldd	r18, Y+5	; 0x05
    153c:	3e 81       	ldd	r19, Y+6	; 0x06
    153e:	e2 17       	cp	r30, r18
    1540:	f3 07       	cpc	r31, r19
    1542:	f9 f6       	brne	.-66     	; 0x1502 <__stack+0xc03>
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    *reg_addr &= ~(1<<bit);
}
// Read bits
inline bool BitIsSet(register_address reg_addr, bit_index bit)
{
    return *reg_addr & 1<<bit;
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
      * - waits for LisClk LOW\n 
      * */
    // Set up pin `Lis_Rst` with value to write
    BitIsSet((uint8_t *)config, bit_index) ?
        SetBit(Lis_port1, Lis_Rst)
        :
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	91 01       	movw	r18, r2
    154e:	04 2e       	mov	r0, r20
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <__stack+0xc57>
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <__stack+0xc53>
    155a:	82 23       	and	r24, r18
    155c:	93 23       	and	r25, r19
    155e:	89 2b       	or	r24, r25
    1560:	d1 f0       	breq	.+52     	; 0x1596 <__stack+0xc97>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1562:	5e 9a       	sbi	0x0b, 6	; 11
    1564:	a9 9a       	sbi	0x15, 1	; 21
      * - waits until flag PwmTimerMatchesOCF0A is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0A
    SetBit(Lis_TIFR0, Lis_OCF0A);
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0A));
    1566:	a9 9b       	sbis	0x15, 1	; 21
    1568:	fe cf       	rjmp	.-4      	; 0x1566 <__stack+0xc67>
    156a:	aa 9a       	sbi	0x15, 2	; 21
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
    156c:	aa 9b       	sbis	0x15, 2	; 21
    156e:	fe cf       	rjmp	.-4      	; 0x156c <__stack+0xc6d>
    1570:	4f 5f       	subi	r20, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
        }
        config++;
    }
    // Write first four bits of last byte of config
    uint8_t bit_i = 0;
    while(bit_i < 4) _WriteLisConfigBit(config, bit_i++);
    1574:	44 30       	cpi	r20, 0x04	; 4
    1576:	51 05       	cpc	r21, r1
    1578:	39 f7       	brne	.-50     	; 0x1548 <__stack+0xc49>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    157a:	5e 98       	cbi	0x0b, 6	; 11
    157c:	28 98       	cbi	0x05, 0	; 5
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
    157e:	1e bc       	out	0x2e, r1	; 46
    1580:	8c b5       	in	r24, 0x2c	; 44
    1582:	8f 77       	andi	r24, 0x7F	; 127
    1584:	8c bd       	out	0x2c, r24	; 44
    1586:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
    1588:	0d b4       	in	r0, 0x2d	; 45
    158a:	07 fe       	sbrs	r0, 7
    158c:	fd cf       	rjmp	.-6      	; 0x1588 <__stack+0xc89>
    158e:	0c 94 c3 01 	jmp	0x386	; 0x386 <main+0x2c0>
    1592:	5e 98       	cbi	0x0b, 6	; 11
    1594:	c6 cf       	rjmp	.-116    	; 0x1522 <__stack+0xc23>
    1596:	5e 98       	cbi	0x0b, 6	; 11
    1598:	e5 cf       	rjmp	.-54     	; 0x1564 <__stack+0xc65>
        config[0] |= row1_mask[3];
        config[1] |= row1_mask[2];
        config[2] |= row1_mask[1];
        config[3] |= row1_mask[0];
    }
    if (active_rows&(1<<row2))
    159a:	ac e0       	ldi	r26, 0x0C	; 12
    159c:	b4 e0       	ldi	r27, 0x04	; 4
    159e:	0a e0       	ldi	r16, 0x0A	; 10
    15a0:	1e e0       	ldi	r17, 0x0E	; 14
    15a2:	f1 2e       	mov	r15, r17
    15a4:	16 e0       	ldi	r17, 0x06	; 6
    15a6:	e1 2e       	mov	r14, r17
    15a8:	12 e0       	ldi	r17, 0x02	; 2
    15aa:	82 cf       	rjmp	.-252    	; 0x14b0 <__stack+0xbb1>
    uint8_t const row4 = 3; uint8_t const row4_mask[] = {0x04,0x21,0x08,0x40};
    uint8_t const row5 = 4; uint8_t const row5_mask[] = {0x08,0x42,0x10,0x80};
    // byte orders are mirrored below because
    // rowN_mask[] is big endian, but
    // config[] is little endian
    if (active_rows&(1<<row1))
    15ac:	78 2e       	mov	r7, r24
    15ae:	8f 87       	std	Y+15, r24	; 0x0f
    15b0:	22 e4       	ldi	r18, 0x42	; 66
    15b2:	00 e1       	ldi	r16, 0x10	; 16
    15b4:	b0 2e       	mov	r11, r16
    15b6:	03 e6       	ldi	r16, 0x63	; 99
    15b8:	90 2e       	mov	r9, r16
    15ba:	08 e1       	ldi	r16, 0x18	; 24
    15bc:	a0 2e       	mov	r10, r16
    15be:	01 e2       	ldi	r16, 0x21	; 33
    15c0:	80 2e       	mov	r8, r16
    15c2:	02 e5       	ldi	r16, 0x52	; 82
    15c4:	0d 87       	std	Y+13, r16	; 0x0d
    15c6:	04 e9       	ldi	r16, 0x94	; 148
    15c8:	0c 87       	std	Y+12, r16	; 0x0c
    15ca:	03 e7       	ldi	r16, 0x73	; 115
    15cc:	0b 87       	std	Y+11, r16	; 0x0b
    15ce:	0c e9       	ldi	r16, 0x9C	; 156
    15d0:	0a 87       	std	Y+10, r16	; 0x0a
    15d2:	01 e3       	ldi	r16, 0x31	; 49
    15d4:	09 87       	std	Y+9, r16	; 0x09
    15d6:	0c e8       	ldi	r16, 0x8C	; 140
    15d8:	08 87       	std	Y+8, r16	; 0x08
    15da:	00 e1       	ldi	r16, 0x10	; 16
    15dc:	60 2e       	mov	r6, r16
    15de:	04 e8       	ldi	r16, 0x84	; 132
    15e0:	0f 83       	std	Y+7, r16	; 0x07
    15e2:	0a e4       	ldi	r16, 0x4A	; 74
    15e4:	0d 8f       	std	Y+29, r16	; 0x1d
    15e6:	02 e5       	ldi	r16, 0x52	; 82
    15e8:	0c 8f       	std	Y+28, r16	; 0x1c
    15ea:	0b e6       	ldi	r16, 0x6B	; 107
    15ec:	0b 8f       	std	Y+27, r16	; 0x1b
    15ee:	0a e5       	ldi	r16, 0x5A	; 90
    15f0:	0a 8f       	std	Y+26, r16	; 0x1a
    15f2:	09 e2       	ldi	r16, 0x29	; 41
    15f4:	09 8f       	std	Y+25, r16	; 0x19
    15f6:	0a e4       	ldi	r16, 0x4A	; 74
    15f8:	08 8f       	std	Y+24, r16	; 0x18
    15fa:	0a e5       	ldi	r16, 0x5A	; 90
    15fc:	0f 8b       	std	Y+23, r16	; 0x17
    15fe:	06 ed       	ldi	r16, 0xD6	; 214
    1600:	0e 8b       	std	Y+22, r16	; 0x16
    1602:	0b e7       	ldi	r16, 0x7B	; 123
    1604:	0d 8b       	std	Y+21, r16	; 0x15
    1606:	0e ed       	ldi	r16, 0xDE	; 222
    1608:	0c 8b       	std	Y+20, r16	; 0x14
    160a:	09 e3       	ldi	r16, 0x39	; 57
    160c:	0b 8b       	std	Y+19, r16	; 0x13
    160e:	0e ec       	ldi	r16, 0xCE	; 206
    1610:	0a 8b       	std	Y+18, r16	; 0x12
    1612:	08 e1       	ldi	r16, 0x18	; 24
    1614:	09 8b       	std	Y+17, r16	; 0x11
    1616:	06 ec       	ldi	r16, 0xC6	; 198
    1618:	08 8b       	std	Y+16, r16	; 0x10
    161a:	02 e4       	ldi	r16, 0x42	; 66
    161c:	0e 87       	std	Y+14, r16	; 0x0e
    161e:	19 cf       	rjmp	.-462    	; 0x1452 <__stack+0xb53>
    if (BINNING_ON == binning) config[0] |= 1<<(bit++);
    else bit++;
    // bit 1 of byte 0 is datasheet "gain bit G2"
    // bit 2 of byte 0 is datasheet "gain bit G1"
    // {G2,G1}: {0,0} 1x; {0,1} 2.5x; {1,0} 4x; {1,1} 5x
    if      (GAIN_2X5 == gain) { bit++; config[0] |= 1<<(bit++); }
    1620:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1622:	29 83       	std	Y+1, r18	; 0x01
    1624:	e1 96       	adiw	r28, 0x31	; 49
    1626:	3f ad       	ldd	r19, Y+63	; 0x3f
    1628:	e1 97       	sbiw	r28, 0x31	; 49
    162a:	e0 96       	adiw	r28, 0x30	; 48
    162c:	5f ad       	ldd	r21, Y+63	; 0x3f
    162e:	e0 97       	sbiw	r28, 0x30	; 48
    1630:	af 96       	adiw	r28, 0x2f	; 47
    1632:	4f ad       	ldd	r20, Y+63	; 0x3f
    1634:	af 97       	sbiw	r28, 0x2f	; 47
    1636:	ae 96       	adiw	r28, 0x2e	; 46
    1638:	ff ad       	ldd	r31, Y+63	; 0x3f
    163a:	ae 97       	sbiw	r28, 0x2e	; 46
    163c:	ad 96       	adiw	r28, 0x2d	; 45
    163e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1640:	ad 97       	sbiw	r28, 0x2d	; 45
    1642:	ac 96       	adiw	r28, 0x2c	; 44
    1644:	7f ad       	ldd	r23, Y+63	; 0x3f
    1646:	ac 97       	sbiw	r28, 0x2c	; 44
    1648:	ab 96       	adiw	r28, 0x2b	; 43
    164a:	6f ad       	ldd	r22, Y+63	; 0x3f
    164c:	ab 97       	sbiw	r28, 0x2b	; 43
    164e:	aa 96       	adiw	r28, 0x2a	; 42
    1650:	cf ac       	ldd	r12, Y+63	; 0x3f
    1652:	aa 97       	sbiw	r28, 0x2a	; 42
    1654:	a9 96       	adiw	r28, 0x29	; 41
    1656:	df ac       	ldd	r13, Y+63	; 0x3f
    1658:	a9 97       	sbiw	r28, 0x29	; 41
    165a:	a8 96       	adiw	r28, 0x28	; 40
    165c:	ef ac       	ldd	r14, Y+63	; 0x3f
    165e:	a8 97       	sbiw	r28, 0x28	; 40
    1660:	a7 96       	adiw	r28, 0x27	; 39
    1662:	ff ac       	ldd	r15, Y+63	; 0x3f
    1664:	a7 97       	sbiw	r28, 0x27	; 39
    1666:	a6 96       	adiw	r28, 0x26	; 38
    1668:	af ad       	ldd	r26, Y+63	; 0x3f
    166a:	a6 97       	sbiw	r28, 0x26	; 38
    166c:	e2 96       	adiw	r28, 0x32	; 50
    166e:	af af       	std	Y+63, r26	; 0x3f
    1670:	e2 97       	sbiw	r28, 0x32	; 50
    1672:	a5 96       	adiw	r28, 0x25	; 37
    1674:	1f ad       	ldd	r17, Y+63	; 0x3f
    1676:	a5 97       	sbiw	r28, 0x25	; 37
    1678:	a4 96       	adiw	r28, 0x24	; 36
    167a:	bf ad       	ldd	r27, Y+63	; 0x3f
    167c:	a4 97       	sbiw	r28, 0x24	; 36
    167e:	a3 96       	adiw	r28, 0x23	; 35
    1680:	af ad       	ldd	r26, Y+63	; 0x3f
    1682:	a3 97       	sbiw	r28, 0x23	; 35
    1684:	a2 96       	adiw	r28, 0x22	; 34
    1686:	6f ac       	ldd	r6, Y+63	; 0x3f
    1688:	a2 97       	sbiw	r28, 0x22	; 34
    168a:	a1 96       	adiw	r28, 0x21	; 33
    168c:	7f ac       	ldd	r7, Y+63	; 0x3f
    168e:	a1 97       	sbiw	r28, 0x21	; 33
    1690:	a0 96       	adiw	r28, 0x20	; 32
    1692:	8f ac       	ldd	r8, Y+63	; 0x3f
    1694:	a0 97       	sbiw	r28, 0x20	; 32
    1696:	6f 96       	adiw	r28, 0x1f	; 31
    1698:	9f ac       	ldd	r9, Y+63	; 0x3f
    169a:	6f 97       	sbiw	r28, 0x1f	; 31
    169c:	6e 96       	adiw	r28, 0x1e	; 30
    169e:	af ac       	ldd	r10, Y+63	; 0x3f
    16a0:	6e 97       	sbiw	r28, 0x1e	; 30
    16a2:	6d 96       	adiw	r28, 0x1d	; 29
    16a4:	0f ad       	ldd	r16, Y+63	; 0x3f
    16a6:	6d 97       	sbiw	r28, 0x1d	; 29
    16a8:	08 8b       	std	Y+16, r16	; 0x10
    16aa:	6c 96       	adiw	r28, 0x1c	; 28
    16ac:	2f ad       	ldd	r18, Y+63	; 0x3f
    16ae:	6c 97       	sbiw	r28, 0x1c	; 28
    16b0:	2f 87       	std	Y+15, r18	; 0x0f
    16b2:	6b 96       	adiw	r28, 0x1b	; 27
    16b4:	0f ad       	ldd	r16, Y+63	; 0x3f
    16b6:	6b 97       	sbiw	r28, 0x1b	; 27
    16b8:	0e 87       	std	Y+14, r16	; 0x0e
    16ba:	6a 96       	adiw	r28, 0x1a	; 26
    16bc:	2f ad       	ldd	r18, Y+63	; 0x3f
    16be:	6a 97       	sbiw	r28, 0x1a	; 26
    16c0:	2d 87       	std	Y+13, r18	; 0x0d
    16c2:	69 96       	adiw	r28, 0x19	; 25
    16c4:	0f ad       	ldd	r16, Y+63	; 0x3f
    16c6:	69 97       	sbiw	r28, 0x19	; 25
    16c8:	0c 87       	std	Y+12, r16	; 0x0c
    16ca:	68 96       	adiw	r28, 0x18	; 24
    16cc:	2f ad       	ldd	r18, Y+63	; 0x3f
    16ce:	68 97       	sbiw	r28, 0x18	; 24
    16d0:	2b 87       	std	Y+11, r18	; 0x0b
    16d2:	67 96       	adiw	r28, 0x17	; 23
    16d4:	0f ad       	ldd	r16, Y+63	; 0x3f
    16d6:	67 97       	sbiw	r28, 0x17	; 23
    16d8:	0a 87       	std	Y+10, r16	; 0x0a
    16da:	66 96       	adiw	r28, 0x16	; 22
    16dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    16de:	66 97       	sbiw	r28, 0x16	; 22
    16e0:	29 87       	std	Y+9, r18	; 0x09
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	0f ad       	ldd	r16, Y+63	; 0x3f
    16e6:	65 97       	sbiw	r28, 0x15	; 21
    16e8:	08 87       	std	Y+8, r16	; 0x08
    16ea:	64 96       	adiw	r28, 0x14	; 20
    16ec:	2f ad       	ldd	r18, Y+63	; 0x3f
    16ee:	64 97       	sbiw	r28, 0x14	; 20
    16f0:	2f 83       	std	Y+7, r18	; 0x07
    16f2:	63 96       	adiw	r28, 0x13	; 19
    16f4:	bf ac       	ldd	r11, Y+63	; 0x3f
    16f6:	63 97       	sbiw	r28, 0x13	; 19
    16f8:	59 ce       	rjmp	.-846    	; 0x13ac <__stack+0xaad>

    // Clear all bits in array at input address `config`.
    config[0]=0x00; config[1]=0x00; config[2]=0x00; config[3]=0x00;
    // binning is bit 0 of byte 0
    uint8_t bit = 0;
    if (BINNING_ON == binning) config[0] |= 1<<(bit++);
    16fa:	39 83       	std	Y+1, r19	; 0x01
    16fc:	f5 e8       	ldi	r31, 0x85	; 133
    16fe:	e1 96       	adiw	r28, 0x31	; 49
    1700:	ff af       	std	Y+63, r31	; 0x3f
    1702:	e1 97       	sbiw	r28, 0x31	; 49
    1704:	05 ec       	ldi	r16, 0xC5	; 197
    1706:	e0 96       	adiw	r28, 0x30	; 48
    1708:	0f af       	std	Y+63, r16	; 0x3f
    170a:	e0 97       	sbiw	r28, 0x30	; 48
    170c:	35 e4       	ldi	r19, 0x45	; 69
    170e:	af 96       	adiw	r28, 0x2f	; 47
    1710:	3f af       	std	Y+63, r19	; 0x3f
    1712:	af 97       	sbiw	r28, 0x2f	; 47
    1714:	45 ea       	ldi	r20, 0xA5	; 165
    1716:	ae 96       	adiw	r28, 0x2e	; 46
    1718:	4f af       	std	Y+63, r20	; 0x3f
    171a:	ae 97       	sbiw	r28, 0x2e	; 46
    171c:	55 ee       	ldi	r21, 0xE5	; 229
    171e:	ad 96       	adiw	r28, 0x2d	; 45
    1720:	5f af       	std	Y+63, r21	; 0x3f
    1722:	ad 97       	sbiw	r28, 0x2d	; 45
    1724:	a5 e6       	ldi	r26, 0x65	; 101
    1726:	ac 96       	adiw	r28, 0x2c	; 44
    1728:	af af       	std	Y+63, r26	; 0x3f
    172a:	ac 97       	sbiw	r28, 0x2c	; 44
    172c:	e5 e2       	ldi	r30, 0x25	; 37
    172e:	ab 96       	adiw	r28, 0x2b	; 43
    1730:	ef af       	std	Y+63, r30	; 0x3f
    1732:	ab 97       	sbiw	r28, 0x2b	; 43
    1734:	f5 e9       	ldi	r31, 0x95	; 149
    1736:	aa 96       	adiw	r28, 0x2a	; 42
    1738:	ff af       	std	Y+63, r31	; 0x3f
    173a:	aa 97       	sbiw	r28, 0x2a	; 42
    173c:	05 ed       	ldi	r16, 0xD5	; 213
    173e:	a9 96       	adiw	r28, 0x29	; 41
    1740:	0f af       	std	Y+63, r16	; 0x3f
    1742:	a9 97       	sbiw	r28, 0x29	; 41
    1744:	35 e5       	ldi	r19, 0x55	; 85
    1746:	a8 96       	adiw	r28, 0x28	; 40
    1748:	3f af       	std	Y+63, r19	; 0x3f
    174a:	a8 97       	sbiw	r28, 0x28	; 40
    174c:	45 eb       	ldi	r20, 0xB5	; 181
    174e:	a7 96       	adiw	r28, 0x27	; 39
    1750:	4f af       	std	Y+63, r20	; 0x3f
    1752:	a7 97       	sbiw	r28, 0x27	; 39
    1754:	55 ef       	ldi	r21, 0xF5	; 245
    1756:	a6 96       	adiw	r28, 0x26	; 38
    1758:	5f af       	std	Y+63, r21	; 0x3f
    175a:	a6 97       	sbiw	r28, 0x26	; 38
    175c:	a5 e7       	ldi	r26, 0x75	; 117
    175e:	a5 96       	adiw	r28, 0x25	; 37
    1760:	af af       	std	Y+63, r26	; 0x3f
    1762:	a5 97       	sbiw	r28, 0x25	; 37
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	a4 96       	adiw	r28, 0x24	; 36
    1768:	ef af       	std	Y+63, r30	; 0x3f
    176a:	a4 97       	sbiw	r28, 0x24	; 36
    176c:	f5 e1       	ldi	r31, 0x15	; 21
    176e:	a3 96       	adiw	r28, 0x23	; 35
    1770:	ff af       	std	Y+63, r31	; 0x3f
    1772:	a3 97       	sbiw	r28, 0x23	; 35
    1774:	0d e8       	ldi	r16, 0x8D	; 141
    1776:	a2 96       	adiw	r28, 0x22	; 34
    1778:	0f af       	std	Y+63, r16	; 0x3f
    177a:	a2 97       	sbiw	r28, 0x22	; 34
    177c:	3d ec       	ldi	r19, 0xCD	; 205
    177e:	a1 96       	adiw	r28, 0x21	; 33
    1780:	3f af       	std	Y+63, r19	; 0x3f
    1782:	a1 97       	sbiw	r28, 0x21	; 33
    1784:	4d e4       	ldi	r20, 0x4D	; 77
    1786:	a0 96       	adiw	r28, 0x20	; 32
    1788:	4f af       	std	Y+63, r20	; 0x3f
    178a:	a0 97       	sbiw	r28, 0x20	; 32
    178c:	5d ea       	ldi	r21, 0xAD	; 173
    178e:	6f 96       	adiw	r28, 0x1f	; 31
    1790:	5f af       	std	Y+63, r21	; 0x3f
    1792:	6f 97       	sbiw	r28, 0x1f	; 31
    1794:	ad ee       	ldi	r26, 0xED	; 237
    1796:	6e 96       	adiw	r28, 0x1e	; 30
    1798:	af af       	std	Y+63, r26	; 0x3f
    179a:	6e 97       	sbiw	r28, 0x1e	; 30
    179c:	ed e6       	ldi	r30, 0x6D	; 109
    179e:	6d 96       	adiw	r28, 0x1d	; 29
    17a0:	ef af       	std	Y+63, r30	; 0x3f
    17a2:	6d 97       	sbiw	r28, 0x1d	; 29
    17a4:	fd e2       	ldi	r31, 0x2D	; 45
    17a6:	6c 96       	adiw	r28, 0x1c	; 28
    17a8:	ff af       	std	Y+63, r31	; 0x3f
    17aa:	6c 97       	sbiw	r28, 0x1c	; 28
    17ac:	0d e9       	ldi	r16, 0x9D	; 157
    17ae:	6b 96       	adiw	r28, 0x1b	; 27
    17b0:	0f af       	std	Y+63, r16	; 0x3f
    17b2:	6b 97       	sbiw	r28, 0x1b	; 27
    17b4:	3d ed       	ldi	r19, 0xDD	; 221
    17b6:	6a 96       	adiw	r28, 0x1a	; 26
    17b8:	3f af       	std	Y+63, r19	; 0x3f
    17ba:	6a 97       	sbiw	r28, 0x1a	; 26
    17bc:	4d e5       	ldi	r20, 0x5D	; 93
    17be:	69 96       	adiw	r28, 0x19	; 25
    17c0:	4f af       	std	Y+63, r20	; 0x3f
    17c2:	69 97       	sbiw	r28, 0x19	; 25
    17c4:	5d eb       	ldi	r21, 0xBD	; 189
    17c6:	68 96       	adiw	r28, 0x18	; 24
    17c8:	5f af       	std	Y+63, r21	; 0x3f
    17ca:	68 97       	sbiw	r28, 0x18	; 24
    17cc:	ad ef       	ldi	r26, 0xFD	; 253
    17ce:	67 96       	adiw	r28, 0x17	; 23
    17d0:	af af       	std	Y+63, r26	; 0x3f
    17d2:	67 97       	sbiw	r28, 0x17	; 23
    17d4:	ed e7       	ldi	r30, 0x7D	; 125
    17d6:	66 96       	adiw	r28, 0x16	; 22
    17d8:	ef af       	std	Y+63, r30	; 0x3f
    17da:	66 97       	sbiw	r28, 0x16	; 22
    17dc:	fd e3       	ldi	r31, 0x3D	; 61
    17de:	65 96       	adiw	r28, 0x15	; 21
    17e0:	ff af       	std	Y+63, r31	; 0x3f
    17e2:	65 97       	sbiw	r28, 0x15	; 21
    17e4:	0d e1       	ldi	r16, 0x1D	; 29
    17e6:	64 96       	adiw	r28, 0x14	; 20
    17e8:	0f af       	std	Y+63, r16	; 0x3f
    17ea:	64 97       	sbiw	r28, 0x14	; 20
    17ec:	3d e0       	ldi	r19, 0x0D	; 13
    17ee:	63 96       	adiw	r28, 0x13	; 19
    17f0:	3f af       	std	Y+63, r19	; 0x3f
    17f2:	63 97       	sbiw	r28, 0x13	; 19
    17f4:	43 e8       	ldi	r20, 0x83	; 131
    17f6:	62 96       	adiw	r28, 0x12	; 18
    17f8:	4f af       	std	Y+63, r20	; 0x3f
    17fa:	62 97       	sbiw	r28, 0x12	; 18
    17fc:	53 ec       	ldi	r21, 0xC3	; 195
    17fe:	61 96       	adiw	r28, 0x11	; 17
    1800:	5f af       	std	Y+63, r21	; 0x3f
    1802:	61 97       	sbiw	r28, 0x11	; 17
    1804:	a3 e4       	ldi	r26, 0x43	; 67
    1806:	60 96       	adiw	r28, 0x10	; 16
    1808:	af af       	std	Y+63, r26	; 0x3f
    180a:	60 97       	sbiw	r28, 0x10	; 16
    180c:	e3 ea       	ldi	r30, 0xA3	; 163
    180e:	2f 96       	adiw	r28, 0x0f	; 15
    1810:	ef af       	std	Y+63, r30	; 0x3f
    1812:	2f 97       	sbiw	r28, 0x0f	; 15
    1814:	f3 ee       	ldi	r31, 0xE3	; 227
    1816:	2e 96       	adiw	r28, 0x0e	; 14
    1818:	ff af       	std	Y+63, r31	; 0x3f
    181a:	2e 97       	sbiw	r28, 0x0e	; 14
    181c:	03 e6       	ldi	r16, 0x63	; 99
    181e:	2d 96       	adiw	r28, 0x0d	; 13
    1820:	0f af       	std	Y+63, r16	; 0x3f
    1822:	2d 97       	sbiw	r28, 0x0d	; 13
    1824:	33 e2       	ldi	r19, 0x23	; 35
    1826:	2c 96       	adiw	r28, 0x0c	; 12
    1828:	3f af       	std	Y+63, r19	; 0x3f
    182a:	2c 97       	sbiw	r28, 0x0c	; 12
    182c:	43 e9       	ldi	r20, 0x93	; 147
    182e:	2b 96       	adiw	r28, 0x0b	; 11
    1830:	4f af       	std	Y+63, r20	; 0x3f
    1832:	2b 97       	sbiw	r28, 0x0b	; 11
    1834:	53 ed       	ldi	r21, 0xD3	; 211
    1836:	2a 96       	adiw	r28, 0x0a	; 10
    1838:	5f af       	std	Y+63, r21	; 0x3f
    183a:	2a 97       	sbiw	r28, 0x0a	; 10
    183c:	a3 e5       	ldi	r26, 0x53	; 83
    183e:	29 96       	adiw	r28, 0x09	; 9
    1840:	af af       	std	Y+63, r26	; 0x3f
    1842:	29 97       	sbiw	r28, 0x09	; 9
    1844:	e3 eb       	ldi	r30, 0xB3	; 179
    1846:	28 96       	adiw	r28, 0x08	; 8
    1848:	ef af       	std	Y+63, r30	; 0x3f
    184a:	28 97       	sbiw	r28, 0x08	; 8
    184c:	f3 ef       	ldi	r31, 0xF3	; 243
    184e:	27 96       	adiw	r28, 0x07	; 7
    1850:	ff af       	std	Y+63, r31	; 0x3f
    1852:	27 97       	sbiw	r28, 0x07	; 7
    1854:	03 e7       	ldi	r16, 0x73	; 115
    1856:	26 96       	adiw	r28, 0x06	; 6
    1858:	0f af       	std	Y+63, r16	; 0x3f
    185a:	26 97       	sbiw	r28, 0x06	; 6
    185c:	33 e3       	ldi	r19, 0x33	; 51
    185e:	25 96       	adiw	r28, 0x05	; 5
    1860:	3f af       	std	Y+63, r19	; 0x3f
    1862:	25 97       	sbiw	r28, 0x05	; 5
    1864:	43 e1       	ldi	r20, 0x13	; 19
    1866:	24 96       	adiw	r28, 0x04	; 4
    1868:	4f af       	std	Y+63, r20	; 0x3f
    186a:	24 97       	sbiw	r28, 0x04	; 4
    186c:	5b e8       	ldi	r21, 0x8B	; 139
    186e:	23 96       	adiw	r28, 0x03	; 3
    1870:	5f af       	std	Y+63, r21	; 0x3f
    1872:	23 97       	sbiw	r28, 0x03	; 3
    1874:	ab ec       	ldi	r26, 0xCB	; 203
    1876:	22 96       	adiw	r28, 0x02	; 2
    1878:	af af       	std	Y+63, r26	; 0x3f
    187a:	22 97       	sbiw	r28, 0x02	; 2
    187c:	eb e4       	ldi	r30, 0x4B	; 75
    187e:	21 96       	adiw	r28, 0x01	; 1
    1880:	ef af       	std	Y+63, r30	; 0x3f
    1882:	21 97       	sbiw	r28, 0x01	; 1
    1884:	fb ea       	ldi	r31, 0xAB	; 171
    1886:	ff af       	std	Y+63, r31	; 0x3f
    1888:	0b ee       	ldi	r16, 0xEB	; 235
    188a:	0e af       	std	Y+62, r16	; 0x3e
    188c:	3b e6       	ldi	r19, 0x6B	; 107
    188e:	3d af       	std	Y+61, r19	; 0x3d
    1890:	4b e2       	ldi	r20, 0x2B	; 43
    1892:	4c af       	std	Y+60, r20	; 0x3c
    1894:	5b e9       	ldi	r21, 0x9B	; 155
    1896:	5b af       	std	Y+59, r21	; 0x3b
    1898:	ab ed       	ldi	r26, 0xDB	; 219
    189a:	aa af       	std	Y+58, r26	; 0x3a
    189c:	eb e5       	ldi	r30, 0x5B	; 91
    189e:	e9 af       	std	Y+57, r30	; 0x39
    18a0:	fb eb       	ldi	r31, 0xBB	; 187
    18a2:	f8 af       	std	Y+56, r31	; 0x38
    18a4:	0b ef       	ldi	r16, 0xFB	; 251
    18a6:	0f ab       	std	Y+55, r16	; 0x37
    18a8:	3b e7       	ldi	r19, 0x7B	; 123
    18aa:	3e ab       	std	Y+54, r19	; 0x36
    18ac:	4b e3       	ldi	r20, 0x3B	; 59
    18ae:	4d ab       	std	Y+53, r20	; 0x35
    18b0:	5b e1       	ldi	r21, 0x1B	; 27
    18b2:	5c ab       	std	Y+52, r21	; 0x34
    18b4:	ab e0       	ldi	r26, 0x0B	; 11
    18b6:	ab ab       	std	Y+51, r26	; 0x33
    18b8:	31 e8       	ldi	r19, 0x81	; 129
    18ba:	51 ec       	ldi	r21, 0xC1	; 193
    18bc:	41 e4       	ldi	r20, 0x41	; 65
    18be:	f1 ea       	ldi	r31, 0xA1	; 161
    18c0:	e1 ee       	ldi	r30, 0xE1	; 225
    18c2:	71 e6       	ldi	r23, 0x61	; 97
    18c4:	61 e2       	ldi	r22, 0x21	; 33
    18c6:	a1 e9       	ldi	r26, 0x91	; 145
    18c8:	ca 2e       	mov	r12, r26
    18ca:	b1 ed       	ldi	r27, 0xD1	; 209
    18cc:	db 2e       	mov	r13, r27
    18ce:	11 e5       	ldi	r17, 0x51	; 81
    18d0:	e1 2e       	mov	r14, r17
    18d2:	01 eb       	ldi	r16, 0xB1	; 177
    18d4:	f0 2e       	mov	r15, r16
    18d6:	01 ef       	ldi	r16, 0xF1	; 241
    18d8:	e2 96       	adiw	r28, 0x32	; 50
    18da:	0f af       	std	Y+63, r16	; 0x3f
    18dc:	e2 97       	sbiw	r28, 0x32	; 50
    18de:	11 e7       	ldi	r17, 0x71	; 113
    18e0:	b1 e3       	ldi	r27, 0x31	; 49
    18e2:	a1 e1       	ldi	r26, 0x11	; 17
    18e4:	09 e8       	ldi	r16, 0x89	; 137
    18e6:	60 2e       	mov	r6, r16
    18e8:	09 ec       	ldi	r16, 0xC9	; 201
    18ea:	70 2e       	mov	r7, r16
    18ec:	09 e4       	ldi	r16, 0x49	; 73
    18ee:	80 2e       	mov	r8, r16
    18f0:	09 ea       	ldi	r16, 0xA9	; 169
    18f2:	90 2e       	mov	r9, r16
    18f4:	09 ee       	ldi	r16, 0xE9	; 233
    18f6:	a0 2e       	mov	r10, r16
    18f8:	09 e6       	ldi	r16, 0x69	; 105
    18fa:	08 8b       	std	Y+16, r16	; 0x10
    18fc:	09 e2       	ldi	r16, 0x29	; 41
    18fe:	0f 87       	std	Y+15, r16	; 0x0f
    1900:	09 e9       	ldi	r16, 0x99	; 153
    1902:	0e 87       	std	Y+14, r16	; 0x0e
    1904:	09 ed       	ldi	r16, 0xD9	; 217
    1906:	0d 87       	std	Y+13, r16	; 0x0d
    1908:	09 e5       	ldi	r16, 0x59	; 89
    190a:	0c 87       	std	Y+12, r16	; 0x0c
    190c:	09 eb       	ldi	r16, 0xB9	; 185
    190e:	0b 87       	std	Y+11, r16	; 0x0b
    1910:	09 ef       	ldi	r16, 0xF9	; 249
    1912:	0a 87       	std	Y+10, r16	; 0x0a
    1914:	09 e7       	ldi	r16, 0x79	; 121
    1916:	09 87       	std	Y+9, r16	; 0x09
    1918:	09 e3       	ldi	r16, 0x39	; 57
    191a:	08 87       	std	Y+8, r16	; 0x08
    191c:	09 e1       	ldi	r16, 0x19	; 25
    191e:	0f 83       	std	Y+7, r16	; 0x07
    1920:	09 e0       	ldi	r16, 0x09	; 9
    1922:	b0 2e       	mov	r11, r16
    1924:	07 e8       	ldi	r16, 0x87	; 135
    1926:	0a ab       	std	Y+50, r16	; 0x32
    1928:	07 ec       	ldi	r16, 0xC7	; 199
    192a:	09 ab       	std	Y+49, r16	; 0x31
    192c:	07 e4       	ldi	r16, 0x47	; 71
    192e:	08 ab       	std	Y+48, r16	; 0x30
    1930:	07 ea       	ldi	r16, 0xA7	; 167
    1932:	0f a7       	std	Y+47, r16	; 0x2f
    1934:	07 ee       	ldi	r16, 0xE7	; 231
    1936:	0e a7       	std	Y+46, r16	; 0x2e
    1938:	07 e6       	ldi	r16, 0x67	; 103
    193a:	0d a7       	std	Y+45, r16	; 0x2d
    193c:	07 e2       	ldi	r16, 0x27	; 39
    193e:	0c a7       	std	Y+44, r16	; 0x2c
    1940:	07 e9       	ldi	r16, 0x97	; 151
    1942:	0b a7       	std	Y+43, r16	; 0x2b
    1944:	07 ed       	ldi	r16, 0xD7	; 215
    1946:	0a a7       	std	Y+42, r16	; 0x2a
    1948:	07 e5       	ldi	r16, 0x57	; 87
    194a:	09 a7       	std	Y+41, r16	; 0x29
    194c:	07 eb       	ldi	r16, 0xB7	; 183
    194e:	08 a7       	std	Y+40, r16	; 0x28
    1950:	07 ef       	ldi	r16, 0xF7	; 247
    1952:	0f a3       	std	Y+39, r16	; 0x27
    1954:	07 e7       	ldi	r16, 0x77	; 119
    1956:	0e a3       	std	Y+38, r16	; 0x26
    1958:	07 e3       	ldi	r16, 0x37	; 55
    195a:	0d a3       	std	Y+37, r16	; 0x25
    195c:	07 e1       	ldi	r16, 0x17	; 23
    195e:	0c a3       	std	Y+36, r16	; 0x24
    1960:	0f e8       	ldi	r16, 0x8F	; 143
    1962:	0b a3       	std	Y+35, r16	; 0x23
    1964:	0f ec       	ldi	r16, 0xCF	; 207
    1966:	0a a3       	std	Y+34, r16	; 0x22
    1968:	0f e4       	ldi	r16, 0x4F	; 79
    196a:	09 a3       	std	Y+33, r16	; 0x21
    196c:	0f ea       	ldi	r16, 0xAF	; 175
    196e:	08 a3       	std	Y+32, r16	; 0x20
    1970:	0f ee       	ldi	r16, 0xEF	; 239
    1972:	0f 8f       	std	Y+31, r16	; 0x1f
    1974:	0f e6       	ldi	r16, 0x6F	; 111
    1976:	0e 8f       	std	Y+30, r16	; 0x1e
    1978:	0f e2       	ldi	r16, 0x2F	; 47
    197a:	0d 8f       	std	Y+29, r16	; 0x1d
    197c:	0f e9       	ldi	r16, 0x9F	; 159
    197e:	0c 8f       	std	Y+28, r16	; 0x1c
    1980:	0f ed       	ldi	r16, 0xDF	; 223
    1982:	0b 8f       	std	Y+27, r16	; 0x1b
    1984:	0f e5       	ldi	r16, 0x5F	; 95
    1986:	09 8b       	std	Y+17, r16	; 0x11
    1988:	0f eb       	ldi	r16, 0xBF	; 191
    198a:	0a 8b       	std	Y+18, r16	; 0x12
    198c:	0f ef       	ldi	r16, 0xFF	; 255
    198e:	0b 8b       	std	Y+19, r16	; 0x13
    1990:	0f e7       	ldi	r16, 0x7F	; 127
    1992:	0c 8b       	std	Y+20, r16	; 0x14
    1994:	0f e3       	ldi	r16, 0x3F	; 63
    1996:	0d 8b       	std	Y+21, r16	; 0x15
    1998:	0f e1       	ldi	r16, 0x1F	; 31
    199a:	0e 8b       	std	Y+22, r16	; 0x16
    199c:	0f e0       	ldi	r16, 0x0F	; 15
    199e:	0f 8b       	std	Y+23, r16	; 0x17
    19a0:	07 e0       	ldi	r16, 0x07	; 7
    19a2:	08 8f       	std	Y+24, r16	; 0x18
    19a4:	03 e0       	ldi	r16, 0x03	; 3
    19a6:	09 8f       	std	Y+25, r16	; 0x19
    19a8:	05 e0       	ldi	r16, 0x05	; 5
    19aa:	0a 8f       	std	Y+26, r16	; 0x1a
    19ac:	f6 cc       	rjmp	.-1556   	; 0x139a <__stack+0xa9b>
      * - returns TRUE if setting is OFF\n 
      * - returns TRUE if setting is GREEN\n 
      * - returns TRUE if setting is RED\n 
      * - returns FALSE if setting is any other value\n 
      * */
    return ( (setting==OFF) || (setting==GREEN) || (setting==RED) );
    19ae:	88 23       	and	r24, r24
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <__stack+0x10b5>
    19b2:	59 cb       	rjmp	.-2382   	; 0x1066 <__stack+0x767>
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <__stack+0x10bb>
    19b8:	95 c0       	rjmp	.+298    	; 0x1ae4 <__stack+0x11e5>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__stack+0x10c1>
    19be:	9d c0       	rjmp	.+314    	; 0x1afa <__stack+0x11fb>
      * - waits until SPI transfer is done\n 
      * - drives DataReady HIGH immediately after SPI transfer
      *   finishes\n 
      * - enables SPI ISR after transfer\n 
      * */
    *Spi_SPDR = input_byte;
    19c0:	5e bc       	out	0x2e, r5	; 46
    19c2:	8c b5       	in	r24, 0x2c	; 44
    19c4:	8f 77       	andi	r24, 0x7F	; 127
    19c6:	8c bd       	out	0x2c, r24	; 44
    19c8:	29 98       	cbi	0x05, 1	; 5
    // out	0x2c, r24	; 44
    _SignalDataReady();
    // ---Expected Assembly---
    // cbi	0x05, 1	; 5
    // Wait for a byte from the SPI Master.
    while ( !_SpiTransferIsDone() ); // Check SPI interrupt flag
    19ca:	0d b4       	in	r0, 0x2d	; 45
    19cc:	07 fe       	sbrs	r0, 7
    19ce:	fd cf       	rjmp	.-6      	; 0x19ca <__stack+0x10cb>
    19d0:	0c 94 c3 01 	jmp	0x386	; 0x386 <main+0x2c0>
      * - returns RED if LED is on and red\n 
      * - see led_state in StatusCodes.h
      * */

    if (BitIsClear(BiColorLed_ddr, led_num))
        return OFF;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	2c cb       	rjmp	.-2472   	; 0x1030 <__stack+0x731>
    else bit++;
    // bit 1 of byte 0 is datasheet "gain bit G2"
    // bit 2 of byte 0 is datasheet "gain bit G1"
    // {G2,G1}: {0,0} 1x; {0,1} 2.5x; {1,0} 4x; {1,1} 5x
    if      (GAIN_2X5 == gain) { bit++; config[0] |= 1<<(bit++); }
    else if (GAIN_4X == gain)  { config[0] |= 1<<(bit++); bit++; }
    19d8:	39 8d       	ldd	r19, Y+25	; 0x19
    19da:	39 83       	std	Y+1, r19	; 0x01
    19dc:	62 96       	adiw	r28, 0x12	; 18
    19de:	3f ad       	ldd	r19, Y+63	; 0x3f
    19e0:	62 97       	sbiw	r28, 0x12	; 18
    19e2:	61 96       	adiw	r28, 0x11	; 17
    19e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19e6:	61 97       	sbiw	r28, 0x11	; 17
    19e8:	60 96       	adiw	r28, 0x10	; 16
    19ea:	4f ad       	ldd	r20, Y+63	; 0x3f
    19ec:	60 97       	sbiw	r28, 0x10	; 16
    19ee:	2f 96       	adiw	r28, 0x0f	; 15
    19f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    19f2:	2f 97       	sbiw	r28, 0x0f	; 15
    19f4:	2e 96       	adiw	r28, 0x0e	; 14
    19f6:	ef ad       	ldd	r30, Y+63	; 0x3f
    19f8:	2e 97       	sbiw	r28, 0x0e	; 14
    19fa:	2d 96       	adiw	r28, 0x0d	; 13
    19fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    19fe:	2d 97       	sbiw	r28, 0x0d	; 13
    1a00:	2c 96       	adiw	r28, 0x0c	; 12
    1a02:	6f ad       	ldd	r22, Y+63	; 0x3f
    1a04:	2c 97       	sbiw	r28, 0x0c	; 12
    1a06:	2b 96       	adiw	r28, 0x0b	; 11
    1a08:	cf ac       	ldd	r12, Y+63	; 0x3f
    1a0a:	2b 97       	sbiw	r28, 0x0b	; 11
    1a0c:	2a 96       	adiw	r28, 0x0a	; 10
    1a0e:	df ac       	ldd	r13, Y+63	; 0x3f
    1a10:	2a 97       	sbiw	r28, 0x0a	; 10
    1a12:	29 96       	adiw	r28, 0x09	; 9
    1a14:	ef ac       	ldd	r14, Y+63	; 0x3f
    1a16:	29 97       	sbiw	r28, 0x09	; 9
    1a18:	28 96       	adiw	r28, 0x08	; 8
    1a1a:	ff ac       	ldd	r15, Y+63	; 0x3f
    1a1c:	28 97       	sbiw	r28, 0x08	; 8
    1a1e:	27 96       	adiw	r28, 0x07	; 7
    1a20:	af ad       	ldd	r26, Y+63	; 0x3f
    1a22:	27 97       	sbiw	r28, 0x07	; 7
    1a24:	e2 96       	adiw	r28, 0x32	; 50
    1a26:	af af       	std	Y+63, r26	; 0x3f
    1a28:	e2 97       	sbiw	r28, 0x32	; 50
    1a2a:	26 96       	adiw	r28, 0x06	; 6
    1a2c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a2e:	26 97       	sbiw	r28, 0x06	; 6
    1a30:	25 96       	adiw	r28, 0x05	; 5
    1a32:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a34:	25 97       	sbiw	r28, 0x05	; 5
    1a36:	24 96       	adiw	r28, 0x04	; 4
    1a38:	af ad       	ldd	r26, Y+63	; 0x3f
    1a3a:	24 97       	sbiw	r28, 0x04	; 4
    1a3c:	23 96       	adiw	r28, 0x03	; 3
    1a3e:	6f ac       	ldd	r6, Y+63	; 0x3f
    1a40:	23 97       	sbiw	r28, 0x03	; 3
    1a42:	22 96       	adiw	r28, 0x02	; 2
    1a44:	7f ac       	ldd	r7, Y+63	; 0x3f
    1a46:	22 97       	sbiw	r28, 0x02	; 2
    1a48:	21 96       	adiw	r28, 0x01	; 1
    1a4a:	8f ac       	ldd	r8, Y+63	; 0x3f
    1a4c:	21 97       	sbiw	r28, 0x01	; 1
    1a4e:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a50:	ae ac       	ldd	r10, Y+62	; 0x3e
    1a52:	0d ad       	ldd	r16, Y+61	; 0x3d
    1a54:	08 8b       	std	Y+16, r16	; 0x10
    1a56:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a58:	2f 87       	std	Y+15, r18	; 0x0f
    1a5a:	0b ad       	ldd	r16, Y+59	; 0x3b
    1a5c:	0e 87       	std	Y+14, r16	; 0x0e
    1a5e:	2a ad       	ldd	r18, Y+58	; 0x3a
    1a60:	2d 87       	std	Y+13, r18	; 0x0d
    1a62:	09 ad       	ldd	r16, Y+57	; 0x39
    1a64:	0c 87       	std	Y+12, r16	; 0x0c
    1a66:	28 ad       	ldd	r18, Y+56	; 0x38
    1a68:	2b 87       	std	Y+11, r18	; 0x0b
    1a6a:	0f a9       	ldd	r16, Y+55	; 0x37
    1a6c:	0a 87       	std	Y+10, r16	; 0x0a
    1a6e:	2e a9       	ldd	r18, Y+54	; 0x36
    1a70:	29 87       	std	Y+9, r18	; 0x09
    1a72:	0d a9       	ldd	r16, Y+53	; 0x35
    1a74:	08 87       	std	Y+8, r16	; 0x08
    1a76:	2c a9       	ldd	r18, Y+52	; 0x34
    1a78:	2f 83       	std	Y+7, r18	; 0x07
    1a7a:	bb a8       	ldd	r11, Y+51	; 0x33
    1a7c:	97 cc       	rjmp	.-1746   	; 0x13ac <__stack+0xaad>
    }
    else // led_num and led_setting are valid
    {
        // lookup led_num
        uint8_t led;
        switch (led_num)
    1a7e:	8d ef       	ldi	r24, 0xFD	; 253
    1a80:	f6 ca       	rjmp	.-2580   	; 0x106e <__stack+0x76f>
      * */

    if (BitIsClear(BiColorLed_ddr, led_num))
        return OFF;
    else // LED is on
        return BitIsClear(BiColorLed_port, led_num)
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	d5 ca       	rjmp	.-2646   	; 0x1030 <__stack+0x731>
    else if (GAIN_5X == gain)  { config[0] |= 1<<(bit++); config[0] |= 1<<(bit++); }
    1a86:	38 8d       	ldd	r19, Y+24	; 0x18
    1a88:	39 83       	std	Y+1, r19	; 0x01
    1a8a:	3a a9       	ldd	r19, Y+50	; 0x32
    1a8c:	59 a9       	ldd	r21, Y+49	; 0x31
    1a8e:	48 a9       	ldd	r20, Y+48	; 0x30
    1a90:	ff a5       	ldd	r31, Y+47	; 0x2f
    1a92:	ee a5       	ldd	r30, Y+46	; 0x2e
    1a94:	7d a5       	ldd	r23, Y+45	; 0x2d
    1a96:	6c a5       	ldd	r22, Y+44	; 0x2c
    1a98:	cb a4       	ldd	r12, Y+43	; 0x2b
    1a9a:	da a4       	ldd	r13, Y+42	; 0x2a
    1a9c:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a9e:	f8 a4       	ldd	r15, Y+40	; 0x28
    1aa0:	af a1       	ldd	r26, Y+39	; 0x27
    1aa2:	e2 96       	adiw	r28, 0x32	; 50
    1aa4:	af af       	std	Y+63, r26	; 0x3f
    1aa6:	e2 97       	sbiw	r28, 0x32	; 50
    1aa8:	1e a1       	ldd	r17, Y+38	; 0x26
    1aaa:	bd a1       	ldd	r27, Y+37	; 0x25
    1aac:	ac a1       	ldd	r26, Y+36	; 0x24
    1aae:	6b a0       	ldd	r6, Y+35	; 0x23
    1ab0:	7a a0       	ldd	r7, Y+34	; 0x22
    1ab2:	89 a0       	ldd	r8, Y+33	; 0x21
    1ab4:	98 a0       	ldd	r9, Y+32	; 0x20
    1ab6:	af 8c       	ldd	r10, Y+31	; 0x1f
    1ab8:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1aba:	08 8b       	std	Y+16, r16	; 0x10
    1abc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1abe:	2f 87       	std	Y+15, r18	; 0x0f
    1ac0:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1ac2:	0e 87       	std	Y+14, r16	; 0x0e
    1ac4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1ac6:	2d 87       	std	Y+13, r18	; 0x0d
    1ac8:	09 89       	ldd	r16, Y+17	; 0x11
    1aca:	0c 87       	std	Y+12, r16	; 0x0c
    1acc:	2a 89       	ldd	r18, Y+18	; 0x12
    1ace:	2b 87       	std	Y+11, r18	; 0x0b
    1ad0:	0b 89       	ldd	r16, Y+19	; 0x13
    1ad2:	0a 87       	std	Y+10, r16	; 0x0a
    1ad4:	2c 89       	ldd	r18, Y+20	; 0x14
    1ad6:	29 87       	std	Y+9, r18	; 0x09
    1ad8:	0d 89       	ldd	r16, Y+21	; 0x15
    1ada:	08 87       	std	Y+8, r16	; 0x08
    1adc:	2e 89       	ldd	r18, Y+22	; 0x16
    1ade:	2f 83       	std	Y+7, r18	; 0x07
    1ae0:	bf 88       	ldd	r11, Y+23	; 0x17
    1ae2:	64 cc       	rjmp	.-1848   	; 0x13ac <__stack+0xaad>
    }
    else // led_num and led_setting are valid
    {
        // lookup led_num
        uint8_t led;
        switch (led_num)
    1ae4:	91 30       	cpi	r25, 0x01	; 1
    1ae6:	99 f0       	breq	.+38     	; 0x1b0e <__stack+0x120f>
    1ae8:	8e ef       	ldi	r24, 0xFE	; 254
    1aea:	91 e0       	ldi	r25, 0x01	; 1
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1aec:	27 b1       	in	r18, 0x07	; 7
    1aee:	92 2b       	or	r25, r18
    1af0:	97 b9       	out	0x07, r25	; 7
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1af2:	98 b1       	in	r25, 0x08	; 8
    1af4:	89 23       	and	r24, r25
    1af6:	88 b9       	out	0x08, r24	; 8
    1af8:	bd ca       	rjmp	.-2694   	; 0x1074 <__stack+0x775>
    1afa:	91 30       	cpi	r25, 0x01	; 1
    1afc:	59 f0       	breq	.+22     	; 0x1b14 <__stack+0x1215>
    1afe:	81 e0       	ldi	r24, 0x01	; 1
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1b00:	97 b1       	in	r25, 0x07	; 7
    1b02:	98 2b       	or	r25, r24
    1b04:	97 b9       	out	0x07, r25	; 7
    1b06:	98 b1       	in	r25, 0x08	; 8
    1b08:	89 2b       	or	r24, r25
    1b0a:	88 b9       	out	0x08, r24	; 8
    1b0c:	b3 ca       	rjmp	.-2714   	; 0x1074 <__stack+0x775>
    1b0e:	8d ef       	ldi	r24, 0xFD	; 253
    1b10:	92 e0       	ldi	r25, 0x02	; 2
    1b12:	ec cf       	rjmp	.-40     	; 0x1aec <__stack+0x11ed>
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	f4 cf       	rjmp	.-24     	; 0x1b00 <__stack+0x1201>

00001b18 <__vector_17>:
    }
    // DONE
    BiColorLedOn(led_0);
}
ISR(SPI_STC_vect) // Serial Transfer Complete
{
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	2f 93       	push	r18
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
     * - return from interrupt\n
     *\n
     * **Interrupt disabled** during `SpiSlaveTxByte`.\n
     * **Interrupt enabled** all other times.
     * */
    QueuePush(SpiFifo, *Spi_SPDR);
    1b30:	2e b5       	in	r18, 0x2e	; 46
    1b32:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__data_end>
    1b36:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__data_end+0x1>
{ //! Return true if Queue is full
    /** QueueIsFull behavior:\n 
      * - returns true if Queue is full\n 
      * - returns false if Queue is not full\n 
      * */
    if (pq->length >= pq->max_length) return true;
    1b3a:	94 81       	ldd	r25, Z+4	; 0x04
    1b3c:	85 81       	ldd	r24, Z+5	; 0x05
    1b3e:	98 17       	cp	r25, r24
    1b40:	80 f4       	brcc	.+32     	; 0x1b62 <__vector_17+0x4a>
      * - does not write byte if Queue is full\n 
      * - hits end of buffer and wraps around if Queue is not full\n 
      * */
    if (QueueIsFull(pq)) return;
    // wrap head to beginning of buffer when it reaches the end of the buffer
    if (pq->head >= pq->max_length) pq->head = 0;
    1b42:	92 81       	ldd	r25, Z+2	; 0x02
    1b44:	85 81       	ldd	r24, Z+5	; 0x05
    1b46:	98 17       	cp	r25, r24
    1b48:	c0 f4       	brcc	.+48     	; 0x1b7a <__vector_17+0x62>
    pq->buffer[pq->head++] = data;
    1b4a:	a0 81       	ld	r26, Z
    1b4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	98 0f       	add	r25, r24
    1b54:	92 83       	std	Z+2, r25	; 0x02
    1b56:	a8 0f       	add	r26, r24
    1b58:	b1 1d       	adc	r27, r1
    1b5a:	2c 93       	st	X, r18
    pq->length++;
    1b5c:	84 81       	ldd	r24, Z+4	; 0x04
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	84 83       	std	Z+4, r24	; 0x04
}
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	bf 91       	pop	r27
    1b68:	af 91       	pop	r26
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti
      * - does not write byte if Queue is full\n 
      * - hits end of buffer and wraps around if Queue is not full\n 
      * */
    if (QueueIsFull(pq)) return;
    // wrap head to beginning of buffer when it reaches the end of the buffer
    if (pq->head >= pq->max_length) pq->head = 0;
    1b7a:	12 82       	std	Z+2, r1	; 0x02
    1b7c:	e6 cf       	rjmp	.-52     	; 0x1b4a <__vector_17+0x32>

00001b7e <AutoExpose>:
#define LisReadout LisReadout_fake
#define S13131Expose S13131Expose_fake
#define S13131Readout S13131Readout_fake
#endif
uint16_t AutoExpose(void)
{
    1b7e:	2f 92       	push	r2
    1b80:	3f 92       	push	r3
    1b82:	4f 92       	push	r4
    1b84:	5f 92       	push	r5
    1b86:	6f 92       	push	r6
    1b88:	7f 92       	push	r7
    1b8a:	8f 92       	push	r8
    1b8c:	9f 92       	push	r9
    1b8e:	af 92       	push	r10
    1b90:	bf 92       	push	r11
    1b92:	cf 92       	push	r12
    1b94:	df 92       	push	r13
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	67 97       	sbiw	r28, 0x17	; 23
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
inline void BiColorLedRed(bicolorled_num led)
{
    /** BiColorLedRed behavior:\n 
      * - sets bit in port\n 
      * */
    SetBit(BiColorLed_port, led);
    1bb2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <BiColorLed_port>
    1bb6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <BiColorLed_port+0x1>
    1bba:	39 8b       	std	Y+17, r19	; 0x11
    1bbc:	28 8b       	std	Y+16, r18	; 0x10
    1bbe:	d9 01       	movw	r26, r18
    1bc0:	8c 91       	ld	r24, X
    1bc2:	21 e0       	ldi	r18, 0x01	; 1
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	f9 01       	movw	r30, r18
    1bc8:	00 90 13 01 	lds	r0, 0x0113	; 0x800113 <led_1>
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <AutoExpose+0x54>
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <AutoExpose+0x50>
    1bd6:	fd 8b       	std	Y+21, r31	; 0x15
    1bd8:	ec 8b       	std	Y+20, r30	; 0x14
    1bda:	8e 2b       	or	r24, r30
    1bdc:	8c 93       	st	X, r24
    uint16_t peak=0;

    // determine number of pixels to readout
#ifdef LIS
    uint16_t num_pixels;
    if (binning == BINNING_OFF) num_pixels = MAX_NUM_PIXELS;
    1bde:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <binning>
    1be2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <BINNING_OFF>
    1be6:	98 17       	cp	r25, r24
    1be8:	09 f4       	brne	.+2      	; 0x1bec <AutoExpose+0x6e>
    1bea:	e4 c1       	rjmp	.+968    	; 0x1fb4 <AutoExpose+0x436>
    else num_pixels = MAX_NUM_PIXELS/2;
    1bec:	88 e8       	ldi	r24, 0x88	; 136
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    // give up after iterations == max_tries
    // SetAutoExposeConfig guarantees at least one try.
    uint8_t iterations = 0;

    // calculate target range for peak values
    uint16_t min_peak = _MinPeak(target, target_tolerance);
    1bf0:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <target_tolerance>
    1bf4:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <target_tolerance+0x1>
    1bf8:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <target>
    1bfc:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <target+0x1>
 * */
extern uint16_t max_exposure;

inline uint16_t _MinPeak(uint16_t target, uint16_t target_tolerance)
{
    uint16_t min_peak = target-target_tolerance;
    1c00:	f9 01       	movw	r30, r18
    1c02:	e4 1b       	sub	r30, r20
    1c04:	f5 0b       	sbc	r31, r21
    /* ------------------------------ */
    /* | clamp min_peak at max_dark | */
    /* ------------------------------ */

    // guard against arithmetic wrap around where target - tol > target
    if ( min_peak > target) min_peak = max_dark;
    1c06:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <max_dark>
    1c0a:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <max_dark+0x1>
    1c0e:	2e 17       	cp	r18, r30
    1c10:	3f 07       	cpc	r19, r31
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <AutoExpose+0x98>
    1c14:	a7 c0       	rjmp	.+334    	; 0x1d64 <AutoExpose+0x1e6>
    1c16:	fd 87       	std	Y+13, r31	; 0x0d
    1c18:	ec 87       	std	Y+12, r30	; 0x0c
    1c1a:	e6 17       	cp	r30, r22
    1c1c:	f7 07       	cpc	r31, r23
    1c1e:	08 f4       	brcc	.+2      	; 0x1c22 <AutoExpose+0xa4>
    1c20:	a1 c0       	rjmp	.+322    	; 0x1d64 <AutoExpose+0x1e6>
// | (both /usr/include/stdint.h and avr/include/stdint.h) |
// ---------------------------------------------------------

inline uint16_t _MaxPeak(uint16_t target, uint16_t target_tolerance)
{
    uint16_t max_peak = target + target_tolerance;
    1c22:	da 01       	movw	r26, r20
    1c24:	a2 0f       	add	r26, r18
    1c26:	b3 1f       	adc	r27, r19
    1c28:	bf 87       	std	Y+15, r27	; 0x0f
    1c2a:	ae 87       	std	Y+14, r26	; 0x0e

    /* --------------------------- */
    /* | clamp max_peak at 65535 | */
    /* --------------------------- */
    // guard against arithmetic wrap around where target + tol < target
    if ( max_peak < target) max_peak = UINT16_MAX;
    1c2c:	a2 17       	cp	r26, r18
    1c2e:	b3 07       	cpc	r27, r19
    1c30:	20 f4       	brcc	.+8      	; 0x1c3a <AutoExpose+0xbc>
    1c32:	ef ef       	ldi	r30, 0xFF	; 255
    1c34:	ff ef       	ldi	r31, 0xFF	; 255
    1c36:	ff 87       	std	Y+15, r31	; 0x0f
    1c38:	ee 87       	std	Y+14, r30	; 0x0e
    1c3a:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <Lis_TIFR0>
    1c3e:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <Lis_TIFR0+0x1>
    1c42:	3b 8b       	std	Y+19, r19	; 0x13
    1c44:	2a 8b       	std	Y+18, r18	; 0x12
    1c46:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <Lis_port1>
    1c4a:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <Lis_port1+0x1>
    1c4e:	5a 83       	std	Y+2, r21	; 0x02
    1c50:	49 83       	std	Y+1, r20	; 0x01
    1c52:	20 90 0f 01 	lds	r2, 0x010F	; 0x80010f <Lis_pin1>
    1c56:	30 90 10 01 	lds	r3, 0x0110	; 0x800110 <Lis_pin1+0x1>
    1c5a:	60 90 07 01 	lds	r6, 0x0107	; 0x800107 <UartSpi_port>
    1c5e:	70 90 08 01 	lds	r7, 0x0108	; 0x800108 <UartSpi_port+0x1>
    1c62:	40 90 03 01 	lds	r4, 0x0103	; 0x800103 <UartSpi_UDR0>
    1c66:	50 90 04 01 	lds	r5, 0x0104	; 0x800104 <UartSpi_UDR0+0x1>
    1c6a:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <UartSpi_UCSR0A>
    1c6e:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <UartSpi_UCSR0A+0x1>
    1c72:	01 e0       	ldi	r16, 0x01	; 1
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	68 01       	movw	r12, r16
    1c78:	00 90 09 01 	lds	r0, 0x0109	; 0x800109 <Lis_OCF0B>
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <AutoExpose+0x104>
    1c7e:	cc 0c       	add	r12, r12
    1c80:	dd 1c       	adc	r13, r13
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <AutoExpose+0x100>
    1c86:	cc 82       	std	Y+4, r12	; 0x04
    1c88:	98 01       	movw	r18, r16
    1c8a:	00 90 0c 01 	lds	r0, 0x010C	; 0x80010c <Lis_Rst>
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <AutoExpose+0x116>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <AutoExpose+0x112>
    1c98:	2d 83       	std	Y+5, r18	; 0x05
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1c9a:	52 2f       	mov	r21, r18
    1c9c:	50 95       	com	r21
    1c9e:	5e 83       	std	Y+6, r21	; 0x06
    1ca0:	48 01       	movw	r8, r16
    1ca2:	00 90 0b 01 	lds	r0, 0x010B	; 0x80010b <Lis_Sync>
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <AutoExpose+0x12e>
    1ca8:	88 0c       	add	r8, r8
    1caa:	99 1c       	adc	r9, r9
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <AutoExpose+0x12a>
    1cb0:	58 01       	movw	r10, r16
    1cb2:	00 90 0a 01 	lds	r0, 0x010A	; 0x80010a <Lis_OCF0A>
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <AutoExpose+0x13e>
    1cb8:	aa 0c       	add	r10, r10
    1cba:	bb 1c       	adc	r11, r11
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <AutoExpose+0x13a>
    1cc0:	af 82       	std	Y+7, r10	; 0x07
    1cc2:	98 01       	movw	r18, r16
    1cc4:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <UartSpi_AdcConv>
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <AutoExpose+0x150>
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <AutoExpose+0x14c>
    1cd2:	28 87       	std	Y+8, r18	; 0x08
    1cd4:	62 2f       	mov	r22, r18
    1cd6:	60 95       	com	r22
    1cd8:	69 87       	std	Y+9, r22	; 0x09
    1cda:	00 90 01 01 	lds	r0, 0x0101	; 0x800101 <UartSpi_RXC0>
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <AutoExpose+0x166>
    1ce0:	00 0f       	add	r16, r16
    1ce2:	11 1f       	adc	r17, r17
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <AutoExpose+0x162>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	dc 01       	movw	r26, r24
    1cee:	ac 5b       	subi	r26, 0xBC	; 188
    1cf0:	be 4f       	sbci	r27, 0xFE	; 254
    1cf2:	bb 87       	std	Y+11, r27	; 0x0b
    1cf4:	aa 87       	std	Y+10, r26	; 0x0a
    /* | AutoExpose SETUP | */
    /* -------------------- */

    // give up after iterations == max_tries
    // SetAutoExposeConfig guarantees at least one try.
    uint8_t iterations = 0;
    1cf6:	1b 82       	std	Y+3, r1	; 0x03
    1cf8:	ea 89       	ldd	r30, Y+18	; 0x12
    1cfa:	fb 89       	ldd	r31, Y+19	; 0x13
    1cfc:	ff 8b       	std	Y+23, r31	; 0x17
    1cfe:	ee 8b       	std	Y+22, r30	; 0x16
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1d00:	ae 89       	ldd	r26, Y+22	; 0x16
    1d02:	bf 89       	ldd	r27, Y+23	; 0x17
    1d04:	8c 91       	ld	r24, X
    1d06:	bc 81       	ldd	r27, Y+4	; 0x04
    1d08:	8b 2b       	or	r24, r27
    1d0a:	ee 89       	ldd	r30, Y+22	; 0x16
    1d0c:	ff 89       	ldd	r31, Y+23	; 0x17
    1d0e:	80 83       	st	Z, r24
    1d10:	df 01       	movw	r26, r30
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    1d12:	8c 91       	ld	r24, X
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	8c 21       	and	r24, r12
    1d18:	9d 21       	and	r25, r13
    1d1a:	89 2b       	or	r24, r25
    1d1c:	d1 f3       	breq	.-12     	; 0x1d12 <AutoExpose+0x194>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d20:	fa 81       	ldd	r31, Y+2	; 0x02
    1d22:	80 81       	ld	r24, Z
    1d24:	fd 81       	ldd	r31, Y+5	; 0x05
    1d26:	8f 2b       	or	r24, r31
    1d28:	a9 81       	ldd	r26, Y+1	; 0x01
    1d2a:	ba 81       	ldd	r27, Y+2	; 0x02
    1d2c:	8c 93       	st	X, r24

    // start exposure
    SetBit(Lis_port1, Lis_Rst); // sbi	0x0b, 6

    // count falling edges as ticks
    uint16_t tick_count = 0;
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	6c 81       	ldd	r22, Y+4	; 0x04
    while (tick_count++ < exposure_ticks)
    1d34:	9c 01       	movw	r18, r24
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	40 91 6a 07 	lds	r20, 0x076A	; 0x80076a <exposure_ticks>
    1d3e:	50 91 6b 07 	lds	r21, 0x076B	; 0x80076b <exposure_ticks+0x1>
    1d42:	84 17       	cp	r24, r20
    1d44:	95 07       	cpc	r25, r21
    1d46:	88 f4       	brcc	.+34     	; 0x1d6a <AutoExpose+0x1ec>
    1d48:	ee 89       	ldd	r30, Y+22	; 0x16
    1d4a:	ff 89       	ldd	r31, Y+23	; 0x17
    1d4c:	80 81       	ld	r24, Z
    1d4e:	86 2b       	or	r24, r22
    1d50:	80 83       	st	Z, r24
    1d52:	df 01       	movw	r26, r30
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    1d54:	8c 91       	ld	r24, X
      * - waits until flag PwmTimerMatchesOCF0B is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0B
    SetBit(Lis_TIFR0, Lis_OCF0B); // set bit to clear flag: sbi	0x15, 2
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0B)); // sbis	0x15, 2
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	8c 21       	and	r24, r12
    1d5a:	9d 21       	and	r25, r13
    1d5c:	89 2b       	or	r24, r25
    1d5e:	d1 f3       	breq	.-12     	; 0x1d54 <AutoExpose+0x1d6>
    // start exposure
    SetBit(Lis_port1, Lis_Rst); // sbi	0x0b, 6

    // count falling edges as ticks
    uint16_t tick_count = 0;
    while (tick_count++ < exposure_ticks)
    1d60:	c9 01       	movw	r24, r18
    1d62:	e8 cf       	rjmp	.-48     	; 0x1d34 <AutoExpose+0x1b6>
    1d64:	7d 87       	std	Y+13, r23	; 0x0d
    1d66:	6c 87       	std	Y+12, r22	; 0x0c
    1d68:	5c cf       	rjmp	.-328    	; 0x1c22 <AutoExpose+0xa4>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6e:	80 81       	ld	r24, Z
    1d70:	fe 81       	ldd	r31, Y+6	; 0x06
    1d72:	8f 23       	and	r24, r31
    1d74:	a9 81       	ldd	r26, Y+1	; 0x01
    1d76:	ba 81       	ldd	r27, Y+2	; 0x02
    1d78:	8c 93       	st	X, r24
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    1d7a:	f1 01       	movw	r30, r2
    1d7c:	80 81       	ld	r24, Z
      * - LOOP: wait for least significant byte of ADC readout\n 
      * - LOOP: save LSB to frame buffer\n 
      * */

    // wait for SYNC pulse to signify readout starts
    while( BitIsClear(Lis_pin1, Lis_Sync) ); // wait for SYNC HIGH
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	88 21       	and	r24, r8
    1d82:	99 21       	and	r25, r9
    1d84:	89 2b       	or	r24, r25
    1d86:	c9 f3       	breq	.-14     	; 0x1d7a <AutoExpose+0x1fc>
    *reg_addr &= ~(1<<bit);
}
// Read bits
inline bool BitIsSet(register_address reg_addr, bit_index bit)
{
    return *reg_addr & 1<<bit;
    1d88:	d1 01       	movw	r26, r2
    1d8a:	8c 91       	ld	r24, X
    while(   BitIsSet(Lis_pin1, Lis_Sync) ); // wait for SYNC LOW
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	88 21       	and	r24, r8
    1d90:	99 21       	and	r25, r9
    1d92:	89 2b       	or	r24, r25
    1d94:	c9 f7       	brne	.-14     	; 0x1d88 <AutoExpose+0x20a>
    1d96:	e4 e4       	ldi	r30, 0x44	; 68
    1d98:	f1 e0       	ldi	r31, 0x01	; 1
    1d9a:	4f 81       	ldd	r20, Y+7	; 0x07
    1d9c:	58 85       	ldd	r21, Y+8	; 0x08
    1d9e:	69 85       	ldd	r22, Y+9	; 0x09
    1da0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1da2:	3b 85       	ldd	r19, Y+11	; 0x0b
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1da4:	ae 89       	ldd	r26, Y+22	; 0x16
    1da6:	bf 89       	ldd	r27, Y+23	; 0x17
    1da8:	8c 91       	ld	r24, X
    1daa:	84 2b       	or	r24, r20
    1dac:	8c 93       	st	X, r24
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    1dae:	8c 91       	ld	r24, X
      * - waits until flag PwmTimerMatchesOCF0A is set\n 
      * */
    // Clear flag that is set when Counter0 matches OCR0A
    SetBit(Lis_TIFR0, Lis_OCF0A);
    // Wait for flag to set again
    while(BitIsClear(Lis_TIFR0, Lis_OCF0A));
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	8a 21       	and	r24, r10
    1db4:	9b 21       	and	r25, r11
    1db6:	89 2b       	or	r24, r25
    1db8:	d1 f3       	breq	.-12     	; 0x1dae <AutoExpose+0x230>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1dba:	d3 01       	movw	r26, r6
    1dbc:	8c 91       	ld	r24, X
    1dbe:	85 2b       	or	r24, r21
    1dc0:	8c 93       	st	X, r24
    1dc2:	8f e0       	ldi	r24, 0x0F	; 15
    1dc4:	8a 95       	dec	r24
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <AutoExpose+0x246>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1dc8:	8c 91       	ld	r24, X
    1dca:	86 23       	and	r24, r22
    1dcc:	8c 93       	st	X, r24
    1dce:	d2 01       	movw	r26, r4
    1dd0:	1c 92       	st	X, r1
    1dd2:	1c 92       	st	X, r1
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    1dd4:	d7 01       	movw	r26, r14
    1dd6:	8c 91       	ld	r24, X

        // start 16-bit ADC readout
        StartAdcReadout();

        // wait for MSB of ADC readout
        while (BitIsClear(UartSpi_UCSR0A, UartSpi_RXC0));
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	80 23       	and	r24, r16
    1ddc:	91 23       	and	r25, r17
    1dde:	89 2b       	or	r24, r25
    1de0:	c9 f3       	breq	.-14     	; 0x1dd4 <AutoExpose+0x256>

        // save MSB to frame buffer
        *(pframe++) = *UartSpi_UDR0;
    1de2:	d2 01       	movw	r26, r4
    1de4:	8c 91       	ld	r24, X
    1de6:	80 83       	st	Z, r24
    1de8:	d7 01       	movw	r26, r14
    1dea:	8c 91       	ld	r24, X

        // wait for LSB of ADC readout
        while (BitIsClear(UartSpi_UCSR0A, UartSpi_RXC0));
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	80 23       	and	r24, r16
    1df0:	91 23       	and	r25, r17
    1df2:	89 2b       	or	r24, r25
    1df4:	c9 f3       	breq	.-14     	; 0x1de8 <AutoExpose+0x26a>

        // save LSB to frame buffer
        *(pframe++) = *UartSpi_UDR0;
    1df6:	d2 01       	movw	r26, r4
    1df8:	8c 91       	ld	r24, X
    1dfa:	81 83       	std	Z+1, r24	; 0x01
    1dfc:	32 96       	adiw	r30, 0x02	; 2
    /* --------------------------------------------------------- */
    /* | LOOP: read one pixel on each rising edge of Lis clock | */
    /* --------------------------------------------------------- */
    uint16_t pixel_count = 0;
    uint8_t *pframe = frame;
    while( pixel_count++ < num_pixels)
    1dfe:	e2 17       	cp	r30, r18
    1e00:	f3 07       	cpc	r31, r19
    1e02:	81 f6       	brne	.-96     	; 0x1da4 <AutoExpose+0x226>
        // readout the S13131-512 pixels into global frame buffer
        S13131Readout();
#endif

        // find peak in range start_pixel : stop_pixel
        peak = GetPeak(start_pixel, stop_pixel);
    1e04:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <stop_pixel>
    1e08:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <stop_pixel+0x1>
    1e0c:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <start_pixel>
    1e10:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <start_pixel+0x1>

    // start with a peak value of 0
    uint16_t peak = 0;

    // do not look for peak if _stop_pixel < _start_pixel
    if (_stop_pixel < _start_pixel) return peak;
    1e14:	62 17       	cp	r22, r18
    1e16:	73 07       	cpc	r23, r19
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <AutoExpose+0x29e>
    1e1a:	57 c0       	rjmp	.+174    	; 0x1eca <AutoExpose+0x34c>

        // one variable for all big calculation results
        uint32_t big_result; // stores up to 4294967295

        // any signal?
        if (peak < max_dark)
    1e1c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <max_dark>
    1e20:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <max_dark+0x1>
    1e24:	89 2b       	or	r24, r25
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <AutoExpose+0x2ac>
    1e28:	8b c0       	rjmp	.+278    	; 0x1f40 <AutoExpose+0x3c2>
        {
            // stop if already at maximum exposure
            // (compare with >= because max_exposure < UINT16_MAX)
            if (exposure_ticks >= max_exposure) done = true;
    1e2a:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <exposure_ticks>
    1e2e:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <exposure_ticks+0x1>
    1e32:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <max_exposure>
    1e36:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <max_exposure+0x1>
    1e3a:	84 17       	cp	r24, r20
    1e3c:	95 07       	cpc	r25, r21
    1e3e:	20 f5       	brcc	.+72     	; 0x1e88 <AutoExpose+0x30a>

            // otherwise, 10x exposure
            else
            {
                big_result = 10 * exposure_ticks;
    1e40:	9c 01       	movw	r18, r24
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	82 0f       	add	r24, r18
    1e54:	93 1f       	adc	r25, r19

                // clamp exposure at its maximum value
                if (big_result > max_exposure) big_result = max_exposure;
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
                exposure_ticks = big_result;
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	48 17       	cp	r20, r24
    1e60:	59 07       	cpc	r21, r25
    1e62:	6a 07       	cpc	r22, r26
    1e64:	7b 07       	cpc	r23, r27
    1e66:	10 f4       	brcc	.+4      	; 0x1e6c <AutoExpose+0x2ee>
                big_result = (uint32_t)target * exposure_ticks;
                big_result = big_result / peak;

                // clamp exposure at its maximum value
                if (big_result > max_exposure) big_result = max_exposure;
                exposure_ticks = big_result;
    1e68:	db 01       	movw	r26, r22
    1e6a:	ca 01       	movw	r24, r20
    1e6c:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <exposure_ticks+0x1>
    1e70:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <exposure_ticks>
            // green means target hit
            BiColorLedGreen(led_1);
        }

        // give up if peak fails to hit target range after many tries
        if (++iterations == max_tries) done = true;
    1e74:	fb 81       	ldd	r31, Y+3	; 0x03
    1e76:	ff 5f       	subi	r31, 0xFF	; 255
    1e78:	fb 83       	std	Y+3, r31	; 0x03
    1e7a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <max_tries>
    1e7e:	f8 13       	cpse	r31, r24
    1e80:	3f cf       	rjmp	.-386    	; 0x1d00 <AutoExpose+0x182>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	bf 2f       	mov	r27, r31
    1e86:	04 c0       	rjmp	.+8      	; 0x1e90 <AutoExpose+0x312>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8c:	ef 5f       	subi	r30, 0xFF	; 255
    1e8e:	be 2f       	mov	r27, r30
    }
    // return success as MSB and iterations as LSB
    uint16_t result = (uint16_t)(success << 8) | iterations;
    return result;
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	98 2f       	mov	r25, r24
    1e94:	88 27       	eor	r24, r24
    1e96:	8b 2b       	or	r24, r27
}
    1e98:	67 96       	adiw	r28, 0x17	; 23
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	bf 90       	pop	r11
    1eb6:	af 90       	pop	r10
    1eb8:	9f 90       	pop	r9
    1eba:	8f 90       	pop	r8
    1ebc:	7f 90       	pop	r7
    1ebe:	6f 90       	pop	r6
    1ec0:	5f 90       	pop	r5
    1ec2:	4f 90       	pop	r4
    1ec4:	3f 90       	pop	r3
    1ec6:	2f 90       	pop	r2
    1ec8:	08 95       	ret
    1eca:	f9 01       	movw	r30, r18
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	ee 5b       	subi	r30, 0xBE	; 190
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     *                          ^------- then byte_index is 12
     * */
    uint16_t byte_index = (_start_pixel-1) * 2; // 2 bytes per pixel

    // point at _start_pixel in the global frame buffer
    uint8_t * pframe = frame + byte_index;
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e0       	ldi	r21, 0x00	; 0

    // check every pixel until _stop_pixel
    for (uint16_t pixnum = _start_pixel; pixnum++ <= _stop_pixel;)
    {
        uint16_t pixval = (*(pframe++)) << 8;
        pixval |= (*(pframe++));
    1ed8:	80 81       	ld	r24, Z
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	98 2f       	mov	r25, r24
    1ede:	88 27       	eor	r24, r24
    1ee0:	a1 81       	ldd	r26, Z+1	; 0x01
    1ee2:	8a 2b       	or	r24, r26
    1ee4:	48 17       	cp	r20, r24
    1ee6:	59 07       	cpc	r21, r25
    1ee8:	08 f4       	brcc	.+2      	; 0x1eec <AutoExpose+0x36e>
    1eea:	ac 01       	movw	r20, r24
    1eec:	32 96       	adiw	r30, 0x02	; 2
    1eee:	2f 5f       	subi	r18, 0xFF	; 255
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255

    // point at _start_pixel in the global frame buffer
    uint8_t * pframe = frame + byte_index;

    // check every pixel until _stop_pixel
    for (uint16_t pixnum = _start_pixel; pixnum++ <= _stop_pixel;)
    1ef2:	62 17       	cp	r22, r18
    1ef4:	73 07       	cpc	r23, r19
    1ef6:	80 f7       	brcc	.-32     	; 0x1ed8 <AutoExpose+0x35a>

        // one variable for all big calculation results
        uint32_t big_result; // stores up to 4294967295

        // any signal?
        if (peak < max_dark)
    1ef8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <max_dark>
    1efc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <max_dark+0x1>
    1f00:	48 17       	cp	r20, r24
    1f02:	59 07       	cpc	r21, r25
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <AutoExpose+0x38a>
    1f06:	91 cf       	rjmp	.-222    	; 0x1e2a <AutoExpose+0x2ac>
                exposure_ticks = big_result;
            }
        }

        // peak ABOVE target range?
        else if (peak > max_peak)
    1f08:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f0c:	e4 17       	cp	r30, r20
    1f0e:	f5 07       	cpc	r31, r21
    1f10:	c8 f4       	brcc	.+50     	; 0x1f44 <AutoExpose+0x3c6>
        {
            // TAKE BACK HALF
            exposure_ticks = exposure_ticks >> 1;
    1f12:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <exposure_ticks>
    1f16:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <exposure_ticks+0x1>
    1f1a:	96 95       	lsr	r25
    1f1c:	87 95       	ror	r24
    1f1e:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <exposure_ticks+0x1>
    1f22:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <exposure_ticks>

            // clamp exposure at its minimum value
            if (exposure_ticks < min_exposure) exposure_ticks = min_exposure;
    1f26:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <min_exposure>
    1f2a:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <min_exposure+0x1>
    1f2e:	82 17       	cp	r24, r18
    1f30:	93 07       	cpc	r25, r19
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <AutoExpose+0x3b8>
    1f34:	9f cf       	rjmp	.-194    	; 0x1e74 <AutoExpose+0x2f6>
    1f36:	30 93 6b 07 	sts	0x076B, r19	; 0x80076b <exposure_ticks+0x1>
    1f3a:	20 93 6a 07 	sts	0x076A, r18	; 0x80076a <exposure_ticks>
    1f3e:	9a cf       	rjmp	.-204    	; 0x1e74 <AutoExpose+0x2f6>

    // start with a peak value of 0
    uint16_t peak = 0;

    // do not look for peak if _stop_pixel < _start_pixel
    if (_stop_pixel < _start_pixel) return peak;
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
            // clamp exposure at its minimum value
            if (exposure_ticks < min_exposure) exposure_ticks = min_exposure;
        }

        // peak BELOW target range?
        else if (peak < min_peak)
    1f44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f46:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f48:	42 17       	cp	r20, r18
    1f4a:	53 07       	cpc	r21, r19
    1f4c:	50 f5       	brcc	.+84     	; 0x1fa2 <AutoExpose+0x424>
        {
            // stop if already at maximum exposure
            // (compare with >= because max_exposure < UINT16_MAX)
            if (exposure_ticks >= max_exposure) done = true;
    1f4e:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <exposure_ticks>
    1f52:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <exposure_ticks+0x1>
    1f56:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <max_exposure>
    1f5a:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <max_exposure+0x1>
    1f5e:	7b 8b       	std	Y+19, r23	; 0x13
    1f60:	6a 8b       	std	Y+18, r22	; 0x12
    1f62:	a6 17       	cp	r26, r22
    1f64:	b7 07       	cpc	r27, r23
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <AutoExpose+0x3ec>
    1f68:	8f cf       	rjmp	.-226    	; 0x1e88 <AutoExpose+0x30a>
            {
                // -------------------------------------------------
                // | AT LEAST ONE OPERAND MUST BE CAST AS uint32_t |
                // | OTHERWISE THE OPERATION IS TREATED AS 16-bit  |
                // -------------------------------------------------
                big_result = (uint32_t)target * exposure_ticks;
    1f6a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <target>
    1f6e:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <target+0x1>
    1f72:	0e 94 05 10 	call	0x200a	; 0x200a <__umulhisi3>
                big_result = big_result / peak;
    1f76:	9a 01       	movw	r18, r20
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__udivmodsi4>
    1f80:	f4 2f       	mov	r31, r20
    1f82:	e5 2f       	mov	r30, r21

                // clamp exposure at its maximum value
                if (big_result > max_exposure) big_result = max_exposure;
    1f84:	8a 89       	ldd	r24, Y+18	; 0x12
    1f86:	9b 89       	ldd	r25, Y+19	; 0x13
    1f88:	ac 01       	movw	r20, r24
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
                exposure_ticks = big_result;
    1f8e:	c9 01       	movw	r24, r18
    1f90:	af 2f       	mov	r26, r31
    1f92:	be 2f       	mov	r27, r30
    1f94:	48 17       	cp	r20, r24
    1f96:	59 07       	cpc	r21, r25
    1f98:	6a 07       	cpc	r22, r26
    1f9a:	7b 07       	cpc	r23, r27
    1f9c:	08 f0       	brcs	.+2      	; 0x1fa0 <AutoExpose+0x422>
    1f9e:	66 cf       	rjmp	.-308    	; 0x1e6c <AutoExpose+0x2ee>
    1fa0:	63 cf       	rjmp	.-314    	; 0x1e68 <AutoExpose+0x2ea>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1fa2:	a8 89       	ldd	r26, Y+16	; 0x10
    1fa4:	b9 89       	ldd	r27, Y+17	; 0x11
    1fa6:	9c 91       	ld	r25, X
    1fa8:	8c 89       	ldd	r24, Y+20	; 0x14
    1faa:	80 95       	com	r24
    1fac:	89 23       	and	r24, r25
    1fae:	8c 93       	st	X, r24

        // peak is in the target range
        else
        {
            done = true;
            success = true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	6b cf       	rjmp	.-298    	; 0x1e8a <AutoExpose+0x30c>
    uint16_t peak=0;

    // determine number of pixels to readout
#ifdef LIS
    uint16_t num_pixels;
    if (binning == BINNING_OFF) num_pixels = MAX_NUM_PIXELS;
    1fb4:	80 e1       	ldi	r24, 0x10	; 16
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	1b ce       	rjmp	.-970    	; 0x1bf0 <AutoExpose+0x72>

00001fba <__udivmodsi4>:
    1fba:	a1 e2       	ldi	r26, 0x21	; 33
    1fbc:	1a 2e       	mov	r1, r26
    1fbe:	aa 1b       	sub	r26, r26
    1fc0:	bb 1b       	sub	r27, r27
    1fc2:	fd 01       	movw	r30, r26
    1fc4:	0d c0       	rjmp	.+26     	; 0x1fe0 <__udivmodsi4_ep>

00001fc6 <__udivmodsi4_loop>:
    1fc6:	aa 1f       	adc	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	ee 1f       	adc	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	a2 17       	cp	r26, r18
    1fd0:	b3 07       	cpc	r27, r19
    1fd2:	e4 07       	cpc	r30, r20
    1fd4:	f5 07       	cpc	r31, r21
    1fd6:	20 f0       	brcs	.+8      	; 0x1fe0 <__udivmodsi4_ep>
    1fd8:	a2 1b       	sub	r26, r18
    1fda:	b3 0b       	sbc	r27, r19
    1fdc:	e4 0b       	sbc	r30, r20
    1fde:	f5 0b       	sbc	r31, r21

00001fe0 <__udivmodsi4_ep>:
    1fe0:	66 1f       	adc	r22, r22
    1fe2:	77 1f       	adc	r23, r23
    1fe4:	88 1f       	adc	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	1a 94       	dec	r1
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <__udivmodsi4_loop>
    1fec:	60 95       	com	r22
    1fee:	70 95       	com	r23
    1ff0:	80 95       	com	r24
    1ff2:	90 95       	com	r25
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	bd 01       	movw	r22, r26
    1ffa:	cf 01       	movw	r24, r30
    1ffc:	08 95       	ret

00001ffe <__tablejump2__>:
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	05 90       	lpm	r0, Z+
    2004:	f4 91       	lpm	r31, Z
    2006:	e0 2d       	mov	r30, r0
    2008:	09 94       	ijmp

0000200a <__umulhisi3>:
    200a:	a2 9f       	mul	r26, r18
    200c:	b0 01       	movw	r22, r0
    200e:	b3 9f       	mul	r27, r19
    2010:	c0 01       	movw	r24, r0
    2012:	a3 9f       	mul	r26, r19
    2014:	70 0d       	add	r23, r0
    2016:	81 1d       	adc	r24, r1
    2018:	11 24       	eor	r1, r1
    201a:	91 1d       	adc	r25, r1
    201c:	b2 9f       	mul	r27, r18
    201e:	70 0d       	add	r23, r0
    2020:	81 1d       	adc	r24, r1
    2022:	11 24       	eor	r1, r1
    2024:	91 1d       	adc	r25, r1
    2026:	08 95       	ret

00002028 <_exit>:
    2028:	f8 94       	cli

0000202a <__stop_program>:
    202a:	ff cf       	rjmp	.-2      	; 0x202a <__stop_program>
