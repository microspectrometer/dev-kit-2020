#ifndef _TEST_SENSORVIS_H
#define _TEST_SENSORVIS_H

void SetUp_GetSensorLED(void); void TearDown_GetSensorLED(void);
void GetSensorLED_receives_led_number(void);
void GetSensorLED_always_replies_with_two_bytes(void);
void GetSensorLED_replies_msg_status_error_if_led_does_not_exist(void);
void GetSensorLED_replies_msg_status_ok_if_led_number_is_recognized(void);
void GetSensorLED_replies_led_off_if_led_is_off(void);
void GetSensorLED_replies_led_green_if_led_is_green(void);
void GetSensorLED_replies_led_red_if_led_is_red(void);

void test_lib_SensorVis_can_use_lib_Queue_and_sees_SpiFifo(void);
void test_Queue_lib_examples_of_push_and_pop(void);
void test_Queue_lib_example_of_push_wrap_around(void);
void GetSensorLED_sends_no_additional_bytes_if_msg_status_is_error(void);
void GetSensorLED_sends_led_status_byte_after_sending_msg_status_ok(void);
void SetUp_SetSensorLED(void);
void TearDown_SetSensorLED(void);
void SetSensorLED_receives_led_number_and_led_state_from_Bridge(void);
void SetSensorLED_replies_with_one_byte(void);
void SetSensorLED_replies_msg_status_error_if_led_number_is_not_valid(void);
void SetSensorLED_replies_msg_status_error_if_led_state_is_not_valid(void);
void SetSensorLED_replies_msg_status_ok_if_led_number_and_led_state_are_valid(void);
void SetSensorLED_turns_off_led_if_payload_is_led_off(void);
void SetSensorLED_turns_led_on_and_green_if_payload_is_led_green(void);
void SetSensorLED_turns_led_on_and_red_if_payload_is_led_red(void);
void SetUp_GetSensorConfig(void);
void TearDown_GetSensorConfig(void);
void GetSensorConfig_sends_msg_status_ok_to_Bridge(void);
void GetSensorConfig_sends_three_bytes_of_data_to_Bridge_after_sending_ok(void);
void SetUp_SetSensorConfig(void);
void TearDown_SetSensorConfig(void);
void SetSensorConfig_receives_three_bytes_of_config_from_Bridge(void);
void SetSensorConfig_replies_msg_status_error_if_binning_is_invalid(void);
void SetSensorConfig_replies_msg_status_error_if_gain_is_invalid(void);
void SetSensorConfig_replies_msg_status_error_if_active_rows_is_invalid(void);
void SetSensorConfig_replies_msg_status_ok_if_all_config_bytes_are_valid(void);
void SetSensorConfig_programs_the_photodiode_array_with_the_config(void);
void SetUp_GetExposure(void);
void TearDown_GetExposure(void);
void GetExposure_sends_two_bytes_of_exposure_time_most_significant_byte_first(void);
void GetExposure_sends_status_byte_ok(void);
void SetUp_SetExposure(void);
void TearDown_SetExposure(void);
void SetExposure_receives_two_bytes_of_exposure_msb_first_from_Bridge(void);
void SetExposure_replies_msg_status_ok(void);
void SetExposure_converts_two_data_bytes_to_new_16_bit_exposure_ticks_value(void);
void SetUp_CaptureFrame(void);
void TearDown_CaptureFrame(void);
void CaptureFrame_sends_status_byte_ok(void);
void CaptureFrame_sends_two_bytes_msb_first_with_number_of_pixels_in_frame(void);
void CaptureFrame_collects_a_frame_of_pixel_data(void);
void NumPixelsInFrame_returns_784_if_binning_is_off(void);
void npixels_is_a_macro_constant_equal_to_784(void);
void NumPixelsInFrame_returns_392_if_binning_is_on(void);
void WordToTwoByteArray_stores_16bit_word_msb_first_in_input_array(void);
void CaptureFrame_sends_another_status_byte_ok(void);
void CaptureFrame_sends_the_frame_as_two_bytes_per_pixel_msb_first(void);
void RepresentConfigAs28bits_returns_uint32_with_bit0_set_if_binning_is_on(void);
void RepresentConfigAs28bits_returns_uint32_with_bit0_clear_if_binning_is_off(void);
void RepresentConfigAs28bits_returns_uint32_with_bits1to2_clear_if_gain_is_1x(void);
void RepresentConfigAs28bits_returns_uint32_with_bits1to2_set_if_gain_is_5x(void);
void RepresentConfigAs28bits_returns_uint32_with_bit1_clear_bit2_set_if_gain_is_2p5x(void);
void RepresentConfigAs28bits_returns_uint32_with_bit1_set_bit2_clear_if_gain_is_4x(void);
void RepresentConfigAs28bits_returns_uint32_with_bits3to27_set_if_all_rows_are_active(void);
void RepresentConfigAs28bits_returns_uint32_with_b3b8b13b18b23_set_if_row1_is_active(void);
void RepresentConfigAs28bits_returns_uint32_with_b4b9b14b19b24_set_if_row2_is_active(void);
void RepresentConfigAs28bits_returns_uint32_with_b5b10b15b20b25_set_if_row3_is_active(void);
void RepresentConfigAs28bits_returns_uint32_with_b6b11b16b21b26_set_if_row4_is_active(void);
void RepresentConfigAs28bits_returns_uint32_with_b7b12b17b22b27_set_if_row5_is_active(void);
void bit_number_is_correct_on_each_iteration_of_while_loop(void);
void GetFrame_exposes_the_photodiode_array(void);
void LisReadout_reads_npixels(void);

#endif // _TEST_SENSORVIS_H
