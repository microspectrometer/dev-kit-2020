
build/mBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  0000078c  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800164  00800164  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000078f1  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015c4  00000000  00000000  00008635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c98  00000000  00000000  00009bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb8  00000000  00000000  0000c894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b05  00000000  00000000  0000d44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c22  00000000  00000000  0000ef51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000758  00000000  00000000  00012b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_14>
  3c:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_15>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 36       	cpi	r26, 0x64	; 100
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e6       	ldi	r26, 0x64	; 100
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <main>
  9e:	0c 94 c4 03 	jmp	0x788	; 0x788 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SetBit>:
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <SetBit+0xc>
  b0:	22 0f       	add	r18, r18
  b2:	6a 95       	dec	r22
  b4:	ea f7       	brpl	.-6      	; 0xb0 <SetBit+0xa>
  b6:	24 2b       	or	r18, r20
  b8:	20 83       	st	Z, r18
  ba:	08 95       	ret

000000bc <ClearBit>:
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
  bc:	fc 01       	movw	r30, r24
    *port &= ~(1<<bit);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <ClearBit+0xc>
  c6:	22 0f       	add	r18, r18
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <ClearBit+0xa>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	20 83       	st	Z, r18
  d2:	08 95       	ret

000000d4 <DebugLedsTurnAllOn>:
    SetBit(DebugLeds_port, debug_led);
}

void DebugLedsTurnGreen(uint8_t debug_led)
{
    ClearBit(DebugLeds_port, debug_led);
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <DebugLeds_ddr>
  dc:	d0 91 63 01 	lds	r29, 0x0163	; 0x800163 <DebugLeds_ddr+0x1>
  e0:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <debug_led1>
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  ea:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <debug_led2>
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  f4:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <debug_led3>
  f8:	ce 01       	movw	r24, r28
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
  fe:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <debug_led4>
 102:	ce 01       	movw	r24, r28
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

0000010c <DebugLedsTurnAllRed>:
}

void DebugLedsTurnAllRed(void)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
    SetBit(DebugLeds_port, debug_led1);
 110:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <DebugLeds_port>
 114:	d0 91 61 01 	lds	r29, 0x0161	; 0x800161 <DebugLeds_port+0x1>
 118:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <debug_led1>
 11c:	ce 01       	movw	r24, r28
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(DebugLeds_port, debug_led2);
 122:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <debug_led2>
 126:	ce 01       	movw	r24, r28
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(DebugLeds_port, debug_led3);
 12c:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <debug_led3>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(DebugLeds_port, debug_led4);
 136:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <debug_led4>
 13a:	ce 01       	movw	r24, r28
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
void DebugLedsTurnAllRed(void)
{
    SetBit(DebugLeds_port, debug_led1);
    SetBit(DebugLeds_port, debug_led2);
    SetBit(DebugLeds_port, debug_led3);
    SetBit(DebugLeds_port, debug_led4);
 140:	0c 94 53 00 	jmp	0xa6	; 0xa6 <SetBit>

00000144 <DebugLedsTurnAllGreen>:
}

void DebugLedsTurnAllGreen(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
    ClearBit(DebugLeds_port, debug_led1);
 148:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <DebugLeds_port>
 14c:	d0 91 61 01 	lds	r29, 0x0161	; 0x800161 <DebugLeds_port+0x1>
 150:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <debug_led1>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led2);
 15a:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <debug_led2>
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led3);
 164:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <debug_led3>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
    ClearBit(DebugLeds_port, debug_led4);
 16e:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <debug_led4>
 172:	ce 01       	movw	r24, r28
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
void DebugLedsTurnAllGreen(void)
{
    ClearBit(DebugLeds_port, debug_led1);
    ClearBit(DebugLeds_port, debug_led2);
    ClearBit(DebugLeds_port, debug_led3);
    ClearBit(DebugLeds_port, debug_led4);
 178:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

0000017c <ClearPendingSpiInterrupt_Implementation>:
}
bool (*SpiResponseIsReady)(void) = SpiResponseIsReady_Implementation;
void SpiMasterWaitForResponse(void)
{
    while( !SpiResponseIsReady() );
}
 17c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <ReadSpiStatusRegister>
 180:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <ReadSpiStatusRegister+0x1>
 184:	09 95       	icall
 186:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <ReadSpiDataRegister>
 18a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <ReadSpiDataRegister+0x1>
 18e:	09 94       	ijmp

00000190 <ReadSpiStatusRegister_Implementation>:
 190:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spsr>
 194:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spsr+0x1>
 198:	80 81       	ld	r24, Z
 19a:	08 95       	ret

0000019c <DisableSpi_Implementation>:
 19c:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spcr>
 1a0:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spcr+0x1>
 1a4:	20 81       	ld	r18, Z
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Enable>
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DisableSpi_Implementation+0x18>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DisableSpi_Implementation+0x14>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <EnableSpi_Implementation>:
 1c0:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spcr>
 1c4:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spcr+0x1>
 1c8:	20 81       	ld	r18, Z
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Enable>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <EnableSpi_Implementation+0x18>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <EnableSpi_Implementation+0x14>
 1dc:	82 2b       	or	r24, r18
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <SpiTransferIsDone_Implementation>:
 1e2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spsr>
 1e6:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spsr+0x1>
 1ea:	80 81       	ld	r24, Z
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_InterruptFlag>
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <SpiTransferIsDone_Implementation+0x18>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <SpiTransferIsDone_Implementation+0x14>
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	28 23       	and	r18, r24
 202:	39 23       	and	r19, r25
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	23 2b       	or	r18, r19
 208:	09 f4       	brne	.+2      	; 0x20c <SpiTransferIsDone_Implementation+0x2a>
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <ReadSpiDataRegister_Implementation>:
 20e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Spi_spdr>
 212:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Spi_spdr+0x1>
 216:	80 81       	ld	r24, Z
 218:	08 95       	ret

0000021a <SpiSlaveSignalDataIsReady_Implementation>:
 21a:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_port>
 21e:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_port+0x1>
 222:	20 81       	ld	r18, Z
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 22c:	02 c0       	rjmp	.+4      	; 0x232 <SpiSlaveSignalDataIsReady_Implementation+0x18>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <SpiSlaveSignalDataIsReady_Implementation+0x14>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	80 83       	st	Z, r24
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <DisableSpi>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <DisableSpi+0x1>
 244:	09 95       	icall
 246:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 24a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 24e:	09 94       	ijmp

00000250 <WriteSpiDataRegister_Implementation>:
 250:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Spi_spdr>
 254:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Spi_spdr+0x1>
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret

0000025c <spi_LedGreen>:
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <spi_LedGreen+0x12>
 26e:	1f 92       	push	r1
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
 278:	19 82       	std	Y+1, r1	; 0x01
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	8a 83       	std	Y+2, r24	; 0x02
 27e:	1b 82       	std	Y+3, r1	; 0x03
 280:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 284:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 288:	8e 01       	movw	r16, r28
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	7e 01       	movw	r14, r28
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	e8 0e       	add	r14, r24
 294:	f1 1c       	adc	r15, r1
 296:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 29a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 29e:	d8 01       	movw	r26, r16
 2a0:	8d 91       	ld	r24, X+
 2a2:	8d 01       	movw	r16, r26
 2a4:	09 95       	icall
 2a6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 2aa:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 2ae:	09 95       	icall
 2b0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 2b4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 2b8:	09 95       	icall
 2ba:	88 23       	and	r24, r24
 2bc:	c9 f3       	breq	.-14     	; 0x2b0 <spi_LedGreen+0x54>
 2be:	f6 01       	movw	r30, r12
 2c0:	80 81       	ld	r24, Z
 2c2:	0e 15       	cp	r16, r14
 2c4:	1f 05       	cpc	r17, r15
 2c6:	39 f7       	brne	.-50     	; 0x296 <spi_LedGreen+0x3a>
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	08 95       	ret

000002e0 <spi_LedRed>:
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <spi_LedRed+0x12>
 2f2:	1f 92       	push	r1
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	0e 94 86 00 	call	0x10c	; 0x10c <DebugLedsTurnAllRed>
 2fc:	19 82       	std	Y+1, r1	; 0x01
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	8a 83       	std	Y+2, r24	; 0x02
 302:	1b 82       	std	Y+3, r1	; 0x03
 304:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 308:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 30c:	8e 01       	movw	r16, r28
 30e:	0f 5f       	subi	r16, 0xFF	; 255
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	7e 01       	movw	r14, r28
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	e8 0e       	add	r14, r24
 318:	f1 1c       	adc	r15, r1
 31a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 31e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 322:	d8 01       	movw	r26, r16
 324:	8d 91       	ld	r24, X+
 326:	8d 01       	movw	r16, r26
 328:	09 95       	icall
 32a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 32e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 332:	09 95       	icall
 334:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 338:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 33c:	09 95       	icall
 33e:	88 23       	and	r24, r24
 340:	c9 f3       	breq	.-14     	; 0x334 <spi_LedRed+0x54>
 342:	f6 01       	movw	r30, r12
 344:	80 81       	ld	r24, Z
 346:	0e 15       	cp	r16, r14
 348:	1f 05       	cpc	r17, r15
 34a:	39 f7       	brne	.-50     	; 0x31a <spi_LedRed+0x3a>
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	08 95       	ret

00000364 <spi_LookupCmd>:
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	48 f4       	brcc	.+18     	; 0x37a <spi_LookupCmd+0x16>
 368:	e8 2f       	mov	r30, r24
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e4 5e       	subi	r30, 0xE4	; 228
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	80 81       	ld	r24, Z
 376:	91 81       	ldd	r25, Z+1	; 0x01
 378:	08 95       	ret
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	08 95       	ret

00000380 <SpiSlaveWrite_StatusInvalid>:
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <SpiSlaveWrite_StatusInvalid+0x12>
 392:	00 d0       	rcall	.+0      	; 0x394 <SpiSlaveWrite_StatusInvalid+0x14>
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	19 82       	std	Y+1, r1	; 0x01
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	9b 83       	std	Y+3, r25	; 0x03
 3a2:	8c 83       	std	Y+4, r24	; 0x04
 3a4:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Spi_spdr>
 3a8:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Spi_spdr+0x1>
 3ac:	8e 01       	movw	r16, r28
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	7e 01       	movw	r14, r28
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	e8 0e       	add	r14, r24
 3b8:	f1 1c       	adc	r15, r1
 3ba:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <WriteSpiDataRegister>
 3be:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <WriteSpiDataRegister+0x1>
 3c2:	d8 01       	movw	r26, r16
 3c4:	8d 91       	ld	r24, X+
 3c6:	8d 01       	movw	r16, r26
 3c8:	09 95       	icall
 3ca:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <SpiSlaveSignalDataIsReady>
 3ce:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <SpiSlaveSignalDataIsReady+0x1>
 3d2:	09 95       	icall
 3d4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 3d8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 3dc:	09 95       	icall
 3de:	88 23       	and	r24, r24
 3e0:	c9 f3       	breq	.-14     	; 0x3d4 <SpiSlaveWrite_StatusInvalid+0x54>
 3e2:	f6 01       	movw	r30, r12
 3e4:	80 81       	ld	r24, Z
 3e6:	0e 15       	cp	r16, r14
 3e8:	1f 05       	cpc	r17, r15
 3ea:	39 f7       	brne	.-50     	; 0x3ba <SpiSlaveWrite_StatusInvalid+0x3a>
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	08 95       	ret

00000406 <SpiSlaveInit>:
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
}
void SpiSlaveInit(void)
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
//
/* =====[ Spi Slave ]===== */
//
static void SetMisoAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Miso);
 40a:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_ddr>
 40e:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_ddr+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 412:	80 81       	ld	r24, Z
 414:	c1 e0       	ldi	r28, 0x01	; 1
 416:	d0 e0       	ldi	r29, 0x00	; 0
 418:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 41c:	02 c0       	rjmp	.+4      	; 0x422 <SpiSlaveInit+0x1c>
 41e:	cc 0f       	add	r28, r28
 420:	dd 1f       	adc	r29, r29
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <SpiSlaveInit+0x18>
 426:	8c 2b       	or	r24, r28
 428:	80 83       	st	Z, r24
    // MISO is only driven hard high or hard low when:
    // - a SPI tranfer is in progress
    // - SPI is disabled
    // When not driven hard, the SPI module makes MISO a pull-up.
    SetMisoAsOutput();         // pin-direction is user-defined
    EnableSpi();
 42a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EnableSpi>
 42e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EnableSpi+0x1>
 432:	09 95       	icall
    /* ------------------------ */
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
 434:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_port>
 438:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_port+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 43c:	80 81       	ld	r24, Z
 43e:	c0 95       	com	r28
 440:	c8 23       	and	r28, r24
 442:	c0 83       	st	Z, r28
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 444:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <ClearPendingSpiInterrupt>
 448:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <ClearPendingSpiInterrupt+0x1>
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
    /* | Added on 2019-03-04: | */
    /* Drive Spi_Miso pin low when the SPI module is disabled. */
    /* See SpiSlaveSignalDataIsReady for explanation. */
    ClearBit(Spi_port, Spi_Miso);
    /* ------------------------ */
    ClearPendingSpiInterrupt();
 450:	09 94       	ijmp

00000452 <StartAdcReadout>:
}
bool (*UartSpiTxBufferIsEmpty)(void) = TxBufferIsEmpty;
static bool Received8bits(void)
{
    // Check `data receive done` flag RXC0
    return BitIsSet(UartSpi_csra, UartSpi_RxComplete);
 452:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <UartSpi_AdcConv>
 456:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <UartSpi_port>
 45a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <UartSpi_port+0x1>
 45e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <ClearBit>

00000462 <UartSpiInit>:
    UseSpiDataModeCpol1CPha1();
    CfgSpiToTransferMsbFirst();
    GiveSpiControlOverMisoAndMosiPins();
}
void UartSpiInit(void)
{
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 46a:	00 91 45 01 	lds	r16, 0x0145	; 0x800145 <UartSpi_br>
 46e:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <UartSpi_br+0x1>
 472:	f8 01       	movw	r30, r16
 474:	11 82       	std	Z+1, r1	; 0x01
 476:	10 82       	st	Z, r1
}
static void SetSckAsOutput(void)
{
    // Cfg XCK as an output. CPOL=1 makes the clock idle high.
    SetBit(UartSpi_ddr, UartSpi_Sck);
 478:	c0 91 4d 01 	lds	r28, 0x014D	; 0x80014d <UartSpi_ddr>
 47c:	d0 91 4e 01 	lds	r29, 0x014E	; 0x80014e <UartSpi_ddr+0x1>
 480:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <UartSpi_Sck>
 484:	ce 01       	movw	r24, r28
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
void UartSpiInit(void)
{
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
 48a:	0e 94 29 02 	call	0x452	; 0x452 <StartAdcReadout>
}
void (*UartSpiStartAdcConversion)(void) = StartAdcConversion;
static void SetAdcConvAsOutput(void)
{
    // cfg general purpose output for conversion-start and readout-start
    SetBit(UartSpi_ddr, UartSpi_AdcConv);
 48e:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <UartSpi_AdcConv>
 492:	ce 01       	movw	r24, r28
 494:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void EnableAtmega328UsartInSpiMasterMode(void)
{
    SetBit(UartSpi_csrc, UartSpi_ModeSelect0);
 498:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <UartSpi_csrc>
 49c:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <UartSpi_csrc+0x1>
 4a0:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <UartSpi_ModeSelect0>
 4a4:	ce 01       	movw	r24, r28
 4a6:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ModeSelect1);
 4aa:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <UartSpi_ModeSelect1>
 4ae:	ce 01       	movw	r24, r28
 4b0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
{
    // Use SPI data mode: CPOL=1, CPHA=1
        // clock idles high
        // load data on falling  clock edge
        // sample data on rising clock edge
    SetBit(UartSpi_csrc, UartSpi_ClockPolarity);  // clock idles high
 4b4:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <UartSpi_ClockPolarity>
 4b8:	ce 01       	movw	r24, r28
 4ba:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    SetBit(UartSpi_csrc, UartSpi_ClockPhase);     // load data then sample data
 4be:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <UartSpi_ClockPhase>
 4c2:	ce 01       	movw	r24, r28
 4c4:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
}
static void CfgSpiToTransferMsbFirst(void)
{
    ClearBit(UartSpi_csrc, UartSpi_DataOrder);
 4c8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <UartSpi_DataOrder>
 4cc:	ce 01       	movw	r24, r28
 4ce:	0e 94 5e 00 	call	0xbc	; 0xbc <ClearBit>
}
static void GiveSpiControlOverMisoAndMosiPins(void)
{
    /* ---Enabling Rx and Tx overrides normal port operation--- */
    // Enable the receiver. The UART Rx pin becomes the SPI Miso.
    SetBit(UartSpi_csrb, UartSpi_RxEnable);
 4d2:	c0 91 49 01 	lds	r28, 0x0149	; 0x800149 <UartSpi_csrb>
 4d6:	d0 91 4a 01 	lds	r29, 0x014A	; 0x80014a <UartSpi_csrb+0x1>
 4da:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <UartSpi_RxEnable>
 4de:	ce 01       	movw	r24, r28
 4e0:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
    // Enable the transmitter. The UART Tx pin becomes the SPI Mosi.
    SetBit(UartSpi_csrb, UartSpi_TxEnable);
 4e4:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <UartSpi_TxEnable>
 4e8:	ce 01       	movw	r24, r28
 4ea:	0e 94 53 00 	call	0xa6	; 0xa6 <SetBit>
        // baudrate in bits per second = fosc/(2*(UBBR0+1))
        // for (baudrate = fosc/2) set UBBR0=0
        // Check:
        // UBRR0 (baud rate register)  = ( fosc/(2*baudrate) ) -1
        // yes, UBBR0 is 0 if fosc=10MHz and baudrate=5MHz
    *UartSpi_br = 0;
 4ee:	f8 01       	movw	r30, r16
 4f0:	11 82       	std	Z+1, r1	; 0x01
 4f2:	10 82       	st	Z, r1
    RunSpiAt5Mhz(); // datasheet says to call this first
    SetSckAsOutput();
    AdcConvIdleLow(); SetAdcConvAsOutput();
    SpiMasterCfg();
    RunSpiAt5Mhz(); // datasheet says to call this again after enable
}
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	08 95       	ret

000004fe <LisRunClkAt50kHz_Implementation>:
 4fe:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <PwmResetCounterAtTop>
 502:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <PwmResetCounterAtTop+0x1>
 506:	09 95       	icall
 508:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <PwmTopIsOcr0a>
 50c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <PwmTopIsOcr0a+0x1>
 510:	09 95       	icall
 512:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <PwmClkIsCpuClk>
 516:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <PwmClkIsCpuClk+0x1>
 51a:	09 95       	icall
 51c:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Lis_clktop>
 520:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Lis_clktop+0x1>
 524:	88 ec       	ldi	r24, 0xC8	; 200
 526:	80 83       	st	Z, r24
 528:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Lis_clkth>
 52c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Lis_clkth+0x1>
 530:	20 81       	ld	r18, Z
 532:	26 95       	lsr	r18
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
 538:	08 95       	ret

0000053a <LisClkOn_Implementation>:
 53a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <PwmEnableOutputSetUntilMatch>
 53e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <PwmEnableOutputSetUntilMatch+0x1>
 542:	09 94       	ijmp

00000544 <LisInit>:
    ClearBit(Lis_port2, Lis_PixSelect);
}

static void SetPixSelectAsOutput(void)
{
    SetBit(Lis_ddr2, Lis_PixSelect);
 544:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Lis_ddr2>
 548:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Lis_ddr2+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 54c:	40 81       	ld	r20, Z
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	9c 01       	movw	r18, r24
 554:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <Lis_PixSelect>
 558:	02 c0       	rjmp	.+4      	; 0x55e <LisInit+0x1a>
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <LisInit+0x16>
 562:	34 2f       	mov	r19, r20
 564:	32 2b       	or	r19, r18
 566:	30 83       	st	Z, r19
{
    ClearBit(Lis_ddr1, Lis_Sync);
}
static void PixSelectIdleLow(void)
{
    ClearBit(Lis_port2, Lis_PixSelect);
 568:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Lis_port2>
 56c:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <Lis_port2+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 570:	30 81       	ld	r19, Z
 572:	20 95       	com	r18
 574:	23 23       	and	r18, r19
 576:	20 83       	st	Z, r18
{
    SetBit(Lis_ddr2, Lis_PixSelect);
}
static void SetClkAsOutput(void)
{
    SetBit(Lis_ddr1, Lis_Clk);
 578:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Lis_ddr1>
 57c:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Lis_ddr1+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 580:	40 81       	ld	r20, Z
 582:	9c 01       	movw	r18, r24
 584:	00 90 2e 01 	lds	r0, 0x012E	; 0x80012e <Lis_Clk>
 588:	02 c0       	rjmp	.+4      	; 0x58e <LisInit+0x4a>
 58a:	22 0f       	add	r18, r18
 58c:	33 1f       	adc	r19, r19
 58e:	0a 94       	dec	r0
 590:	e2 f7       	brpl	.-8      	; 0x58a <LisInit+0x46>
 592:	24 2b       	or	r18, r20
 594:	20 83       	st	Z, r18
 596:	40 81       	ld	r20, Z
 598:	9c 01       	movw	r18, r24
 59a:	00 90 2d 01 	lds	r0, 0x012D	; 0x80012d <Lis_Rst>
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <LisInit+0x60>
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <LisInit+0x5c>
 5a8:	34 2f       	mov	r19, r20
 5aa:	32 2b       	or	r19, r18
 5ac:	30 83       	st	Z, r19
{
    ClearBit(Lis_port2, Lis_PixSelect);
}
static void RstIdleLowAfterPowerUp(void)
{
    ClearBit(Lis_port1, Lis_Rst);
 5ae:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <Lis_port1>
 5b2:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <Lis_port1+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 5b6:	3c 91       	ld	r19, X
 5b8:	20 95       	com	r18
 5ba:	23 23       	and	r18, r19
 5bc:	2c 93       	st	X, r18
 5be:	20 81       	ld	r18, Z
 5c0:	00 90 2c 01 	lds	r0, 0x012C	; 0x80012c <Lis_Sync>
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <LisInit+0x86>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <LisInit+0x82>
 5ce:	80 95       	com	r24
 5d0:	82 23       	and	r24, r18
 5d2:	80 83       	st	Z, r24
    PixSelectIdleLow();
    SetClkAsOutput();
    SetRstAsOutput();
    RstIdleLowAfterPowerUp();
    SetSyncAsInput();
    LisRunClkAt50kHz();
 5d4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <LisRunClkAt50kHz>
 5d8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <LisRunClkAt50kHz+0x1>
 5dc:	09 95       	icall
    LisClkOn();
 5de:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <LisClkOn>
 5e2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <LisClkOn+0x1>
 5e6:	09 94       	ijmp

000005e8 <ResetCounterAtTop>:
#include "Pwm.h"
#include "ReadWriteBits.h"
static void ResetCounterAtTop(void)
{
    SetBit(Pwm_tccr0a, Pwm_Wgm00);
 5e8:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Pwm_tccr0a>
 5ec:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Pwm_tccr0a+0x1>
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5f0:	40 81       	ld	r20, Z
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	9c 01       	movw	r18, r24
 5f8:	00 90 27 01 	lds	r0, 0x0127	; 0x800127 <Pwm_Wgm00>
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <ResetCounterAtTop+0x1a>
 5fe:	22 0f       	add	r18, r18
 600:	33 1f       	adc	r19, r19
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <ResetCounterAtTop+0x16>
 606:	24 2b       	or	r18, r20
 608:	20 83       	st	Z, r18
 60a:	20 81       	ld	r18, Z
 60c:	00 90 26 01 	lds	r0, 0x0126	; 0x800126 <Pwm_Wgm01>
 610:	02 c0       	rjmp	.+4      	; 0x616 <ResetCounterAtTop+0x2e>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <ResetCounterAtTop+0x2a>
 61a:	82 2b       	or	r24, r18
 61c:	80 83       	st	Z, r24
 61e:	08 95       	ret

00000620 <TopIsOcr0a>:
}
void (*PwmResetCounterAtTop)(void) = ResetCounterAtTop;

static void TopIsOcr0a(void)
{
    SetBit(Pwm_tccr0b, Pwm_Wgm02);
 620:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Pwm_tccr0b>
 624:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Pwm_tccr0b+0x1>
 628:	20 81       	ld	r18, Z
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	00 90 25 01 	lds	r0, 0x0125	; 0x800125 <Pwm_Wgm02>
 632:	02 c0       	rjmp	.+4      	; 0x638 <TopIsOcr0a+0x18>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <TopIsOcr0a+0x14>
 63c:	82 2b       	or	r24, r18
 63e:	80 83       	st	Z, r24
 640:	08 95       	ret

00000642 <PwmClkIsCpuClk_Implementation>:
}
void (*PwmTopIsOcr0a)(void) = TopIsOcr0a;

static void PwmClkIsCpuClk_Implementation(void)
{
    SetBit  (Pwm_tccr0b, Pwm_Cs00);
 642:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Pwm_tccr0b>
 646:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Pwm_tccr0b+0x1>
 64a:	40 81       	ld	r20, Z
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	9c 01       	movw	r18, r24
 652:	00 90 24 01 	lds	r0, 0x0124	; 0x800124 <Pwm_Cs00>
 656:	02 c0       	rjmp	.+4      	; 0x65c <PwmClkIsCpuClk_Implementation+0x1a>
 658:	22 0f       	add	r18, r18
 65a:	33 1f       	adc	r19, r19
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <PwmClkIsCpuClk_Implementation+0x16>
 660:	24 2b       	or	r18, r20
 662:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 664:	30 81       	ld	r19, Z
 666:	ac 01       	movw	r20, r24
 668:	00 90 23 01 	lds	r0, 0x0123	; 0x800123 <Pwm_Cs01>
 66c:	02 c0       	rjmp	.+4      	; 0x672 <PwmClkIsCpuClk_Implementation+0x30>
 66e:	44 0f       	add	r20, r20
 670:	55 1f       	adc	r21, r21
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <PwmClkIsCpuClk_Implementation+0x2c>
 676:	24 2f       	mov	r18, r20
 678:	20 95       	com	r18
 67a:	23 23       	and	r18, r19
 67c:	20 83       	st	Z, r18
 67e:	20 81       	ld	r18, Z
 680:	00 90 22 01 	lds	r0, 0x0122	; 0x800122 <Pwm_Cs02>
 684:	02 c0       	rjmp	.+4      	; 0x68a <PwmClkIsCpuClk_Implementation+0x48>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	0a 94       	dec	r0
 68c:	e2 f7       	brpl	.-8      	; 0x686 <PwmClkIsCpuClk_Implementation+0x44>
 68e:	80 95       	com	r24
 690:	82 23       	and	r24, r18
 692:	80 83       	st	Z, r24
 694:	08 95       	ret

00000696 <EnableOutputSetUntilMatch>:
}
void (*PwmClkIsCpuClk)(void) = PwmClkIsCpuClk_Implementation;

static void EnableOutputSetUntilMatch(void)
{
    ClearBit(Pwm_tccr0a, Pwm_Com0b0);
 696:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <Pwm_tccr0a>
 69a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <Pwm_tccr0a+0x1>
 69e:	30 81       	ld	r19, Z
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	ac 01       	movw	r20, r24
 6a6:	00 90 21 01 	lds	r0, 0x0121	; 0x800121 <Pwm_Com0b0>
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <EnableOutputSetUntilMatch+0x1a>
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <EnableOutputSetUntilMatch+0x16>
 6b4:	24 2f       	mov	r18, r20
 6b6:	20 95       	com	r18
 6b8:	23 23       	and	r18, r19
 6ba:	20 83       	st	Z, r18
/* --------------------------------------------------- */
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */
inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 6bc:	20 81       	ld	r18, Z
 6be:	00 90 20 01 	lds	r0, 0x0120	; 0x800120 <Pwm_Com0b1>
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <EnableOutputSetUntilMatch+0x32>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	0a 94       	dec	r0
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <EnableOutputSetUntilMatch+0x2e>
 6cc:	82 2b       	or	r24, r18
 6ce:	80 83       	st	Z, r24
 6d0:	08 95       	ret

000006d2 <main>:
}
void Show_data_on_debug_leds(uint8_t four_bits)
{
    // Show the lower nibble of input `four_bits`
    uint8_t *pfour_bits = &four_bits;
    if (BitIsSet(pfour_bits, 0)) DebugLedsTurnRed(debug_led1);
 6d2:	0e 94 6a 00 	call	0xd4	; 0xd4 <DebugLedsTurnAllOn>
 6d6:	0e 94 a2 00 	call	0x144	; 0x144 <DebugLedsTurnAllGreen>
 6da:	0e 94 03 02 	call	0x406	; 0x406 <SpiSlaveInit>
 6de:	0e 94 31 02 	call	0x462	; 0x462 <UartSpiInit>
 6e2:	0e 94 a2 02 	call	0x544	; 0x544 <LisInit>
 6e6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SpiTransferIsDone>
 6ea:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SpiTransferIsDone+0x1>
 6ee:	09 95       	icall
 6f0:	88 23       	and	r24, r24
 6f2:	c9 f3       	breq	.-14     	; 0x6e6 <main+0x14>
 6f4:	ce b5       	in	r28, 0x2e	; 46
 6f6:	8c 2f       	mov	r24, r28
 6f8:	0e 94 b2 01 	call	0x364	; 0x364 <spi_LookupCmd>
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	19 f0       	breq	.+6      	; 0x706 <main+0x34>
 700:	fc 01       	movw	r30, r24
 702:	09 95       	icall
 704:	f0 cf       	rjmp	.-32     	; 0x6e6 <main+0x14>
 706:	8c 2f       	mov	r24, r28
 708:	0e 94 c0 01 	call	0x380	; 0x380 <SpiSlaveWrite_StatusInvalid>
 70c:	ec cf       	rjmp	.-40     	; 0x6e6 <main+0x14>

0000070e <__vector_17>:
void SPI_read_in_ISR_and_show_data_on_debug_leds(void);
/* =====[ Move control over the SPI ISR into the test code ]===== */
typedef void (SPI_ISR_task)(void); SPI_ISR_task *DoTaskForThisTest;
//
ISR(SPI_STC_vect)
{
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31
    DoTaskForThisTest(); // fptr assigned in test code
 730:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <__data_end>
 734:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <__data_end+0x1>
 738:	09 95       	icall
}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 75c:	1f 92       	push	r1
 75e:	0f 92       	push	r0
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	0f 92       	push	r0
 764:	11 24       	eor	r1, r1
    // high-level delay:
    /* SetBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD |= 1<<PD6;    // set bit: Rst High
 766:	5e 9a       	sbi	0x0b, 6	; 11
    // delay is 1.8us-2us from redge to Rst High
}
 768:	0f 90       	pop	r0
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	0f 90       	pop	r0
 76e:	1f 90       	pop	r1
 770:	18 95       	reti

00000772 <__vector_15>:
ISR(TIMER0_COMPB_vect)
{
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
    // high-level delay:
    /* ClearBit(Lis_port1, Lis_Rst); */
    // low-level delay:
    PORTD &= ~(1<<PD6); // clear bit: Rst Low
 77c:	5e 98       	cbi	0x0b, 6	; 11
    // delay is 1.8us-2us from fedge to Rst low
} 
 77e:	0f 90       	pop	r0
 780:	0f be       	out	0x3f, r0	; 63
 782:	0f 90       	pop	r0
 784:	1f 90       	pop	r1
 786:	18 95       	reti

00000788 <_exit>:
 788:	f8 94       	cli

0000078a <__stop_program>:
 78a:	ff cf       	rjmp	.-2      	; 0x78a <__stop_program>
