#ifndef _TEST_BRIDGE_H
#define _TEST_BRIDGE_H

/* =====[ API - started 2019-10-03 ]===== */
void SetUp_GetBridgeLED(void); void TearDown_GetBridgeLED(void);
void GetBridgeLED_receives_led_number(void);
void GetBridgeLED_always_replies_with_two_bytes(void);
void GetBridgeLED_replies_msg_status_ok_if_led_number_is_recognized(void);
void GetBridgeLED_replies_msg_status_error_if_led_does_not_exist(void);
void GetBridgeLED_replies_led_off_if_led_is_off(void);
void GetBridgeLED_replies_led_green_if_led_is_green(void);
void GetBridgeLED_replies_led_red_if_led_is_red(void);

void GetBridgeLED_replies_msg_status_error_if_host_queries_nonexistent_led(void);
void GetBridgeLED_replies_with_one_byte_if_led_number_is_not_recognized(void);
void GetBridgeLED_replies_msg_status_ok_if_host_queries_status_led(void);
void GetBridgeLED_replies_with_two_bytes_if_led_number_is_recognized(void);
void GetBridgeLED_replies_with_msg_status_byte_and_led_status_byte(void);
void GetBridgeLED_replies_led_off_if_status_led_is_off(void);
void GetBridgeLED_replies_led_green_if_status_led_is_green(void);
void GetBridgeLED_replies_led_red_if_status_led_is_red(void);
void SetUp_SetBridgeLED(void); void TearDown_SetBridgeLED(void);
void SetBridgeLED_reads_two_bytes_of_payload_from_usb_host(void);
void SetBridgeLED_replies_with_one_byte(void);
void SetBridgeLED_replies_msg_status_ok_if_led_number_is_status_led(void);
void SetBridgeLED_replies_msg_status_error_if_led_number_is_not_recognized(void);
void SetBridgeLED_turns_off_led_if_payload_is_led_off(void);
void SetBridgeLED_turns_led_on_and_green_if_payload_is_led_green(void);
void SetBridgeLED_turns_led_on_and_red_if_payload_is_led_red(void);
void SetUp_BridgeGetSensorLED(void); void TearDown_BridgeGetSensorLED(void);

/* =====[ ApiSupport - started 2019-10-04 ]===== */
void SetUp_SerialWriteByte_writes_one_byte_over_USB(void);
void TearDown_SerialWriteByte_writes_one_byte_over_USB(void);
void SerialWriteByte_writes_one_byte_over_USB(void);

/* =====[ BridgeJumpTable - started 2019-10-02]===== */
void LookupBridgeCmd_takes_key_and_returns_fn_ptr(void);
void LookupBridgeCmd_returns_NULL_if_key_is_not_found(void);
void BridgeGetSensorLED_reads_one_byte_of_host_payload(void);
void BridgeGetSensorLED_reads_two_bytes_of_reply_size_and_nbytes_of_reply_from_Sensor(void);
void BridgeGetSensorLED_passes_reply_size_and_reply_to_host(void);
void BridgeGetSensorLED_responds_ok_if_Sensor_does_not_say_invalid_cmd(void);
void BridgeGetSensorLED_exits_if_Sensor_responds_error_to_command(void);
void BridgeGetSensorLED_passes_Sensor_command_response_back_to_host(void);
void BridgeGetSensorLED_sends_Sensor_led_number_if_Sensor_responds_ok_to_command(void);
void BridgeGetSensorLED_writes_led_number_to_Sensor(void);
void BridgeGetSensorLED_reads_two_bytes_of_reply_from_Sensor(void);
void BridgeGetSensorLED_writes_sensor_reply_to_host(void);
void GetBridgeLED_reads_and_ignores_Sensor_reply_to_GetBridgeLED(void);
void GetBridgeLED_sends_no_additional_bytes_if_msg_status_is_error(void);
void GetBridgeLED_sends_led_status_byte_after_sending_msg_status_ok(void);
void SetBridgeLED_reads_and_ignores_Sensor_reply_to_SetBridgeLED(void);
void BridgeGetSensorLED_reads_msg_status_byte_from_Sensor_and_sends_to_USB_host(void);
void BridgeGetSensorLED_reads_and_sends_led_status_byte_if_Sensor_status_is_ok(void);
void BridgeGetSensorLED_reads_no_more_bytes_if_Sensor_status_is_error(void);
void BridgeSetSensorLED_reads_two_bytes_of_host_payload(void);
void SetUp_BridgeSetSensorLED(void);
void TearDown_BridgeSetSensorLED(void);
void BridgeSetSensorLED_responds_ok_if_Sensor_does_not_say_invalid_cmd(void);
void BridgeSetSensorLED_passes_two_bytes_of_payload_to_Sensor(void);
void BridgeSetSensorLED_reads_and_sends_one_byte_Sensor_reply_to_host(void);
void BridgeGetSensorLED_checks_for_invalid_command_error_from_Sensor(void);
void BridgeGetSensorLED_does_not_send_payload_if_Sensor_says_invalid_cmd(void);
void BridgeGetSensorLED_passes_invalid_cmd_reply_back_to_host(void);
void BridgeSetSensorLED_checks_for_invalid_command_error_from_Sensor(void);
void BridgeSetSensorLED_does_not_send_payload_if_Sensor_says_invalid_cmd(void);
void BridgeSetSensorLED_passes_invalid_cmd_reply_back_to_host(void);
void SetUp_BridgeSetSensorConfig(void);
void TearDown_BridgeSetSensorConfig(void);
void BridgeSetSensorConfig_reads_three_bytes_of_host_payload(void);
void BridgeSetSensorConfig_checks_for_invalid_command_error_from_Sensor(void);
void BridgeSetSensorConfig_does_not_send_payload_if_Sensor_says_invalid_cmd(void);
void BridgeSetSensorConfig_passes_invalid_cmd_reply_back_to_host(void);
void BridgeSetSensorConfig_responds_ok_if_Sensor_does_not_say_invalid_cmd(void);
void BridgeSetSensorConfig_passes_three_bytes_of_payload_to_Sensor(void);
void BridgeSetSensorConfig_reads_and_sends_one_byte_Sensor_reply_to_host(void);
void SetUp_BridgeGetSensorConfig(void);
void TearDown_BridgeGetSensorConfig(void);
void BridgeGetSensorConfig_reads_msg_status_byte_from_Sensor_and_sends_to_USB_host(void);
void BridgeGetSensorConfig_reads_no_more_bytes_if_Sensor_status_is_error(void);
void BridgeGetSensorConfig_if_status_is_ok_then_read_config_data_from_Sensor_and_send_to_USB_host(void);

#endif // _TEST_BRIDGE_H
