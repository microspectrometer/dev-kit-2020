
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000111e  00001192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000111e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ed4e  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  0000ff72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d91  00000000  00000000  00010779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0001350c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000099c  00000000  00000000  00013530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000def5  00000000  00000000  00013ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004b0  00000000  00000000  00021dc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	97 00       	.word	0x0097	; ????
      6a:	c2 00       	.word	0x00c2	; ????
      6c:	33 04       	cpc	r3, r3
      6e:	cb 03       	fmulsu	r20, r19
      70:	c3 02       	muls	r28, r19
      72:	ac 00       	.word	0x00ac	; ????
      74:	ac 00       	.word	0x00ac	; ????
      76:	da 07       	cpc	r29, r26
      78:	28 03       	fmul	r18, r16
      7a:	8f 07       	cpc	r24, r31
      7c:	5e 02       	muls	r21, r30
      7e:	e3 06       	cpc	r14, r19
      80:	f5 05       	cpc	r31, r5
      82:	69 04       	cpc	r6, r9
      84:	fd 00       	.word	0x00fd	; ????
      86:	52 06       	cpc	r5, r18

00000088 <__ctors_end>:
      88:	11 24       	eor	r1, r1
      8a:	1f be       	out	0x3f, r1	; 63
      8c:	cf ef       	ldi	r28, 0xFF	; 255
      8e:	d8 e0       	ldi	r29, 0x08	; 8
      90:	de bf       	out	0x3e, r29	; 62
      92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
      94:	11 e0       	ldi	r17, 0x01	; 1
      96:	a0 e0       	ldi	r26, 0x00	; 0
      98:	b1 e0       	ldi	r27, 0x01	; 1
      9a:	ee e1       	ldi	r30, 0x1E	; 30
      9c:	f1 e1       	ldi	r31, 0x11	; 17
      9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
      a0:	05 90       	lpm	r0, Z+
      a2:	0d 92       	st	X+, r0
      a4:	a2 30       	cpi	r26, 0x02	; 2
      a6:	b1 07       	cpc	r27, r17
      a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>
      aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
      ae:	0c 94 8d 08 	jmp	0x111a	; 0x111a <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <main>:
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      b6:	3b 9a       	sbi	0x07, 3	; 7
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
      b8:	43 98       	cbi	0x08, 3	; 8
      ba:	42 98       	cbi	0x08, 2	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      bc:	42 9a       	sbi	0x08, 2	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
      be:	1a b8       	out	0x0a, r1	; 10
    // TODO: clean this into a unit tested UsbInit() in
    // ./firmware/lib/
    ClearBit(FtCtrl_port, FtMiso); // FtMiso is an input
    SetBit(FtCtrl_port, FtMiso); // pull up FtMiso
    _FtDatabusPinDirection(FtIn); // FtData lines are inputs
    *FtData_port = 0xFF; // pull up FtData lines
      c0:	8f ef       	ldi	r24, 0xFF	; 255
      c2:	8b b9       	out	0x0b, r24	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
      c4:	41 98       	cbi	0x08, 1	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      c6:	39 9a       	sbi	0x07, 1	; 7
      c8:	40 9a       	sbi	0x08, 0	; 8
      ca:	38 9a       	sbi	0x07, 0	; 7
      cc:	2a 9a       	sbi	0x05, 2	; 5
      ce:	22 9a       	sbi	0x04, 2	; 4
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
      d0:	24 98       	cbi	0x04, 4	; 4
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      d2:	2c 9a       	sbi	0x05, 4	; 5
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
      d4:	21 98       	cbi	0x04, 1	; 4
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      d6:	29 9a       	sbi	0x05, 1	; 5
      d8:	23 9a       	sbi	0x04, 3	; 4
      da:	25 9a       	sbi	0x04, 5	; 4
      dc:	8c b5       	in	r24, 0x2c	; 44
      de:	80 61       	ori	r24, 0x10	; 16
      e0:	8c bd       	out	0x2c, r24	; 44
      e2:	8c b5       	in	r24, 0x2c	; 44
      e4:	81 60       	ori	r24, 0x01	; 1
      e6:	8c bd       	out	0x2c, r24	; 44
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
      e8:	8c b5       	in	r24, 0x2c	; 44
      ea:	8d 7f       	andi	r24, 0xFD	; 253
      ec:	8c bd       	out	0x2c, r24	; 44
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
      ee:	8d b5       	in	r24, 0x2d	; 45
      f0:	81 60       	ori	r24, 0x01	; 1
      f2:	8d bd       	out	0x2d, r24	; 45
      f4:	8c b5       	in	r24, 0x2c	; 44
      f6:	80 64       	ori	r24, 0x40	; 64
      f8:	8c bd       	out	0x2c, r24	; 44
 * uint8_t ReadSpiDataRegister(void);\n 
 * void ClearSpiInterruptFlag(void);\n 
 * */
inline uint8_t ReadSpiStatusRegister(void)
{
    return *Spi_SPSR;
      fa:	8d b5       	in	r24, 0x2d	; 45
    // ---Expected Assembly---
    // in	r24, 0x2d	; 45
}
inline uint8_t ReadSpiDataRegister(void)
{
    return *Spi_SPDR;
      fc:	8e b5       	in	r24, 0x2e	; 46
      fe:	8f ef       	ldi	r24, 0xFF	; 255
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     100:	46 ec       	ldi	r20, 0xC6	; 198
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	71 e0       	ldi	r23, 0x01	; 1

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     106:	6e e0       	ldi	r22, 0x0E	; 14
     108:	5a e0       	ldi	r21, 0x0A	; 10
     10a:	a8 e0       	ldi	r26, 0x08	; 8
     10c:	fa 2e       	mov	r15, r26
     10e:	b4 e0       	ldi	r27, 0x04	; 4
     110:	eb 2e       	mov	r14, r27
     112:	c3 e0       	ldi	r28, 0x03	; 3
     114:	dc 2e       	mov	r13, r28
     116:	df e0       	ldi	r29, 0x0F	; 15
     118:	bd 2e       	mov	r11, r29
     11a:	1d e0       	ldi	r17, 0x0D	; 13
     11c:	a1 2e       	mov	r10, r17
     11e:	0c e0       	ldi	r16, 0x0C	; 12
     120:	90 2e       	mov	r9, r16
     122:	2b e0       	ldi	r18, 0x0B	; 11
     124:	72 2e       	mov	r7, r18
     126:	39 e0       	ldi	r19, 0x09	; 9
     128:	63 2e       	mov	r6, r19
     12a:	e7 e0       	ldi	r30, 0x07	; 7
     12c:	5e 2e       	mov	r5, r30
    // Setup SPI
    SpiMasterInit();
}
void loop(void)
{
    while (UsbRxbufferIsEmpty()); // loop until cmd received
     12e:	32 99       	sbic	0x06, 2	; 6
     130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x78>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     132:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     134:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     136:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     138:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     13a:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     13c:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     13e:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     140:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     142:	32 99       	sbic	0x06, 2	; 6
     144:	18 c0       	rjmp	.+48     	; 0x176 <main+0xc0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     146:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     148:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     14a:	e9 b1       	in	r30, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     14c:	40 9a       	sbi	0x08, 0	; 8
    uint8_t cmd = 0; // initialize cmd as "Null"
    UsbReadByte(&cmd); // read cmd
    switch(cmd) // look up cmd
     14e:	0e 2f       	mov	r16, r30
     150:	10 e0       	ldi	r17, 0x00	; 0
     152:	00 31       	cpi	r16, 0x10	; 16
     154:	11 05       	cpc	r17, r1
     156:	88 f0       	brcs	.+34     	; 0x17a <main+0xc4>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     158:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     15a:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     15c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     15e:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     160:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     162:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     164:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     166:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     168:	32 99       	sbic	0x06, 2	; 6
     16a:	05 c0       	rjmp	.+10     	; 0x176 <main+0xc0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     16c:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     16e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     170:	7b b9       	out	0x0b, r23	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     172:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     174:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     176:	40 9a       	sbi	0x08, 0	; 8
     178:	da cf       	rjmp	.-76     	; 0x12e <main+0x78>
     17a:	f8 01       	movw	r30, r16
     17c:	ec 5c       	subi	r30, 0xCC	; 204
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	0c 94 87 08 	jmp	0x110e	; 0x110e <__tablejump2__>
      * - writes two bytes to USB host\n 
      * - writes OK and LED STATE if led num is valid\n 
      * - writes ERROR and pads second byte if led num is invalid\n 
      * */
    // loop until led_num received
    while (UsbRxbufferIsEmpty());
     184:	32 99       	sbic	0x06, 2	; 6
     186:	fe cf       	rjmp	.-4      	; 0x184 <main+0xce>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     188:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     18a:	41 9a       	sbi	0x08, 1	; 8
     18c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     18e:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     190:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     192:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     194:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     196:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     198:	32 99       	sbic	0x06, 2	; 6
     19a:	6f c7       	rjmp	.+3806   	; 0x107a <__stack+0x77b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     19c:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     19e:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     1a0:	29 b1       	in	r18, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1a2:	40 9a       	sbi	0x08, 0	; 8

    // read led_num
    uint8_t led_num = 0xFF;
    UsbReadByte(&led_num);

    if (led_num == 0) // led_num is valid
     1a4:	21 11       	cpse	r18, r1
     1a6:	6a c7       	rjmp	.+3796   	; 0x107c <__stack+0x77d>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1a8:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1aa:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1ac:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     1ae:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1b0:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1b2:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1b4:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1b6:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     1b8:	32 99       	sbic	0x06, 2	; 6
     1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <main+0x110>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1bc:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1be:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     1c0:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1c2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1c4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1c6:	40 9a       	sbi	0x08, 0	; 8
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     1c8:	27 b1       	in	r18, 0x07	; 7
      * - returns RED if LED is on and red\n 
      * - see led_state in StatusCodes.h
      * */

    //! *LED 0,* the **status_led**, *is the only indicator LED on the usb-bridge.*
    if (BitIsClear(BiColorLed_ddr, status_led))
     1ca:	32 2f       	mov	r19, r18
     1cc:	38 70       	andi	r19, 0x08	; 8
     1ce:	23 ff       	sbrs	r18, 3
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <main+0x122>
        return OFF;
    else // LED is on
        return BitIsClear(BiColorLed_port, status_led)
     1d2:	43 9b       	sbis	0x08, 3	; 8
     1d4:	8f c7       	rjmp	.+3870   	; 0x10f4 <__stack+0x7f5>
     1d6:	32 e0       	ldi	r19, 0x02	; 2
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1d8:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1da:	41 9a       	sbi	0x08, 1	; 8
     1dc:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     1de:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1e0:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1e2:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1e4:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1e6:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     1e8:	32 99       	sbic	0x06, 2	; 6
     1ea:	c5 cf       	rjmp	.-118    	; 0x176 <main+0xc0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1ec:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1ee:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     1f0:	3b b9       	out	0x0b, r19	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1f2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     1f4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     1f6:	40 9a       	sbi	0x08, 0	; 8
     1f8:	9a cf       	rjmp	.-204    	; 0x12e <main+0x78>
    /* // indicate BUSY */
    /* BiColorLedRed(status_led); */
    uint8_t const cmd = 14; // command is SetAutoExposeConfig

    // loop until max_tries is received
    while (UsbRxbufferIsEmpty());
     1fa:	32 99       	sbic	0x06, 2	; 6
     1fc:	fe cf       	rjmp	.-4      	; 0x1fa <main+0x144>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     1fe:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     200:	41 9a       	sbi	0x08, 1	; 8
     202:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     204:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     206:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     208:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     20a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     20c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     20e:	32 99       	sbic	0x06, 2	; 6
     210:	59 c7       	rjmp	.+3762   	; 0x10c4 <__stack+0x7c5>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     212:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     214:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     216:	49 b0       	in	r4, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     218:	40 9a       	sbi	0x08, 0	; 8
    // read max_tries
    uint8_t max_tries = 0xFF;
    UsbReadByte(&max_tries);

    // loop until start_pixel_msb is received
    while (UsbRxbufferIsEmpty());
     21a:	32 99       	sbic	0x06, 2	; 6
     21c:	fe cf       	rjmp	.-4      	; 0x21a <main+0x164>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     21e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     220:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     222:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     224:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     226:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     228:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     22a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     22c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     22e:	32 99       	sbic	0x06, 2	; 6
     230:	46 c7       	rjmp	.+3724   	; 0x10be <__stack+0x7bf>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     232:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     234:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     236:	89 b0       	in	r8, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     238:	40 9a       	sbi	0x08, 0	; 8
    // read start_pixel_msb
    uint8_t start_pixel_msb = 0xFF;
    UsbReadByte(&start_pixel_msb);

    // loop until start_pixel_lsb is received
    while (UsbRxbufferIsEmpty());
     23a:	32 99       	sbic	0x06, 2	; 6
     23c:	fe cf       	rjmp	.-4      	; 0x23a <main+0x184>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     23e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     240:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     242:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     244:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     246:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     248:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     24a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     24c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     24e:	32 99       	sbic	0x06, 2	; 6
     250:	4e c7       	rjmp	.+3740   	; 0x10ee <__stack+0x7ef>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     252:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     254:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     256:	c9 b0       	in	r12, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     258:	40 9a       	sbi	0x08, 0	; 8
    // read start_pixel_lsb
    uint8_t start_pixel_lsb = 0xFF;
    UsbReadByte(&start_pixel_lsb);

    // loop until stop_pixel_msb is received
    while (UsbRxbufferIsEmpty());
     25a:	32 99       	sbic	0x06, 2	; 6
     25c:	fe cf       	rjmp	.-4      	; 0x25a <main+0x1a4>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     25e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     260:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     262:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     264:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     266:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     268:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     26a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     26c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     26e:	32 99       	sbic	0x06, 2	; 6
     270:	3c c7       	rjmp	.+3704   	; 0x10ea <__stack+0x7eb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     272:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     274:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     276:	09 b1       	in	r16, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     278:	40 9a       	sbi	0x08, 0	; 8
    // read stop_pixel_msb
    uint8_t stop_pixel_msb = 0xFF;
    UsbReadByte(&stop_pixel_msb);

    // loop until stop_pixel_lsb is received
    while (UsbRxbufferIsEmpty());
     27a:	32 99       	sbic	0x06, 2	; 6
     27c:	fe cf       	rjmp	.-4      	; 0x27a <main+0x1c4>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     27e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     280:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     282:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     284:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     286:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     288:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     28a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     28c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     28e:	32 99       	sbic	0x06, 2	; 6
     290:	2a c7       	rjmp	.+3668   	; 0x10e6 <__stack+0x7e7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     292:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     294:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     296:	19 b1       	in	r17, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     298:	40 9a       	sbi	0x08, 0	; 8
    // read stop_pixel_lsb
    uint8_t stop_pixel_lsb = 0xFF;
    UsbReadByte(&stop_pixel_lsb);

    // loop until target_msb is received
    while (UsbRxbufferIsEmpty());
     29a:	32 99       	sbic	0x06, 2	; 6
     29c:	fe cf       	rjmp	.-4      	; 0x29a <main+0x1e4>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     29e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2a0:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     2a2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     2a4:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2a6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     2a8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2aa:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2ac:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     2ae:	32 99       	sbic	0x06, 2	; 6
     2b0:	18 c7       	rjmp	.+3632   	; 0x10e2 <__stack+0x7e3>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2b2:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2b4:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     2b6:	d9 b1       	in	r29, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2b8:	40 9a       	sbi	0x08, 0	; 8
    // read target_msb
    uint8_t target_msb = 0xFF;
    UsbReadByte(&target_msb);

    // loop until target_lsb is received
    while (UsbRxbufferIsEmpty());
     2ba:	32 99       	sbic	0x06, 2	; 6
     2bc:	fe cf       	rjmp	.-4      	; 0x2ba <main+0x204>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2be:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2c0:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     2c2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     2c4:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2c6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     2c8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2ca:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2cc:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     2ce:	32 99       	sbic	0x06, 2	; 6
     2d0:	06 c7       	rjmp	.+3596   	; 0x10de <__stack+0x7df>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2d2:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2d4:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     2d6:	c9 b1       	in	r28, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2d8:	40 9a       	sbi	0x08, 0	; 8
    // read target_lsb
    uint8_t target_lsb = 0xFF;
    UsbReadByte(&target_lsb);

    // loop until target_tolerance_msb is received
    while (UsbRxbufferIsEmpty());
     2da:	32 99       	sbic	0x06, 2	; 6
     2dc:	fe cf       	rjmp	.-4      	; 0x2da <main+0x224>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2de:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2e0:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     2e2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     2e4:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2e6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     2e8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2ea:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2ec:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     2ee:	32 99       	sbic	0x06, 2	; 6
     2f0:	f4 c6       	rjmp	.+3560   	; 0x10da <__stack+0x7db>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2f2:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2f4:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     2f6:	b9 b1       	in	r27, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     2f8:	40 9a       	sbi	0x08, 0	; 8
    // read target_tolerance_msb
    uint8_t target_tolerance_msb = 0xFF;
    UsbReadByte(&target_tolerance_msb);

    // loop until target_tolerance_lsb is received
    while (UsbRxbufferIsEmpty());
     2fa:	32 99       	sbic	0x06, 2	; 6
     2fc:	fe cf       	rjmp	.-4      	; 0x2fa <main+0x244>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     2fe:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     300:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     302:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     304:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     306:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     308:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     30a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     30c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     30e:	32 99       	sbic	0x06, 2	; 6
     310:	e2 c6       	rjmp	.+3524   	; 0x10d6 <__stack+0x7d7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     312:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     314:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     316:	a9 b1       	in	r26, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     318:	40 9a       	sbi	0x08, 0	; 8
    // read target_tolerance_lsb
    uint8_t target_tolerance_lsb = 0xFF;
    UsbReadByte(&target_tolerance_lsb);

    // loop until max_exposure_msb is received
    while (UsbRxbufferIsEmpty());
     31a:	32 99       	sbic	0x06, 2	; 6
     31c:	fe cf       	rjmp	.-4      	; 0x31a <main+0x264>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     31e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     320:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     322:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     324:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     326:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     328:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     32a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     32c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     32e:	32 99       	sbic	0x06, 2	; 6
     330:	d0 c6       	rjmp	.+3488   	; 0x10d2 <__stack+0x7d3>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     332:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     334:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     336:	f9 b1       	in	r31, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     338:	40 9a       	sbi	0x08, 0	; 8
    // read max_exposure_msb
    uint8_t max_exposure_msb = 0xFF;
    UsbReadByte(&max_exposure_msb);

    // loop until max_exposure_lsb is received
    while (UsbRxbufferIsEmpty());
     33a:	32 99       	sbic	0x06, 2	; 6
     33c:	fe cf       	rjmp	.-4      	; 0x33a <main+0x284>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     33e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     340:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     342:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     344:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     346:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     348:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     34a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     34c:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     34e:	32 99       	sbic	0x06, 2	; 6
     350:	ac c6       	rjmp	.+3416   	; 0x10aa <__stack+0x7ab>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     352:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     354:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     356:	e9 b1       	in	r30, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     358:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     35a:	2a 98       	cbi	0x05, 2	; 5
     35c:	6e bd       	out	0x2e, r22	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     35e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	22 0f       	add	r18, r18
     364:	23 2f       	mov	r18, r19
     366:	22 1f       	adc	r18, r18
     368:	33 0b       	sbc	r19, r19
     36a:	23 2b       	or	r18, r19
     36c:	c1 f3       	breq	.-16     	; 0x35e <main+0x2a8>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     36e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     370:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     372:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     374:	4e bc       	out	0x2e, r4	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     376:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	22 0f       	add	r18, r18
     37c:	23 2f       	mov	r18, r19
     37e:	22 1f       	adc	r18, r18
     380:	33 0b       	sbc	r19, r19
     382:	23 2b       	or	r18, r19
     384:	c1 f3       	breq	.-16     	; 0x376 <main+0x2c0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     386:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     388:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     38a:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     38c:	8e bc       	out	0x2e, r8	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     38e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	22 0f       	add	r18, r18
     394:	23 2f       	mov	r18, r19
     396:	22 1f       	adc	r18, r18
     398:	33 0b       	sbc	r19, r19
     39a:	23 2b       	or	r18, r19
     39c:	c1 f3       	breq	.-16     	; 0x38e <main+0x2d8>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     39e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     3a0:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     3a2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     3a4:	ce bc       	out	0x2e, r12	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     3a6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	22 0f       	add	r18, r18
     3ac:	23 2f       	mov	r18, r19
     3ae:	22 1f       	adc	r18, r18
     3b0:	33 0b       	sbc	r19, r19
     3b2:	23 2b       	or	r18, r19
     3b4:	c1 f3       	breq	.-16     	; 0x3a6 <main+0x2f0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     3b6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     3b8:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     3ba:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     3bc:	0e bd       	out	0x2e, r16	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     3be:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	22 0f       	add	r18, r18
     3c4:	23 2f       	mov	r18, r19
     3c6:	22 1f       	adc	r18, r18
     3c8:	33 0b       	sbc	r19, r19
     3ca:	23 2b       	or	r18, r19
     3cc:	c1 f3       	breq	.-16     	; 0x3be <main+0x308>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     3ce:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     3d0:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     3d2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     3d4:	1e bd       	out	0x2e, r17	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     3d6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	22 0f       	add	r18, r18
     3dc:	23 2f       	mov	r18, r19
     3de:	22 1f       	adc	r18, r18
     3e0:	33 0b       	sbc	r19, r19
     3e2:	23 2b       	or	r18, r19
     3e4:	c1 f3       	breq	.-16     	; 0x3d6 <main+0x320>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     3e6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     3e8:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     3ea:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     3ec:	de bd       	out	0x2e, r29	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     3ee:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	22 0f       	add	r18, r18
     3f4:	23 2f       	mov	r18, r19
     3f6:	22 1f       	adc	r18, r18
     3f8:	33 0b       	sbc	r19, r19
     3fa:	23 2b       	or	r18, r19
     3fc:	c1 f3       	breq	.-16     	; 0x3ee <main+0x338>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     3fe:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     400:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     402:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     404:	ce bd       	out	0x2e, r28	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     406:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	22 0f       	add	r18, r18
     40c:	23 2f       	mov	r18, r19
     40e:	22 1f       	adc	r18, r18
     410:	33 0b       	sbc	r19, r19
     412:	23 2b       	or	r18, r19
     414:	c1 f3       	breq	.-16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     416:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     418:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     41a:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     41c:	be bd       	out	0x2e, r27	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     41e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	22 0f       	add	r18, r18
     424:	23 2f       	mov	r18, r19
     426:	22 1f       	adc	r18, r18
     428:	33 0b       	sbc	r19, r19
     42a:	23 2b       	or	r18, r19
     42c:	c1 f3       	breq	.-16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     42e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     430:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     432:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     434:	ae bd       	out	0x2e, r26	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     436:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	22 0f       	add	r18, r18
     43c:	23 2f       	mov	r18, r19
     43e:	22 1f       	adc	r18, r18
     440:	33 0b       	sbc	r19, r19
     442:	23 2b       	or	r18, r19
     444:	c1 f3       	breq	.-16     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     446:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     448:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     44a:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     44c:	fe bd       	out	0x2e, r31	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     44e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	22 0f       	add	r18, r18
     454:	23 2f       	mov	r18, r19
     456:	22 1f       	adc	r18, r18
     458:	33 0b       	sbc	r19, r19
     45a:	23 2b       	or	r18, r19
     45c:	c1 f3       	breq	.-16     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     45e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     460:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     462:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     464:	ee bd       	out	0x2e, r30	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     466:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	22 0f       	add	r18, r18
     46c:	23 2f       	mov	r18, r19
     46e:	22 1f       	adc	r18, r18
     470:	33 0b       	sbc	r19, r19
     472:	23 2b       	or	r18, r19
     474:	c1 f3       	breq	.-16     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     476:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     478:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     47a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     47c:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     47e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     480:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     482:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     484:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     486:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     488:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     48a:	32 99       	sbic	0x06, 2	; 6
     48c:	05 c0       	rjmp	.+10     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     48e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     490:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     492:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     494:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     496:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     498:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     49a:	19 99       	sbic	0x03, 1	; 3
     49c:	fe cf       	rjmp	.-4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     49e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4a2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     4a4:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     4a6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	22 0f       	add	r18, r18
     4ac:	23 2f       	mov	r18, r19
     4ae:	22 1f       	adc	r18, r18
     4b0:	33 0b       	sbc	r19, r19
     4b2:	23 2b       	or	r18, r19
     4b4:	c1 f3       	breq	.-16     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4b6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     4b8:	2e b5       	in	r18, 0x2e	; 46
     4ba:	5c c1       	rjmp	.+696    	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
      * */

    uint8_t const cmd = 10; // command is SetExposure

    // loop until exposure_MSB received
    while (UsbRxbufferIsEmpty());
     4bc:	32 99       	sbic	0x06, 2	; 6
     4be:	fe cf       	rjmp	.-4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4c0:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4c2:	41 9a       	sbi	0x08, 1	; 8
     4c4:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     4c6:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4c8:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     4ca:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4cc:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4ce:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     4d0:	32 99       	sbic	0x06, 2	; 6
     4d2:	e9 c5       	rjmp	.+3026   	; 0x10a6 <__stack+0x7a7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4d4:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4d6:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     4d8:	f9 b1       	in	r31, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4da:	40 9a       	sbi	0x08, 0	; 8
    // read exposure_MSB
    uint8_t exposure_MSB = 0xFF;
    UsbReadByte(&exposure_MSB);

    // loop until exposure_LSB received
    while (UsbRxbufferIsEmpty());
     4dc:	32 99       	sbic	0x06, 2	; 6
     4de:	fe cf       	rjmp	.-4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4e0:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4e2:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     4e4:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     4e6:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4e8:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     4ea:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4ec:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4ee:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     4f0:	32 99       	sbic	0x06, 2	; 6
     4f2:	c1 c5       	rjmp	.+2946   	; 0x1076 <__stack+0x777>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4f4:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4f6:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     4f8:	e9 b1       	in	r30, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     4fa:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     4fc:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     4fe:	5e bd       	out	0x2e, r21	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     500:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	22 0f       	add	r18, r18
     506:	23 2f       	mov	r18, r19
     508:	22 1f       	adc	r18, r18
     50a:	33 0b       	sbc	r19, r19
     50c:	23 2b       	or	r18, r19
     50e:	c1 f3       	breq	.-16     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     510:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     512:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     514:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     516:	fe bd       	out	0x2e, r31	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     518:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	22 0f       	add	r18, r18
     51e:	23 2f       	mov	r18, r19
     520:	22 1f       	adc	r18, r18
     522:	33 0b       	sbc	r19, r19
     524:	23 2b       	or	r18, r19
     526:	c1 f3       	breq	.-16     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     528:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     52a:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     52c:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     52e:	ee bd       	out	0x2e, r30	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     530:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	22 0f       	add	r18, r18
     536:	23 2f       	mov	r18, r19
     538:	22 1f       	adc	r18, r18
     53a:	33 0b       	sbc	r19, r19
     53c:	23 2b       	or	r18, r19
     53e:	c1 f3       	breq	.-16     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     540:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     542:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     544:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     546:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     548:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     54a:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     54c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     54e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     550:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     552:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     554:	32 99       	sbic	0x06, 2	; 6
     556:	05 c0       	rjmp	.+10     	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     558:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     55a:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     55c:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     55e:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     560:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     562:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     564:	19 99       	sbic	0x03, 1	; 3
     566:	fe cf       	rjmp	.-4      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     568:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     56c:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     56e:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     570:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	22 0f       	add	r18, r18
     576:	23 2f       	mov	r18, r19
     578:	22 1f       	adc	r18, r18
     57a:	33 0b       	sbc	r19, r19
     57c:	23 2b       	or	r18, r19
     57e:	c1 f3       	breq	.-16     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     580:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     582:	2e b5       	in	r18, 0x2e	; 46
     584:	f7 c0       	rjmp	.+494    	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
      * */

    uint8_t const cmd = 4; // command is SetSensorLED

    // loop until led_num received
    while (UsbRxbufferIsEmpty());
     586:	32 99       	sbic	0x06, 2	; 6
     588:	fe cf       	rjmp	.-4      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     58a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     58c:	41 9a       	sbi	0x08, 1	; 8
     58e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     590:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     592:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     594:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     596:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     598:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     59a:	32 99       	sbic	0x06, 2	; 6
     59c:	88 c5       	rjmp	.+2832   	; 0x10ae <__stack+0x7af>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     59e:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5a0:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     5a2:	f9 b1       	in	r31, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5a4:	40 9a       	sbi	0x08, 0	; 8
    // read led_num
    uint8_t led_num = 0xFF;
    UsbReadByte(&led_num);

    // loop until led_setting received
    while (UsbRxbufferIsEmpty());
     5a6:	32 99       	sbic	0x06, 2	; 6
     5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5aa:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5ac:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     5ae:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     5b0:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5b2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     5b4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5b6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5b8:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     5ba:	32 99       	sbic	0x06, 2	; 6
     5bc:	72 c5       	rjmp	.+2788   	; 0x10a2 <__stack+0x7a3>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5be:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5c0:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     5c2:	e9 b1       	in	r30, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5c4:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5c6:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     5c8:	ee bc       	out	0x2e, r14	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     5ca:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	22 0f       	add	r18, r18
     5d0:	23 2f       	mov	r18, r19
     5d2:	22 1f       	adc	r18, r18
     5d4:	33 0b       	sbc	r19, r19
     5d6:	23 2b       	or	r18, r19
     5d8:	c1 f3       	breq	.-16     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5da:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     5dc:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5de:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     5e0:	fe bd       	out	0x2e, r31	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     5e2:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	22 0f       	add	r18, r18
     5e8:	23 2f       	mov	r18, r19
     5ea:	22 1f       	adc	r18, r18
     5ec:	33 0b       	sbc	r19, r19
     5ee:	23 2b       	or	r18, r19
     5f0:	c1 f3       	breq	.-16     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     5f2:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     5f4:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     5f6:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     5f8:	ee bd       	out	0x2e, r30	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     5fa:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	22 0f       	add	r18, r18
     600:	23 2f       	mov	r18, r19
     602:	22 1f       	adc	r18, r18
     604:	33 0b       	sbc	r19, r19
     606:	23 2b       	or	r18, r19
     608:	c1 f3       	breq	.-16     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     60a:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     60c:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     60e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     610:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     612:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     614:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     616:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     618:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     61a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     61c:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     61e:	32 99       	sbic	0x06, 2	; 6
     620:	05 c0       	rjmp	.+10     	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     622:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     624:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     626:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     628:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     62a:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     62c:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     62e:	19 99       	sbic	0x03, 1	; 3
     630:	fe cf       	rjmp	.-4      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     632:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     636:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     638:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     63a:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	22 0f       	add	r18, r18
     640:	23 2f       	mov	r18, r19
     642:	22 1f       	adc	r18, r18
     644:	33 0b       	sbc	r19, r19
     646:	23 2b       	or	r18, r19
     648:	c1 f3       	breq	.-16     	; 0x63a <__EEPROM_REGION_LENGTH__+0x23a>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     64a:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     64c:	2e b5       	in	r18, 0x2e	; 46
     64e:	92 c0       	rjmp	.+292    	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
      * */

    uint8_t const cmd = 8; // command is SetSensorConfig

    // loop until binning received
    while (UsbRxbufferIsEmpty());
     650:	32 99       	sbic	0x06, 2	; 6
     652:	fe cf       	rjmp	.-4      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     654:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     656:	41 9a       	sbi	0x08, 1	; 8
     658:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     65a:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     65c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     65e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     660:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     662:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     664:	32 99       	sbic	0x06, 2	; 6
     666:	29 c5       	rjmp	.+2642   	; 0x10ba <__stack+0x7bb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     668:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     66a:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     66c:	a9 b1       	in	r26, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     66e:	40 9a       	sbi	0x08, 0	; 8
    // read binning
    uint8_t binning = 0xFF;
    UsbReadByte(&binning);

    // loop until gain received
    while (UsbRxbufferIsEmpty());
     670:	32 99       	sbic	0x06, 2	; 6
     672:	fe cf       	rjmp	.-4      	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     674:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     676:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     678:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     67a:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     67c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     67e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     680:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     682:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     684:	32 99       	sbic	0x06, 2	; 6
     686:	17 c5       	rjmp	.+2606   	; 0x10b6 <__stack+0x7b7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     688:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     68a:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     68c:	f9 b1       	in	r31, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     68e:	40 9a       	sbi	0x08, 0	; 8
    // read gain
    uint8_t gain = 0xFF;
    UsbReadByte(&gain);

    // loop until row_bitmap received
    while (UsbRxbufferIsEmpty());
     690:	32 99       	sbic	0x06, 2	; 6
     692:	fe cf       	rjmp	.-4      	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     694:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     696:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     698:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     69a:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     69c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     69e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     6a0:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     6a2:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     6a4:	32 99       	sbic	0x06, 2	; 6
     6a6:	11 c5       	rjmp	.+2594   	; 0x10ca <__stack+0x7cb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     6a8:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     6aa:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     6ac:	e9 b1       	in	r30, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     6ae:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     6b0:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     6b2:	fe bc       	out	0x2e, r15	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     6b4:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	22 0f       	add	r18, r18
     6ba:	23 2f       	mov	r18, r19
     6bc:	22 1f       	adc	r18, r18
     6be:	33 0b       	sbc	r19, r19
     6c0:	23 2b       	or	r18, r19
     6c2:	c1 f3       	breq	.-16     	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     6c4:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     6c6:	2e b5       	in	r18, 0x2e	; 46
    SpiMasterXfrByte(cmd);

    // Check sensor recognizes command before sending args!

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     6c8:	19 99       	sbic	0x03, 1	; 3
     6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     6cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     6d0:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     6d2:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     6d4:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	22 0f       	add	r18, r18
     6da:	23 2f       	mov	r18, r19
     6dc:	22 1f       	adc	r18, r18
     6de:	33 0b       	sbc	r19, r19
     6e0:	23 2b       	or	r18, r19
     6e2:	c1 f3       	breq	.-16     	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     6e4:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     6e6:	2e b5       	in	r18, 0x2e	; 46

    // Proceed with sending the LIS config if status is OK.
    if (status == OK)
     6e8:	21 11       	cpse	r18, r1
     6ea:	34 c0       	rjmp	.+104    	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     6ec:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     6ee:	ae bd       	out	0x2e, r26	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     6f0:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	22 0f       	add	r18, r18
     6f6:	23 2f       	mov	r18, r19
     6f8:	22 1f       	adc	r18, r18
     6fa:	33 0b       	sbc	r19, r19
     6fc:	23 2b       	or	r18, r19
     6fe:	c1 f3       	breq	.-16     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     700:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     702:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     704:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     706:	fe bd       	out	0x2e, r31	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     708:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	22 0f       	add	r18, r18
     70e:	23 2f       	mov	r18, r19
     710:	22 1f       	adc	r18, r18
     712:	33 0b       	sbc	r19, r19
     714:	23 2b       	or	r18, r19
     716:	c1 f3       	breq	.-16     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     718:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     71a:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     71c:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     71e:	ee bd       	out	0x2e, r30	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     720:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	22 0f       	add	r18, r18
     726:	23 2f       	mov	r18, r19
     728:	22 1f       	adc	r18, r18
     72a:	33 0b       	sbc	r19, r19
     72c:	23 2b       	or	r18, r19
     72e:	c1 f3       	breq	.-16     	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     730:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     732:	2e b5       	in	r18, 0x2e	; 46

        // vis-spi-out responds OK after loading new config.
        // vis-spi-out responds ERROR if config is invalid.

        // wait for data ready LOW: sensor ready to send STATUS
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
     734:	19 99       	sbic	0x03, 1	; 3
     736:	fe cf       	rjmp	.-4      	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
        // read status
        status = SpiMasterXfrByte(PADDING);
     738:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     73c:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     73e:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     740:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	22 0f       	add	r18, r18
     746:	23 2f       	mov	r18, r19
     748:	22 1f       	adc	r18, r18
     74a:	33 0b       	sbc	r19, r19
     74c:	23 2b       	or	r18, r19
     74e:	c1 f3       	breq	.-16     	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     750:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     752:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     754:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     756:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     758:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     75a:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     75c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     75e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     760:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     762:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     764:	32 99       	sbic	0x06, 2	; 6
     766:	05 c0       	rjmp	.+10     	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     768:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     76a:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     76c:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     76e:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     770:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     772:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     774:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     776:	41 9a       	sbi	0x08, 1	; 8
     778:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     77a:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     77c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     77e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     780:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     782:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     784:	32 99       	sbic	0x06, 2	; 6
     786:	f7 cc       	rjmp	.-1554   	; 0x176 <main+0xc0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     788:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     78a:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     78c:	2b b9       	out	0x0b, r18	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     78e:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     790:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     792:	40 9a       	sbi	0x08, 0	; 8
     794:	cc cc       	rjmp	.-1640   	; 0x12e <main+0x78>
      * - writes sensor led setting\n 
      * */
    uint8_t const cmd = 3; // command is GetSensorLED

    // loop until led_num received
    while (UsbRxbufferIsEmpty());
     796:	32 99       	sbic	0x06, 2	; 6
     798:	fe cf       	rjmp	.-4      	; 0x796 <__EEPROM_REGION_LENGTH__+0x396>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     79a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     79c:	41 9a       	sbi	0x08, 1	; 8
     79e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     7a0:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7a2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     7a4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7a6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7a8:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     7aa:	32 99       	sbic	0x06, 2	; 6
     7ac:	62 c4       	rjmp	.+2244   	; 0x1072 <__stack+0x773>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7ae:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7b0:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     7b2:	e9 b1       	in	r30, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7b4:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7b6:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     7b8:	de bc       	out	0x2e, r13	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     7ba:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	22 0f       	add	r18, r18
     7c0:	23 2f       	mov	r18, r19
     7c2:	22 1f       	adc	r18, r18
     7c4:	33 0b       	sbc	r19, r19
     7c6:	23 2b       	or	r18, r19
     7c8:	c1 f3       	breq	.-16     	; 0x7ba <__EEPROM_REGION_LENGTH__+0x3ba>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7ca:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     7cc:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7ce:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     7d0:	ee bd       	out	0x2e, r30	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     7d2:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	22 0f       	add	r18, r18
     7d8:	23 2f       	mov	r18, r19
     7da:	22 1f       	adc	r18, r18
     7dc:	33 0b       	sbc	r19, r19
     7de:	23 2b       	or	r18, r19
     7e0:	c1 f3       	breq	.-16     	; 0x7d2 <__EEPROM_REGION_LENGTH__+0x3d2>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7e2:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     7e4:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7e6:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7e8:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     7ea:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     7ec:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7ee:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     7f0:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7f2:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     7f4:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     7f6:	32 99       	sbic	0x06, 2	; 6
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     7fa:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     7fc:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     7fe:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     800:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     802:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     804:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     806:	19 99       	sbic	0x03, 1	; 3
     808:	fe cf       	rjmp	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     80a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     80e:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     810:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     812:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	22 0f       	add	r18, r18
     818:	23 2f       	mov	r18, r19
     81a:	22 1f       	adc	r18, r18
     81c:	33 0b       	sbc	r19, r19
     81e:	23 2b       	or	r18, r19
     820:	c1 f3       	breq	.-16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     822:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     824:	ee b5       	in	r30, 0x2e	; 46
    // wait for data ready LOW: sensor ready to send LED_SETTING
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     826:	19 99       	sbic	0x03, 1	; 3
     828:	fe cf       	rjmp	.-4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
    // read led_setting
    uint8_t led_setting = SpiMasterXfrByte(PADDING);
     82a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     82e:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     830:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     832:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	22 0f       	add	r18, r18
     838:	23 2f       	mov	r18, r19
     83a:	22 1f       	adc	r18, r18
     83c:	33 0b       	sbc	r19, r19
     83e:	23 2b       	or	r18, r19
     840:	c1 f3       	breq	.-16     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     842:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     844:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     846:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     848:	41 9a       	sbi	0x08, 1	; 8
     84a:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     84c:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     84e:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     850:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     852:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     854:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     856:	32 99       	sbic	0x06, 2	; 6
     858:	8c cf       	rjmp	.-232    	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     85a:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     85c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     85e:	eb b9       	out	0x0b, r30	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     860:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     862:	1a b8       	out	0x0a, r1	; 10
     864:	86 cf       	rjmp	.-244    	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
      * - applies led setting and writes OK if parameters are valid\n 
      * - writes ERROR if led num is invalid\n 
      * - writes ERROR if led setting is invalid\n 
      * */
    // loop until led_num received
    while (UsbRxbufferIsEmpty());
     866:	32 99       	sbic	0x06, 2	; 6
     868:	fe cf       	rjmp	.-4      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     86a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     86c:	41 9a       	sbi	0x08, 1	; 8
     86e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     870:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     872:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     874:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     876:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     878:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     87a:	32 99       	sbic	0x06, 2	; 6
     87c:	28 c4       	rjmp	.+2128   	; 0x10ce <__stack+0x7cf>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     87e:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     880:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     882:	29 b1       	in	r18, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     884:	40 9a       	sbi	0x08, 0	; 8
    // read led_num
    uint8_t led_num = 0xFF;
    UsbReadByte(&led_num);

    // loop until led_setting received
    while (UsbRxbufferIsEmpty());
     886:	32 99       	sbic	0x06, 2	; 6
     888:	fe cf       	rjmp	.-4      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     88a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     88c:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     88e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     890:	4b b9       	out	0x0b, r20	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     892:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     894:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     896:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     898:	41 98       	cbi	0x08, 1	; 8
      * */
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtReadCmd); // Clock FtReadCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     89a:	32 99       	sbic	0x06, 2	; 6
     89c:	0a c4       	rjmp	.+2068   	; 0x10b2 <__stack+0x7b3>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     89e:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8a0:	41 98       	cbi	0x08, 1	; 8
inline void _FtReadDatabus(uint8_t * pbyte)
{
    /** FtReadDatabus behavior:\n 
      * - copies databus pin values to address pbyte\n 
      * */
    *pbyte = *FtData_pin;
     8a2:	39 b1       	in	r19, 0x09	; 9
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8a4:	40 9a       	sbi	0x08, 0	; 8

    // read led_setting
    uint8_t led_setting = 0xFF;
    UsbReadByte(&led_setting);

    if ( (led_num == 0) && led_setting_is_valid(led_setting) ) // parameters are valid
     8a6:	21 11       	cpse	r18, r1
     8a8:	57 cc       	rjmp	.-1874   	; 0x158 <main+0xa2>
      * - returns TRUE if setting is OFF\n 
      * - returns TRUE if setting is GREEN\n 
      * - returns TRUE if setting is RED\n 
      * - returns FALSE if setting is any other value\n 
      * */
    return ( (setting==OFF) || (setting==GREEN) || (setting==RED) );
     8aa:	31 11       	cpse	r19, r1
     8ac:	25 c4       	rjmp	.+2122   	; 0x10f8 <__stack+0x7f9>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8ae:	3b 98       	cbi	0x07, 3	; 7
     8b0:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8b2:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     8b4:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     8b6:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8b8:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     8ba:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8bc:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8be:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     8c0:	32 99       	sbic	0x06, 2	; 6
     8c2:	59 cc       	rjmp	.-1870   	; 0x176 <main+0xc0>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8c4:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     8c6:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     8c8:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8ca:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     8cc:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8ce:	40 9a       	sbi	0x08, 0	; 8
     8d0:	2e cc       	rjmp	.-1956   	; 0x12e <main+0x78>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8d2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     8d4:	ae bc       	out	0x2e, r10	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     8d6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	22 0f       	add	r18, r18
     8dc:	23 2f       	mov	r18, r19
     8de:	22 1f       	adc	r18, r18
     8e0:	33 0b       	sbc	r19, r19
     8e2:	23 2b       	or	r18, r19
     8e4:	c1 f3       	breq	.-16     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8e6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     8e8:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8ea:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8ec:	41 9a       	sbi	0x08, 1	; 8
     8ee:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     8f0:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8f2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     8f4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8f6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     8f8:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     8fa:	32 99       	sbic	0x06, 2	; 6
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <__stack+0x9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     8fe:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     900:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     902:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     904:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     906:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     908:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     90a:	19 99       	sbic	0x03, 1	; 3
     90c:	fe cf       	rjmp	.-4      	; 0x90a <__stack+0xb>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     90e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     912:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     914:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     916:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	22 0f       	add	r18, r18
     91c:	23 2f       	mov	r18, r19
     91e:	22 1f       	adc	r18, r18
     920:	33 0b       	sbc	r19, r19
     922:	23 2b       	or	r18, r19
     924:	c1 f3       	breq	.-16     	; 0x916 <__stack+0x17>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     926:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     928:	0e b5       	in	r16, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send MAX_TRIES
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     92a:	19 99       	sbic	0x03, 1	; 3
     92c:	fe cf       	rjmp	.-4      	; 0x92a <__stack+0x2b>
    // read max_tries
    uint8_t max_tries = SpiMasterXfrByte(PADDING);
     92e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     932:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     934:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     936:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	22 0f       	add	r18, r18
     93c:	23 2f       	mov	r18, r19
     93e:	22 1f       	adc	r18, r18
     940:	33 0b       	sbc	r19, r19
     942:	23 2b       	or	r18, r19
     944:	c1 f3       	breq	.-16     	; 0x936 <__stack+0x37>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     946:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     948:	1e b5       	in	r17, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send START_PIXEL_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     94a:	19 99       	sbic	0x03, 1	; 3
     94c:	fe cf       	rjmp	.-4      	; 0x94a <__stack+0x4b>
    // read start_pixel_msb
    uint8_t start_pixel_msb = SpiMasterXfrByte(PADDING);
     94e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     952:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     954:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     956:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	22 0f       	add	r18, r18
     95c:	23 2f       	mov	r18, r19
     95e:	22 1f       	adc	r18, r18
     960:	33 0b       	sbc	r19, r19
     962:	23 2b       	or	r18, r19
     964:	c1 f3       	breq	.-16     	; 0x956 <__stack+0x57>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     966:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     968:	de b5       	in	r29, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send START_PIXEL_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     96a:	19 99       	sbic	0x03, 1	; 3
     96c:	fe cf       	rjmp	.-4      	; 0x96a <__stack+0x6b>
    // read start_pixel_lsb
    uint8_t start_pixel_lsb = SpiMasterXfrByte(PADDING);
     96e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     972:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     974:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     976:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	22 0f       	add	r18, r18
     97c:	23 2f       	mov	r18, r19
     97e:	22 1f       	adc	r18, r18
     980:	33 0b       	sbc	r19, r19
     982:	23 2b       	or	r18, r19
     984:	c1 f3       	breq	.-16     	; 0x976 <__stack+0x77>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     986:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     988:	ce b5       	in	r28, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send STOP_PIXEL_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     98a:	19 99       	sbic	0x03, 1	; 3
     98c:	fe cf       	rjmp	.-4      	; 0x98a <__stack+0x8b>
    // read stop_pixel_msb
    uint8_t stop_pixel_msb = SpiMasterXfrByte(PADDING);
     98e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     992:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     994:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     996:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	22 0f       	add	r18, r18
     99c:	23 2f       	mov	r18, r19
     99e:	22 1f       	adc	r18, r18
     9a0:	33 0b       	sbc	r19, r19
     9a2:	23 2b       	or	r18, r19
     9a4:	c1 f3       	breq	.-16     	; 0x996 <__stack+0x97>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     9a6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     9a8:	be b5       	in	r27, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send STOP_PIXEL_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     9aa:	19 99       	sbic	0x03, 1	; 3
     9ac:	fe cf       	rjmp	.-4      	; 0x9aa <__stack+0xab>
    // read stop_pixel_lsb
    uint8_t stop_pixel_lsb = SpiMasterXfrByte(PADDING);
     9ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     9b2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     9b4:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     9b6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	22 0f       	add	r18, r18
     9bc:	23 2f       	mov	r18, r19
     9be:	22 1f       	adc	r18, r18
     9c0:	33 0b       	sbc	r19, r19
     9c2:	23 2b       	or	r18, r19
     9c4:	c1 f3       	breq	.-16     	; 0x9b6 <__stack+0xb7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     9c6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     9c8:	ae b5       	in	r26, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send TARGET_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     9ca:	19 99       	sbic	0x03, 1	; 3
     9cc:	fe cf       	rjmp	.-4      	; 0x9ca <__stack+0xcb>
    // read target_msb
    uint8_t target_msb = SpiMasterXfrByte(PADDING);
     9ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     9d2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     9d4:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     9d6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	22 0f       	add	r18, r18
     9dc:	23 2f       	mov	r18, r19
     9de:	22 1f       	adc	r18, r18
     9e0:	33 0b       	sbc	r19, r19
     9e2:	23 2b       	or	r18, r19
     9e4:	c1 f3       	breq	.-16     	; 0x9d6 <__stack+0xd7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     9e6:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     9e8:	fe b5       	in	r31, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send TARGET_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     9ea:	19 99       	sbic	0x03, 1	; 3
     9ec:	fe cf       	rjmp	.-4      	; 0x9ea <__stack+0xeb>
    // read target_lsb
    uint8_t target_lsb = SpiMasterXfrByte(PADDING);
     9ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     9f2:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     9f4:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     9f6:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	22 0f       	add	r18, r18
     9fc:	23 2f       	mov	r18, r19
     9fe:	22 1f       	adc	r18, r18
     a00:	33 0b       	sbc	r19, r19
     a02:	23 2b       	or	r18, r19
     a04:	c1 f3       	breq	.-16     	; 0x9f6 <__stack+0xf7>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a06:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     a08:	ee b5       	in	r30, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send target_tolerance_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     a0a:	19 99       	sbic	0x03, 1	; 3
     a0c:	fe cf       	rjmp	.-4      	; 0xa0a <__stack+0x10b>
    // read target_tolerance_msb
    uint8_t target_tolerance_msb = SpiMasterXfrByte(PADDING);
     a0e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a12:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     a14:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     a16:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	22 0f       	add	r18, r18
     a1c:	23 2f       	mov	r18, r19
     a1e:	22 1f       	adc	r18, r18
     a20:	33 0b       	sbc	r19, r19
     a22:	23 2b       	or	r18, r19
     a24:	c1 f3       	breq	.-16     	; 0xa16 <__stack+0x117>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a26:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     a28:	ce b4       	in	r12, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send target_tolerance_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     a2a:	19 99       	sbic	0x03, 1	; 3
     a2c:	fe cf       	rjmp	.-4      	; 0xa2a <__stack+0x12b>
    // read target_tolerance_lsb
    uint8_t target_tolerance_lsb = SpiMasterXfrByte(PADDING);
     a2e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a32:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     a34:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     a36:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	22 0f       	add	r18, r18
     a3c:	23 2f       	mov	r18, r19
     a3e:	22 1f       	adc	r18, r18
     a40:	33 0b       	sbc	r19, r19
     a42:	23 2b       	or	r18, r19
     a44:	c1 f3       	breq	.-16     	; 0xa36 <__stack+0x137>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a46:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     a48:	8e b4       	in	r8, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send max_exposure_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     a4a:	19 99       	sbic	0x03, 1	; 3
     a4c:	fe cf       	rjmp	.-4      	; 0xa4a <__stack+0x14b>
    // read max_exposure_msb
    uint8_t max_exposure_msb = SpiMasterXfrByte(PADDING);
     a4e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a52:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     a54:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     a56:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	22 0f       	add	r18, r18
     a5c:	23 2f       	mov	r18, r19
     a5e:	22 1f       	adc	r18, r18
     a60:	33 0b       	sbc	r19, r19
     a62:	23 2b       	or	r18, r19
     a64:	c1 f3       	breq	.-16     	; 0xa56 <__stack+0x157>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a66:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     a68:	4e b4       	in	r4, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send max_exposure_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     a6a:	19 99       	sbic	0x03, 1	; 3
     a6c:	fe cf       	rjmp	.-4      	; 0xa6a <__stack+0x16b>
    // read max_exposure_lsb
    uint8_t max_exposure_lsb = SpiMasterXfrByte(PADDING);
     a6e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a72:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     a74:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     a76:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	22 0f       	add	r18, r18
     a7c:	23 2f       	mov	r18, r19
     a7e:	22 1f       	adc	r18, r18
     a80:	33 0b       	sbc	r19, r19
     a82:	23 2b       	or	r18, r19
     a84:	c1 f3       	breq	.-16     	; 0xa76 <__stack+0x177>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a86:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     a88:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a8a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a8c:	41 9a       	sbi	0x08, 1	; 8
     a8e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     a90:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a92:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     a94:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a96:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     a98:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     a9a:	32 99       	sbic	0x06, 2	; 6
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__stack+0x1a9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     a9e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     aa0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     aa2:	0b b9       	out	0x0b, r16	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     aa4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     aa6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     aa8:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     aaa:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     aac:	41 9a       	sbi	0x08, 1	; 8
     aae:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     ab0:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ab2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ab4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ab6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ab8:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     aba:	32 99       	sbic	0x06, 2	; 6
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <__stack+0x1c9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     abe:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ac0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     ac2:	1b b9       	out	0x0b, r17	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ac4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ac6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ac8:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     aca:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     acc:	41 9a       	sbi	0x08, 1	; 8
     ace:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     ad0:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ad2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ad4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ad6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ad8:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     ada:	32 99       	sbic	0x06, 2	; 6
     adc:	05 c0       	rjmp	.+10     	; 0xae8 <__stack+0x1e9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ade:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ae0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     ae2:	db b9       	out	0x0b, r29	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ae4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ae6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ae8:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     aea:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     aec:	41 9a       	sbi	0x08, 1	; 8
     aee:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     af0:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     af2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     af4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     af6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     af8:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     afa:	32 99       	sbic	0x06, 2	; 6
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <__stack+0x209>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     afe:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b00:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b02:	cb b9       	out	0x0b, r28	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b04:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b06:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b08:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b0a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b0c:	41 9a       	sbi	0x08, 1	; 8
     b0e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b10:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b12:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b14:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b16:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b18:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     b1a:	32 99       	sbic	0x06, 2	; 6
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__stack+0x229>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b1e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b20:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b22:	bb b9       	out	0x0b, r27	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b24:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b26:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b28:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b2a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b2c:	41 9a       	sbi	0x08, 1	; 8
     b2e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b30:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b32:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b34:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b36:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b38:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     b3a:	32 99       	sbic	0x06, 2	; 6
     b3c:	05 c0       	rjmp	.+10     	; 0xb48 <__stack+0x249>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b3e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b40:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b42:	ab b9       	out	0x0b, r26	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b44:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b46:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b48:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b4a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b4c:	41 9a       	sbi	0x08, 1	; 8
     b4e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b50:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b52:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b54:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b56:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b58:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     b5a:	32 99       	sbic	0x06, 2	; 6
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__stack+0x269>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b5e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b60:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b62:	fb b9       	out	0x0b, r31	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b64:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b66:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b68:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b6a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b6c:	41 9a       	sbi	0x08, 1	; 8
     b6e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b70:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b72:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b74:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b76:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b78:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     b7a:	32 99       	sbic	0x06, 2	; 6
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__stack+0x289>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b7e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b80:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b82:	eb b9       	out	0x0b, r30	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b84:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b86:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b88:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b8a:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b8c:	41 9a       	sbi	0x08, 1	; 8
     b8e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     b90:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b92:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     b94:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b96:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     b98:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     b9a:	32 99       	sbic	0x06, 2	; 6
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__stack+0x2a9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     b9e:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ba0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     ba2:	cb b8       	out	0x0b, r12	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ba4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ba6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ba8:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     baa:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bac:	41 9a       	sbi	0x08, 1	; 8
     bae:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     bb0:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bb2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     bb4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bb6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bb8:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     bba:	32 99       	sbic	0x06, 2	; 6
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__stack+0x2c9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bbe:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     bc0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     bc2:	8b b8       	out	0x0b, r8	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bc4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     bc6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bc8:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bca:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bcc:	41 9a       	sbi	0x08, 1	; 8
     bce:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     bd0:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bd2:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     bd4:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bd6:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     bd8:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     bda:	32 99       	sbic	0x06, 2	; 6
     bdc:	ca cd       	rjmp	.-1132   	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bde:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     be0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     be2:	4b b8       	out	0x0b, r4	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     be4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     be6:	1a b8       	out	0x0a, r1	; 10
     be8:	c4 cd       	rjmp	.-1144   	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
     bea:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     bec:	9e bc       	out	0x2e, r9	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     bee:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	22 0f       	add	r18, r18
     bf4:	23 2f       	mov	r18, r19
     bf6:	22 1f       	adc	r18, r18
     bf8:	33 0b       	sbc	r19, r19
     bfa:	23 2b       	or	r18, r19
     bfc:	c1 f3       	breq	.-16     	; 0xbee <__stack+0x2ef>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     bfe:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     c00:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c02:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c04:	41 9a       	sbi	0x08, 1	; 8
     c06:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     c08:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c0a:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     c0c:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c0e:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c10:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     c12:	32 99       	sbic	0x06, 2	; 6
     c14:	05 c0       	rjmp	.+10     	; 0xc20 <__stack+0x321>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c16:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     c18:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     c1a:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c1c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     c1e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c20:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     c22:	19 99       	sbic	0x03, 1	; 3
     c24:	fe cf       	rjmp	.-4      	; 0xc22 <__stack+0x323>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     c26:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c2a:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     c2c:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     c2e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	22 0f       	add	r18, r18
     c34:	23 2f       	mov	r18, r19
     c36:	22 1f       	adc	r18, r18
     c38:	33 0b       	sbc	r19, r19
     c3a:	23 2b       	or	r18, r19
     c3c:	c1 f3       	breq	.-16     	; 0xc2e <__stack+0x32f>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c3e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     c40:	fe b5       	in	r31, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send success
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     c42:	19 99       	sbic	0x03, 1	; 3
     c44:	fe cf       	rjmp	.-4      	; 0xc42 <__stack+0x343>
    // read success true/false
    uint8_t success = SpiMasterXfrByte(PADDING);
     c46:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c4a:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     c4c:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     c4e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	22 0f       	add	r18, r18
     c54:	23 2f       	mov	r18, r19
     c56:	22 1f       	adc	r18, r18
     c58:	33 0b       	sbc	r19, r19
     c5a:	23 2b       	or	r18, r19
     c5c:	c1 f3       	breq	.-16     	; 0xc4e <__stack+0x34f>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c5e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     c60:	ee b5       	in	r30, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send iterations
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     c62:	19 99       	sbic	0x03, 1	; 3
     c64:	fe cf       	rjmp	.-4      	; 0xc62 <__stack+0x363>
    // read number of iterations to hit AutoExpose target
    uint8_t iterations = SpiMasterXfrByte(PADDING);
     c66:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c6a:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     c6c:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     c6e:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	22 0f       	add	r18, r18
     c74:	23 2f       	mov	r18, r19
     c76:	22 1f       	adc	r18, r18
     c78:	33 0b       	sbc	r19, r19
     c7a:	23 2b       	or	r18, r19
     c7c:	c1 f3       	breq	.-16     	; 0xc6e <__stack+0x36f>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c7e:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     c80:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c82:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c84:	41 9a       	sbi	0x08, 1	; 8
     c86:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     c88:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c8a:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     c8c:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c8e:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c90:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     c92:	32 99       	sbic	0x06, 2	; 6
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__stack+0x3a1>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     c96:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     c98:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     c9a:	fb b9       	out	0x0b, r31	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     c9c:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     c9e:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ca0:	40 9a       	sbi	0x08, 0	; 8
     ca2:	d1 cd       	rjmp	.-1118   	; 0x846 <__DATA_REGION_LENGTH__+0x46>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ca4:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     ca6:	be bc       	out	0x2e, r11	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     ca8:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	22 0f       	add	r18, r18
     cae:	23 2f       	mov	r18, r19
     cb0:	22 1f       	adc	r18, r18
     cb2:	33 0b       	sbc	r19, r19
     cb4:	23 2b       	or	r18, r19
     cb6:	c1 f3       	breq	.-16     	; 0xca8 <__stack+0x3a9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cb8:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     cba:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     cbc:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cbe:	41 9a       	sbi	0x08, 1	; 8
     cc0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     cc2:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     cc4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     cc6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cc8:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     cca:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     ccc:	32 99       	sbic	0x06, 2	; 6
     cce:	05 c0       	rjmp	.+10     	; 0xcda <__stack+0x3db>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cd0:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     cd2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     cd4:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     cd6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     cd8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cda:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     cdc:	19 99       	sbic	0x03, 1	; 3
     cde:	fe cf       	rjmp	.-4      	; 0xcdc <__stack+0x3dd>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     ce0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ce4:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     ce6:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     ce8:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	22 0f       	add	r18, r18
     cee:	23 2f       	mov	r18, r19
     cf0:	22 1f       	adc	r18, r18
     cf2:	33 0b       	sbc	r19, r19
     cf4:	23 2b       	or	r18, r19
     cf6:	c1 f3       	breq	.-16     	; 0xce8 <__stack+0x3e9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     cf8:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     cfa:	ee b5       	in	r30, 0x2e	; 46

    // Return junk PADDING if vis-spi-out status is ERROR.
    uint8_t first_byte = PADDING;
     cfc:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    uint8_t second_byte = PADDING;
    uint8_t third_byte = PADDING;

    // Proceed with getting the hash if status is OK.
    if (status == OK)
     d00:	ee 23       	and	r30, r30
     d02:	91 f1       	breq	.+100    	; 0xd68 <__stack+0x469>
    uint8_t status = SpiMasterXfrByte(PADDING);

    // Return junk PADDING if vis-spi-out status is ERROR.
    uint8_t first_byte = PADDING;
    uint8_t second_byte = PADDING;
    uint8_t third_byte = PADDING;
     d04:	2f 2f       	mov	r18, r31
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);

    // Return junk PADDING if vis-spi-out status is ERROR.
    uint8_t first_byte = PADDING;
    uint8_t second_byte = PADDING;
     d06:	af 2f       	mov	r26, r31
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d08:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d0a:	41 9a       	sbi	0x08, 1	; 8
     d0c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     d0e:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d10:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d12:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d14:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d16:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     d18:	32 99       	sbic	0x06, 2	; 6
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <__stack+0x427>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d1c:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d1e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     d20:	eb b9       	out	0x0b, r30	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d22:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d24:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d26:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d28:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d2a:	41 9a       	sbi	0x08, 1	; 8
     d2c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     d2e:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d30:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d32:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d34:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d36:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     d38:	32 99       	sbic	0x06, 2	; 6
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <__stack+0x447>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d3c:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d3e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     d40:	fb b9       	out	0x0b, r31	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d42:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d44:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d46:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d48:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d4a:	41 9a       	sbi	0x08, 1	; 8
     d4c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     d4e:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d50:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d52:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d54:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d56:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     d58:	32 99       	sbic	0x06, 2	; 6
     d5a:	0b cd       	rjmp	.-1514   	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d5c:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d5e:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     d60:	ab b9       	out	0x0b, r26	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d62:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     d64:	1a b8       	out	0x0a, r1	; 10
     d66:	05 cd       	rjmp	.-1526   	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>

    // Proceed with getting the hash if status is OK.
    if (status == OK)
    {
        // wait for data ready LOW: sensor ready to send byte
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
     d68:	19 99       	sbic	0x03, 1	; 3
     d6a:	fe cf       	rjmp	.-4      	; 0xd68 <__stack+0x469>
     d6c:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     d6e:	fe bd       	out	0x2e, r31	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     d70:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	22 0f       	add	r18, r18
     d76:	23 2f       	mov	r18, r19
     d78:	22 1f       	adc	r18, r18
     d7a:	33 0b       	sbc	r19, r19
     d7c:	23 2b       	or	r18, r19
     d7e:	c1 f3       	breq	.-16     	; 0xd70 <__stack+0x471>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     d80:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     d82:	fe b5       	in	r31, 0x2e	; 46
        // read byte
        first_byte = SpiMasterXfrByte(PADDING);

        // wait for data ready LOW: sensor ready to send byte
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
     d84:	19 99       	sbic	0x03, 1	; 3
     d86:	fe cf       	rjmp	.-4      	; 0xd84 <__stack+0x485>
        // read byte
        second_byte = SpiMasterXfrByte(PADDING);
     d88:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     d8c:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     d8e:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     d90:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	22 0f       	add	r18, r18
     d96:	23 2f       	mov	r18, r19
     d98:	22 1f       	adc	r18, r18
     d9a:	33 0b       	sbc	r19, r19
     d9c:	23 2b       	or	r18, r19
     d9e:	c1 f3       	breq	.-16     	; 0xd90 <__stack+0x491>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     da0:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     da2:	ae b5       	in	r26, 0x2e	; 46

        // wait for data ready LOW: sensor ready to send byte
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
     da4:	19 99       	sbic	0x03, 1	; 3
     da6:	fe cf       	rjmp	.-4      	; 0xda4 <__stack+0x4a5>
        // read byte
        third_byte = SpiMasterXfrByte(PADDING);
     da8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     dac:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     dae:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     db0:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	22 0f       	add	r18, r18
     db6:	23 2f       	mov	r18, r19
     db8:	22 1f       	adc	r18, r18
     dba:	33 0b       	sbc	r19, r19
     dbc:	23 2b       	or	r18, r19
     dbe:	c1 f3       	breq	.-16     	; 0xdb0 <__stack+0x4b1>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     dc0:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     dc2:	2e b5       	in	r18, 0x2e	; 46
     dc4:	a1 cf       	rjmp	.-190    	; 0xd08 <__stack+0x409>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     dc6:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     dc8:	7e bc       	out	0x2e, r7	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     dca:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	22 0f       	add	r18, r18
     dd0:	23 2f       	mov	r18, r19
     dd2:	22 1f       	adc	r18, r18
     dd4:	33 0b       	sbc	r19, r19
     dd6:	23 2b       	or	r18, r19
     dd8:	c1 f3       	breq	.-16     	; 0xdca <__stack+0x4cb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     dda:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     ddc:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     dde:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     de0:	41 9a       	sbi	0x08, 1	; 8
     de2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     de4:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     de6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     de8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     dea:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     dec:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     dee:	32 99       	sbic	0x06, 2	; 6
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <__stack+0x4fd>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     df2:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     df4:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     df6:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     df8:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     dfa:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     dfc:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     dfe:	19 99       	sbic	0x03, 1	; 3
     e00:	fe cf       	rjmp	.-4      	; 0xdfe <__stack+0x4ff>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     e02:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e06:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     e08:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     e0a:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	22 0f       	add	r18, r18
     e10:	23 2f       	mov	r18, r19
     e12:	22 1f       	adc	r18, r18
     e14:	33 0b       	sbc	r19, r19
     e16:	23 2b       	or	r18, r19
     e18:	c1 f3       	breq	.-16     	; 0xe0a <__stack+0x50b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e1a:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     e1c:	ee b5       	in	r30, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send num_pixels_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     e1e:	19 99       	sbic	0x03, 1	; 3
     e20:	fe cf       	rjmp	.-4      	; 0xe1e <__stack+0x51f>
    // read num_pixels_MSB
    uint8_t num_pixels_MSB = SpiMasterXfrByte(PADDING);
     e22:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e26:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     e28:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     e2a:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	22 0f       	add	r18, r18
     e30:	23 2f       	mov	r18, r19
     e32:	22 1f       	adc	r18, r18
     e34:	33 0b       	sbc	r19, r19
     e36:	23 2b       	or	r18, r19
     e38:	c1 f3       	breq	.-16     	; 0xe2a <__stack+0x52b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e3a:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     e3c:	fe b5       	in	r31, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send num_pixels_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     e3e:	19 99       	sbic	0x03, 1	; 3
     e40:	fe cf       	rjmp	.-4      	; 0xe3e <__stack+0x53f>
    // read num_pixels_LSB
    uint8_t num_pixels_LSB = SpiMasterXfrByte(PADDING);
     e42:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e46:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     e48:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     e4a:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	22 0f       	add	r18, r18
     e50:	23 2f       	mov	r18, r19
     e52:	22 1f       	adc	r18, r18
     e54:	33 0b       	sbc	r19, r19
     e56:	23 2b       	or	r18, r19
     e58:	c1 f3       	breq	.-16     	; 0xe4a <__stack+0x54b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e5a:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     e5c:	ae b5       	in	r26, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e5e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e60:	41 9a       	sbi	0x08, 1	; 8
     e62:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     e64:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e66:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     e68:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e6a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e6c:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     e6e:	32 99       	sbic	0x06, 2	; 6
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <__stack+0x57d>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e72:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     e74:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     e76:	eb b9       	out	0x0b, r30	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e78:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     e7a:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e7c:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e7e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e80:	41 9a       	sbi	0x08, 1	; 8
     e82:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     e84:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e86:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     e88:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e8a:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e8c:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     e8e:	32 99       	sbic	0x06, 2	; 6
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__stack+0x59d>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e92:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     e94:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     e96:	fb b9       	out	0x0b, r31	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e98:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     e9a:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     e9c:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     e9e:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ea0:	41 9a       	sbi	0x08, 1	; 8
     ea2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     ea4:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ea6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     ea8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     eaa:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     eac:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     eae:	32 99       	sbic	0x06, 2	; 6
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <__stack+0x5bd>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     eb2:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     eb4:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     eb6:	ab b9       	out	0x0b, r26	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     eb8:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     eba:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ebc:	40 9a       	sbi	0x08, 0	; 8
    // write first three bytes of response from sensor
    UsbWriteByte(status);
    UsbWriteByte(num_pixels_MSB);
    UsbWriteByte(num_pixels_LSB);

    if (status == OK)
     ebe:	e1 11       	cpse	r30, r1
     ec0:	36 c9       	rjmp	.-3476   	; 0x12e <main+0x78>
        /* ------------------ */
        /* | READ THE FRAME | */
        /* ------------------ */

        uint16_t num_pixels = (num_pixels_MSB << 8) | num_pixels_LSB;
        uint16_t nbytes = 2*num_pixels;
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	bf 2b       	or	r27, r31
     ec6:	aa 0f       	add	r26, r26
     ec8:	bb 1f       	adc	r27, r27
        uint16_t nbytes_read = 0;
        while(nbytes_read++ < nbytes)
     eca:	10 97       	sbiw	r26, 0x00	; 0
     ecc:	09 f4       	brne	.+2      	; 0xed0 <__stack+0x5d1>
     ece:	2f c9       	rjmp	.-3490   	; 0x12e <main+0x78>
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
        {
            // wait for data ready LOW: sensor ready to send next byte
            while( BitIsSet(Spi_PortInput, Spi_DataReady));
     ed4:	19 99       	sbic	0x03, 1	; 3
     ed6:	fe cf       	rjmp	.-4      	; 0xed4 <__stack+0x5d5>
            // read next byte of frame data and write to USB host
            UsbWriteByte( SpiMasterXfrByte(PADDING) );
     ed8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     edc:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     ede:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     ee0:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	22 0f       	add	r18, r18
     ee6:	23 2f       	mov	r18, r19
     ee8:	22 1f       	adc	r18, r18
     eea:	33 0b       	sbc	r19, r19
     eec:	23 2b       	or	r18, r19
     eee:	c1 f3       	breq	.-16     	; 0xee0 <__stack+0x5e1>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ef0:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     ef2:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ef4:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     ef6:	41 9a       	sbi	0x08, 1	; 8
     ef8:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     efa:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     efc:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     efe:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f00:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f02:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     f04:	32 99       	sbic	0x06, 2	; 6
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <__stack+0x613>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f08:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     f0a:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     f0c:	2b b9       	out	0x0b, r18	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f0e:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     f10:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f12:	40 9a       	sbi	0x08, 0	; 8
     f14:	31 96       	adiw	r30, 0x01	; 1
        /* ------------------ */

        uint16_t num_pixels = (num_pixels_MSB << 8) | num_pixels_LSB;
        uint16_t nbytes = 2*num_pixels;
        uint16_t nbytes_read = 0;
        while(nbytes_read++ < nbytes)
     f16:	ea 17       	cp	r30, r26
     f18:	fb 07       	cpc	r31, r27
     f1a:	e1 f6       	brne	.-72     	; 0xed4 <__stack+0x5d5>
     f1c:	08 c9       	rjmp	.-3568   	; 0x12e <main+0x78>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f1e:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     f20:	6e bc       	out	0x2e, r6	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     f22:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	22 0f       	add	r18, r18
     f28:	23 2f       	mov	r18, r19
     f2a:	22 1f       	adc	r18, r18
     f2c:	33 0b       	sbc	r19, r19
     f2e:	23 2b       	or	r18, r19
     f30:	c1 f3       	breq	.-16     	; 0xf22 <__stack+0x623>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f32:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     f34:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f36:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f38:	41 9a       	sbi	0x08, 1	; 8
     f3a:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     f3c:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f3e:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     f40:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f42:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f44:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     f46:	32 99       	sbic	0x06, 2	; 6
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <__stack+0x655>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f4a:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     f4c:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     f4e:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f50:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     f52:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f54:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     f56:	19 99       	sbic	0x03, 1	; 3
     f58:	fe cf       	rjmp	.-4      	; 0xf56 <__stack+0x657>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     f5a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f5e:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     f60:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     f62:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	22 0f       	add	r18, r18
     f68:	23 2f       	mov	r18, r19
     f6a:	22 1f       	adc	r18, r18
     f6c:	33 0b       	sbc	r19, r19
     f6e:	23 2b       	or	r18, r19
     f70:	c1 f3       	breq	.-16     	; 0xf62 <__stack+0x663>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f72:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     f74:	fe b5       	in	r31, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send EXPOSURE_MSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     f76:	19 99       	sbic	0x03, 1	; 3
     f78:	fe cf       	rjmp	.-4      	; 0xf76 <__stack+0x677>
    // read exposure_msb
    uint8_t exposure_msb = SpiMasterXfrByte(PADDING);
     f7a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f7e:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     f80:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     f82:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	22 0f       	add	r18, r18
     f88:	23 2f       	mov	r18, r19
     f8a:	22 1f       	adc	r18, r18
     f8c:	33 0b       	sbc	r19, r19
     f8e:	23 2b       	or	r18, r19
     f90:	c1 f3       	breq	.-16     	; 0xf82 <__stack+0x683>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     f92:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     f94:	ee b5       	in	r30, 0x2e	; 46

    // wait for data ready LOW: sensor ready to send EXPOSURE_LSB
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     f96:	19 99       	sbic	0x03, 1	; 3
     f98:	fe cf       	rjmp	.-4      	; 0xf96 <__stack+0x697>
    // read exposure_lsb
    uint8_t exposure_lsb = SpiMasterXfrByte(PADDING);
     f9a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     f9e:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     fa0:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     fa2:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	22 0f       	add	r18, r18
     fa8:	23 2f       	mov	r18, r19
     faa:	22 1f       	adc	r18, r18
     fac:	33 0b       	sbc	r19, r19
     fae:	23 2b       	or	r18, r19
     fb0:	c1 f3       	breq	.-16     	; 0xfa2 <__stack+0x6a3>
     fb2:	65 ce       	rjmp	.-822    	; 0xc7e <__stack+0x37f>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fb4:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     fb6:	5e bc       	out	0x2e, r5	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     fb8:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	22 0f       	add	r18, r18
     fbe:	23 2f       	mov	r18, r19
     fc0:	22 1f       	adc	r18, r18
     fc2:	33 0b       	sbc	r19, r19
     fc4:	23 2b       	or	r18, r19
     fc6:	c1 f3       	breq	.-16     	; 0xfb8 <__stack+0x6b9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     fc8:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
     fca:	2e b5       	in	r18, 0x2e	; 46
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fcc:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     fce:	41 9a       	sbi	0x08, 1	; 8
     fd0:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     fd2:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fd4:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     fd6:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     fd8:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fda:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
     fdc:	32 99       	sbic	0x06, 2	; 6
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__stack+0x6eb>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     fe0:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     fe2:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
     fe4:	1b b8       	out	0x0b, r1	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     fe6:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
     fe8:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
     fea:	40 9a       	sbi	0x08, 0	; 8

    // write OK to indicate command sent to sensor
    UsbWriteByte(OK);

    // wait for data ready LOW: sensor ready to send STATUS
    while( BitIsSet(Spi_PortInput, Spi_DataReady));
     fec:	19 99       	sbic	0x03, 1	; 3
     fee:	fe cf       	rjmp	.-4      	; 0xfec <__stack+0x6ed>
    // read status
    uint8_t status = SpiMasterXfrByte(PADDING);
     ff0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
     ff4:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
     ff6:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
     ff8:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	22 0f       	add	r18, r18
     ffe:	23 2f       	mov	r18, r19
    1000:	22 1f       	adc	r18, r18
    1002:	33 0b       	sbc	r19, r19
    1004:	23 2b       	or	r18, r19
    1006:	c1 f3       	breq	.-16     	; 0xff8 <__stack+0x6f9>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1008:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
    100a:	ee b5       	in	r30, 0x2e	; 46

    // TODO(sustainablelab): Add status check and junk bytes to unit tests and docstring.

    // Return junk PADDING if vis-spi-out status is ERROR.
    uint8_t binning = PADDING;
    100c:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    uint8_t gain = PADDING;
    uint8_t row_bitmap = PADDING;

    // Proceed with getting the LIS config if status is OK.
    if (status == OK)
    1010:	e1 11       	cpse	r30, r1
    1012:	78 ce       	rjmp	.-784    	; 0xd04 <__stack+0x405>
    {
        // wait for data ready LOW: sensor ready to send BINNING
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
    1014:	19 99       	sbic	0x03, 1	; 3
    1016:	fe cf       	rjmp	.-4      	; 0x1014 <__stack+0x715>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1018:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
    101a:	fe bd       	out	0x2e, r31	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    101c:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	22 0f       	add	r18, r18
    1022:	23 2f       	mov	r18, r19
    1024:	22 1f       	adc	r18, r18
    1026:	33 0b       	sbc	r19, r19
    1028:	23 2b       	or	r18, r19
    102a:	c1 f3       	breq	.-16     	; 0x101c <__stack+0x71d>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    102c:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
    102e:	fe b5       	in	r31, 0x2e	; 46
        // read binning
        binning = SpiMasterXfrByte(PADDING);

        // wait for data ready LOW: sensor ready to send GAIN
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
    1030:	19 99       	sbic	0x03, 1	; 3
    1032:	fe cf       	rjmp	.-4      	; 0x1030 <__stack+0x731>
        // read gain
        gain = SpiMasterXfrByte(PADDING);
    1034:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1038:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
    103a:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    103c:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	22 0f       	add	r18, r18
    1042:	23 2f       	mov	r18, r19
    1044:	22 1f       	adc	r18, r18
    1046:	33 0b       	sbc	r19, r19
    1048:	23 2b       	or	r18, r19
    104a:	c1 f3       	breq	.-16     	; 0x103c <__stack+0x73d>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    104c:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
    104e:	ae b5       	in	r26, 0x2e	; 46

        // wait for data ready LOW: sensor ready to send ROW_BITMAP
        while( BitIsSet(Spi_PortInput, Spi_DataReady));
    1050:	19 99       	sbic	0x03, 1	; 3
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <__stack+0x751>
        // read row_bitmap
        row_bitmap = SpiMasterXfrByte(PADDING);
    1054:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1058:	2a 98       	cbi	0x05, 2	; 5

    // select the SPI Slave
    ClearBit(Spi_PortOutput, Spi_Ss);

    // load data reg with byte to send
    *Spi_SPDR = byte;
    105a:	2e bd       	out	0x2e, r18	; 46
{
    return *reg_addr & 1<<bit;
}
inline bool BitIsClear(register_address reg_addr, bit_index bit)
{
    return !(*reg_addr & 1<<bit);
    105c:	2d b5       	in	r18, 0x2d	; 45

    // wait for SPI transmission to complete
    while(BitIsClear(Spi_SPSR, Spi_InterruptFlag));
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	22 0f       	add	r18, r18
    1062:	23 2f       	mov	r18, r19
    1064:	22 1f       	adc	r18, r18
    1066:	33 0b       	sbc	r19, r19
    1068:	23 2b       	or	r18, r19
    106a:	c1 f3       	breq	.-16     	; 0x105c <__stack+0x75d>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    106c:	2a 9a       	sbi	0x05, 2	; 5
    SetBit(Spi_PortOutput, Spi_Ss);

    // Clear the Spi_InterruptFlag by
    // reading Spi_InterruptFlag while it is set
    // then reading Spi_SPDR
    return *Spi_SPDR;
    106e:	2e b5       	in	r18, 0x2e	; 46
    1070:	4b ce       	rjmp	.-874    	; 0xd08 <__stack+0x409>

    // loop until led_num received
    while (UsbRxbufferIsEmpty());

    // read led_num
    uint8_t led_num = 0xFF;
    1072:	ef ef       	ldi	r30, 0xFF	; 255
    1074:	9f cb       	rjmp	.-2242   	; 0x7b4 <__EEPROM_REGION_LENGTH__+0x3b4>

    // loop until exposure_LSB received
    while (UsbRxbufferIsEmpty());
    
    // read exposure_LSB
    uint8_t exposure_LSB = 0xFF;
    1076:	ef ef       	ldi	r30, 0xFF	; 255
    1078:	40 ca       	rjmp	.-2944   	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
    107a:	40 9a       	sbi	0x08, 0	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    107c:	40 98       	cbi	0x08, 0	; 8
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    107e:	41 9a       	sbi	0x08, 1	; 8
    1080:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
    1082:	9b b9       	out	0x0b, r25	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1084:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
    1086:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1088:	41 9a       	sbi	0x08, 1	; 8
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    108a:	41 98       	cbi	0x08, 1	; 8
{
    uint8_t status = FtError;
    FtSelectFT221X(); // activates FT1248 interface
    FtWrite(FtWriteCmd); // Clock FtWriteCmd into FT221X
    FtBusTurnaround(); // Relinquish bus to FT221X
    if (FtIsOk())
    108c:	32 99       	sbic	0x06, 2	; 6
    108e:	05 c0       	rjmp	.+10     	; 0x109a <__stack+0x79b>
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    1090:	41 9a       	sbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
    1092:	8a b9       	out	0x0a, r24	; 10
inline void _FtWriteDatabus(uint8_t byte)
{
    /** FtWriteDatabus behavior:\n 
      * - outputs byte on databus pins\n 
      * */
    *FtData_port = byte;
    1094:	7b b9       	out	0x0b, r23	; 11
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    1096:	41 98       	cbi	0x08, 1	; 8
{
    /** FtDatabusPinDirection behavior:\n 
      * - makes databus pins outputs if direction is FtOut\n 
      * - makes databus pins inputs if direction is FtIn\n 
      * */
    *FtData_ddr = pin_direction;
    1098:	1a b8       	out	0x0a, r1	; 10
inline void SetBit(register_address reg_addr, bit_index bit)
{
    /** SetBit behavior:\n 
      * - sets bit in register\n 
      * */
    *reg_addr |= 1<<bit;
    109a:	40 9a       	sbi	0x08, 0	; 8
    }
    else // led_num is invalid
    {
        // write ERROR and pad second byte
        UsbWriteByte(ERROR);
        UsbWriteByte(PADDING);
    109c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    10a0:	69 cb       	rjmp	.-2350   	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>

    // loop until led_setting received
    while (UsbRxbufferIsEmpty());

    // read led_setting
    uint8_t led_setting = 0xFF;
    10a2:	ef ef       	ldi	r30, 0xFF	; 255
    10a4:	8f ca       	rjmp	.-2786   	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>

    // loop until exposure_MSB received
    while (UsbRxbufferIsEmpty());
    
    // read exposure_MSB
    uint8_t exposure_MSB = 0xFF;
    10a6:	ff ef       	ldi	r31, 0xFF	; 255
    10a8:	18 ca       	rjmp	.-3024   	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
    UsbReadByte(&max_exposure_msb);

    // loop until max_exposure_lsb is received
    while (UsbRxbufferIsEmpty());
    // read max_exposure_lsb
    uint8_t max_exposure_lsb = 0xFF;
    10aa:	ef ef       	ldi	r30, 0xFF	; 255
    10ac:	55 c9       	rjmp	.-3414   	; 0x358 <main+0x2a2>

    // loop until led_num received
    while (UsbRxbufferIsEmpty());

    // read led_num
    uint8_t led_num = 0xFF;
    10ae:	ff ef       	ldi	r31, 0xFF	; 255
    10b0:	79 ca       	rjmp	.-2830   	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
    10b2:	40 9a       	sbi	0x08, 0	; 8
    10b4:	51 c8       	rjmp	.-3934   	; 0x158 <main+0xa2>

    // loop until gain received
    while (UsbRxbufferIsEmpty());

    // read gain
    uint8_t gain = 0xFF;
    10b6:	ff ef       	ldi	r31, 0xFF	; 255
    10b8:	ea ca       	rjmp	.-2604   	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>

    // loop until binning received
    while (UsbRxbufferIsEmpty());

    // read binning
    uint8_t binning = 0xFF;
    10ba:	af ef       	ldi	r26, 0xFF	; 255
    10bc:	d8 ca       	rjmp	.-2640   	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
    UsbReadByte(&max_tries);

    // loop until start_pixel_msb is received
    while (UsbRxbufferIsEmpty());
    // read start_pixel_msb
    uint8_t start_pixel_msb = 0xFF;
    10be:	88 24       	eor	r8, r8
    10c0:	8a 94       	dec	r8
    10c2:	ba c8       	rjmp	.-3724   	; 0x238 <main+0x182>
    uint8_t const cmd = 14; // command is SetAutoExposeConfig

    // loop until max_tries is received
    while (UsbRxbufferIsEmpty());
    // read max_tries
    uint8_t max_tries = 0xFF;
    10c4:	44 24       	eor	r4, r4
    10c6:	4a 94       	dec	r4
    10c8:	a7 c8       	rjmp	.-3762   	; 0x218 <main+0x162>

    // loop until row_bitmap received
    while (UsbRxbufferIsEmpty());

    // read row_bitmap
    uint8_t row_bitmap = 0xFF;
    10ca:	ef ef       	ldi	r30, 0xFF	; 255
    10cc:	f0 ca       	rjmp	.-2592   	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
      * */
    // loop until led_num received
    while (UsbRxbufferIsEmpty());

    // read led_num
    uint8_t led_num = 0xFF;
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
    10d0:	d9 cb       	rjmp	.-2126   	; 0x884 <__DATA_REGION_LENGTH__+0x84>
    UsbReadByte(&target_tolerance_lsb);

    // loop until max_exposure_msb is received
    while (UsbRxbufferIsEmpty());
    // read max_exposure_msb
    uint8_t max_exposure_msb = 0xFF;
    10d2:	ff ef       	ldi	r31, 0xFF	; 255
    10d4:	31 c9       	rjmp	.-3486   	; 0x338 <main+0x282>
    UsbReadByte(&target_tolerance_msb);

    // loop until target_tolerance_lsb is received
    while (UsbRxbufferIsEmpty());
    // read target_tolerance_lsb
    uint8_t target_tolerance_lsb = 0xFF;
    10d6:	af ef       	ldi	r26, 0xFF	; 255
    10d8:	1f c9       	rjmp	.-3522   	; 0x318 <main+0x262>
    UsbReadByte(&target_lsb);

    // loop until target_tolerance_msb is received
    while (UsbRxbufferIsEmpty());
    // read target_tolerance_msb
    uint8_t target_tolerance_msb = 0xFF;
    10da:	bf ef       	ldi	r27, 0xFF	; 255
    10dc:	0d c9       	rjmp	.-3558   	; 0x2f8 <main+0x242>
    UsbReadByte(&target_msb);

    // loop until target_lsb is received
    while (UsbRxbufferIsEmpty());
    // read target_lsb
    uint8_t target_lsb = 0xFF;
    10de:	cf ef       	ldi	r28, 0xFF	; 255
    10e0:	fb c8       	rjmp	.-3594   	; 0x2d8 <main+0x222>
    UsbReadByte(&stop_pixel_lsb);

    // loop until target_msb is received
    while (UsbRxbufferIsEmpty());
    // read target_msb
    uint8_t target_msb = 0xFF;
    10e2:	df ef       	ldi	r29, 0xFF	; 255
    10e4:	e9 c8       	rjmp	.-3630   	; 0x2b8 <main+0x202>
    UsbReadByte(&stop_pixel_msb);

    // loop until stop_pixel_lsb is received
    while (UsbRxbufferIsEmpty());
    // read stop_pixel_lsb
    uint8_t stop_pixel_lsb = 0xFF;
    10e6:	1f ef       	ldi	r17, 0xFF	; 255
    10e8:	d7 c8       	rjmp	.-3666   	; 0x298 <main+0x1e2>
    UsbReadByte(&start_pixel_lsb);

    // loop until stop_pixel_msb is received
    while (UsbRxbufferIsEmpty());
    // read stop_pixel_msb
    uint8_t stop_pixel_msb = 0xFF;
    10ea:	0f ef       	ldi	r16, 0xFF	; 255
    10ec:	c5 c8       	rjmp	.-3702   	; 0x278 <main+0x1c2>
    UsbReadByte(&start_pixel_msb);

    // loop until start_pixel_lsb is received
    while (UsbRxbufferIsEmpty());
    // read start_pixel_lsb
    uint8_t start_pixel_lsb = 0xFF;
    10ee:	cc 24       	eor	r12, r12
    10f0:	ca 94       	dec	r12
    10f2:	b2 c8       	rjmp	.-3740   	; 0x258 <main+0x1a2>

    //! *LED 0,* the **status_led**, *is the only indicator LED on the usb-bridge.*
    if (BitIsClear(BiColorLed_ddr, status_led))
        return OFF;
    else // LED is on
        return BitIsClear(BiColorLed_port, status_led)
    10f4:	31 e0       	ldi	r19, 0x01	; 1
    10f6:	70 c8       	rjmp	.-3872   	; 0x1d8 <main+0x122>
    10f8:	31 30       	cpi	r19, 0x01	; 1
    10fa:	31 f0       	breq	.+12     	; 0x1108 <__stack+0x809>
    10fc:	32 30       	cpi	r19, 0x02	; 2
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__stack+0x803>
    1100:	2b c8       	rjmp	.-4010   	; 0x158 <main+0xa2>
    1102:	3b 9a       	sbi	0x07, 3	; 7
    1104:	43 9a       	sbi	0x08, 3	; 8
    1106:	d4 cb       	rjmp	.-2136   	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
    1108:	3b 9a       	sbi	0x07, 3	; 7
inline void ClearBit(register_address reg_addr, bit_index bit)
{
    /** ClearBit behavior:\n 
      * - clears bit in register\n 
      * */
    *reg_addr &= ~(1<<bit);
    110a:	43 98       	cbi	0x08, 3	; 8
    110c:	d1 cb       	rjmp	.-2142   	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>

0000110e <__tablejump2__>:
    110e:	ee 0f       	add	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	05 90       	lpm	r0, Z+
    1114:	f4 91       	lpm	r31, Z
    1116:	e0 2d       	mov	r30, r0
    1118:	09 94       	ijmp

0000111a <_exit>:
    111a:	f8 94       	cli

0000111c <__stop_program>:
    111c:	ff cf       	rjmp	.-2      	; 0x111c <__stop_program>
