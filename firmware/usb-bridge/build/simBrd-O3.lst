
build/simBrd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000629  00800154  00800154  00000be6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000508a  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c4  00000000  00000000  00005ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002045  00000000  00000000  000073be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e4  00000000  00000000  00009404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001505  00000000  00000000  00009ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d68  00000000  00000000  0000b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  0000ef55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <main>
  9e:	0c 94 7d 05 	jmp	0xafa	; 0xafa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DebugLedTurnOn_Implementation>:
    DebugLedTurnGreen();
}

static void DebugLedTurnOn_Implementation(void)
{
    SetBit(ddr_register_, debug_led_);
  a6:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <ddr_register_>
  aa:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <ddr_register_+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
  ae:	20 81       	ld	r18, Z
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <__data_end>
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DebugLedTurnOn_Implementation+0x18>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <DebugLedTurnOn_Implementation+0x14>
  c2:	82 2b       	or	r24, r18
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <DebugLedTurnGreen_Implementation>:
    ClearBit(ddr_register_, debug_led_);
}

static void DebugLedTurnGreen_Implementation(void)
{
    ClearBit(port_register_, debug_led_);
  c8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <port_register_>
  cc:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <port_register_+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
  d0:	20 81       	ld	r18, Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <__data_end>
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DebugLedTurnGreen_Implementation+0x18>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DebugLedTurnGreen_Implementation+0x14>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <DebugLedTurnRed>:
}
void (*DebugLedTurnGreen)(void) = DebugLedTurnGreen_Implementation;

void DebugLedTurnRed(void)
{
    SetBit(port_register_, debug_led_);
  ec:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <port_register_>
  f0:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <port_register_+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
  f4:	20 81       	ld	r18, Z
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <__data_end>
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DebugLedTurnRed+0x18>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DebugLedTurnRed+0x14>
 108:	82 2b       	or	r24, r18
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <DebugLedInit>:
    uint8_t volatile * const ddr_register,
    uint8_t volatile * const port_register,
    uint8_t volatile * const pin_register,
    uint8_t const debug_led)
{
    ddr_register_ = ddr_register;
 10e:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <ddr_register_+0x1>
 112:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ddr_register_>
    port_register_ = port_register;
 116:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <port_register_+0x1>
 11a:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <port_register_>
    pin_register_ = pin_register;
 11e:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <pin_register_+0x1>
 122:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <pin_register_>
    debug_led_ = debug_led;
 126:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__data_end>
    DebugLedTurnOn();
 12a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DebugLedTurnOn>
 12e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DebugLedTurnOn+0x1>
 132:	09 95       	icall
    DebugLedTurnGreen();
 134:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 138:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 13c:	09 94       	ijmp

0000013e <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
 142:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtActivateInterface>
 146:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtActivateInterface+0x1>
 14a:	09 95       	icall
 14c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 150:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 154:	09 95       	icall
 156:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 15a:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 15e:	09 95       	icall
 160:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtOutputByte>
 164:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtOutputByte+0x1>
 168:	8c 2f       	mov	r24, r28
 16a:	09 95       	icall
 16c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 170:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 174:	cf 91       	pop	r28
 176:	09 94       	ijmp

00000178 <FtBusTurnaround_Implementation>:
 178:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtLetSlaveDriveBus>
 17c:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtLetSlaveDriveBus+0x1>
 180:	09 95       	icall
 182:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 186:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 18a:	09 95       	icall
 18c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 190:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 194:	09 95       	icall
 196:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 19a:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 19e:	09 94       	ijmp

000001a0 <FtWrite_Implementation>:
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
 1a6:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtLetMasterDriveBus>
 1aa:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtLetMasterDriveBus+0x1>
 1ae:	09 95       	icall
 1b0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 1b4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 1b8:	09 95       	icall
 1ba:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtWriteData>
 1be:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtWriteData+0x1>
 1c2:	88 81       	ld	r24, Y
 1c4:	09 95       	icall
 1c6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 1ca:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 1ce:	09 95       	icall
 1d0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 1d4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	09 94       	ijmp

000001de <FtActivateInterface_Implementation>:
 1de:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Ft1248_port>
 1e2:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Ft1248_port+0x1>
 1e6:	20 81       	ld	r18, Z
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	00 90 47 01 	lds	r0, 0x0147	; 0x800147 <Ft1248_Ss>
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <FtActivateInterface_Implementation+0x18>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <FtActivateInterface_Implementation+0x14>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

00000202 <FtDeactivateInterface_Implementation>:
 202:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Ft1248_port>
 206:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Ft1248_port+0x1>
 20a:	20 81       	ld	r18, Z
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	00 90 47 01 	lds	r0, 0x0147	; 0x800147 <Ft1248_Ss>
 214:	02 c0       	rjmp	.+4      	; 0x21a <FtDeactivateInterface_Implementation+0x18>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <FtDeactivateInterface_Implementation+0x14>
 21e:	82 2b       	or	r24, r18
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <FtPushData_Implementation>:
 224:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Ft1248_port>
 228:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Ft1248_port+0x1>
 22c:	20 81       	ld	r18, Z
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	00 90 46 01 	lds	r0, 0x0146	; 0x800146 <Ft1248_Sck>
 236:	02 c0       	rjmp	.+4      	; 0x23c <FtPushData_Implementation+0x18>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <FtPushData_Implementation+0x14>
 240:	82 2b       	or	r24, r18
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <FtPullData_Implementation>:
 246:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Ft1248_port>
 24a:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Ft1248_port+0x1>
 24e:	20 81       	ld	r18, Z
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	00 90 46 01 	lds	r0, 0x0146	; 0x800146 <Ft1248_Sck>
 258:	02 c0       	rjmp	.+4      	; 0x25e <FtPullData_Implementation+0x18>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <FtPullData_Implementation+0x14>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	80 83       	st	Z, r24
 268:	08 95       	ret

0000026a <FtLetMasterDriveBus_Implementation>:
 26a:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 26e:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <FtLetSlaveDriveBus_Implementation>:
 278:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <FtMiosio_ddr>
 27c:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 280:	10 82       	st	Z, r1
 282:	08 95       	ret

00000284 <FtIsBusOk_Implementation>:
 284:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_pin>
 288:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_pin+0x1>
 28c:	80 81       	ld	r24, Z
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Miso>
 294:	02 c0       	rjmp	.+4      	; 0x29a <FtIsBusOk_Implementation+0x16>
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <FtIsBusOk_Implementation+0x12>
 29e:	81 70       	andi	r24, 0x01	; 1
 2a0:	99 27       	eor	r25, r25
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	82 27       	eor	r24, r18
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	08 95       	ret

000002aa <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 2aa:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_pin>
 2ae:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_pin+0x1>
 2b2:	80 81       	ld	r24, Z
}
 2b4:	08 95       	ret

000002b6 <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 2b6:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 2ba:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 2be:	80 83       	st	Z, r24
 2c0:	08 95       	ret

000002c2 <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 2ca:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtPushData>
 2ce:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtPushData+0x1>
 2d2:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 2d4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtPullData>
 2d8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtPullData+0x1>
 2dc:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 2de:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtIsBusOk>
 2e2:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtIsBusOk+0x1>
 2e6:	09 95       	icall
 2e8:	c8 2f       	mov	r28, r24
 2ea:	88 23       	and	r24, r24
 2ec:	39 f0       	breq	.+14     	; 0x2fc <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 2ee:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtReadData>
 2f2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtReadData+0x1>
 2f6:	09 95       	icall
 2f8:	f8 01       	movw	r30, r16
 2fa:	80 83       	st	Z, r24
    return true;
}
 2fc:	8c 2f       	mov	r24, r28
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <FtOutputByte_Implementation>:
 306:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_port>
 30a:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 30e:	80 83       	st	Z, r24
 310:	08 95       	ret

00000312 <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "DebugLed.h"
void FtInit(void)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 316:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Ft1248_ddr>
 31a:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Ft1248_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 31e:	40 81       	ld	r20, Z
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 01       	movw	r18, r24
 326:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Miso>
 32a:	02 c0       	rjmp	.+4      	; 0x330 <FtInit+0x1e>
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <FtInit+0x1a>
 334:	32 2f       	mov	r19, r18
 336:	30 95       	com	r19
 338:	34 23       	and	r19, r20
 33a:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 33c:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <Ft1248_port>
 340:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 344:	3c 91       	ld	r19, X
 346:	23 2b       	or	r18, r19
 348:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 34a:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <FtMiosio_ddr>
 34e:	d0 91 4d 01 	lds	r29, 0x014D	; 0x80014d <FtMiosio_ddr+0x1>
 352:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 354:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <FtMiosio_port>
 358:	d0 91 4b 01 	lds	r29, 0x014B	; 0x80014b <FtMiosio_port+0x1>
 35c:	2f ef       	ldi	r18, 0xFF	; 255
 35e:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 360:	4c 91       	ld	r20, X
 362:	9c 01       	movw	r18, r24
 364:	00 90 46 01 	lds	r0, 0x0146	; 0x800146 <Ft1248_Sck>
 368:	02 c0       	rjmp	.+4      	; 0x36e <FtInit+0x5c>
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <FtInit+0x58>
 372:	32 2f       	mov	r19, r18
 374:	30 95       	com	r19
 376:	34 23       	and	r19, r20
 378:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 37a:	30 81       	ld	r19, Z
 37c:	23 2b       	or	r18, r19
 37e:	20 83       	st	Z, r18
 380:	2c 91       	ld	r18, X
 382:	00 90 47 01 	lds	r0, 0x0147	; 0x800147 <Ft1248_Ss>
 386:	02 c0       	rjmp	.+4      	; 0x38c <FtInit+0x7a>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <FtInit+0x76>
 390:	92 2f       	mov	r25, r18
 392:	98 2b       	or	r25, r24
 394:	9c 93       	st	X, r25
 396:	90 81       	ld	r25, Z
 398:	89 2b       	or	r24, r25
 39a:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <CmdLedRed>:
/* =====[ Status ]===== */
bool UsbWriteStatusOk(void)
{
    uint8_t const StatusOk = 0;
    return UsbWrite(&StatusOk,1);
}
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	1f 92       	push	r1
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	0e 94 76 00 	call	0xec	; 0xec <DebugLedTurnRed>
 3b0:	19 82       	std	Y+1, r1	; 0x01
 3b2:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 3b6:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 3ba:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 3be:	09 95       	icall
 3c0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 3c4:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 3c8:	09 95       	icall
 3ca:	88 23       	and	r24, r24
 3cc:	81 f0       	breq	.+32     	; 0x3ee <CmdLedRed+0x4c>
 3ce:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 3d2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	09 95       	icall
 3dc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 3e0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 3e4:	09 95       	icall
 3e6:	0f 90       	pop	r0
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret
 3ee:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 3f2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 3f6:	09 95       	icall
 3f8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 3fc:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 400:	09 95       	icall
 402:	0f 90       	pop	r0
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <CmdLedGreen>:
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	1f 92       	push	r1
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <DebugLedTurnGreen>
 418:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <DebugLedTurnGreen+0x1>
 41c:	09 95       	icall
 41e:	19 82       	std	Y+1, r1	; 0x01
 420:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 424:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 428:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 42c:	09 95       	icall
 42e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 432:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 436:	09 95       	icall
 438:	88 23       	and	r24, r24
 43a:	81 f0       	breq	.+32     	; 0x45c <CmdLedGreen+0x52>
 43c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 440:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 444:	ce 01       	movw	r24, r28
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	09 95       	icall
 44a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 44e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 452:	09 95       	icall
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret
 45c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 460:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 464:	09 95       	icall
 466:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 46a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 46e:	09 95       	icall
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <UsbInit>:
 478:	0c 94 89 01 	jmp	0x312	; 0x312 <FtInit>

0000047c <LookupCmd>:
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	48 f4       	brcc	.+18     	; 0x492 <LookupCmd+0x16>
 480:	e8 2f       	mov	r30, r24
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	ee 0f       	add	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	e4 5d       	subi	r30, 0xD4	; 212
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	80 81       	ld	r24, Z
 48e:	91 81       	ldd	r25, Z+1	; 0x01
 490:	08 95       	ret
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 95       	ret

00000498 <CfgBytesAreValid>:
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	00 d0       	rcall	.+0      	; 0x49e <CfgBytesAreValid+0x6>
 49e:	00 d0       	rcall	.+0      	; 0x4a0 <CfgBytesAreValid+0x8>
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	fc 01       	movw	r30, r24
 4a6:	30 81       	ld	r19, Z
 4a8:	83 2f       	mov	r24, r19
 4aa:	8f 70       	andi	r24, 0x0F	; 15
 4ac:	21 81       	ldd	r18, Z+1	; 0x01
 4ae:	81 11       	cpse	r24, r1
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <CfgBytesAreValid+0x2c>
 4b2:	21 11       	cpse	r18, r1
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <CfgBytesAreValid+0x2c>
 4b6:	92 81       	ldd	r25, Z+2	; 0x02
 4b8:	91 11       	cpse	r25, r1
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <CfgBytesAreValid+0x2c>
 4bc:	83 81       	ldd	r24, Z+3	; 0x03
 4be:	88 7f       	andi	r24, 0xF8	; 248
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <CfgBytesAreValid+0x2c>
 4c2:	a2 c0       	rjmp	.+324    	; 0x608 <CfgBytesAreValid+0x170>
 4c4:	42 2f       	mov	r20, r18
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	40 95       	com	r20
 4ca:	50 95       	com	r21
 4cc:	ca 01       	movw	r24, r20
 4ce:	84 78       	andi	r24, 0x84	; 132
 4d0:	99 27       	eor	r25, r25
 4d2:	89 2b       	or	r24, r25
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <CfgBytesAreValid+0x40>
 4d6:	a9 c0       	rjmp	.+338    	; 0x62a <CfgBytesAreValid+0x192>
 4d8:	92 81       	ldd	r25, Z+2	; 0x02
 4da:	69 2f       	mov	r22, r25
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	60 95       	com	r22
 4e0:	70 95       	com	r23
 4e2:	61 72       	andi	r22, 0x21	; 33
 4e4:	77 27       	eor	r23, r23
 4e6:	67 2b       	or	r22, r23
 4e8:	09 f0       	breq	.+2      	; 0x4ec <CfgBytesAreValid+0x54>
 4ea:	9f c0       	rjmp	.+318    	; 0x62a <CfgBytesAreValid+0x192>
 4ec:	83 81       	ldd	r24, Z+3	; 0x03
 4ee:	83 fb       	bst	r24, 3
 4f0:	88 27       	eor	r24, r24
 4f2:	80 f9       	bld	r24, 0
 4f4:	62 2f       	mov	r22, r18
 4f6:	64 78       	andi	r22, 0x84	; 132
 4f8:	09 f0       	breq	.+2      	; 0x4fc <CfgBytesAreValid+0x64>
 4fa:	84 c0       	rjmp	.+264    	; 0x604 <CfgBytesAreValid+0x16c>
 4fc:	69 2f       	mov	r22, r25
 4fe:	61 72       	andi	r22, 0x21	; 33
 500:	09 f0       	breq	.+2      	; 0x504 <CfgBytesAreValid+0x6c>
 502:	80 c0       	rjmp	.+256    	; 0x604 <CfgBytesAreValid+0x16c>
 504:	63 81       	ldd	r22, Z+3	; 0x03
 506:	63 fd       	sbrc	r22, 3
 508:	7d c0       	rjmp	.+250    	; 0x604 <CfgBytesAreValid+0x16c>
 50a:	81 11       	cpse	r24, r1
 50c:	7d c0       	rjmp	.+250    	; 0x608 <CfgBytesAreValid+0x170>
 50e:	63 2f       	mov	r22, r19
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	db 01       	movw	r26, r22
 514:	a0 95       	com	r26
 516:	b0 95       	com	r27
 518:	30 ff       	sbrs	r19, 0
 51a:	8d c0       	rjmp	.+282    	; 0x636 <CfgBytesAreValid+0x19e>
 51c:	43 fd       	sbrc	r20, 3
 51e:	8b c0       	rjmp	.+278    	; 0x636 <CfgBytesAreValid+0x19e>
 520:	69 2f       	mov	r22, r25
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 95       	com	r22
 526:	70 95       	com	r23
 528:	62 74       	andi	r22, 0x42	; 66
 52a:	77 27       	eor	r23, r23
 52c:	67 2b       	or	r22, r23
 52e:	09 f0       	breq	.+2      	; 0x532 <CfgBytesAreValid+0x9a>
 530:	82 c0       	rjmp	.+260    	; 0x636 <CfgBytesAreValid+0x19e>
 532:	83 81       	ldd	r24, Z+3	; 0x03
 534:	82 95       	swap	r24
 536:	81 70       	andi	r24, 0x01	; 1
 538:	30 fd       	sbrc	r19, 0
 53a:	6e c0       	rjmp	.+220    	; 0x618 <CfgBytesAreValid+0x180>
 53c:	23 fd       	sbrc	r18, 3
 53e:	6c c0       	rjmp	.+216    	; 0x618 <CfgBytesAreValid+0x180>
 540:	69 2f       	mov	r22, r25
 542:	62 74       	andi	r22, 0x42	; 66
 544:	09 f0       	breq	.+2      	; 0x548 <CfgBytesAreValid+0xb0>
 546:	68 c0       	rjmp	.+208    	; 0x618 <CfgBytesAreValid+0x180>
 548:	63 81       	ldd	r22, Z+3	; 0x03
 54a:	64 fd       	sbrc	r22, 4
 54c:	65 c0       	rjmp	.+202    	; 0x618 <CfgBytesAreValid+0x180>
 54e:	81 11       	cpse	r24, r1
 550:	5b c0       	rjmp	.+182    	; 0x608 <CfgBytesAreValid+0x170>
 552:	a1 fd       	sbrc	r26, 1
 554:	74 c0       	rjmp	.+232    	; 0x63e <CfgBytesAreValid+0x1a6>
 556:	44 fd       	sbrc	r20, 4
 558:	72 c0       	rjmp	.+228    	; 0x63e <CfgBytesAreValid+0x1a6>
 55a:	69 2f       	mov	r22, r25
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	60 95       	com	r22
 560:	70 95       	com	r23
 562:	64 78       	andi	r22, 0x84	; 132
 564:	77 27       	eor	r23, r23
 566:	67 2b       	or	r22, r23
 568:	09 f0       	breq	.+2      	; 0x56c <CfgBytesAreValid+0xd4>
 56a:	69 c0       	rjmp	.+210    	; 0x63e <CfgBytesAreValid+0x1a6>
 56c:	83 81       	ldd	r24, Z+3	; 0x03
 56e:	85 fb       	bst	r24, 5
 570:	88 27       	eor	r24, r24
 572:	80 f9       	bld	r24, 0
 574:	31 fd       	sbrc	r19, 1
 576:	53 c0       	rjmp	.+166    	; 0x61e <CfgBytesAreValid+0x186>
 578:	24 fd       	sbrc	r18, 4
 57a:	51 c0       	rjmp	.+162    	; 0x61e <CfgBytesAreValid+0x186>
 57c:	69 2f       	mov	r22, r25
 57e:	64 78       	andi	r22, 0x84	; 132
 580:	09 f0       	breq	.+2      	; 0x584 <CfgBytesAreValid+0xec>
 582:	4d c0       	rjmp	.+154    	; 0x61e <CfgBytesAreValid+0x186>
 584:	63 81       	ldd	r22, Z+3	; 0x03
 586:	65 fd       	sbrc	r22, 5
 588:	4a c0       	rjmp	.+148    	; 0x61e <CfgBytesAreValid+0x186>
 58a:	81 11       	cpse	r24, r1
 58c:	3d c0       	rjmp	.+122    	; 0x608 <CfgBytesAreValid+0x170>
 58e:	a2 fd       	sbrc	r26, 2
 590:	5a c0       	rjmp	.+180    	; 0x646 <CfgBytesAreValid+0x1ae>
 592:	ba 01       	movw	r22, r20
 594:	61 72       	andi	r22, 0x21	; 33
 596:	77 27       	eor	r23, r23
 598:	67 2b       	or	r22, r23
 59a:	09 f0       	breq	.+2      	; 0x59e <CfgBytesAreValid+0x106>
 59c:	54 c0       	rjmp	.+168    	; 0x646 <CfgBytesAreValid+0x1ae>
 59e:	69 2f       	mov	r22, r25
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 95       	com	r22
 5a4:	70 95       	com	r23
 5a6:	63 fd       	sbrc	r22, 3
 5a8:	4e c0       	rjmp	.+156    	; 0x646 <CfgBytesAreValid+0x1ae>
 5aa:	83 81       	ldd	r24, Z+3	; 0x03
 5ac:	86 fb       	bst	r24, 6
 5ae:	88 27       	eor	r24, r24
 5b0:	80 f9       	bld	r24, 0
 5b2:	32 fd       	sbrc	r19, 2
 5b4:	37 c0       	rjmp	.+110    	; 0x624 <CfgBytesAreValid+0x18c>
 5b6:	62 2f       	mov	r22, r18
 5b8:	61 72       	andi	r22, 0x21	; 33
 5ba:	a1 f5       	brne	.+104    	; 0x624 <CfgBytesAreValid+0x18c>
 5bc:	93 fd       	sbrc	r25, 3
 5be:	32 c0       	rjmp	.+100    	; 0x624 <CfgBytesAreValid+0x18c>
 5c0:	63 81       	ldd	r22, Z+3	; 0x03
 5c2:	66 fd       	sbrc	r22, 6
 5c4:	2f c0       	rjmp	.+94     	; 0x624 <CfgBytesAreValid+0x18c>
 5c6:	81 11       	cpse	r24, r1
 5c8:	1f c0       	rjmp	.+62     	; 0x608 <CfgBytesAreValid+0x170>
 5ca:	a3 fd       	sbrc	r26, 3
 5cc:	40 c0       	rjmp	.+128    	; 0x64e <CfgBytesAreValid+0x1b6>
 5ce:	42 74       	andi	r20, 0x42	; 66
 5d0:	55 27       	eor	r21, r21
 5d2:	45 2b       	or	r20, r21
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <CfgBytesAreValid+0x140>
 5d6:	3b c0       	rjmp	.+118    	; 0x64e <CfgBytesAreValid+0x1b6>
 5d8:	49 2f       	mov	r20, r25
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	40 95       	com	r20
 5de:	50 95       	com	r21
 5e0:	44 fd       	sbrc	r20, 4
 5e2:	35 c0       	rjmp	.+106    	; 0x64e <CfgBytesAreValid+0x1b6>
 5e4:	83 81       	ldd	r24, Z+3	; 0x03
 5e6:	88 1f       	adc	r24, r24
 5e8:	88 27       	eor	r24, r24
 5ea:	88 1f       	adc	r24, r24
 5ec:	33 fd       	sbrc	r19, 3
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <CfgBytesAreValid+0x172>
 5f0:	22 74       	andi	r18, 0x42	; 66
 5f2:	59 f4       	brne	.+22     	; 0x60a <CfgBytesAreValid+0x172>
 5f4:	94 fd       	sbrc	r25, 4
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <CfgBytesAreValid+0x172>
 5f8:	93 81       	ldd	r25, Z+3	; 0x03
 5fa:	97 fd       	sbrc	r25, 7
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <CfgBytesAreValid+0x172>
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	89 27       	eor	r24, r25
 602:	03 c0       	rjmp	.+6      	; 0x60a <CfgBytesAreValid+0x172>
 604:	81 11       	cpse	r24, r1
 606:	83 cf       	rjmp	.-250    	; 0x50e <CfgBytesAreValid+0x76>
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret
 618:	81 11       	cpse	r24, r1
 61a:	9b cf       	rjmp	.-202    	; 0x552 <CfgBytesAreValid+0xba>
 61c:	f5 cf       	rjmp	.-22     	; 0x608 <CfgBytesAreValid+0x170>
 61e:	81 11       	cpse	r24, r1
 620:	b6 cf       	rjmp	.-148    	; 0x58e <CfgBytesAreValid+0xf6>
 622:	f2 cf       	rjmp	.-28     	; 0x608 <CfgBytesAreValid+0x170>
 624:	81 11       	cpse	r24, r1
 626:	d1 cf       	rjmp	.-94     	; 0x5ca <CfgBytesAreValid+0x132>
 628:	ef cf       	rjmp	.-34     	; 0x608 <CfgBytesAreValid+0x170>
 62a:	82 2f       	mov	r24, r18
 62c:	84 78       	andi	r24, 0x84	; 132
 62e:	61 f7       	brne	.-40     	; 0x608 <CfgBytesAreValid+0x170>
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	92 81       	ldd	r25, Z+2	; 0x02
 634:	63 cf       	rjmp	.-314    	; 0x4fc <CfgBytesAreValid+0x64>
 636:	30 fd       	sbrc	r19, 0
 638:	e7 cf       	rjmp	.-50     	; 0x608 <CfgBytesAreValid+0x170>
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	7f cf       	rjmp	.-258    	; 0x53c <CfgBytesAreValid+0xa4>
 63e:	31 fd       	sbrc	r19, 1
 640:	e3 cf       	rjmp	.-58     	; 0x608 <CfgBytesAreValid+0x170>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	99 cf       	rjmp	.-206    	; 0x578 <CfgBytesAreValid+0xe0>
 646:	32 fd       	sbrc	r19, 2
 648:	df cf       	rjmp	.-66     	; 0x608 <CfgBytesAreValid+0x170>
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	b4 cf       	rjmp	.-152    	; 0x5b6 <CfgBytesAreValid+0x11e>
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	cd cf       	rjmp	.-102    	; 0x5ec <CfgBytesAreValid+0x154>

00000652 <CmdCfgLis>:
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	00 d0       	rcall	.+0      	; 0x660 <CmdCfgLis+0xe>
 660:	00 d0       	rcall	.+0      	; 0x662 <CmdCfgLis+0x10>
 662:	00 d0       	rcall	.+0      	; 0x664 <CmdCfgLis+0x12>
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 66c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 670:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 674:	09 95       	icall
 676:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 67a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 67e:	09 95       	icall
 680:	88 23       	and	r24, r24
 682:	09 f4       	brne	.+2      	; 0x686 <CmdCfgLis+0x34>
 684:	c2 c0       	rjmp	.+388    	; 0x80a <CmdCfgLis+0x1b8>
 686:	00 e0       	ldi	r16, 0x00	; 0
 688:	10 e0       	ldi	r17, 0x00	; 0
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	7c 01       	movw	r14, r24
 690:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtRead>
 694:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtRead+0x1>
 698:	c7 01       	movw	r24, r14
 69a:	80 0f       	add	r24, r16
 69c:	91 1f       	adc	r25, r17
 69e:	09 95       	icall
 6a0:	81 11       	cpse	r24, r1
 6a2:	7e c0       	rjmp	.+252    	; 0x7a0 <CmdCfgLis+0x14e>
 6a4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 6a8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 6ac:	09 95       	icall
 6ae:	8d ef       	ldi	r24, 0xFD	; 253
 6b0:	8d 83       	std	Y+5, r24	; 0x05
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	8e 83       	std	Y+6, r24	; 0x06
 6b6:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 6ba:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 6be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 6c2:	09 95       	icall
 6c4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 6c8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 6cc:	09 95       	icall
 6ce:	88 23       	and	r24, r24
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <CmdCfgLis+0x82>
 6d2:	b4 c0       	rjmp	.+360    	; 0x83c <CmdCfgLis+0x1ea>
 6d4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 6d8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 6dc:	ce 01       	movw	r24, r28
 6de:	05 96       	adiw	r24, 0x05	; 5
 6e0:	09 95       	icall
 6e2:	88 23       	and	r24, r24
 6e4:	39 f0       	breq	.+14     	; 0x6f4 <CmdCfgLis+0xa2>
 6e6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 6ea:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 6ee:	ce 01       	movw	r24, r28
 6f0:	06 96       	adiw	r24, 0x06	; 6
 6f2:	09 95       	icall
 6f4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 6f8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 6fc:	09 95       	icall
 6fe:	c7 01       	movw	r24, r14
 700:	0e 94 4c 02 	call	0x498	; 0x498 <CfgBytesAreValid>
 704:	88 23       	and	r24, r24
 706:	09 f4       	brne	.+2      	; 0x70a <CmdCfgLis+0xb8>
 708:	5d c0       	rjmp	.+186    	; 0x7c4 <CmdCfgLis+0x172>
 70a:	1d 82       	std	Y+5, r1	; 0x05
 70c:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <FtCmd_Write>
 710:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 714:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 718:	81 2f       	mov	r24, r17
 71a:	09 95       	icall
 71c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 720:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 724:	09 95       	icall
 726:	88 23       	and	r24, r24
 728:	09 f4       	brne	.+2      	; 0x72c <CmdCfgLis+0xda>
 72a:	7d c0       	rjmp	.+250    	; 0x826 <CmdCfgLis+0x1d4>
 72c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 730:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 734:	ce 01       	movw	r24, r28
 736:	05 96       	adiw	r24, 0x05	; 5
 738:	09 95       	icall
 73a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 73e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 742:	09 95       	icall
 744:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 748:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 74c:	81 2f       	mov	r24, r17
 74e:	09 95       	icall
 750:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 754:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 758:	09 95       	icall
 75a:	88 23       	and	r24, r24
 75c:	41 f1       	breq	.+80     	; 0x7ae <CmdCfgLis+0x15c>
 75e:	c7 01       	movw	r24, r14
 760:	7e 01       	movw	r14, r28
 762:	25 e0       	ldi	r18, 0x05	; 5
 764:	e2 0e       	add	r14, r18
 766:	f1 1c       	adc	r15, r1
 768:	8c 01       	movw	r16, r24
 76a:	0f 5f       	subi	r16, 0xFF	; 255
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 772:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 776:	09 95       	icall
 778:	81 11       	cpse	r24, r1
 77a:	1f c0       	rjmp	.+62     	; 0x7ba <CmdCfgLis+0x168>
 77c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 780:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 784:	09 95       	icall
 786:	26 96       	adiw	r28, 0x06	; 6
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	0f be       	out	0x3f, r0	; 63
 790:	cd bf       	out	0x3d, r28	; 61
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	1f 91       	pop	r17
 798:	0f 91       	pop	r16
 79a:	ff 90       	pop	r15
 79c:	ef 90       	pop	r14
 79e:	08 95       	ret
 7a0:	0f 5f       	subi	r16, 0xFF	; 255
 7a2:	1f 4f       	sbci	r17, 0xFF	; 255
 7a4:	04 30       	cpi	r16, 0x04	; 4
 7a6:	11 05       	cpc	r17, r1
 7a8:	09 f0       	breq	.+2      	; 0x7ac <CmdCfgLis+0x15a>
 7aa:	72 cf       	rjmp	.-284    	; 0x690 <CmdCfgLis+0x3e>
 7ac:	a3 cf       	rjmp	.-186    	; 0x6f4 <CmdCfgLis+0xa2>
 7ae:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 7b2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 7b6:	09 95       	icall
 7b8:	e1 cf       	rjmp	.-62     	; 0x77c <CmdCfgLis+0x12a>
 7ba:	c8 01       	movw	r24, r16
 7bc:	0e 15       	cp	r16, r14
 7be:	1f 05       	cpc	r17, r15
 7c0:	99 f6       	brne	.-90     	; 0x768 <CmdCfgLis+0x116>
 7c2:	dc cf       	rjmp	.-72     	; 0x77c <CmdCfgLis+0x12a>
 7c4:	8e ef       	ldi	r24, 0xFE	; 254
 7c6:	8d 83       	std	Y+5, r24	; 0x05
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	8e 83       	std	Y+6, r24	; 0x06
 7cc:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 7d0:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 7d4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 7d8:	09 95       	icall
 7da:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 7de:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 7e2:	09 95       	icall
 7e4:	88 23       	and	r24, r24
 7e6:	19 f3       	breq	.-58     	; 0x7ae <CmdCfgLis+0x15c>
 7e8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 7ec:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 7f0:	ce 01       	movw	r24, r28
 7f2:	05 96       	adiw	r24, 0x05	; 5
 7f4:	09 95       	icall
 7f6:	88 23       	and	r24, r24
 7f8:	09 f2       	breq	.-126    	; 0x77c <CmdCfgLis+0x12a>
 7fa:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 7fe:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 802:	ce 01       	movw	r24, r28
 804:	06 96       	adiw	r24, 0x06	; 6
 806:	09 95       	icall
 808:	b9 cf       	rjmp	.-142    	; 0x77c <CmdCfgLis+0x12a>
 80a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 80e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 812:	09 95       	icall
 814:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 818:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 81c:	09 95       	icall
 81e:	ce 01       	movw	r24, r28
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	7c 01       	movw	r14, r24
 824:	44 cf       	rjmp	.-376    	; 0x6ae <CmdCfgLis+0x5c>
 826:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 82a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 82e:	09 95       	icall
 830:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 834:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 838:	09 95       	icall
 83a:	84 cf       	rjmp	.-248    	; 0x744 <CmdCfgLis+0xf2>
 83c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 840:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 844:	09 95       	icall
 846:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 84a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 84e:	09 95       	icall
 850:	56 cf       	rjmp	.-340    	; 0x6fe <CmdCfgLis+0xac>

00000852 <UsbReadOneByte>:
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	ec 01       	movw	r28, r24
 858:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 85c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 860:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 864:	09 95       	icall
 866:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 86a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 86e:	09 95       	icall
 870:	88 23       	and	r24, r24
 872:	79 f0       	breq	.+30     	; 0x892 <UsbReadOneByte+0x40>
 874:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <FtRead>
 878:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <FtRead+0x1>
 87c:	ce 01       	movw	r24, r28
 87e:	09 95       	icall
 880:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 884:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 888:	09 95       	icall
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	08 95       	ret
 892:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 896:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 89a:	09 95       	icall
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	08 95       	ret

000008a4 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
 8a4:	1f 93       	push	r17
 8a6:	cf 93       	push	r28
 8a8:	df 93       	push	r29
 8aa:	00 d0       	rcall	.+0      	; 0x8ac <UsbWriteStatusInvalid+0x8>
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
 8b0:	9f ef       	ldi	r25, 0xFF	; 255
 8b2:	99 83       	std	Y+1, r25	; 0x01
 8b4:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 8b6:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <FtSendCommand>
 8ba:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <FtSendCommand+0x1>
 8be:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 8c2:	09 95       	icall
    if (!FtBusTurnaround())
 8c4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <FtBusTurnaround>
 8c8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <FtBusTurnaround+0x1>
 8cc:	09 95       	icall
 8ce:	88 23       	and	r24, r24
 8d0:	19 f1       	breq	.+70     	; 0x918 <__stack+0x19>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 8d2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 8d6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 8da:	ce 01       	movw	r24, r28
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 8e0:	81 11       	cpse	r24, r1
 8e2:	0d c0       	rjmp	.+26     	; 0x8fe <UsbWriteStatusInvalid+0x5a>
 8e4:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 8e6:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 8ea:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 8ee:	09 95       	icall
 8f0:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 8fe:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtWrite>
 902:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtWrite+0x1>
 906:	ce 01       	movw	r24, r28
 908:	02 96       	adiw	r24, 0x02	; 2
 90a:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 90c:	88 23       	and	r24, r24
 90e:	11 f0       	breq	.+4      	; 0x914 <__stack+0x15>
 910:	12 e0       	ldi	r17, 0x02	; 2
 912:	e9 cf       	rjmp	.-46     	; 0x8e6 <UsbWriteStatusInvalid+0x42>
 914:	11 e0       	ldi	r17, 0x01	; 1
 916:	e7 cf       	rjmp	.-50     	; 0x8e6 <UsbWriteStatusInvalid+0x42>
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        DebugLedTurnRedToShowError();
 918:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <DebugLedTurnRedToShowError>
 91c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <DebugLedTurnRedToShowError+0x1>
 920:	09 95       	icall
        FtDeactivateInterface();
 922:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtDeactivateInterface>
 926:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtDeactivateInterface+0x1>
 92a:	09 95       	icall
 92c:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(jump_index invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 255, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 92e:	0f 90       	pop	r0
 930:	0f 90       	pop	r0
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	1f 91       	pop	r17
 938:	08 95       	ret

0000093a <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 93a:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ReadSpiStatusRegister>
 93e:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ReadSpiStatusRegister+0x1>
 942:	09 95       	icall
 944:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ReadSpiDataRegister>
 948:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ReadSpiDataRegister+0x1>
 94c:	09 94       	ijmp

0000094e <ReadSpiStatusRegister_Implementation>:
 94e:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spsr>
 952:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spsr+0x1>
 956:	80 81       	ld	r24, Z
 958:	08 95       	ret

0000095a <EnableSpi_Implementation>:
 95a:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spcr>
 95e:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spcr+0x1>
 962:	20 81       	ld	r18, Z
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Spi_Enable>
 96c:	02 c0       	rjmp	.+4      	; 0x972 <EnableSpi_Implementation+0x18>
 96e:	88 0f       	add	r24, r24
 970:	99 1f       	adc	r25, r25
 972:	0a 94       	dec	r0
 974:	e2 f7       	brpl	.-8      	; 0x96e <EnableSpi_Implementation+0x14>
 976:	82 2b       	or	r24, r18
 978:	80 83       	st	Z, r24
 97a:	08 95       	ret

0000097c <SpiMasterCloseSpi_Implementation>:
 97c:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_port>
 980:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_port+0x1>
 984:	20 81       	ld	r18, Z
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <Spi_Ss>
 98e:	02 c0       	rjmp	.+4      	; 0x994 <SpiMasterCloseSpi_Implementation+0x18>
 990:	88 0f       	add	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	0a 94       	dec	r0
 996:	e2 f7       	brpl	.-8      	; 0x990 <SpiMasterCloseSpi_Implementation+0x14>
 998:	82 2b       	or	r24, r18
 99a:	80 83       	st	Z, r24
 99c:	08 95       	ret

0000099e <ReadSpiDataRegister_Implementation>:
 99e:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spdr>
 9a2:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spdr+0x1>
 9a6:	80 81       	ld	r24, Z
 9a8:	08 95       	ret

000009aa <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 9aa:	0e 94 be 04 	call	0x97c	; 0x97c <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 9ae:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_ddr>
 9b2:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 9b6:	40 81       	ld	r20, Z
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	9c 01       	movw	r18, r24
 9be:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_Miso>
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <SpiMasterInit+0x1e>
 9c4:	22 0f       	add	r18, r18
 9c6:	33 1f       	adc	r19, r19
 9c8:	0a 94       	dec	r0
 9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <SpiMasterInit+0x1a>
 9cc:	32 2f       	mov	r19, r18
 9ce:	30 95       	com	r19
 9d0:	34 23       	and	r19, r20
 9d2:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 9d4:	a0 91 41 01 	lds	r26, 0x0141	; 0x800141 <Spi_port>
 9d8:	b0 91 42 01 	lds	r27, 0x0142	; 0x800142 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 9dc:	3c 91       	ld	r19, X
 9de:	23 2b       	or	r18, r19
 9e0:	2c 93       	st	X, r18
 9e2:	40 81       	ld	r20, Z
 9e4:	9c 01       	movw	r18, r24
 9e6:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <Spi_Ss>
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <SpiMasterInit+0x46>
 9ec:	22 0f       	add	r18, r18
 9ee:	33 1f       	adc	r19, r19
 9f0:	0a 94       	dec	r0
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <SpiMasterInit+0x42>
 9f4:	24 2b       	or	r18, r20
 9f6:	20 83       	st	Z, r18
 9f8:	40 81       	ld	r20, Z
 9fa:	9c 01       	movw	r18, r24
 9fc:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Spi_Mosi>
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <SpiMasterInit+0x5c>
 a02:	22 0f       	add	r18, r18
 a04:	33 1f       	adc	r19, r19
 a06:	0a 94       	dec	r0
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <SpiMasterInit+0x58>
 a0a:	24 2b       	or	r18, r20
 a0c:	20 83       	st	Z, r18
 a0e:	40 81       	ld	r20, Z
 a10:	9c 01       	movw	r18, r24
 a12:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_Sck>
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <SpiMasterInit+0x72>
 a18:	22 0f       	add	r18, r18
 a1a:	33 1f       	adc	r19, r19
 a1c:	0a 94       	dec	r0
 a1e:	e2 f7       	brpl	.-8      	; 0xa18 <SpiMasterInit+0x6e>
 a20:	24 2b       	or	r18, r20
 a22:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 a24:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spcr>
 a28:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spcr+0x1>
 a2c:	40 81       	ld	r20, Z
 a2e:	9c 01       	movw	r18, r24
 a30:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_MasterSlaveSelect>
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <SpiMasterInit+0x90>
 a36:	22 0f       	add	r18, r18
 a38:	33 1f       	adc	r19, r19
 a3a:	0a 94       	dec	r0
 a3c:	e2 f7       	brpl	.-8      	; 0xa36 <SpiMasterInit+0x8c>
 a3e:	24 2b       	or	r18, r20
 a40:	20 83       	st	Z, r18
 a42:	40 81       	ld	r20, Z
 a44:	9c 01       	movw	r18, r24
 a46:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Spi_ClockRateBit0>
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <SpiMasterInit+0xa6>
 a4c:	22 0f       	add	r18, r18
 a4e:	33 1f       	adc	r19, r19
 a50:	0a 94       	dec	r0
 a52:	e2 f7       	brpl	.-8      	; 0xa4c <SpiMasterInit+0xa2>
 a54:	24 2b       	or	r18, r20
 a56:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 a58:	30 81       	ld	r19, Z
 a5a:	ac 01       	movw	r20, r24
 a5c:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_ClockRateBit1>
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <SpiMasterInit+0xbc>
 a62:	44 0f       	add	r20, r20
 a64:	55 1f       	adc	r21, r21
 a66:	0a 94       	dec	r0
 a68:	e2 f7       	brpl	.-8      	; 0xa62 <SpiMasterInit+0xb8>
 a6a:	24 2f       	mov	r18, r20
 a6c:	20 95       	com	r18
 a6e:	23 23       	and	r18, r19
 a70:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 a72:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spsr>
 a76:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 a7a:	20 81       	ld	r18, Z
 a7c:	00 90 32 01 	lds	r0, 0x0132	; 0x800132 <Spi_DoubleClockRate>
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <SpiMasterInit+0xdc>
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	0a 94       	dec	r0
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <SpiMasterInit+0xd8>
 a8a:	82 2b       	or	r24, r18
 a8c:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 a8e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <EnableSpi>
 a92:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <EnableSpi+0x1>
 a96:	09 95       	icall
    ClearPendingSpiInterrupt();
 a98:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ClearPendingSpiInterrupt>
 a9c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ClearPendingSpiInterrupt+0x1>
 aa0:	09 94       	ijmp

00000aa2 <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 aa2:	cf 93       	push	r28
 aa4:	df 93       	push	r29
 aa6:	1f 92       	push	r1
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
uint16_t nbytes_in_frame;

/* =====[ Helper function for main setup ]===== */
void SetupDebugLed(void)
{
    DebugLedInit(
 aac:	23 e0       	ldi	r18, 0x03	; 3
 aae:	46 e2       	ldi	r20, 0x26	; 38
 ab0:	50 e0       	ldi	r21, 0x00	; 0
 ab2:	68 e2       	ldi	r22, 0x28	; 40
 ab4:	70 e0       	ldi	r23, 0x00	; 0
 ab6:	87 e2       	ldi	r24, 0x27	; 39
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 87 00 	call	0x10e	; 0x10e <DebugLedInit>

int main()
{
    /* =====[ Setup ]===== */
    SetupDebugLed();
    SpiMasterInit();
 abe:	0e 94 d5 04 	call	0x9aa	; 0x9aa <SpiMasterInit>
    UsbInit();
 ac2:	0e 94 3c 02 	call	0x478	; 0x478 <UsbInit>
 ac6:	3d 9a       	sbi	0x07, 5	; 7
 ac8:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	96 e0       	ldi	r25, 0x06	; 6
 ace:	90 93 7c 07 	sts	0x077C, r25	; 0x80077c <nbytes_in_frame+0x1>
 ad2:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    jump_index cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 ad6:	ce 01       	movw	r24, r28
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	0e 94 29 04 	call	0x852	; 0x852 <UsbReadOneByte>
 ade:	88 23       	and	r24, r24
 ae0:	d1 f3       	breq	.-12     	; 0xad6 <main+0x34>
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
 ae2:	89 81       	ldd	r24, Y+1	; 0x01
 ae4:	0e 94 3e 02 	call	0x47c	; 0x47c <LookupCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 ae8:	00 97       	sbiw	r24, 0x00	; 0
 aea:	19 f0       	breq	.+6      	; 0xaf2 <main+0x50>
        /* Do command if it is valid. */
        else CmdFn();
 aec:	fc 01       	movw	r30, r24
 aee:	09 95       	icall
 af0:	f2 cf       	rjmp	.-28     	; 0xad6 <main+0x34>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        UsbCmd* CmdFn = LookupCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 af2:	89 81       	ldd	r24, Y+1	; 0x01
 af4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <UsbWriteStatusInvalid>
 af8:	ee cf       	rjmp	.-36     	; 0xad6 <main+0x34>

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
