
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000bd8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  0080015e  0080015e  00000cca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a45  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001425  00000000  00000000  00006ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002284  00000000  00000000  00007f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a4  00000000  00000000  0000a194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015fd  00000000  00000000  0000ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039be  00000000  00000000  0000c135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005e8  00000000  00000000  0000faf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <main>
  9e:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Ft1248_port>
 14a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Ft1248_port>
 16e:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Ft1248_port>
 190:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Ft1248_port>
 1b2:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <FtMiosio_ddr>
 1d6:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <FtMiosio_ddr>
 1e4:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Ft1248_pin>
 1f0:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <FtMiosio_pin>
 216:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <FtMiosio_port>
 222:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <FtMiosio_port>
 272:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Ft1248_ddr>
 282:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <Ft1248_port>
 2a8:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <FtMiosio_ddr>
 2b6:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 50 01 	lds	r28, 0x0150	; 0x800150 <FtMiosio_port>
 2c0:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <UsbInit>:
        num_bytes_read++;
    }

    FtDeactivateInterface();
    return num_bytes_read;
}
 30a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000030e <UsbReadOneByte>:
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	ec 01       	movw	r28, r24
 314:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 318:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 31c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 320:	09 95       	icall
 322:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 326:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 32a:	09 95       	icall
 32c:	88 23       	and	r24, r24
 32e:	79 f0       	breq	.+30     	; 0x34e <UsbReadOneByte+0x40>
 330:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 334:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 338:	ce 01       	movw	r24, r28
 33a:	09 95       	icall
 33c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 340:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 344:	09 95       	icall
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret
 34e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 352:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 356:	09 95       	icall
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <UsbReadN>:
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	8c 01       	movw	r16, r24
 36e:	7b 01       	movw	r14, r22
 370:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 374:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 378:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 37c:	09 95       	icall
 37e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 382:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 386:	09 95       	icall
 388:	88 23       	and	r24, r24
 38a:	f1 f0       	breq	.+60     	; 0x3c8 <UsbReadN+0x68>
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 394:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 398:	c8 01       	movw	r24, r16
 39a:	8c 0f       	add	r24, r28
 39c:	9d 1f       	adc	r25, r29
 39e:	09 95       	icall
 3a0:	81 11       	cpse	r24, r1
 3a2:	0d c0       	rjmp	.+26     	; 0x3be <UsbReadN+0x5e>
 3a4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3a8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3ac:	09 95       	icall
 3ae:	ce 01       	movw	r24, r28
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	08 95       	ret
 3be:	21 96       	adiw	r28, 0x01	; 1
 3c0:	ce 15       	cp	r28, r14
 3c2:	df 05       	cpc	r29, r15
 3c4:	28 f3       	brcs	.-54     	; 0x390 <UsbReadN+0x30>
 3c6:	ee cf       	rjmp	.-36     	; 0x3a4 <UsbReadN+0x44>
 3c8:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <BiColorLed_port>
 3cc:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <BiColorLed_port+0x1>
 3d0:	20 81       	ld	r18, Z
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <status_led>
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <UsbReadN+0x80>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <UsbReadN+0x7c>
 3e4:	82 2b       	or	r24, r18
 3e6:	80 83       	st	Z, r24
 3e8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3ec:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3f0:	09 95       	icall
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
 3f6:	ce 01       	movw	r24, r28
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	08 95       	ret

00000406 <UsbWrite>:

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	8c 01       	movw	r16, r24
 414:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 416:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 41a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 41e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 422:	09 95       	icall
    if (!FtBusTurnaround())
 424:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 428:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 42c:	09 95       	icall
 42e:	88 23       	and	r24, r24
 430:	f1 f0       	breq	.+60     	; 0x46e <UsbWrite+0x68>
 432:	c0 e0       	ldi	r28, 0x00	; 0
 434:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 436:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 43a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 43e:	c8 01       	movw	r24, r16
 440:	8c 0f       	add	r24, r28
 442:	9d 1f       	adc	r25, r29
 444:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 446:	81 11       	cpse	r24, r1
 448:	0d c0       	rjmp	.+26     	; 0x464 <UsbWrite+0x5e>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 44a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 44e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 452:	09 95       	icall
    return num_bytes_sent;
}
 454:	ce 01       	movw	r24, r28
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 464:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 466:	ce 15       	cp	r28, r14
 468:	df 05       	cpc	r29, r15
 46a:	28 f3       	brcs	.-54     	; 0x436 <UsbWrite+0x30>
 46c:	ee cf       	rjmp	.-36     	; 0x44a <UsbWrite+0x44>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 46e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 472:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 476:	09 95       	icall
        return num_bytes_sent;
 478:	c0 e0       	ldi	r28, 0x00	; 0
 47a:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 47c:	ce 01       	movw	r24, r28
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	ef 90       	pop	r14
 48a:	08 95       	ret

0000048c <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 48c:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiStatusRegister>
 490:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiStatusRegister+0x1>
 494:	09 95       	icall
 496:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ReadSpiDataRegister>
 49a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ReadSpiDataRegister+0x1>
 49e:	09 94       	ijmp

000004a0 <ReadSpiStatusRegister_Implementation>:
 4a0:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_spsr>
 4a4:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_spsr+0x1>
 4a8:	80 81       	ld	r24, Z
 4aa:	08 95       	ret

000004ac <EnableSpi_Implementation>:
 4ac:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spcr>
 4b0:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spcr+0x1>
 4b4:	20 81       	ld	r18, Z
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_Enable>
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <EnableSpi_Implementation+0x18>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	0a 94       	dec	r0
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <EnableSpi_Implementation+0x14>
 4c8:	82 2b       	or	r24, r18
 4ca:	80 83       	st	Z, r24
 4cc:	08 95       	ret

000004ce <SpiMasterCloseSpi_Implementation>:
 4ce:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <Spi_port>
 4d2:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <Spi_port+0x1>
 4d6:	20 81       	ld	r18, Z
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <Spi_Ss>
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <SpiMasterCloseSpi_Implementation+0x18>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <SpiMasterCloseSpi_Implementation+0x14>
 4ea:	82 2b       	or	r24, r18
 4ec:	80 83       	st	Z, r24
 4ee:	08 95       	ret

000004f0 <ReadSpiDataRegister_Implementation>:
 4f0:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_spdr>
 4f4:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_spdr+0x1>
 4f8:	80 81       	ld	r24, Z
 4fa:	08 95       	ret

000004fc <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 4fc:	0e 94 67 02 	call	0x4ce	; 0x4ce <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 500:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <Spi_ddr>
 504:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 508:	40 81       	ld	r20, Z
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	9c 01       	movw	r18, r24
 510:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_Miso>
 514:	02 c0       	rjmp	.+4      	; 0x51a <SpiMasterInit+0x1e>
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <SpiMasterInit+0x1a>
 51e:	32 2f       	mov	r19, r18
 520:	30 95       	com	r19
 522:	34 23       	and	r19, r20
 524:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 526:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <Spi_port>
 52a:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 52e:	3c 91       	ld	r19, X
 530:	23 2b       	or	r18, r19
 532:	2c 93       	st	X, r18
 534:	40 81       	ld	r20, Z
 536:	9c 01       	movw	r18, r24
 538:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <Spi_Ss>
 53c:	02 c0       	rjmp	.+4      	; 0x542 <SpiMasterInit+0x46>
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <SpiMasterInit+0x42>
 546:	24 2b       	or	r18, r20
 548:	20 83       	st	Z, r18
 54a:	40 81       	ld	r20, Z
 54c:	9c 01       	movw	r18, r24
 54e:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <Spi_Mosi>
 552:	02 c0       	rjmp	.+4      	; 0x558 <SpiMasterInit+0x5c>
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <SpiMasterInit+0x58>
 55c:	24 2b       	or	r18, r20
 55e:	20 83       	st	Z, r18
 560:	40 81       	ld	r20, Z
 562:	9c 01       	movw	r18, r24
 564:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <Spi_Sck>
 568:	02 c0       	rjmp	.+4      	; 0x56e <SpiMasterInit+0x72>
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <SpiMasterInit+0x6e>
 572:	24 2b       	or	r18, r20
 574:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 576:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Spi_spcr>
 57a:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <Spi_spcr+0x1>
 57e:	40 81       	ld	r20, Z
 580:	9c 01       	movw	r18, r24
 582:	00 90 3a 01 	lds	r0, 0x013A	; 0x80013a <Spi_MasterSlaveSelect>
 586:	02 c0       	rjmp	.+4      	; 0x58c <SpiMasterInit+0x90>
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <SpiMasterInit+0x8c>
 590:	24 2b       	or	r18, r20
 592:	20 83       	st	Z, r18
 594:	40 81       	ld	r20, Z
 596:	9c 01       	movw	r18, r24
 598:	00 90 39 01 	lds	r0, 0x0139	; 0x800139 <Spi_ClockRateBit0>
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <SpiMasterInit+0xa6>
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	0a 94       	dec	r0
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <SpiMasterInit+0xa2>
 5a6:	24 2b       	or	r18, r20
 5a8:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 5aa:	30 81       	ld	r19, Z
 5ac:	ac 01       	movw	r20, r24
 5ae:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_ClockRateBit1>
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <SpiMasterInit+0xbc>
 5b4:	44 0f       	add	r20, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <SpiMasterInit+0xb8>
 5bc:	24 2f       	mov	r18, r20
 5be:	20 95       	com	r18
 5c0:	23 23       	and	r18, r19
 5c2:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5c4:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_spsr>
 5c8:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5cc:	20 81       	ld	r18, Z
 5ce:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_DoubleClockRate>
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <SpiMasterInit+0xdc>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <SpiMasterInit+0xd8>
 5dc:	82 2b       	or	r24, r18
 5de:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5e0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EnableSpi>
 5e4:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EnableSpi+0x1>
 5e8:	09 95       	icall
    ClearPendingSpiInterrupt();
 5ea:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ClearPendingSpiInterrupt>
 5ee:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ClearPendingSpiInterrupt+0x1>
 5f2:	09 94       	ijmp

000005f4 <BridgeLedRed>:

uint8_t UsbWriteStatusOk(bridge_cmd_key   cmd_done_by_bridge)
{
    uint8_t const StatusOk[] = { 0x00, cmd_done_by_bridge};
    return UsbWrite(StatusOk,2);
}
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <BridgeLedRed+0x6>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <BiColorLed_port>
 602:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <BiColorLed_port+0x1>
 606:	20 81       	ld	r18, Z
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <status_led>
 610:	02 c0       	rjmp	.+4      	; 0x616 <BridgeLedRed+0x22>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <BridgeLedRed+0x1e>
 61a:	82 2b       	or	r24, r18
 61c:	80 83       	st	Z, r24
 61e:	19 82       	std	Y+1, r1	; 0x01
 620:	1a 82       	std	Y+2, r1	; 0x02
 622:	62 e0       	ldi	r22, 0x02	; 2
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <BridgeLedGreen>:
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	00 d0       	rcall	.+0      	; 0x63e <BridgeLedGreen+0x6>
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <BiColorLed_port>
 646:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <BiColorLed_port+0x1>
 64a:	20 81       	ld	r18, Z
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <status_led>
 654:	02 c0       	rjmp	.+4      	; 0x65a <BridgeLedGreen+0x22>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <BridgeLedGreen+0x1e>
 65e:	80 95       	com	r24
 660:	82 23       	and	r24, r18
 662:	80 83       	st	Z, r24
 664:	19 82       	std	Y+1, r1	; 0x01
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	8a 83       	std	Y+2, r24	; 0x02
 66a:	62 e0       	ldi	r22, 0x02	; 2
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <SendSensorCommand>:
 680:	2f 92       	push	r2
 682:	3f 92       	push	r3
 684:	4f 92       	push	r4
 686:	5f 92       	push	r5
 688:	6f 92       	push	r6
 68a:	7f 92       	push	r7
 68c:	8f 92       	push	r8
 68e:	9f 92       	push	r9
 690:	af 92       	push	r10
 692:	bf 92       	push	r11
 694:	cf 92       	push	r12
 696:	df 92       	push	r13
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <SendSensorCommand+0x26>
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <SendSensorCommand+0x28>
 6a8:	00 d0       	rcall	.+0      	; 0x6aa <SendSensorCommand+0x2a>
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	86 2e       	mov	r8, r22
 6b0:	e0 90 47 01 	lds	r14, 0x0147	; 0x800147 <Spi_port>
 6b4:	f0 90 48 01 	lds	r15, 0x0148	; 0x800148 <Spi_port+0x1>
 6b8:	d7 01       	movw	r26, r14
 6ba:	2c 91       	ld	r18, X
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	8b 01       	movw	r16, r22
 6c2:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <Spi_Ss>
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <SendSensorCommand+0x4c>
 6c8:	00 0f       	add	r16, r16
 6ca:	11 1f       	adc	r17, r17
 6cc:	0a 94       	dec	r0
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <SendSensorCommand+0x48>
 6d0:	20 2e       	mov	r2, r16
 6d2:	90 2f       	mov	r25, r16
 6d4:	90 95       	com	r25
 6d6:	29 23       	and	r18, r25
 6d8:	2c 93       	st	X, r18
 6da:	c0 90 3f 01 	lds	r12, 0x013F	; 0x80013f <Spi_spdr>
 6de:	d0 90 40 01 	lds	r13, 0x0140	; 0x800140 <Spi_spdr+0x1>
 6e2:	f6 01       	movw	r30, r12
 6e4:	80 83       	st	Z, r24
 6e6:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <Spi_spsr>
 6ea:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <Spi_spsr+0x1>
 6ee:	3e 83       	std	Y+6, r19	; 0x06
 6f0:	2d 83       	std	Y+5, r18	; 0x05
 6f2:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Spi_InterruptFlag>
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <SendSensorCommand+0x7c>
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	0a 94       	dec	r0
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <SendSensorCommand+0x78>
 700:	d9 01       	movw	r26, r18
 702:	2c 91       	ld	r18, X
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	26 23       	and	r18, r22
 708:	37 23       	and	r19, r23
 70a:	23 2b       	or	r18, r19
 70c:	d1 f3       	breq	.-12     	; 0x702 <SendSensorCommand+0x82>
 70e:	f6 01       	movw	r30, r12
 710:	20 81       	ld	r18, Z
 712:	d7 01       	movw	r26, r14
 714:	2c 91       	ld	r18, X
 716:	20 2b       	or	r18, r16
 718:	2c 93       	st	X, r18
 71a:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <Spi_pin>
 71e:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <Spi_pin+0x1>
 722:	50 90 3c 01 	lds	r5, 0x013C	; 0x80013c <Spi_Miso>
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	05 2c       	mov	r0, r5
 72c:	02 c0       	rjmp	.+4      	; 0x732 <SendSensorCommand+0xb2>
 72e:	22 0f       	add	r18, r18
 730:	33 1f       	adc	r19, r19
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <SendSensorCommand+0xae>
 736:	40 81       	ld	r20, Z
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	42 23       	and	r20, r18
 73c:	53 23       	and	r21, r19
 73e:	45 2b       	or	r20, r21
 740:	d1 f7       	brne	.-12     	; 0x736 <SendSensorCommand+0xb6>
 742:	40 81       	ld	r20, Z
 744:	50 e0       	ldi	r21, 0x00	; 0
 746:	42 23       	and	r20, r18
 748:	53 23       	and	r21, r19
 74a:	45 2b       	or	r20, r21
 74c:	d1 f3       	breq	.-12     	; 0x742 <SendSensorCommand+0xc2>
 74e:	d7 01       	movw	r26, r14
 750:	4c 91       	ld	r20, X
 752:	49 23       	and	r20, r25
 754:	4c 93       	st	X, r20
 756:	90 90 26 01 	lds	r9, 0x0126	; 0x800126 <slave_ignore>
 75a:	d6 01       	movw	r26, r12
 75c:	9c 92       	st	X, r9
 75e:	ad 81       	ldd	r26, Y+5	; 0x05
 760:	be 81       	ldd	r27, Y+6	; 0x06
 762:	4c 91       	ld	r20, X
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	46 23       	and	r20, r22
 768:	57 23       	and	r21, r23
 76a:	45 2b       	or	r20, r21
 76c:	d1 f3       	breq	.-12     	; 0x762 <SendSensorCommand+0xe2>
 76e:	d6 01       	movw	r26, r12
 770:	4c 91       	ld	r20, X
 772:	d7 01       	movw	r26, r14
 774:	4c 91       	ld	r20, X
 776:	40 2b       	or	r20, r16
 778:	4c 93       	st	X, r20
 77a:	d6 01       	movw	r26, r12
 77c:	4c 90       	ld	r4, X
 77e:	40 81       	ld	r20, Z
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	42 23       	and	r20, r18
 784:	53 23       	and	r21, r19
 786:	45 2b       	or	r20, r21
 788:	d1 f7       	brne	.-12     	; 0x77e <SendSensorCommand+0xfe>
 78a:	40 81       	ld	r20, Z
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	42 23       	and	r20, r18
 790:	53 23       	and	r21, r19
 792:	45 2b       	or	r20, r21
 794:	d1 f3       	breq	.-12     	; 0x78a <SendSensorCommand+0x10a>
 796:	d7 01       	movw	r26, r14
 798:	4c 91       	ld	r20, X
 79a:	49 23       	and	r20, r25
 79c:	4c 93       	st	X, r20
 79e:	d6 01       	movw	r26, r12
 7a0:	9c 92       	st	X, r9
 7a2:	ad 81       	ldd	r26, Y+5	; 0x05
 7a4:	be 81       	ldd	r27, Y+6	; 0x06
 7a6:	4c 91       	ld	r20, X
 7a8:	50 e0       	ldi	r21, 0x00	; 0
 7aa:	46 23       	and	r20, r22
 7ac:	57 23       	and	r21, r23
 7ae:	45 2b       	or	r20, r21
 7b0:	d1 f3       	breq	.-12     	; 0x7a6 <SendSensorCommand+0x126>
 7b2:	d6 01       	movw	r26, r12
 7b4:	4c 91       	ld	r20, X
 7b6:	d7 01       	movw	r26, r14
 7b8:	4c 91       	ld	r20, X
 7ba:	04 2b       	or	r16, r20
 7bc:	0c 93       	st	X, r16
 7be:	d6 01       	movw	r26, r12
 7c0:	3c 90       	ld	r3, X
 7c2:	43 2d       	mov	r20, r3
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	54 29       	or	r21, r4
 7c8:	42 30       	cpi	r20, 0x02	; 2
 7ca:	51 05       	cpc	r21, r1
 7cc:	39 f1       	breq	.+78     	; 0x81c <SendSensorCommand+0x19c>
 7ce:	9c ef       	ldi	r25, 0xFC	; 252
 7d0:	99 83       	std	Y+1, r25	; 0x01
 7d2:	8a 83       	std	Y+2, r24	; 0x02
 7d4:	62 e0       	ldi	r22, 0x02	; 2
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	de bf       	out	0x3e, r29	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	cd bf       	out	0x3d, r28	; 61
 7ea:	26 96       	adiw	r28, 0x06	; 6
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ff 90       	pop	r15
 800:	ef 90       	pop	r14
 802:	df 90       	pop	r13
 804:	cf 90       	pop	r12
 806:	bf 90       	pop	r11
 808:	af 90       	pop	r10
 80a:	9f 90       	pop	r9
 80c:	8f 90       	pop	r8
 80e:	7f 90       	pop	r7
 810:	6f 90       	pop	r6
 812:	5f 90       	pop	r5
 814:	4f 90       	pop	r4
 816:	3f 90       	pop	r3
 818:	2f 90       	pop	r2
 81a:	08 95       	ret
 81c:	8e 01       	movw	r16, r28
 81e:	0f 5f       	subi	r16, 0xFF	; 255
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	3e 01       	movw	r6, r28
 824:	b3 e0       	ldi	r27, 0x03	; 3
 826:	6b 0e       	add	r6, r27
 828:	71 1c       	adc	r7, r1
 82a:	40 81       	ld	r20, Z
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	42 23       	and	r20, r18
 830:	53 23       	and	r21, r19
 832:	45 2b       	or	r20, r21
 834:	d1 f7       	brne	.-12     	; 0x82a <SendSensorCommand+0x1aa>
 836:	40 81       	ld	r20, Z
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	42 23       	and	r20, r18
 83c:	53 23       	and	r21, r19
 83e:	45 2b       	or	r20, r21
 840:	d1 f3       	breq	.-12     	; 0x836 <SendSensorCommand+0x1b6>
 842:	d7 01       	movw	r26, r14
 844:	4c 91       	ld	r20, X
 846:	49 23       	and	r20, r25
 848:	4c 93       	st	X, r20
 84a:	d6 01       	movw	r26, r12
 84c:	9c 92       	st	X, r9
 84e:	ad 81       	ldd	r26, Y+5	; 0x05
 850:	be 81       	ldd	r27, Y+6	; 0x06
 852:	4c 91       	ld	r20, X
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	46 23       	and	r20, r22
 858:	57 23       	and	r21, r23
 85a:	45 2b       	or	r20, r21
 85c:	d1 f3       	breq	.-12     	; 0x852 <SendSensorCommand+0x1d2>
 85e:	d6 01       	movw	r26, r12
 860:	4c 91       	ld	r20, X
 862:	d7 01       	movw	r26, r14
 864:	4c 91       	ld	r20, X
 866:	42 29       	or	r20, r2
 868:	4c 93       	st	X, r20
 86a:	d6 01       	movw	r26, r12
 86c:	4c 91       	ld	r20, X
 86e:	d8 01       	movw	r26, r16
 870:	4d 93       	st	X+, r20
 872:	8d 01       	movw	r16, r26
 874:	a6 15       	cp	r26, r6
 876:	b7 05       	cpc	r27, r7
 878:	c1 f6       	brne	.-80     	; 0x82a <SendSensorCommand+0x1aa>
 87a:	20 81       	ld	r18, Z
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <SendSensorCommand+0x204>
 880:	35 95       	asr	r19
 882:	27 95       	ror	r18
 884:	5a 94       	dec	r5
 886:	e2 f7       	brpl	.-8      	; 0x880 <SendSensorCommand+0x200>
 888:	20 fd       	sbrc	r18, 0
 88a:	09 c0       	rjmp	.+18     	; 0x89e <SendSensorCommand+0x21e>
 88c:	9c ef       	ldi	r25, 0xFC	; 252
 88e:	9b 83       	std	Y+3, r25	; 0x03
 890:	8c 83       	std	Y+4, r24	; 0x04
 892:	62 e0       	ldi	r22, 0x02	; 2
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	cd 01       	movw	r24, r26
 898:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 89c:	a1 cf       	rjmp	.-190    	; 0x7e0 <SendSensorCommand+0x160>
 89e:	1b 82       	std	Y+3, r1	; 0x03
 8a0:	8c 82       	std	Y+4, r8	; 0x04
 8a2:	62 e0       	ldi	r22, 0x02	; 2
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	cd 01       	movw	r24, r26
 8a8:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 8ac:	4b 82       	std	Y+3, r4	; 0x03
 8ae:	3c 82       	std	Y+4, r3	; 0x04
 8b0:	62 e0       	ldi	r22, 0x02	; 2
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	c8 01       	movw	r24, r16
 8b6:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 8ba:	62 e0       	ldi	r22, 0x02	; 2
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	ce 01       	movw	r24, r28
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	de bf       	out	0x3e, r29	; 62
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	cd bf       	out	0x3d, r28	; 61
 8d0:	8c cf       	rjmp	.-232    	; 0x7ea <SendSensorCommand+0x16a>

000008d2 <SendSensorLed1Green>:
 8d2:	64 e0       	ldi	r22, 0x04	; 4
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	0c 94 40 03 	jmp	0x680	; 0x680 <SendSensorCommand>

000008da <SendSensorLed1Red>:
 8da:	63 e0       	ldi	r22, 0x03	; 3
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0c 94 40 03 	jmp	0x680	; 0x680 <SendSensorCommand>

000008e2 <SendSensorLed2Green>:
 8e2:	66 e0       	ldi	r22, 0x06	; 6
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	0c 94 40 03 	jmp	0x680	; 0x680 <SendSensorCommand>

000008ea <SendSensorLed2Red>:
 8ea:	65 e0       	ldi	r22, 0x05	; 5
 8ec:	83 e0       	ldi	r24, 0x03	; 3
 8ee:	0c 94 40 03 	jmp	0x680	; 0x680 <SendSensorCommand>

000008f2 <LookupBridgeCmd>:
 8f2:	87 30       	cpi	r24, 0x07	; 7
 8f4:	48 f4       	brcc	.+18     	; 0x908 <__stack+0x9>
 8f6:	e8 2f       	mov	r30, r24
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	ee 0f       	add	r30, r30
 8fc:	ff 1f       	adc	r31, r31
 8fe:	e9 5d       	subi	r30, 0xD9	; 217
 900:	fe 4f       	sbci	r31, 0xFE	; 254
 902:	80 81       	ld	r24, Z
 904:	91 81       	ldd	r25, Z+1	; 0x01
 906:	08 95       	ret
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	08 95       	ret

0000090e <CfgBytesAreValid>:
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
 912:	00 d0       	rcall	.+0      	; 0x914 <CfgBytesAreValid+0x6>
 914:	00 d0       	rcall	.+0      	; 0x916 <CfgBytesAreValid+0x8>
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	fc 01       	movw	r30, r24
 91c:	30 81       	ld	r19, Z
 91e:	83 2f       	mov	r24, r19
 920:	8f 70       	andi	r24, 0x0F	; 15
 922:	21 81       	ldd	r18, Z+1	; 0x01
 924:	81 11       	cpse	r24, r1
 926:	09 c0       	rjmp	.+18     	; 0x93a <CfgBytesAreValid+0x2c>
 928:	21 11       	cpse	r18, r1
 92a:	07 c0       	rjmp	.+14     	; 0x93a <CfgBytesAreValid+0x2c>
 92c:	92 81       	ldd	r25, Z+2	; 0x02
 92e:	91 11       	cpse	r25, r1
 930:	04 c0       	rjmp	.+8      	; 0x93a <CfgBytesAreValid+0x2c>
 932:	83 81       	ldd	r24, Z+3	; 0x03
 934:	88 7f       	andi	r24, 0xF8	; 248
 936:	09 f4       	brne	.+2      	; 0x93a <CfgBytesAreValid+0x2c>
 938:	a2 c0       	rjmp	.+324    	; 0xa7e <CfgBytesAreValid+0x170>
 93a:	42 2f       	mov	r20, r18
 93c:	50 e0       	ldi	r21, 0x00	; 0
 93e:	40 95       	com	r20
 940:	50 95       	com	r21
 942:	ca 01       	movw	r24, r20
 944:	84 78       	andi	r24, 0x84	; 132
 946:	99 27       	eor	r25, r25
 948:	89 2b       	or	r24, r25
 94a:	09 f0       	breq	.+2      	; 0x94e <CfgBytesAreValid+0x40>
 94c:	a9 c0       	rjmp	.+338    	; 0xaa0 <CfgBytesAreValid+0x192>
 94e:	92 81       	ldd	r25, Z+2	; 0x02
 950:	69 2f       	mov	r22, r25
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	60 95       	com	r22
 956:	70 95       	com	r23
 958:	61 72       	andi	r22, 0x21	; 33
 95a:	77 27       	eor	r23, r23
 95c:	67 2b       	or	r22, r23
 95e:	09 f0       	breq	.+2      	; 0x962 <CfgBytesAreValid+0x54>
 960:	9f c0       	rjmp	.+318    	; 0xaa0 <CfgBytesAreValid+0x192>
 962:	83 81       	ldd	r24, Z+3	; 0x03
 964:	83 fb       	bst	r24, 3
 966:	88 27       	eor	r24, r24
 968:	80 f9       	bld	r24, 0
 96a:	62 2f       	mov	r22, r18
 96c:	64 78       	andi	r22, 0x84	; 132
 96e:	09 f0       	breq	.+2      	; 0x972 <CfgBytesAreValid+0x64>
 970:	84 c0       	rjmp	.+264    	; 0xa7a <CfgBytesAreValid+0x16c>
 972:	69 2f       	mov	r22, r25
 974:	61 72       	andi	r22, 0x21	; 33
 976:	09 f0       	breq	.+2      	; 0x97a <CfgBytesAreValid+0x6c>
 978:	80 c0       	rjmp	.+256    	; 0xa7a <CfgBytesAreValid+0x16c>
 97a:	63 81       	ldd	r22, Z+3	; 0x03
 97c:	63 fd       	sbrc	r22, 3
 97e:	7d c0       	rjmp	.+250    	; 0xa7a <CfgBytesAreValid+0x16c>
 980:	81 11       	cpse	r24, r1
 982:	7d c0       	rjmp	.+250    	; 0xa7e <CfgBytesAreValid+0x170>
 984:	63 2f       	mov	r22, r19
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	db 01       	movw	r26, r22
 98a:	a0 95       	com	r26
 98c:	b0 95       	com	r27
 98e:	30 ff       	sbrs	r19, 0
 990:	8d c0       	rjmp	.+282    	; 0xaac <CfgBytesAreValid+0x19e>
 992:	43 fd       	sbrc	r20, 3
 994:	8b c0       	rjmp	.+278    	; 0xaac <CfgBytesAreValid+0x19e>
 996:	69 2f       	mov	r22, r25
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	60 95       	com	r22
 99c:	70 95       	com	r23
 99e:	62 74       	andi	r22, 0x42	; 66
 9a0:	77 27       	eor	r23, r23
 9a2:	67 2b       	or	r22, r23
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <CfgBytesAreValid+0x9a>
 9a6:	82 c0       	rjmp	.+260    	; 0xaac <CfgBytesAreValid+0x19e>
 9a8:	83 81       	ldd	r24, Z+3	; 0x03
 9aa:	82 95       	swap	r24
 9ac:	81 70       	andi	r24, 0x01	; 1
 9ae:	30 fd       	sbrc	r19, 0
 9b0:	6e c0       	rjmp	.+220    	; 0xa8e <CfgBytesAreValid+0x180>
 9b2:	23 fd       	sbrc	r18, 3
 9b4:	6c c0       	rjmp	.+216    	; 0xa8e <CfgBytesAreValid+0x180>
 9b6:	69 2f       	mov	r22, r25
 9b8:	62 74       	andi	r22, 0x42	; 66
 9ba:	09 f0       	breq	.+2      	; 0x9be <CfgBytesAreValid+0xb0>
 9bc:	68 c0       	rjmp	.+208    	; 0xa8e <CfgBytesAreValid+0x180>
 9be:	63 81       	ldd	r22, Z+3	; 0x03
 9c0:	64 fd       	sbrc	r22, 4
 9c2:	65 c0       	rjmp	.+202    	; 0xa8e <CfgBytesAreValid+0x180>
 9c4:	81 11       	cpse	r24, r1
 9c6:	5b c0       	rjmp	.+182    	; 0xa7e <CfgBytesAreValid+0x170>
 9c8:	a1 fd       	sbrc	r26, 1
 9ca:	74 c0       	rjmp	.+232    	; 0xab4 <CfgBytesAreValid+0x1a6>
 9cc:	44 fd       	sbrc	r20, 4
 9ce:	72 c0       	rjmp	.+228    	; 0xab4 <CfgBytesAreValid+0x1a6>
 9d0:	69 2f       	mov	r22, r25
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	60 95       	com	r22
 9d6:	70 95       	com	r23
 9d8:	64 78       	andi	r22, 0x84	; 132
 9da:	77 27       	eor	r23, r23
 9dc:	67 2b       	or	r22, r23
 9de:	09 f0       	breq	.+2      	; 0x9e2 <CfgBytesAreValid+0xd4>
 9e0:	69 c0       	rjmp	.+210    	; 0xab4 <CfgBytesAreValid+0x1a6>
 9e2:	83 81       	ldd	r24, Z+3	; 0x03
 9e4:	85 fb       	bst	r24, 5
 9e6:	88 27       	eor	r24, r24
 9e8:	80 f9       	bld	r24, 0
 9ea:	31 fd       	sbrc	r19, 1
 9ec:	53 c0       	rjmp	.+166    	; 0xa94 <CfgBytesAreValid+0x186>
 9ee:	24 fd       	sbrc	r18, 4
 9f0:	51 c0       	rjmp	.+162    	; 0xa94 <CfgBytesAreValid+0x186>
 9f2:	69 2f       	mov	r22, r25
 9f4:	64 78       	andi	r22, 0x84	; 132
 9f6:	09 f0       	breq	.+2      	; 0x9fa <CfgBytesAreValid+0xec>
 9f8:	4d c0       	rjmp	.+154    	; 0xa94 <CfgBytesAreValid+0x186>
 9fa:	63 81       	ldd	r22, Z+3	; 0x03
 9fc:	65 fd       	sbrc	r22, 5
 9fe:	4a c0       	rjmp	.+148    	; 0xa94 <CfgBytesAreValid+0x186>
 a00:	81 11       	cpse	r24, r1
 a02:	3d c0       	rjmp	.+122    	; 0xa7e <CfgBytesAreValid+0x170>
 a04:	a2 fd       	sbrc	r26, 2
 a06:	5a c0       	rjmp	.+180    	; 0xabc <CfgBytesAreValid+0x1ae>
 a08:	ba 01       	movw	r22, r20
 a0a:	61 72       	andi	r22, 0x21	; 33
 a0c:	77 27       	eor	r23, r23
 a0e:	67 2b       	or	r22, r23
 a10:	09 f0       	breq	.+2      	; 0xa14 <CfgBytesAreValid+0x106>
 a12:	54 c0       	rjmp	.+168    	; 0xabc <CfgBytesAreValid+0x1ae>
 a14:	69 2f       	mov	r22, r25
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	60 95       	com	r22
 a1a:	70 95       	com	r23
 a1c:	63 fd       	sbrc	r22, 3
 a1e:	4e c0       	rjmp	.+156    	; 0xabc <CfgBytesAreValid+0x1ae>
 a20:	83 81       	ldd	r24, Z+3	; 0x03
 a22:	86 fb       	bst	r24, 6
 a24:	88 27       	eor	r24, r24
 a26:	80 f9       	bld	r24, 0
 a28:	32 fd       	sbrc	r19, 2
 a2a:	37 c0       	rjmp	.+110    	; 0xa9a <CfgBytesAreValid+0x18c>
 a2c:	62 2f       	mov	r22, r18
 a2e:	61 72       	andi	r22, 0x21	; 33
 a30:	a1 f5       	brne	.+104    	; 0xa9a <CfgBytesAreValid+0x18c>
 a32:	93 fd       	sbrc	r25, 3
 a34:	32 c0       	rjmp	.+100    	; 0xa9a <CfgBytesAreValid+0x18c>
 a36:	63 81       	ldd	r22, Z+3	; 0x03
 a38:	66 fd       	sbrc	r22, 6
 a3a:	2f c0       	rjmp	.+94     	; 0xa9a <CfgBytesAreValid+0x18c>
 a3c:	81 11       	cpse	r24, r1
 a3e:	1f c0       	rjmp	.+62     	; 0xa7e <CfgBytesAreValid+0x170>
 a40:	a3 fd       	sbrc	r26, 3
 a42:	40 c0       	rjmp	.+128    	; 0xac4 <CfgBytesAreValid+0x1b6>
 a44:	42 74       	andi	r20, 0x42	; 66
 a46:	55 27       	eor	r21, r21
 a48:	45 2b       	or	r20, r21
 a4a:	09 f0       	breq	.+2      	; 0xa4e <CfgBytesAreValid+0x140>
 a4c:	3b c0       	rjmp	.+118    	; 0xac4 <CfgBytesAreValid+0x1b6>
 a4e:	49 2f       	mov	r20, r25
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	40 95       	com	r20
 a54:	50 95       	com	r21
 a56:	44 fd       	sbrc	r20, 4
 a58:	35 c0       	rjmp	.+106    	; 0xac4 <CfgBytesAreValid+0x1b6>
 a5a:	83 81       	ldd	r24, Z+3	; 0x03
 a5c:	88 1f       	adc	r24, r24
 a5e:	88 27       	eor	r24, r24
 a60:	88 1f       	adc	r24, r24
 a62:	33 fd       	sbrc	r19, 3
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <CfgBytesAreValid+0x172>
 a66:	22 74       	andi	r18, 0x42	; 66
 a68:	59 f4       	brne	.+22     	; 0xa80 <CfgBytesAreValid+0x172>
 a6a:	94 fd       	sbrc	r25, 4
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <CfgBytesAreValid+0x172>
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	97 fd       	sbrc	r25, 7
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <CfgBytesAreValid+0x172>
 a74:	91 e0       	ldi	r25, 0x01	; 1
 a76:	89 27       	eor	r24, r25
 a78:	03 c0       	rjmp	.+6      	; 0xa80 <CfgBytesAreValid+0x172>
 a7a:	81 11       	cpse	r24, r1
 a7c:	83 cf       	rjmp	.-250    	; 0x984 <CfgBytesAreValid+0x76>
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	0f 90       	pop	r0
 a82:	0f 90       	pop	r0
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	08 95       	ret
 a8e:	81 11       	cpse	r24, r1
 a90:	9b cf       	rjmp	.-202    	; 0x9c8 <CfgBytesAreValid+0xba>
 a92:	f5 cf       	rjmp	.-22     	; 0xa7e <CfgBytesAreValid+0x170>
 a94:	81 11       	cpse	r24, r1
 a96:	b6 cf       	rjmp	.-148    	; 0xa04 <CfgBytesAreValid+0xf6>
 a98:	f2 cf       	rjmp	.-28     	; 0xa7e <CfgBytesAreValid+0x170>
 a9a:	81 11       	cpse	r24, r1
 a9c:	d1 cf       	rjmp	.-94     	; 0xa40 <CfgBytesAreValid+0x132>
 a9e:	ef cf       	rjmp	.-34     	; 0xa7e <CfgBytesAreValid+0x170>
 aa0:	82 2f       	mov	r24, r18
 aa2:	84 78       	andi	r24, 0x84	; 132
 aa4:	61 f7       	brne	.-40     	; 0xa7e <CfgBytesAreValid+0x170>
 aa6:	80 e0       	ldi	r24, 0x00	; 0
 aa8:	92 81       	ldd	r25, Z+2	; 0x02
 aaa:	63 cf       	rjmp	.-314    	; 0x972 <CfgBytesAreValid+0x64>
 aac:	30 fd       	sbrc	r19, 0
 aae:	e7 cf       	rjmp	.-50     	; 0xa7e <CfgBytesAreValid+0x170>
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	7f cf       	rjmp	.-258    	; 0x9b2 <CfgBytesAreValid+0xa4>
 ab4:	31 fd       	sbrc	r19, 1
 ab6:	e3 cf       	rjmp	.-58     	; 0xa7e <CfgBytesAreValid+0x170>
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	99 cf       	rjmp	.-206    	; 0x9ee <CfgBytesAreValid+0xe0>
 abc:	32 fd       	sbrc	r19, 2
 abe:	df cf       	rjmp	.-66     	; 0xa7e <CfgBytesAreValid+0x170>
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	b4 cf       	rjmp	.-152    	; 0xa2c <CfgBytesAreValid+0x11e>
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	cd cf       	rjmp	.-102    	; 0xa62 <CfgBytesAreValid+0x154>

00000ac8 <BridgeCfgLis>:
 ac8:	0f 93       	push	r16
 aca:	1f 93       	push	r17
 acc:	cf 93       	push	r28
 ace:	df 93       	push	r29
 ad0:	00 d0       	rcall	.+0      	; 0xad2 <BridgeCfgLis+0xa>
 ad2:	00 d0       	rcall	.+0      	; 0xad4 <BridgeCfgLis+0xc>
 ad4:	00 d0       	rcall	.+0      	; 0xad6 <BridgeCfgLis+0xe>
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	64 e0       	ldi	r22, 0x04	; 4
 adc:	70 e0       	ldi	r23, 0x00	; 0
 ade:	ce 01       	movw	r24, r28
 ae0:	01 96       	adiw	r24, 0x01	; 1
 ae2:	0e 94 b0 01 	call	0x360	; 0x360 <UsbReadN>
 ae6:	04 97       	sbiw	r24, 0x04	; 4
 ae8:	59 f1       	breq	.+86     	; 0xb40 <BridgeCfgLis+0x78>
 aea:	8d ef       	ldi	r24, 0xFD	; 253
 aec:	8d 83       	std	Y+5, r24	; 0x05
 aee:	82 e0       	ldi	r24, 0x02	; 2
 af0:	8e 83       	std	Y+6, r24	; 0x06
 af2:	8e 01       	movw	r16, r28
 af4:	0b 5f       	subi	r16, 0xFB	; 251
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	62 e0       	ldi	r22, 0x02	; 2
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	c8 01       	movw	r24, r16
 afe:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 b02:	ce 01       	movw	r24, r28
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	0e 94 87 04 	call	0x90e	; 0x90e <CfgBytesAreValid>
 b0a:	88 23       	and	r24, r24
 b0c:	11 f1       	breq	.+68     	; 0xb52 <BridgeCfgLis+0x8a>
 b0e:	1d 82       	std	Y+5, r1	; 0x05
 b10:	82 e0       	ldi	r24, 0x02	; 2
 b12:	8e 83       	std	Y+6, r24	; 0x06
 b14:	62 e0       	ldi	r22, 0x02	; 2
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	c8 01       	movw	r24, r16
 b1a:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 b1e:	64 e0       	ldi	r22, 0x04	; 4
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	ce 01       	movw	r24, r28
 b24:	01 96       	adiw	r24, 0x01	; 1
 b26:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 b2a:	26 96       	adiw	r28, 0x06	; 6
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	08 95       	ret
 b40:	8e 01       	movw	r16, r28
 b42:	0b 5f       	subi	r16, 0xFB	; 251
 b44:	1f 4f       	sbci	r17, 0xFF	; 255
 b46:	ce 01       	movw	r24, r28
 b48:	01 96       	adiw	r24, 0x01	; 1
 b4a:	0e 94 87 04 	call	0x90e	; 0x90e <CfgBytesAreValid>
 b4e:	81 11       	cpse	r24, r1
 b50:	de cf       	rjmp	.-68     	; 0xb0e <BridgeCfgLis+0x46>
 b52:	8e ef       	ldi	r24, 0xFE	; 254
 b54:	8d 83       	std	Y+5, r24	; 0x05
 b56:	82 e0       	ldi	r24, 0x02	; 2
 b58:	8e 83       	std	Y+6, r24	; 0x06
 b5a:	62 e0       	ldi	r22, 0x02	; 2
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	c8 01       	movw	r24, r16
 b60:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
 b64:	e2 cf       	rjmp	.-60     	; 0xb2a <BridgeCfgLis+0x62>

00000b66 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	00 d0       	rcall	.+0      	; 0xb6c <UsbWriteStatusInvalid+0x6>
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
 b70:	9f ef       	ldi	r25, 0xFF	; 255
 b72:	99 83       	std	Y+1, r25	; 0x01
 b74:	8a 83       	std	Y+2, r24	; 0x02
    return UsbWrite(StatusInvalid,2);
 b76:	62 e0       	ldi	r22, 0x02	; 2
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	ce 01       	movw	r24, r28
 b7c:	01 96       	adiw	r24, 0x01	; 1
 b7e:	0e 94 03 02 	call	0x406	; 0x406 <UsbWrite>
}
 b82:	0f 90       	pop	r0
 b84:	0f 90       	pop	r0
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 b8c:	cf 93       	push	r28
 b8e:	df 93       	push	r29
 b90:	1f 92       	push	r1
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 b98:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SpiMasterInit>
    UsbInit();
 b9c:	0e 94 85 01 	call	0x30a	; 0x30a <UsbInit>
 ba0:	3d 9a       	sbi	0x07, 5	; 7
 ba2:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 ba4:	80 e2       	ldi	r24, 0x20	; 32
 ba6:	96 e0       	ldi	r25, 0x06	; 6
 ba8:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <nbytes_in_frame+0x1>
 bac:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 bb0:	ce 01       	movw	r24, r28
 bb2:	01 96       	adiw	r24, 0x01	; 1
 bb4:	0e 94 87 01 	call	0x30e	; 0x30e <UsbReadOneByte>
 bb8:	88 23       	and	r24, r24
 bba:	d1 f3       	breq	.-12     	; 0xbb0 <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 bbc:	89 81       	ldd	r24, Y+1	; 0x01
 bbe:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	19 f0       	breq	.+6      	; 0xbcc <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 bc6:	fc 01       	movw	r30, r24
 bc8:	09 95       	icall
 bca:	f2 cf       	rjmp	.-28     	; 0xbb0 <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	0e 94 b3 05 	call	0xb66	; 0xb66 <UsbWriteStatusInvalid>
 bd2:	ee cf       	rjmp	.-36     	; 0xbb0 <main+0x24>

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
