
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000ff6  0000108a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000620  00800174  00800174  000010fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000408d  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013fa  00000000  00000000  00005505  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ad  00000000  00000000  000068ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  00007fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001256  00000000  00000000  000088a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002103  00000000  00000000  00009afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0000bc01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d7 07 	call	0xfae	; 0xfae <main>
  9e:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 14a:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 16e:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 190:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 1b2:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <FtMiosio_ddr>
 1d6:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <FtMiosio_ddr>
 1e4:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <Ft1248_pin>
 1f0:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <FtMiosio_pin>
 216:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <FtMiosio_port>
 222:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <FtMiosio_port>
 272:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Ft1248_ddr>
 282:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <Ft1248_port>
 2a8:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 67 01 	lds	r28, 0x0167	; 0x800167 <FtMiosio_ddr>
 2b6:	d0 91 68 01 	lds	r29, 0x0168	; 0x800168 <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <FtMiosio_port>
 2c0:	d0 91 66 01 	lds	r29, 0x0166	; 0x800166 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <UsbWrite_Implementation>:
    FtDeactivateInterface();
    return num_bytes_read;
}

static uint16_t UsbWrite_Implementation(uint8_t const *write_buffer, uint16_t nbytes)
{
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	8c 01       	movw	r16, r24
 318:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 31a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 31e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 322:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <FtCmd_Write>
 326:	09 95       	icall
    if (!FtBusTurnaround())
 328:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 32c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 330:	09 95       	icall
 332:	88 23       	and	r24, r24
 334:	f1 f0       	breq	.+60     	; 0x372 <UsbWrite_Implementation+0x68>
 336:	c0 e0       	ldi	r28, 0x00	; 0
 338:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 33a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 33e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 342:	c8 01       	movw	r24, r16
 344:	8c 0f       	add	r24, r28
 346:	9d 1f       	adc	r25, r29
 348:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 34a:	81 11       	cpse	r24, r1
 34c:	0d c0       	rjmp	.+26     	; 0x368 <UsbWrite_Implementation+0x5e>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 34e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 352:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 356:	09 95       	icall
    return num_bytes_sent;
}
 358:	ce 01       	movw	r24, r28
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 368:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 36a:	ce 15       	cp	r28, r14
 36c:	df 05       	cpc	r29, r15
 36e:	28 f3       	brcs	.-54     	; 0x33a <UsbWrite_Implementation+0x30>
 370:	ee cf       	rjmp	.-36     	; 0x34e <UsbWrite_Implementation+0x44>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 372:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 376:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 37a:	09 95       	icall
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 380:	ce 01       	movw	r24, r28
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <UsbReadBytes_Implementation>:
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
static uint16_t UsbReadBytes_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
 3a0:	7b 01       	movw	r14, r22
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
 3a2:	61 15       	cp	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	09 f1       	breq	.+66     	; 0x3ea <UsbReadBytes_Implementation+0x5a>
 3a8:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <FtCmd_Read>
 3ac:	8c 01       	movw	r16, r24
 3ae:	06 0f       	add	r16, r22
 3b0:	17 1f       	adc	r17, r23
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3b2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3b6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3ba:	8d 2d       	mov	r24, r13
 3bc:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3be:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3c2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3c6:	09 95       	icall
    if (!has_data_to_read)
 3c8:	88 23       	and	r24, r24
 3ca:	c1 f0       	breq	.+48     	; 0x3fc <UsbReadBytes_Implementation+0x6c>
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 3cc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 3d0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 3d4:	ce 01       	movw	r24, r28
 3d6:	09 95       	icall
    FtDeactivateInterface();
 3d8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3dc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3e0:	09 95       	icall
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
    {
        while (!UsbReadOneByte(read_buffer)); // Loops until FtBus has data.
        num_bytes_read++;
        read_buffer++;
 3e2:	21 96       	adiw	r28, 0x01	; 1
    return num_bytes_read;
}
static uint16_t UsbReadBytes_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
 3e4:	0c 17       	cp	r16, r28
 3e6:	1d 07       	cpc	r17, r29
 3e8:	21 f7       	brne	.-56     	; 0x3b2 <UsbReadBytes_Implementation+0x22>
        while (!UsbReadOneByte(read_buffer)); // Loops until FtBus has data.
        num_bytes_read++;
        read_buffer++;
    }
    return num_bytes_read;
}
 3ea:	c7 01       	movw	r24, r14
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	08 95       	ret
    {
        // This path lets `UsbReadOneByte` work as a looping check to
        // see when a first byte is ready.
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
 3fc:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 400:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 404:	09 95       	icall
 406:	d5 cf       	rjmp	.-86     	; 0x3b2 <UsbReadBytes_Implementation+0x22>

00000408 <UsbInit>:
// =====[status_led defined in BiColorLed-Hardware header]=====
extern uint8_t const status_led;

void UsbInit(void)
{
    FtInit();
 408:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000040c <UsbReadOneByte>:
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	ec 01       	movw	r28, r24
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 412:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 416:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 41a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <FtCmd_Read>
 41e:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 420:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 424:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 428:	09 95       	icall
    if (!has_data_to_read)
 42a:	88 23       	and	r24, r24
 42c:	79 f0       	breq	.+30     	; 0x44c <UsbReadOneByte+0x40>
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 42e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 432:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 436:	ce 01       	movw	r24, r28
 438:	09 95       	icall
    FtDeactivateInterface();
 43a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 43e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 442:	09 95       	icall
    return num_bytes_read;
 444:	81 e0       	ldi	r24, 0x01	; 1
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret
    {
        // This path lets `UsbReadOneByte` work as a looping check to
        // see when a first byte is ready.
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
 44c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 450:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 454:	09 95       	icall
 456:	80 e0       	ldi	r24, 0x00	; 0
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <ClearPendingSpiInterrupt_Implementation>:
 45e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <ReadSpiStatusRegister>
 462:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <ReadSpiStatusRegister+0x1>
 466:	09 95       	icall
 468:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 46c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 470:	09 94       	ijmp

00000472 <ReadSpiStatusRegister_Implementation>:
 472:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spsr>
 476:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spsr+0x1>
 47a:	80 81       	ld	r24, Z
 47c:	08 95       	ret

0000047e <EnableSpi_Implementation>:
 47e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_spcr>
 482:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_spcr+0x1>
 486:	20 81       	ld	r18, Z
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Spi_Enable>
 490:	02 c0       	rjmp	.+4      	; 0x496 <EnableSpi_Implementation+0x18>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <EnableSpi_Implementation+0x14>
 49a:	82 2b       	or	r24, r18
 49c:	80 83       	st	Z, r24
 49e:	08 95       	ret

000004a0 <SpiMasterCloseSpi_Implementation>:
 4a0:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <Spi_port>
 4a4:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <Spi_port+0x1>
 4a8:	20 81       	ld	r18, Z
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <SpiMasterCloseSpi_Implementation+0x18>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <SpiMasterCloseSpi_Implementation+0x14>
 4bc:	82 2b       	or	r24, r18
 4be:	80 83       	st	Z, r24
 4c0:	08 95       	ret

000004c2 <ReadSpiDataRegister_Implementation>:
 4c2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spdr>
 4c6:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spdr+0x1>
 4ca:	80 81       	ld	r24, Z
 4cc:	08 95       	ret

000004ce <SpiMasterInit>:
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
}

void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 4ce:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 4d2:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <Spi_ddr>
 4d6:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 4da:	40 81       	ld	r20, Z
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9c 01       	movw	r18, r24
 4e2:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <SpiMasterInit+0x1e>
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <SpiMasterInit+0x1a>
 4f0:	32 2f       	mov	r19, r18
 4f2:	30 95       	com	r19
 4f4:	34 23       	and	r19, r20
 4f6:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 4f8:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Spi_port>
 4fc:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 500:	3c 91       	ld	r19, X
 502:	23 2b       	or	r18, r19
 504:	2c 93       	st	X, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 506:	40 81       	ld	r20, Z
 508:	9c 01       	movw	r18, r24
 50a:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 50e:	02 c0       	rjmp	.+4      	; 0x514 <SpiMasterInit+0x46>
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <SpiMasterInit+0x42>
 518:	32 2f       	mov	r19, r18
 51a:	30 95       	com	r19
 51c:	34 23       	and	r19, r20
 51e:	30 83       	st	Z, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 520:	3c 91       	ld	r19, X
 522:	23 2b       	or	r18, r19
 524:	2c 93       	st	X, r18
 526:	40 81       	ld	r20, Z
 528:	9c 01       	movw	r18, r24
 52a:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 52e:	02 c0       	rjmp	.+4      	; 0x534 <SpiMasterInit+0x66>
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <SpiMasterInit+0x62>
 538:	24 2b       	or	r18, r20
 53a:	20 83       	st	Z, r18
 53c:	40 81       	ld	r20, Z
 53e:	9c 01       	movw	r18, r24
 540:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <Spi_Mosi>
 544:	02 c0       	rjmp	.+4      	; 0x54a <SpiMasterInit+0x7c>
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <SpiMasterInit+0x78>
 54e:	24 2b       	or	r18, r20
 550:	20 83       	st	Z, r18
 552:	40 81       	ld	r20, Z
 554:	9c 01       	movw	r18, r24
 556:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Sck>
 55a:	02 c0       	rjmp	.+4      	; 0x560 <SpiMasterInit+0x92>
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <SpiMasterInit+0x8e>
 564:	24 2b       	or	r18, r20
 566:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 568:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_spcr>
 56c:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_spcr+0x1>
 570:	40 81       	ld	r20, Z
 572:	9c 01       	movw	r18, r24
 574:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <Spi_MasterSlaveSelect>
 578:	02 c0       	rjmp	.+4      	; 0x57e <SpiMasterInit+0xb0>
 57a:	22 0f       	add	r18, r18
 57c:	33 1f       	adc	r19, r19
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <SpiMasterInit+0xac>
 582:	24 2b       	or	r18, r20
 584:	20 83       	st	Z, r18
 586:	40 81       	ld	r20, Z
 588:	9c 01       	movw	r18, r24
 58a:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <Spi_ClockRateBit0>
 58e:	02 c0       	rjmp	.+4      	; 0x594 <SpiMasterInit+0xc6>
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <SpiMasterInit+0xc2>
 598:	24 2b       	or	r18, r20
 59a:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 59c:	30 81       	ld	r19, Z
 59e:	ac 01       	movw	r20, r24
 5a0:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <Spi_ClockRateBit1>
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <SpiMasterInit+0xdc>
 5a6:	44 0f       	add	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <SpiMasterInit+0xd8>
 5ae:	24 2f       	mov	r18, r20
 5b0:	20 95       	com	r18
 5b2:	23 23       	and	r18, r19
 5b4:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5b6:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spsr>
 5ba:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5be:	20 81       	ld	r18, Z
 5c0:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Spi_DoubleClockRate>
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <SpiMasterInit+0xfc>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <SpiMasterInit+0xf8>
 5ce:	82 2b       	or	r24, r18
 5d0:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5d2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EnableSpi>
 5d6:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EnableSpi+0x1>
 5da:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
 5dc:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ClearPendingSpiInterrupt>
 5e0:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ClearPendingSpiInterrupt+0x1>
 5e4:	09 94       	ijmp

000005e6 <SerialWriteByte_Implementation>:

// ---Helper functions for SPI read/write---
bool SensorHasResponse(void)
{
    return BitIsClear(Spi_pin, Spi_DataReady); // DataReady LOW signals ready
}
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	1f 92       	push	r1
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 5f6:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	ce 01       	movw	r24, r28
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	09 95       	icall
 604:	0f 90       	pop	r0
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <SpiWriteByte_Implementation>:
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Spi_port>
 614:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Spi_port+0x1>
 618:	9c 91       	ld	r25, X
 61a:	21 e0       	ldi	r18, 0x01	; 1
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	a9 01       	movw	r20, r18
 620:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 624:	02 c0       	rjmp	.+4      	; 0x62a <SpiWriteByte_Implementation+0x1e>
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	0a 94       	dec	r0
 62c:	e2 f7       	brpl	.-8      	; 0x626 <SpiWriteByte_Implementation+0x1a>
 62e:	64 2f       	mov	r22, r20
 630:	60 95       	com	r22
 632:	96 23       	and	r25, r22
 634:	9c 93       	st	X, r25
 636:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <Spi_spdr>
 63a:	d0 91 55 01 	lds	r29, 0x0155	; 0x800155 <Spi_spdr+0x1>
 63e:	88 83       	st	Y, r24
 640:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spsr>
 644:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spsr+0x1>
 648:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Spi_InterruptFlag>
 64c:	02 c0       	rjmp	.+4      	; 0x652 <SpiWriteByte_Implementation+0x46>
 64e:	22 0f       	add	r18, r18
 650:	33 1f       	adc	r19, r19
 652:	0a 94       	dec	r0
 654:	e2 f7       	brpl	.-8      	; 0x64e <SpiWriteByte_Implementation+0x42>
 656:	80 81       	ld	r24, Z
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	82 23       	and	r24, r18
 65c:	93 23       	and	r25, r19
 65e:	89 2b       	or	r24, r25
 660:	d1 f3       	breq	.-12     	; 0x656 <SpiWriteByte_Implementation+0x4a>
 662:	88 81       	ld	r24, Y
 664:	8c 91       	ld	r24, X
 666:	48 2b       	or	r20, r24
 668:	4c 93       	st	X, r20
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <ReadSensor_Implementation>:
 670:	6f 92       	push	r6
 672:	7f 92       	push	r7
 674:	8f 92       	push	r8
 676:	9f 92       	push	r9
 678:	bf 92       	push	r11
 67a:	cf 92       	push	r12
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	4b 01       	movw	r8, r22
 68c:	67 2b       	or	r22, r23
 68e:	09 f4       	brne	.+2      	; 0x692 <ReadSensor_Implementation+0x22>
 690:	58 c0       	rjmp	.+176    	; 0x742 <ReadSensor_Implementation+0xd2>
 692:	60 90 5c 01 	lds	r6, 0x015C	; 0x80015c <Spi_port>
 696:	70 90 5d 01 	lds	r7, 0x015D	; 0x80015d <Spi_port+0x1>
 69a:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <Spi_spdr>
 69e:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <Spi_spdr+0x1>
 6a2:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <slave_ignore>
 6a6:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <Spi_spsr>
 6aa:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <Spi_spsr+0x1>
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	9a 01       	movw	r18, r20
 6b4:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <ReadSensor_Implementation+0x4e>
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	0a 94       	dec	r0
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <ReadSensor_Implementation+0x4a>
 6c2:	d2 2e       	mov	r13, r18
 6c4:	b2 2e       	mov	r11, r18
 6c6:	b0 94       	com	r11
 6c8:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 6cc:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 6d0:	9a 01       	movw	r18, r20
 6d2:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <ReadSensor_Implementation+0x6c>
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	0a 94       	dec	r0
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <ReadSensor_Implementation+0x68>
 6e0:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Spi_InterruptFlag>
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <ReadSensor_Implementation+0x7a>
 6e6:	44 0f       	add	r20, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	0a 94       	dec	r0
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <ReadSensor_Implementation+0x76>
 6ee:	bc 01       	movw	r22, r24
 6f0:	7c 01       	movw	r14, r24
 6f2:	e8 0c       	add	r14, r8
 6f4:	f9 1c       	adc	r15, r9
 6f6:	80 81       	ld	r24, Z
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	82 23       	and	r24, r18
 6fc:	93 23       	and	r25, r19
 6fe:	89 2b       	or	r24, r25
 700:	d1 f7       	brne	.-12     	; 0x6f6 <ReadSensor_Implementation+0x86>
 702:	e3 01       	movw	r28, r6
 704:	88 81       	ld	r24, Y
 706:	8b 21       	and	r24, r11
 708:	88 83       	st	Y, r24
 70a:	e8 01       	movw	r28, r16
 70c:	c8 82       	st	Y, r12
 70e:	8c 91       	ld	r24, X
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	84 23       	and	r24, r20
 714:	95 23       	and	r25, r21
 716:	89 2b       	or	r24, r25
 718:	d1 f3       	breq	.-12     	; 0x70e <ReadSensor_Implementation+0x9e>
 71a:	e8 01       	movw	r28, r16
 71c:	88 81       	ld	r24, Y
 71e:	e3 01       	movw	r28, r6
 720:	88 81       	ld	r24, Y
 722:	8d 29       	or	r24, r13
 724:	88 83       	st	Y, r24
 726:	e8 01       	movw	r28, r16
 728:	88 81       	ld	r24, Y
 72a:	eb 01       	movw	r28, r22
 72c:	89 93       	st	Y+, r24
 72e:	be 01       	movw	r22, r28
 730:	80 81       	ld	r24, Z
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	82 23       	and	r24, r18
 736:	93 23       	and	r25, r19
 738:	89 2b       	or	r24, r25
 73a:	d1 f3       	breq	.-12     	; 0x730 <ReadSensor_Implementation+0xc0>
 73c:	6e 15       	cp	r22, r14
 73e:	7f 05       	cpc	r23, r15
 740:	d1 f6       	brne	.-76     	; 0x6f6 <ReadSensor_Implementation+0x86>
 742:	c4 01       	movw	r24, r8
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	bf 90       	pop	r11
 756:	9f 90       	pop	r9
 758:	8f 90       	pop	r8
 75a:	7f 90       	pop	r7
 75c:	6f 90       	pop	r6
 75e:	08 95       	ret

00000760 <NullCommand>:
 760:	08 95       	ret

00000762 <TestInvalidSensorCmd>:
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	1f 92       	push	r1
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 770:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	09 95       	icall
 778:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 77c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	ce 01       	movw	r24, r28
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	09 95       	icall
 78a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 78e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	09 95       	icall
 796:	0f 90       	pop	r0
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <BridgeCaptureFrame>:
 79e:	ef 92       	push	r14
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	00 d0       	rcall	.+0      	; 0x7ac <BridgeCaptureFrame+0xe>
 7ac:	1f 92       	push	r1
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 7b6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	09 95       	icall
 7be:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 7c2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	ce 01       	movw	r24, r28
 7cc:	03 96       	adiw	r24, 0x03	; 3
 7ce:	09 95       	icall
 7d0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 7d4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	09 95       	icall
 7dc:	8b 81       	ldd	r24, Y+3	; 0x03
 7de:	88 23       	and	r24, r24
 7e0:	51 f0       	breq	.+20     	; 0x7f6 <BridgeCaptureFrame+0x58>
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	ff 90       	pop	r15
 7f2:	ef 90       	pop	r14
 7f4:	08 95       	ret
 7f6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 7fa:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 7fe:	62 e0       	ldi	r22, 0x02	; 2
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	09 95       	icall
 808:	e9 80       	ldd	r14, Y+1	; 0x01
 80a:	fa 80       	ldd	r15, Y+2	; 0x02
 80c:	fe 24       	eor	r15, r14
 80e:	ef 24       	eor	r14, r15
 810:	fe 24       	eor	r15, r14
 812:	1a 81       	ldd	r17, Y+2	; 0x02
 814:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 818:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	09 95       	icall
 820:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 824:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 828:	81 2f       	mov	r24, r17
 82a:	09 95       	icall
 82c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 830:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	ce 01       	movw	r24, r28
 83a:	03 96       	adiw	r24, 0x03	; 3
 83c:	09 95       	icall
 83e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 842:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 846:	8b 81       	ldd	r24, Y+3	; 0x03
 848:	09 95       	icall
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	81 11       	cpse	r24, r1
 84e:	c9 cf       	rjmp	.-110    	; 0x7e2 <BridgeCaptureFrame+0x44>
 850:	ee 0c       	add	r14, r14
 852:	ff 1c       	adc	r15, r15
 854:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 858:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 85c:	b7 01       	movw	r22, r14
 85e:	84 e7       	ldi	r24, 0x74	; 116
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	09 95       	icall
 864:	e1 14       	cp	r14, r1
 866:	f1 04       	cpc	r15, r1
 868:	09 f4       	brne	.+2      	; 0x86c <BridgeCaptureFrame+0xce>
 86a:	bb cf       	rjmp	.-138    	; 0x7e2 <BridgeCaptureFrame+0x44>
 86c:	04 e7       	ldi	r16, 0x74	; 116
 86e:	11 e0       	ldi	r17, 0x01	; 1
 870:	c7 01       	movw	r24, r14
 872:	8c 58       	subi	r24, 0x8C	; 140
 874:	9e 4f       	sbci	r25, 0xFE	; 254
 876:	7c 01       	movw	r14, r24
 878:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 87c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 880:	d8 01       	movw	r26, r16
 882:	8d 91       	ld	r24, X+
 884:	8d 01       	movw	r16, r26
 886:	09 95       	icall
 888:	0e 15       	cp	r16, r14
 88a:	1f 05       	cpc	r17, r15
 88c:	a9 f7       	brne	.-22     	; 0x878 <BridgeCaptureFrame+0xda>
 88e:	a9 cf       	rjmp	.-174    	; 0x7e2 <BridgeCaptureFrame+0x44>

00000890 <GetBridgeLED>:
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <GetBridgeLED+0xa>
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 8a2:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	ce 01       	movw	r24, r28
 8ac:	01 96       	adiw	r24, 0x01	; 1
 8ae:	09 95       	icall
 8b0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 8b4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	ce 01       	movw	r24, r28
 8be:	02 96       	adiw	r24, 0x02	; 2
 8c0:	09 95       	icall
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8c8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 8cc:	81 11       	cpse	r24, r1
 8ce:	49 c0       	rjmp	.+146    	; 0x962 <__stack+0x63>
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	09 95       	icall
 8d4:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_ddr>
 8d8:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_ddr+0x1>
 8dc:	80 81       	ld	r24, Z
 8de:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <status_led>
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	02 2e       	mov	r0, r18
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <GetBridgeLED+0x5c>
 8e8:	95 95       	asr	r25
 8ea:	87 95       	ror	r24
 8ec:	0a 94       	dec	r0
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <GetBridgeLED+0x58>
 8f0:	80 fd       	sbrc	r24, 0
 8f2:	12 c0       	rjmp	.+36     	; 0x918 <__stack+0x19>
 8f4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8f8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	09 95       	icall
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	1f 91       	pop	r17
 914:	0f 91       	pop	r16
 916:	08 95       	ret
 918:	80 81       	ld	r24, Z
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	02 2e       	mov	r0, r18
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	95 95       	asr	r25
 922:	87 95       	ror	r24
 924:	0a 94       	dec	r0
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0x21>
 928:	80 ff       	sbrs	r24, 0
 92a:	0d c0       	rjmp	.+26     	; 0x946 <__stack+0x47>
 92c:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 930:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 934:	80 81       	ld	r24, Z
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0x3f>
 93a:	95 95       	asr	r25
 93c:	87 95       	ror	r24
 93e:	2a 95       	dec	r18
 940:	e2 f7       	brpl	.-8      	; 0x93a <__stack+0x3b>
 942:	80 fd       	sbrc	r24, 0
 944:	07 c0       	rjmp	.+14     	; 0x954 <__stack+0x55>
 946:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 94a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	09 95       	icall
 952:	d6 cf       	rjmp	.-84     	; 0x900 <__stack+0x1>
 954:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 958:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 95c:	82 e0       	ldi	r24, 0x02	; 2
 95e:	09 95       	icall
 960:	cf cf       	rjmp	.-98     	; 0x900 <__stack+0x1>
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	09 95       	icall
 966:	0f 90       	pop	r0
 968:	0f 90       	pop	r0
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	08 95       	ret

00000974 <SetBridgeLED>:
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	00 d0       	rcall	.+0      	; 0x97e <SetBridgeLED+0xa>
 97e:	1f 92       	push	r1
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 988:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 98c:	62 e0       	ldi	r22, 0x02	; 2
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	ce 01       	movw	r24, r28
 992:	01 96       	adiw	r24, 0x01	; 1
 994:	09 95       	icall
 996:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 99a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 99e:	61 e0       	ldi	r22, 0x01	; 1
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	ce 01       	movw	r24, r28
 9a4:	03 96       	adiw	r24, 0x03	; 3
 9a6:	09 95       	icall
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	81 11       	cpse	r24, r1
 9ac:	17 c0       	rjmp	.+46     	; 0x9dc <SetBridgeLED+0x68>
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	88 23       	and	r24, r24
 9b2:	39 f1       	breq	.+78     	; 0xa02 <SetBridgeLED+0x8e>
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	09 f4       	brne	.+2      	; 0x9ba <SetBridgeLED+0x46>
 9b8:	44 c0       	rjmp	.+136    	; 0xa42 <SetBridgeLED+0xce>
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <SetBridgeLED+0x4c>
 9be:	61 c0       	rjmp	.+194    	; 0xa82 <SetBridgeLED+0x10e>
 9c0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 9c4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	09 95       	icall
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret
 9dc:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 9e0:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	09 95       	icall
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	f8 94       	cli
 9ec:	de bf       	out	0x3e, r29	; 62
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	cd bf       	out	0x3d, r28	; 61
 9f2:	0f 90       	pop	r0
 9f4:	0f 90       	pop	r0
 9f6:	0f 90       	pop	r0
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	08 95       	ret
 a02:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_ddr>
 a06:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_ddr+0x1>
 a0a:	20 81       	ld	r18, Z
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <SetBridgeLED+0xa6>
 a16:	88 0f       	add	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	0a 94       	dec	r0
 a1c:	e2 f7       	brpl	.-8      	; 0xa16 <SetBridgeLED+0xa2>
 a1e:	80 95       	com	r24
 a20:	92 2f       	mov	r25, r18
 a22:	98 23       	and	r25, r24
 a24:	90 83       	st	Z, r25
 a26:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 a2a:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 a2e:	90 81       	ld	r25, Z
 a30:	89 23       	and	r24, r25
 a32:	80 83       	st	Z, r24
 a34:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a38:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	09 95       	icall
 a40:	d3 cf       	rjmp	.-90     	; 0x9e8 <SetBridgeLED+0x74>
 a42:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 a46:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 a4a:	20 81       	ld	r18, Z
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <SetBridgeLED+0xe6>
 a56:	88 0f       	add	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	0a 94       	dec	r0
 a5c:	e2 f7       	brpl	.-8      	; 0xa56 <SetBridgeLED+0xe2>
 a5e:	98 2f       	mov	r25, r24
 a60:	90 95       	com	r25
 a62:	92 23       	and	r25, r18
 a64:	90 83       	st	Z, r25
 a66:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_ddr>
 a6a:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_ddr+0x1>
 a6e:	90 81       	ld	r25, Z
 a70:	89 2b       	or	r24, r25
 a72:	80 83       	st	Z, r24
 a74:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a78:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	09 95       	icall
 a80:	b3 cf       	rjmp	.-154    	; 0x9e8 <SetBridgeLED+0x74>
 a82:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 a86:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 a8a:	20 81       	ld	r18, Z
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <SetBridgeLED+0x126>
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	0a 94       	dec	r0
 a9c:	e2 f7       	brpl	.-8      	; 0xa96 <SetBridgeLED+0x122>
 a9e:	92 2f       	mov	r25, r18
 aa0:	98 2b       	or	r25, r24
 aa2:	e0 cf       	rjmp	.-64     	; 0xa64 <SetBridgeLED+0xf0>

00000aa4 <BridgeSetSensorLED>:
 aa4:	0f 93       	push	r16
 aa6:	1f 93       	push	r17
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	00 d0       	rcall	.+0      	; 0xaae <BridgeSetSensorLED+0xa>
 aae:	1f 92       	push	r1
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
 ab4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 ab8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 abc:	62 e0       	ldi	r22, 0x02	; 2
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	ce 01       	movw	r24, r28
 ac2:	01 96       	adiw	r24, 0x01	; 1
 ac4:	09 95       	icall
 ac6:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 aca:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 ace:	80 81       	ld	r24, Z
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <BridgeSetSensorLED+0x38>
 ad8:	95 95       	asr	r25
 ada:	87 95       	ror	r24
 adc:	0a 94       	dec	r0
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <BridgeSetSensorLED+0x34>
 ae0:	80 ff       	sbrs	r24, 0
 ae2:	14 c0       	rjmp	.+40     	; 0xb0c <BridgeSetSensorLED+0x68>
 ae4:	09 81       	ldd	r16, Y+1	; 0x01
 ae6:	1a 81       	ldd	r17, Y+2	; 0x02
 ae8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 aec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	09 95       	icall
 af4:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 af8:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 afc:	80 2f       	mov	r24, r16
 afe:	09 95       	icall
 b00:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 b04:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 b08:	81 2f       	mov	r24, r17
 b0a:	09 95       	icall
 b0c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 b10:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 b14:	61 e0       	ldi	r22, 0x01	; 1
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	ce 01       	movw	r24, r28
 b1a:	03 96       	adiw	r24, 0x03	; 3
 b1c:	09 95       	icall
 b1e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 b22:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 b26:	8b 81       	ldd	r24, Y+3	; 0x03
 b28:	09 95       	icall
 b2a:	0f 90       	pop	r0
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	df 91       	pop	r29
 b32:	cf 91       	pop	r28
 b34:	1f 91       	pop	r17
 b36:	0f 91       	pop	r16
 b38:	08 95       	ret

00000b3a <TestInvalidSensorCmdPlusPayload>:
 b3a:	ff 92       	push	r15
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	00 d0       	rcall	.+0      	; 0xb46 <TestInvalidSensorCmdPlusPayload+0xc>
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 b4e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 b52:	61 e0       	ldi	r22, 0x01	; 1
 b54:	70 e0       	ldi	r23, 0x00	; 0
 b56:	ce 01       	movw	r24, r28
 b58:	01 96       	adiw	r24, 0x01	; 1
 b5a:	09 95       	icall
 b5c:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 b60:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 b64:	80 81       	ld	r24, Z
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <TestInvalidSensorCmdPlusPayload+0x38>
 b6e:	95 95       	asr	r25
 b70:	87 95       	ror	r24
 b72:	0a 94       	dec	r0
 b74:	e2 f7       	brpl	.-8      	; 0xb6e <TestInvalidSensorCmdPlusPayload+0x34>
 b76:	80 ff       	sbrs	r24, 0
 b78:	2c c0       	rjmp	.+88     	; 0xbd2 <TestInvalidSensorCmdPlusPayload+0x98>
 b7a:	f9 80       	ldd	r15, Y+1	; 0x01
 b7c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 b80:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	09 95       	icall
 b88:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 b8c:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 b90:	8f 2d       	mov	r24, r15
 b92:	09 95       	icall
 b94:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 b98:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 b9c:	61 e0       	ldi	r22, 0x01	; 1
 b9e:	70 e0       	ldi	r23, 0x00	; 0
 ba0:	ce 01       	movw	r24, r28
 ba2:	02 96       	adiw	r24, 0x02	; 2
 ba4:	09 95       	icall
 ba6:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 baa:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 bae:	8a 81       	ldd	r24, Y+2	; 0x02
 bb0:	09 95       	icall
 bb2:	8a 81       	ldd	r24, Y+2	; 0x02
 bb4:	88 23       	and	r24, r24
 bb6:	21 f1       	breq	.+72     	; 0xc00 <TestInvalidSensorCmdPlusPayload+0xc6>
 bb8:	0f b6       	in	r0, 0x3f	; 63
 bba:	f8 94       	cli
 bbc:	de bf       	out	0x3e, r29	; 62
 bbe:	0f be       	out	0x3f, r0	; 63
 bc0:	cd bf       	out	0x3d, r28	; 61
 bc2:	0f 90       	pop	r0
 bc4:	0f 90       	pop	r0
 bc6:	df 91       	pop	r29
 bc8:	cf 91       	pop	r28
 bca:	1f 91       	pop	r17
 bcc:	0f 91       	pop	r16
 bce:	ff 90       	pop	r15
 bd0:	08 95       	ret
 bd2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 bd6:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 bda:	61 e0       	ldi	r22, 0x01	; 1
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	ce 01       	movw	r24, r28
 be0:	02 96       	adiw	r24, 0x02	; 2
 be2:	09 95       	icall
 be4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 be8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 bec:	8a 81       	ldd	r24, Y+2	; 0x02
 bee:	09 95       	icall
 bf0:	0f 90       	pop	r0
 bf2:	0f 90       	pop	r0
 bf4:	df 91       	pop	r29
 bf6:	cf 91       	pop	r28
 bf8:	1f 91       	pop	r17
 bfa:	0f 91       	pop	r16
 bfc:	ff 90       	pop	r15
 bfe:	08 95       	ret
 c00:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 c04:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 c08:	61 e0       	ldi	r22, 0x01	; 1
 c0a:	70 e0       	ldi	r23, 0x00	; 0
 c0c:	ce 01       	movw	r24, r28
 c0e:	02 96       	adiw	r24, 0x02	; 2
 c10:	09 95       	icall
 c12:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 c16:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 c1a:	8a 81       	ldd	r24, Y+2	; 0x02
 c1c:	09 95       	icall
 c1e:	cc cf       	rjmp	.-104    	; 0xbb8 <TestInvalidSensorCmdPlusPayload+0x7e>

00000c20 <BridgeSetSensorConfig>:
 c20:	0f 93       	push	r16
 c22:	1f 93       	push	r17
 c24:	cf 93       	push	r28
 c26:	df 93       	push	r29
 c28:	00 d0       	rcall	.+0      	; 0xc2a <BridgeSetSensorConfig+0xa>
 c2a:	00 d0       	rcall	.+0      	; 0xc2c <BridgeSetSensorConfig+0xc>
 c2c:	cd b7       	in	r28, 0x3d	; 61
 c2e:	de b7       	in	r29, 0x3e	; 62
 c30:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 c34:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 c38:	63 e0       	ldi	r22, 0x03	; 3
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	ce 01       	movw	r24, r28
 c3e:	01 96       	adiw	r24, 0x01	; 1
 c40:	09 95       	icall
 c42:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 c46:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 c4a:	80 e0       	ldi	r24, 0x00	; 0
 c4c:	09 95       	icall
 c4e:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 c52:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 c56:	80 81       	ld	r24, Z
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <BridgeSetSensorConfig+0x44>
 c60:	95 95       	asr	r25
 c62:	87 95       	ror	r24
 c64:	0a 94       	dec	r0
 c66:	e2 f7       	brpl	.-8      	; 0xc60 <BridgeSetSensorConfig+0x40>
 c68:	80 ff       	sbrs	r24, 0
 c6a:	14 c0       	rjmp	.+40     	; 0xc94 <BridgeSetSensorConfig+0x74>
 c6c:	0a 81       	ldd	r16, Y+2	; 0x02
 c6e:	1b 81       	ldd	r17, Y+3	; 0x03
 c70:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 c74:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 c78:	89 81       	ldd	r24, Y+1	; 0x01
 c7a:	09 95       	icall
 c7c:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 c80:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 c84:	80 2f       	mov	r24, r16
 c86:	09 95       	icall
 c88:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 c8c:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 c90:	81 2f       	mov	r24, r17
 c92:	09 95       	icall
 c94:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 c98:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 c9c:	61 e0       	ldi	r22, 0x01	; 1
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	ce 01       	movw	r24, r28
 ca2:	04 96       	adiw	r24, 0x04	; 4
 ca4:	09 95       	icall
 ca6:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 caa:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 cae:	8c 81       	ldd	r24, Y+4	; 0x04
 cb0:	09 95       	icall
 cb2:	0f 90       	pop	r0
 cb4:	0f 90       	pop	r0
 cb6:	0f 90       	pop	r0
 cb8:	0f 90       	pop	r0
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
 cbe:	1f 91       	pop	r17
 cc0:	0f 91       	pop	r16
 cc2:	08 95       	ret

00000cc4 <BridgeSetExposure>:
 cc4:	1f 93       	push	r17
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	00 d0       	rcall	.+0      	; 0xccc <BridgeSetExposure+0x8>
 ccc:	1f 92       	push	r1
 cce:	cd b7       	in	r28, 0x3d	; 61
 cd0:	de b7       	in	r29, 0x3e	; 62
 cd2:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 cd6:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 cda:	62 e0       	ldi	r22, 0x02	; 2
 cdc:	70 e0       	ldi	r23, 0x00	; 0
 cde:	ce 01       	movw	r24, r28
 ce0:	01 96       	adiw	r24, 0x01	; 1
 ce2:	09 95       	icall
 ce4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 ce8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	09 95       	icall
 cf0:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 cf4:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 cf8:	80 81       	ld	r24, Z
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <BridgeSetExposure+0x42>
 d02:	95 95       	asr	r25
 d04:	87 95       	ror	r24
 d06:	0a 94       	dec	r0
 d08:	e2 f7       	brpl	.-8      	; 0xd02 <BridgeSetExposure+0x3e>
 d0a:	80 ff       	sbrs	r24, 0
 d0c:	0d c0       	rjmp	.+26     	; 0xd28 <BridgeSetExposure+0x64>
 d0e:	1a 81       	ldd	r17, Y+2	; 0x02
 d10:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 d14:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 d18:	89 81       	ldd	r24, Y+1	; 0x01
 d1a:	09 95       	icall
 d1c:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 d20:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 d24:	81 2f       	mov	r24, r17
 d26:	09 95       	icall
 d28:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 d2c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 d30:	61 e0       	ldi	r22, 0x01	; 1
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	ce 01       	movw	r24, r28
 d36:	03 96       	adiw	r24, 0x03	; 3
 d38:	09 95       	icall
 d3a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 d3e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 d42:	8b 81       	ldd	r24, Y+3	; 0x03
 d44:	09 95       	icall
 d46:	0f 90       	pop	r0
 d48:	0f 90       	pop	r0
 d4a:	0f 90       	pop	r0
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	1f 91       	pop	r17
 d52:	08 95       	ret

00000d54 <BridgeGetSensorConfig>:
 d54:	cf 92       	push	r12
 d56:	df 92       	push	r13
 d58:	ef 92       	push	r14
 d5a:	ff 92       	push	r15
 d5c:	0f 93       	push	r16
 d5e:	1f 93       	push	r17
 d60:	cf 93       	push	r28
 d62:	df 93       	push	r29
 d64:	00 d0       	rcall	.+0      	; 0xd66 <BridgeGetSensorConfig+0x12>
 d66:	00 d0       	rcall	.+0      	; 0xd68 <BridgeGetSensorConfig+0x14>
 d68:	cd b7       	in	r28, 0x3d	; 61
 d6a:	de b7       	in	r29, 0x3e	; 62
 d6c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 d70:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	09 95       	icall
 d78:	7e 01       	movw	r14, r28
 d7a:	84 e0       	ldi	r24, 0x04	; 4
 d7c:	e8 0e       	add	r14, r24
 d7e:	f1 1c       	adc	r15, r1
 d80:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 d84:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 d88:	61 e0       	ldi	r22, 0x01	; 1
 d8a:	70 e0       	ldi	r23, 0x00	; 0
 d8c:	c7 01       	movw	r24, r14
 d8e:	09 95       	icall
 d90:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 d94:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 d98:	8c 81       	ldd	r24, Y+4	; 0x04
 d9a:	09 95       	icall
 d9c:	8c 81       	ldd	r24, Y+4	; 0x04
 d9e:	88 23       	and	r24, r24
 da0:	69 f0       	breq	.+26     	; 0xdbc <BridgeGetSensorConfig+0x68>
 da2:	0f 90       	pop	r0
 da4:	0f 90       	pop	r0
 da6:	0f 90       	pop	r0
 da8:	0f 90       	pop	r0
 daa:	df 91       	pop	r29
 dac:	cf 91       	pop	r28
 dae:	1f 91       	pop	r17
 db0:	0f 91       	pop	r16
 db2:	ff 90       	pop	r15
 db4:	ef 90       	pop	r14
 db6:	df 90       	pop	r13
 db8:	cf 90       	pop	r12
 dba:	08 95       	ret
 dbc:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 dc0:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 dc4:	63 e0       	ldi	r22, 0x03	; 3
 dc6:	70 e0       	ldi	r23, 0x00	; 0
 dc8:	ce 01       	movw	r24, r28
 dca:	01 96       	adiw	r24, 0x01	; 1
 dcc:	09 95       	icall
 dce:	8e 01       	movw	r16, r28
 dd0:	0f 5f       	subi	r16, 0xFF	; 255
 dd2:	1f 4f       	sbci	r17, 0xFF	; 255
 dd4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 dd8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 ddc:	d8 01       	movw	r26, r16
 dde:	8d 91       	ld	r24, X+
 de0:	8d 01       	movw	r16, r26
 de2:	09 95       	icall
 de4:	0e 15       	cp	r16, r14
 de6:	1f 05       	cpc	r17, r15
 de8:	a9 f7       	brne	.-22     	; 0xdd4 <BridgeGetSensorConfig+0x80>
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	d6 cf       	rjmp	.-84     	; 0xda2 <BridgeGetSensorConfig+0x4e>

00000df6 <BridgeGetExposure>:
 df6:	cf 93       	push	r28
 df8:	df 93       	push	r29
 dfa:	00 d0       	rcall	.+0      	; 0xdfc <BridgeGetExposure+0x6>
 dfc:	1f 92       	push	r1
 dfe:	cd b7       	in	r28, 0x3d	; 61
 e00:	de b7       	in	r29, 0x3e	; 62
 e02:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e06:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e0a:	80 e0       	ldi	r24, 0x00	; 0
 e0c:	09 95       	icall
 e0e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 e12:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 e16:	61 e0       	ldi	r22, 0x01	; 1
 e18:	70 e0       	ldi	r23, 0x00	; 0
 e1a:	ce 01       	movw	r24, r28
 e1c:	03 96       	adiw	r24, 0x03	; 3
 e1e:	09 95       	icall
 e20:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e24:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e28:	8b 81       	ldd	r24, Y+3	; 0x03
 e2a:	09 95       	icall
 e2c:	8b 81       	ldd	r24, Y+3	; 0x03
 e2e:	81 11       	cpse	r24, r1
 e30:	15 c0       	rjmp	.+42     	; 0xe5c <BridgeGetExposure+0x66>
 e32:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 e36:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 e3a:	62 e0       	ldi	r22, 0x02	; 2
 e3c:	70 e0       	ldi	r23, 0x00	; 0
 e3e:	ce 01       	movw	r24, r28
 e40:	01 96       	adiw	r24, 0x01	; 1
 e42:	09 95       	icall
 e44:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e48:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e4c:	89 81       	ldd	r24, Y+1	; 0x01
 e4e:	09 95       	icall
 e50:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e54:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e58:	8a 81       	ldd	r24, Y+2	; 0x02
 e5a:	09 95       	icall
 e5c:	0f 90       	pop	r0
 e5e:	0f 90       	pop	r0
 e60:	0f 90       	pop	r0
 e62:	df 91       	pop	r29
 e64:	cf 91       	pop	r28
 e66:	08 95       	ret

00000e68 <BridgeGetSensorLED>:
 e68:	ff 92       	push	r15
 e6a:	0f 93       	push	r16
 e6c:	1f 93       	push	r17
 e6e:	cf 93       	push	r28
 e70:	df 93       	push	r29
 e72:	00 d0       	rcall	.+0      	; 0xe74 <BridgeGetSensorLED+0xc>
 e74:	cd b7       	in	r28, 0x3d	; 61
 e76:	de b7       	in	r29, 0x3e	; 62
 e78:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 e7c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 e80:	61 e0       	ldi	r22, 0x01	; 1
 e82:	70 e0       	ldi	r23, 0x00	; 0
 e84:	ce 01       	movw	r24, r28
 e86:	01 96       	adiw	r24, 0x01	; 1
 e88:	09 95       	icall
 e8a:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 e8e:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 e92:	80 81       	ld	r24, Z
 e94:	90 e0       	ldi	r25, 0x00	; 0
 e96:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 e9a:	02 c0       	rjmp	.+4      	; 0xea0 <BridgeGetSensorLED+0x38>
 e9c:	95 95       	asr	r25
 e9e:	87 95       	ror	r24
 ea0:	0a 94       	dec	r0
 ea2:	e2 f7       	brpl	.-8      	; 0xe9c <BridgeGetSensorLED+0x34>
 ea4:	80 ff       	sbrs	r24, 0
 ea6:	2c c0       	rjmp	.+88     	; 0xf00 <BridgeGetSensorLED+0x98>
 ea8:	f9 80       	ldd	r15, Y+1	; 0x01
 eaa:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 eae:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 eb2:	80 e0       	ldi	r24, 0x00	; 0
 eb4:	09 95       	icall
 eb6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 eba:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 ebe:	8f 2d       	mov	r24, r15
 ec0:	09 95       	icall
 ec2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 ec6:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 eca:	61 e0       	ldi	r22, 0x01	; 1
 ecc:	70 e0       	ldi	r23, 0x00	; 0
 ece:	ce 01       	movw	r24, r28
 ed0:	02 96       	adiw	r24, 0x02	; 2
 ed2:	09 95       	icall
 ed4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 ed8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 edc:	8a 81       	ldd	r24, Y+2	; 0x02
 ede:	09 95       	icall
 ee0:	8a 81       	ldd	r24, Y+2	; 0x02
 ee2:	88 23       	and	r24, r24
 ee4:	21 f1       	breq	.+72     	; 0xf2e <BridgeGetSensorLED+0xc6>
 ee6:	0f b6       	in	r0, 0x3f	; 63
 ee8:	f8 94       	cli
 eea:	de bf       	out	0x3e, r29	; 62
 eec:	0f be       	out	0x3f, r0	; 63
 eee:	cd bf       	out	0x3d, r28	; 61
 ef0:	0f 90       	pop	r0
 ef2:	0f 90       	pop	r0
 ef4:	df 91       	pop	r29
 ef6:	cf 91       	pop	r28
 ef8:	1f 91       	pop	r17
 efa:	0f 91       	pop	r16
 efc:	ff 90       	pop	r15
 efe:	08 95       	ret
 f00:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 f04:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 f08:	61 e0       	ldi	r22, 0x01	; 1
 f0a:	70 e0       	ldi	r23, 0x00	; 0
 f0c:	ce 01       	movw	r24, r28
 f0e:	02 96       	adiw	r24, 0x02	; 2
 f10:	09 95       	icall
 f12:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 f16:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 f1a:	8a 81       	ldd	r24, Y+2	; 0x02
 f1c:	09 95       	icall
 f1e:	0f 90       	pop	r0
 f20:	0f 90       	pop	r0
 f22:	df 91       	pop	r29
 f24:	cf 91       	pop	r28
 f26:	1f 91       	pop	r17
 f28:	0f 91       	pop	r16
 f2a:	ff 90       	pop	r15
 f2c:	08 95       	ret
 f2e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 f32:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 f36:	61 e0       	ldi	r22, 0x01	; 1
 f38:	70 e0       	ldi	r23, 0x00	; 0
 f3a:	ce 01       	movw	r24, r28
 f3c:	02 96       	adiw	r24, 0x02	; 2
 f3e:	09 95       	icall
 f40:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 f44:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 f48:	8a 81       	ldd	r24, Y+2	; 0x02
 f4a:	09 95       	icall
 f4c:	cc cf       	rjmp	.-104    	; 0xee6 <BridgeGetSensorLED+0x7e>

00000f4e <FlushInvalidCommand>:
    while (byte_count++ < nbytes) SerialWriteByte(*pframe++);
}

// ---Used in application to handle invalid Bridge commands---
uint8_t FlushInvalidCommand(void)
{
 f4e:	cf 93       	push	r28
 f50:	df 93       	push	r29
 f52:	00 d0       	rcall	.+0      	; 0xf54 <FlushInvalidCommand+0x6>
 f54:	1f 92       	push	r1
 f56:	cd b7       	in	r28, 0x3d	; 61
 f58:	de b7       	in	r29, 0x3e	; 62
    // Get reply from Sensor.
    uint8_t sensor_reply; ReadSensor(&sensor_reply, 1);
 f5a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 f5e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 f62:	61 e0       	ldi	r22, 0x01	; 1
 f64:	70 e0       	ldi	r23, 0x00	; 0
 f66:	ce 01       	movw	r24, r28
 f68:	03 96       	adiw	r24, 0x03	; 3
 f6a:	09 95       	icall
    // Send invalid-command-error for Bridge and send reply from Sensor.
    uint8_t const StatusInvalid[] = { invalid_cmd, sensor_reply };
 f6c:	82 e0       	ldi	r24, 0x02	; 2
 f6e:	89 83       	std	Y+1, r24	; 0x01
 f70:	8b 81       	ldd	r24, Y+3	; 0x03
 f72:	8a 83       	std	Y+2, r24	; 0x02
    return UsbWrite(StatusInvalid,2);
 f74:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 f78:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 f7c:	62 e0       	ldi	r22, 0x02	; 2
 f7e:	70 e0       	ldi	r23, 0x00	; 0
 f80:	ce 01       	movw	r24, r28
 f82:	01 96       	adiw	r24, 0x01	; 1
 f84:	09 95       	icall
}
 f86:	0f 90       	pop	r0
 f88:	0f 90       	pop	r0
 f8a:	0f 90       	pop	r0
 f8c:	df 91       	pop	r29
 f8e:	cf 91       	pop	r28
 f90:	08 95       	ret

00000f92 <LookupBridgeCmd>:
        BridgeSetExposure, // 10
        BridgeCaptureFrame, // 11
    };
    //
    /* Return func ptr. Prevent attempts at out-of-bounds access. */
    if (key < sizeof(pf)/sizeof(*pf))   return pf[key];
 f92:	8c 30       	cpi	r24, 0x0C	; 12
 f94:	48 f4       	brcc	.+18     	; 0xfa8 <LookupBridgeCmd+0x16>
 f96:	e8 2f       	mov	r30, r24
 f98:	f0 e0       	ldi	r31, 0x00	; 0
 f9a:	ee 0f       	add	r30, r30
 f9c:	ff 1f       	adc	r31, r31
 f9e:	ef 5c       	subi	r30, 0xCF	; 207
 fa0:	fe 4f       	sbci	r31, 0xFE	; 254
 fa2:	80 81       	ld	r24, Z
 fa4:	91 81       	ldd	r25, Z+1	; 0x01
 fa6:	08 95       	ret
    /* Out of bounds keys return a NULL pointer. */
    else return NULL;
 fa8:	80 e0       	ldi	r24, 0x00	; 0
 faa:	90 e0       	ldi	r25, 0x00	; 0
    /* Up to caller to check for NULL and take appropriate action. */
    /* Recommended action: tell UsbHost the command was not recognized. */
}
 fac:	08 95       	ret

00000fae <main>:
        /* It is up to CmdFn to let the UsbHost know */
        /* command was successfully carried out. */
    }
}
int main()
{
 fae:	cf 93       	push	r28
 fb0:	df 93       	push	r29
 fb2:	1f 92       	push	r1
 fb4:	cd b7       	in	r28, 0x3d	; 61
 fb6:	de b7       	in	r29, 0x3e	; 62
 fb8:	3b 9a       	sbi	0x07, 3	; 7
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 fba:	43 98       	cbi	0x08, 3	; 8
    /* =====[ Setup ]===== */
    BiColorLedOn(status_led);
    BiColorLedGreen(status_led);
    SpiMasterInit();
 fbc:	0e 94 67 02 	call	0x4ce	; 0x4ce <SpiMasterInit>
    UsbInit();
 fc0:	0e 94 04 02 	call	0x408	; 0x408 <UsbInit>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 fc4:	ce 01       	movw	r24, r28
 fc6:	01 96       	adiw	r24, 0x01	; 1
 fc8:	0e 94 06 02 	call	0x40c	; 0x40c <UsbReadOneByte>
 fcc:	88 23       	and	r24, r24
 fce:	d1 f3       	breq	.-12     	; 0xfc4 <main+0x16>
    {
        // Pass byte to Sensor
        SpiWriteByte(cmd);
 fd0:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 fd4:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 fd8:	89 81       	ldd	r24, Y+1	; 0x01
 fda:	09 95       	icall
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 fdc:	89 81       	ldd	r24, Y+1	; 0x01
 fde:	0e 94 c9 07 	call	0xf92	; 0xf92 <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(cmd); */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(); */
        if (CmdFn == NULL) FlushInvalidCommand();
 fe2:	00 97       	sbiw	r24, 0x00	; 0
 fe4:	19 f0       	breq	.+6      	; 0xfec <main+0x3e>
        /* Do command if it is valid. */
        else CmdFn();
 fe6:	fc 01       	movw	r30, r24
 fe8:	09 95       	icall
 fea:	ec cf       	rjmp	.-40     	; 0xfc4 <main+0x16>
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(cmd); */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(); */
        if (CmdFn == NULL) FlushInvalidCommand();
 fec:	0e 94 a7 07 	call	0xf4e	; 0xf4e <FlushInvalidCommand>
 ff0:	e9 cf       	rjmp	.-46     	; 0xfc4 <main+0x16>

00000ff2 <_exit>:
 ff2:	f8 94       	cli

00000ff4 <__stop_program>:
 ff4:	ff cf       	rjmp	.-2      	; 0xff4 <__stop_program>
