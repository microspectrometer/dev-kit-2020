
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000de2  00000e76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  0080016e  0080016e  00000ee4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006667  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001470  00000000  00000000  0000794b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000265f  00000000  00000000  00008dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc0  00000000  00000000  0000b41c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016b0  00000000  00000000  0000bfdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d76  00000000  00000000  0000d68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00012402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	ae e6       	ldi	r26, 0x6E	; 110
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 39       	cpi	r26, 0x90	; 144
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cb 06 	call	0xd96	; 0xd96 <main>
  9e:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Ft1248_port>
 14a:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 5d 01 	lds	r0, 0x015D	; 0x80015d <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Ft1248_port>
 16e:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 5d 01 	lds	r0, 0x015D	; 0x80015d <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Ft1248_port>
 190:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <Ft1248_port>
 1b2:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <FtMiosio_ddr>
 1d6:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <FtMiosio_ddr>
 1e4:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <Ft1248_pin>
 1f0:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 5b 01 	lds	r0, 0x015B	; 0x80015b <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <FtMiosio_pin>
 216:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <FtMiosio_port>
 222:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <FtMiosio_port>
 272:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Ft1248_ddr>
 282:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 5b 01 	lds	r0, 0x015B	; 0x80015b <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <Ft1248_port>
 2a8:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <FtMiosio_ddr>
 2b6:	d0 91 63 01 	lds	r29, 0x0163	; 0x800163 <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <FtMiosio_port>
 2c0:	d0 91 61 01 	lds	r29, 0x0161	; 0x800161 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 5d 01 	lds	r0, 0x015D	; 0x80015d <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <BridgeLedRed>:

uint8_t UsbWriteStatusOk(bridge_cmd_key   cmd_done_by_bridge)
{
    uint8_t const StatusOk[] = { 0x00, cmd_done_by_bridge};
    return UsbWrite(StatusOk,2);
}
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <BridgeLedRed+0x6>
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <BiColorLed_port>
 318:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <BiColorLed_port+0x1>
 31c:	20 81       	ld	r18, Z
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	00 90 6a 01 	lds	r0, 0x016A	; 0x80016a <status_led>
 326:	02 c0       	rjmp	.+4      	; 0x32c <BridgeLedRed+0x22>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <BridgeLedRed+0x1e>
 330:	82 2b       	or	r24, r18
 332:	80 83       	st	Z, r24
 334:	19 82       	std	Y+1, r1	; 0x01
 336:	1a 82       	std	Y+2, r1	; 0x02
 338:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 33c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 340:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 344:	09 95       	icall
 346:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 34a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 34e:	09 95       	icall
 350:	88 23       	and	r24, r24
 352:	81 f0       	breq	.+32     	; 0x374 <BridgeLedRed+0x6a>
 354:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 358:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	09 95       	icall
 362:	88 23       	and	r24, r24
 364:	39 f0       	breq	.+14     	; 0x374 <BridgeLedRed+0x6a>
 366:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 36a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 36e:	ce 01       	movw	r24, r28
 370:	02 96       	adiw	r24, 0x02	; 2
 372:	09 95       	icall
 374:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 378:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 37c:	09 95       	icall
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <BridgeLedGreen>:
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <BridgeLedGreen+0x6>
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <BiColorLed_port>
 396:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <BiColorLed_port+0x1>
 39a:	20 81       	ld	r18, Z
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	00 90 6a 01 	lds	r0, 0x016A	; 0x80016a <status_led>
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <BridgeLedGreen+0x22>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <BridgeLedGreen+0x1e>
 3ae:	80 95       	com	r24
 3b0:	82 23       	and	r24, r18
 3b2:	80 83       	st	Z, r24
 3b4:	19 82       	std	Y+1, r1	; 0x01
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	8a 83       	std	Y+2, r24	; 0x02
 3ba:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3be:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3c2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 3c6:	09 95       	icall
 3c8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3cc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3d0:	09 95       	icall
 3d2:	88 23       	and	r24, r24
 3d4:	81 f0       	breq	.+32     	; 0x3f6 <BridgeLedGreen+0x6e>
 3d6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 3da:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	09 95       	icall
 3e4:	88 23       	and	r24, r24
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <BridgeLedGreen+0x6e>
 3e8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 3ec:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 3f0:	ce 01       	movw	r24, r28
 3f2:	02 96       	adiw	r24, 0x02	; 2
 3f4:	09 95       	icall
 3f6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3fa:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3fe:	09 95       	icall
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <UsbInit>:
 40a:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000040e <SendSensorCommand>:
 40e:	2f 92       	push	r2
 410:	3f 92       	push	r3
 412:	4f 92       	push	r4
 414:	5f 92       	push	r5
 416:	6f 92       	push	r6
 418:	7f 92       	push	r7
 41a:	8f 92       	push	r8
 41c:	9f 92       	push	r9
 41e:	af 92       	push	r10
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	00 d0       	rcall	.+0      	; 0x434 <SendSensorCommand+0x26>
 434:	00 d0       	rcall	.+0      	; 0x436 <SendSensorCommand+0x28>
 436:	00 d0       	rcall	.+0      	; 0x438 <SendSensorCommand+0x2a>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	a8 2e       	mov	r10, r24
 43e:	66 2e       	mov	r6, r22
 440:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <Spi_port>
 444:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <Spi_port+0x1>
 448:	db 01       	movw	r26, r22
 44a:	8c 91       	ld	r24, X
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	8a 01       	movw	r16, r20
 452:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <Spi_Ss>
 456:	02 c0       	rjmp	.+4      	; 0x45c <SendSensorCommand+0x4e>
 458:	00 0f       	add	r16, r16
 45a:	11 1f       	adc	r17, r17
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <SendSensorCommand+0x4a>
 460:	20 2e       	mov	r2, r16
 462:	b0 2e       	mov	r11, r16
 464:	b0 94       	com	r11
 466:	8b 21       	and	r24, r11
 468:	8c 93       	st	X, r24
 46a:	e0 90 4f 01 	lds	r14, 0x014F	; 0x80014f <Spi_spdr>
 46e:	f0 90 50 01 	lds	r15, 0x0150	; 0x800150 <Spi_spdr+0x1>
 472:	f7 01       	movw	r30, r14
 474:	a0 82       	st	Z, r10
 476:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <Spi_spsr>
 47a:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <Spi_spsr+0x1>
 47e:	3e 83       	std	Y+6, r19	; 0x06
 480:	2d 83       	std	Y+5, r18	; 0x05
 482:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Spi_InterruptFlag>
 486:	02 c0       	rjmp	.+4      	; 0x48c <SendSensorCommand+0x7e>
 488:	44 0f       	add	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <SendSensorCommand+0x7a>
 490:	d9 01       	movw	r26, r18
 492:	8c 91       	ld	r24, X
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	84 23       	and	r24, r20
 498:	95 23       	and	r25, r21
 49a:	89 2b       	or	r24, r25
 49c:	d1 f3       	breq	.-12     	; 0x492 <SendSensorCommand+0x84>
 49e:	f7 01       	movw	r30, r14
 4a0:	80 81       	ld	r24, Z
 4a2:	db 01       	movw	r26, r22
 4a4:	8c 91       	ld	r24, X
 4a6:	80 2b       	or	r24, r16
 4a8:	8c 93       	st	X, r24
 4aa:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <Spi_pin>
 4ae:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <Spi_pin+0x1>
 4b2:	50 90 4c 01 	lds	r5, 0x014C	; 0x80014c <Spi_Miso>
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	05 2c       	mov	r0, r5
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <SendSensorCommand+0xb4>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <SendSensorCommand+0xb0>
 4c6:	20 81       	ld	r18, Z
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	28 23       	and	r18, r24
 4cc:	39 23       	and	r19, r25
 4ce:	23 2b       	or	r18, r19
 4d0:	d1 f7       	brne	.-12     	; 0x4c6 <SendSensorCommand+0xb8>
 4d2:	20 81       	ld	r18, Z
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	28 23       	and	r18, r24
 4d8:	39 23       	and	r19, r25
 4da:	23 2b       	or	r18, r19
 4dc:	d1 f3       	breq	.-12     	; 0x4d2 <SendSensorCommand+0xc4>
 4de:	db 01       	movw	r26, r22
 4e0:	2c 91       	ld	r18, X
 4e2:	2b 21       	and	r18, r11
 4e4:	2c 93       	st	X, r18
 4e6:	70 90 3c 01 	lds	r7, 0x013C	; 0x80013c <slave_ignore>
 4ea:	d7 01       	movw	r26, r14
 4ec:	7c 92       	st	X, r7
 4ee:	ad 81       	ldd	r26, Y+5	; 0x05
 4f0:	be 81       	ldd	r27, Y+6	; 0x06
 4f2:	2c 91       	ld	r18, X
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	24 23       	and	r18, r20
 4f8:	35 23       	and	r19, r21
 4fa:	23 2b       	or	r18, r19
 4fc:	d1 f3       	breq	.-12     	; 0x4f2 <SendSensorCommand+0xe4>
 4fe:	d7 01       	movw	r26, r14
 500:	2c 91       	ld	r18, X
 502:	db 01       	movw	r26, r22
 504:	2c 91       	ld	r18, X
 506:	20 2b       	or	r18, r16
 508:	2c 93       	st	X, r18
 50a:	d7 01       	movw	r26, r14
 50c:	4c 90       	ld	r4, X
 50e:	20 81       	ld	r18, Z
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	28 23       	and	r18, r24
 514:	39 23       	and	r19, r25
 516:	23 2b       	or	r18, r19
 518:	d1 f7       	brne	.-12     	; 0x50e <SendSensorCommand+0x100>
 51a:	20 81       	ld	r18, Z
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	28 23       	and	r18, r24
 520:	39 23       	and	r19, r25
 522:	23 2b       	or	r18, r19
 524:	d1 f3       	breq	.-12     	; 0x51a <SendSensorCommand+0x10c>
 526:	db 01       	movw	r26, r22
 528:	2c 91       	ld	r18, X
 52a:	2b 21       	and	r18, r11
 52c:	2c 93       	st	X, r18
 52e:	d7 01       	movw	r26, r14
 530:	7c 92       	st	X, r7
 532:	ad 81       	ldd	r26, Y+5	; 0x05
 534:	be 81       	ldd	r27, Y+6	; 0x06
 536:	2c 91       	ld	r18, X
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	24 23       	and	r18, r20
 53c:	35 23       	and	r19, r21
 53e:	23 2b       	or	r18, r19
 540:	d1 f3       	breq	.-12     	; 0x536 <SendSensorCommand+0x128>
 542:	d7 01       	movw	r26, r14
 544:	2c 91       	ld	r18, X
 546:	db 01       	movw	r26, r22
 548:	2c 91       	ld	r18, X
 54a:	02 2b       	or	r16, r18
 54c:	0c 93       	st	X, r16
 54e:	d7 01       	movw	r26, r14
 550:	3c 90       	ld	r3, X
 552:	23 2d       	mov	r18, r3
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	34 29       	or	r19, r4
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	09 f4       	brne	.+2      	; 0x560 <SendSensorCommand+0x152>
 55e:	44 c0       	rjmp	.+136    	; 0x5e8 <SendSensorCommand+0x1da>
 560:	8c ef       	ldi	r24, 0xFC	; 252
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	aa 82       	std	Y+2, r10	; 0x02
 566:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 56a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 56e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 572:	09 95       	icall
 574:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 578:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 57c:	09 95       	icall
 57e:	88 23       	and	r24, r24
 580:	81 f0       	breq	.+32     	; 0x5a2 <SendSensorCommand+0x194>
 582:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 586:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	09 95       	icall
 590:	88 23       	and	r24, r24
 592:	39 f0       	breq	.+14     	; 0x5a2 <SendSensorCommand+0x194>
 594:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 598:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 59c:	ce 01       	movw	r24, r28
 59e:	02 96       	adiw	r24, 0x02	; 2
 5a0:	09 95       	icall
 5a2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 5a6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 5aa:	09 95       	icall
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	26 96       	adiw	r28, 0x06	; 6
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	ff 90       	pop	r15
 5cc:	ef 90       	pop	r14
 5ce:	df 90       	pop	r13
 5d0:	cf 90       	pop	r12
 5d2:	bf 90       	pop	r11
 5d4:	af 90       	pop	r10
 5d6:	9f 90       	pop	r9
 5d8:	8f 90       	pop	r8
 5da:	7f 90       	pop	r7
 5dc:	6f 90       	pop	r6
 5de:	5f 90       	pop	r5
 5e0:	4f 90       	pop	r4
 5e2:	3f 90       	pop	r3
 5e4:	2f 90       	pop	r2
 5e6:	08 95       	ret
 5e8:	9e 01       	movw	r18, r28
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	69 01       	movw	r12, r18
 5f0:	8e 01       	movw	r16, r28
 5f2:	0d 5f       	subi	r16, 0xFD	; 253
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	20 81       	ld	r18, Z
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	28 23       	and	r18, r24
 5fc:	39 23       	and	r19, r25
 5fe:	23 2b       	or	r18, r19
 600:	d1 f7       	brne	.-12     	; 0x5f6 <SendSensorCommand+0x1e8>
 602:	20 81       	ld	r18, Z
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	28 23       	and	r18, r24
 608:	39 23       	and	r19, r25
 60a:	23 2b       	or	r18, r19
 60c:	d1 f3       	breq	.-12     	; 0x602 <SendSensorCommand+0x1f4>
 60e:	db 01       	movw	r26, r22
 610:	2c 91       	ld	r18, X
 612:	2b 21       	and	r18, r11
 614:	2c 93       	st	X, r18
 616:	d7 01       	movw	r26, r14
 618:	7c 92       	st	X, r7
 61a:	ad 81       	ldd	r26, Y+5	; 0x05
 61c:	be 81       	ldd	r27, Y+6	; 0x06
 61e:	2c 91       	ld	r18, X
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	24 23       	and	r18, r20
 624:	35 23       	and	r19, r21
 626:	23 2b       	or	r18, r19
 628:	d1 f3       	breq	.-12     	; 0x61e <SendSensorCommand+0x210>
 62a:	d7 01       	movw	r26, r14
 62c:	2c 91       	ld	r18, X
 62e:	db 01       	movw	r26, r22
 630:	2c 91       	ld	r18, X
 632:	22 29       	or	r18, r2
 634:	2c 93       	st	X, r18
 636:	d7 01       	movw	r26, r14
 638:	2c 91       	ld	r18, X
 63a:	d6 01       	movw	r26, r12
 63c:	2d 93       	st	X+, r18
 63e:	6d 01       	movw	r12, r26
 640:	0a 17       	cp	r16, r26
 642:	1b 07       	cpc	r17, r27
 644:	c1 f6       	brne	.-80     	; 0x5f6 <SendSensorCommand+0x1e8>
 646:	80 81       	ld	r24, Z
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <SendSensorCommand+0x242>
 64c:	95 95       	asr	r25
 64e:	87 95       	ror	r24
 650:	5a 94       	dec	r5
 652:	e2 f7       	brpl	.-8      	; 0x64c <SendSensorCommand+0x23e>
 654:	80 fd       	sbrc	r24, 0
 656:	23 c0       	rjmp	.+70     	; 0x69e <SendSensorCommand+0x290>
 658:	8c ef       	ldi	r24, 0xFC	; 252
 65a:	8b 83       	std	Y+3, r24	; 0x03
 65c:	ac 82       	std	Y+4, r10	; 0x04
 65e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 662:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 666:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 66a:	09 95       	icall
 66c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 670:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 674:	09 95       	icall
 676:	88 23       	and	r24, r24
 678:	09 f4       	brne	.+2      	; 0x67c <SendSensorCommand+0x26e>
 67a:	93 cf       	rjmp	.-218    	; 0x5a2 <SendSensorCommand+0x194>
 67c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 680:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 684:	c8 01       	movw	r24, r16
 686:	09 95       	icall
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <SendSensorCommand+0x280>
 68c:	8a cf       	rjmp	.-236    	; 0x5a2 <SendSensorCommand+0x194>
 68e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 692:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 696:	ce 01       	movw	r24, r28
 698:	04 96       	adiw	r24, 0x04	; 4
 69a:	09 95       	icall
 69c:	82 cf       	rjmp	.-252    	; 0x5a2 <SendSensorCommand+0x194>
 69e:	1b 82       	std	Y+3, r1	; 0x03
 6a0:	6c 82       	std	Y+4, r6	; 0x04
 6a2:	f0 90 24 01 	lds	r15, 0x0124	; 0x800124 <FtCmd_Write>
 6a6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 6aa:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 6ae:	8f 2d       	mov	r24, r15
 6b0:	09 95       	icall
 6b2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 6b6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 6ba:	09 95       	icall
 6bc:	88 23       	and	r24, r24
 6be:	79 f0       	breq	.+30     	; 0x6de <SendSensorCommand+0x2d0>
 6c0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6c4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 6c8:	c8 01       	movw	r24, r16
 6ca:	09 95       	icall
 6cc:	88 23       	and	r24, r24
 6ce:	39 f0       	breq	.+14     	; 0x6de <SendSensorCommand+0x2d0>
 6d0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 6d4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 6d8:	ce 01       	movw	r24, r28
 6da:	04 96       	adiw	r24, 0x04	; 4
 6dc:	09 95       	icall
 6de:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 6e2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 6e6:	09 95       	icall
 6e8:	4b 82       	std	Y+3, r4	; 0x03
 6ea:	3c 82       	std	Y+4, r3	; 0x04
 6ec:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 6f0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 6f4:	8f 2d       	mov	r24, r15
 6f6:	09 95       	icall
 6f8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 6fc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 700:	09 95       	icall
 702:	88 23       	and	r24, r24
 704:	79 f0       	breq	.+30     	; 0x724 <SendSensorCommand+0x316>
 706:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 70a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 70e:	c8 01       	movw	r24, r16
 710:	09 95       	icall
 712:	88 23       	and	r24, r24
 714:	39 f0       	breq	.+14     	; 0x724 <SendSensorCommand+0x316>
 716:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 71a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 71e:	ce 01       	movw	r24, r28
 720:	04 96       	adiw	r24, 0x04	; 4
 722:	09 95       	icall
 724:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 728:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 72c:	09 95       	icall
 72e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 732:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 736:	8f 2d       	mov	r24, r15
 738:	1c cf       	rjmp	.-456    	; 0x572 <SendSensorCommand+0x164>

0000073a <SendSensorLed1Green>:
 73a:	64 e0       	ldi	r22, 0x04	; 4
 73c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <SensorLed1Green_key>
 740:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

00000744 <SendSensorLed1Red>:
 744:	63 e0       	ldi	r22, 0x03	; 3
 746:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <SensorLed1Red_key>
 74a:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

0000074e <SendSensorLed2Green>:
 74e:	66 e0       	ldi	r22, 0x06	; 6
 750:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <SensorLed2Green_key>
 754:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

00000758 <SendSensorLed2Red>:
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <SensorLed2Red_key>
 75e:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

00000762 <SendSensorLed3Green>:
 762:	68 e0       	ldi	r22, 0x08	; 8
 764:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <SensorLed3Green_key>
 768:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

0000076c <SendSensorLed3Red>:
 76c:	67 e0       	ldi	r22, 0x07	; 7
 76e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <SensorLed3Red_key>
 772:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

00000776 <SendSensorLed4Green>:
 776:	6a e0       	ldi	r22, 0x0A	; 10
 778:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <SensorLed4Green_key>
 77c:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

00000780 <SendSensorLed4Red>:
 780:	69 e0       	ldi	r22, 0x09	; 9
 782:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <SensorLed4Red_key>
 786:	0c 94 07 02 	jmp	0x40e	; 0x40e <SendSensorCommand>

0000078a <LookupBridgeCmd>:
 78a:	8b 30       	cpi	r24, 0x0B	; 11
 78c:	48 f4       	brcc	.+18     	; 0x7a0 <LookupBridgeCmd+0x16>
 78e:	e8 2f       	mov	r30, r24
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	ee 0f       	add	r30, r30
 794:	ff 1f       	adc	r31, r31
 796:	ea 5d       	subi	r30, 0xDA	; 218
 798:	fe 4f       	sbci	r31, 0xFE	; 254
 79a:	80 81       	ld	r24, Z
 79c:	91 81       	ldd	r25, Z+1	; 0x01
 79e:	08 95       	ret
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	08 95       	ret

000007a6 <CfgBytesAreValid>:
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	00 d0       	rcall	.+0      	; 0x7ac <CfgBytesAreValid+0x6>
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <CfgBytesAreValid+0x8>
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	fc 01       	movw	r30, r24
 7b4:	30 81       	ld	r19, Z
 7b6:	83 2f       	mov	r24, r19
 7b8:	8f 70       	andi	r24, 0x0F	; 15
 7ba:	21 81       	ldd	r18, Z+1	; 0x01
 7bc:	81 11       	cpse	r24, r1
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <CfgBytesAreValid+0x2c>
 7c0:	21 11       	cpse	r18, r1
 7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <CfgBytesAreValid+0x2c>
 7c4:	92 81       	ldd	r25, Z+2	; 0x02
 7c6:	91 11       	cpse	r25, r1
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <CfgBytesAreValid+0x2c>
 7ca:	83 81       	ldd	r24, Z+3	; 0x03
 7cc:	88 7f       	andi	r24, 0xF8	; 248
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <CfgBytesAreValid+0x2c>
 7d0:	a2 c0       	rjmp	.+324    	; 0x916 <__stack+0x17>
 7d2:	42 2f       	mov	r20, r18
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	40 95       	com	r20
 7d8:	50 95       	com	r21
 7da:	ca 01       	movw	r24, r20
 7dc:	84 78       	andi	r24, 0x84	; 132
 7de:	99 27       	eor	r25, r25
 7e0:	89 2b       	or	r24, r25
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <CfgBytesAreValid+0x40>
 7e4:	a9 c0       	rjmp	.+338    	; 0x938 <__stack+0x39>
 7e6:	92 81       	ldd	r25, Z+2	; 0x02
 7e8:	69 2f       	mov	r22, r25
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	60 95       	com	r22
 7ee:	70 95       	com	r23
 7f0:	61 72       	andi	r22, 0x21	; 33
 7f2:	77 27       	eor	r23, r23
 7f4:	67 2b       	or	r22, r23
 7f6:	09 f0       	breq	.+2      	; 0x7fa <CfgBytesAreValid+0x54>
 7f8:	9f c0       	rjmp	.+318    	; 0x938 <__stack+0x39>
 7fa:	83 81       	ldd	r24, Z+3	; 0x03
 7fc:	83 fb       	bst	r24, 3
 7fe:	88 27       	eor	r24, r24
 800:	80 f9       	bld	r24, 0
 802:	62 2f       	mov	r22, r18
 804:	64 78       	andi	r22, 0x84	; 132
 806:	09 f0       	breq	.+2      	; 0x80a <CfgBytesAreValid+0x64>
 808:	84 c0       	rjmp	.+264    	; 0x912 <__stack+0x13>
 80a:	69 2f       	mov	r22, r25
 80c:	61 72       	andi	r22, 0x21	; 33
 80e:	09 f0       	breq	.+2      	; 0x812 <CfgBytesAreValid+0x6c>
 810:	80 c0       	rjmp	.+256    	; 0x912 <__stack+0x13>
 812:	63 81       	ldd	r22, Z+3	; 0x03
 814:	63 fd       	sbrc	r22, 3
 816:	7d c0       	rjmp	.+250    	; 0x912 <__stack+0x13>
 818:	81 11       	cpse	r24, r1
 81a:	7d c0       	rjmp	.+250    	; 0x916 <__stack+0x17>
 81c:	63 2f       	mov	r22, r19
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	db 01       	movw	r26, r22
 822:	a0 95       	com	r26
 824:	b0 95       	com	r27
 826:	30 ff       	sbrs	r19, 0
 828:	8d c0       	rjmp	.+282    	; 0x944 <__stack+0x45>
 82a:	43 fd       	sbrc	r20, 3
 82c:	8b c0       	rjmp	.+278    	; 0x944 <__stack+0x45>
 82e:	69 2f       	mov	r22, r25
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	60 95       	com	r22
 834:	70 95       	com	r23
 836:	62 74       	andi	r22, 0x42	; 66
 838:	77 27       	eor	r23, r23
 83a:	67 2b       	or	r22, r23
 83c:	09 f0       	breq	.+2      	; 0x840 <CfgBytesAreValid+0x9a>
 83e:	82 c0       	rjmp	.+260    	; 0x944 <__stack+0x45>
 840:	83 81       	ldd	r24, Z+3	; 0x03
 842:	82 95       	swap	r24
 844:	81 70       	andi	r24, 0x01	; 1
 846:	30 fd       	sbrc	r19, 0
 848:	6e c0       	rjmp	.+220    	; 0x926 <__stack+0x27>
 84a:	23 fd       	sbrc	r18, 3
 84c:	6c c0       	rjmp	.+216    	; 0x926 <__stack+0x27>
 84e:	69 2f       	mov	r22, r25
 850:	62 74       	andi	r22, 0x42	; 66
 852:	09 f0       	breq	.+2      	; 0x856 <CfgBytesAreValid+0xb0>
 854:	68 c0       	rjmp	.+208    	; 0x926 <__stack+0x27>
 856:	63 81       	ldd	r22, Z+3	; 0x03
 858:	64 fd       	sbrc	r22, 4
 85a:	65 c0       	rjmp	.+202    	; 0x926 <__stack+0x27>
 85c:	81 11       	cpse	r24, r1
 85e:	5b c0       	rjmp	.+182    	; 0x916 <__stack+0x17>
 860:	a1 fd       	sbrc	r26, 1
 862:	74 c0       	rjmp	.+232    	; 0x94c <__stack+0x4d>
 864:	44 fd       	sbrc	r20, 4
 866:	72 c0       	rjmp	.+228    	; 0x94c <__stack+0x4d>
 868:	69 2f       	mov	r22, r25
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 95       	com	r22
 86e:	70 95       	com	r23
 870:	64 78       	andi	r22, 0x84	; 132
 872:	77 27       	eor	r23, r23
 874:	67 2b       	or	r22, r23
 876:	09 f0       	breq	.+2      	; 0x87a <CfgBytesAreValid+0xd4>
 878:	69 c0       	rjmp	.+210    	; 0x94c <__stack+0x4d>
 87a:	83 81       	ldd	r24, Z+3	; 0x03
 87c:	85 fb       	bst	r24, 5
 87e:	88 27       	eor	r24, r24
 880:	80 f9       	bld	r24, 0
 882:	31 fd       	sbrc	r19, 1
 884:	53 c0       	rjmp	.+166    	; 0x92c <__stack+0x2d>
 886:	24 fd       	sbrc	r18, 4
 888:	51 c0       	rjmp	.+162    	; 0x92c <__stack+0x2d>
 88a:	69 2f       	mov	r22, r25
 88c:	64 78       	andi	r22, 0x84	; 132
 88e:	09 f0       	breq	.+2      	; 0x892 <CfgBytesAreValid+0xec>
 890:	4d c0       	rjmp	.+154    	; 0x92c <__stack+0x2d>
 892:	63 81       	ldd	r22, Z+3	; 0x03
 894:	65 fd       	sbrc	r22, 5
 896:	4a c0       	rjmp	.+148    	; 0x92c <__stack+0x2d>
 898:	81 11       	cpse	r24, r1
 89a:	3d c0       	rjmp	.+122    	; 0x916 <__stack+0x17>
 89c:	a2 fd       	sbrc	r26, 2
 89e:	5a c0       	rjmp	.+180    	; 0x954 <__stack+0x55>
 8a0:	ba 01       	movw	r22, r20
 8a2:	61 72       	andi	r22, 0x21	; 33
 8a4:	77 27       	eor	r23, r23
 8a6:	67 2b       	or	r22, r23
 8a8:	09 f0       	breq	.+2      	; 0x8ac <CfgBytesAreValid+0x106>
 8aa:	54 c0       	rjmp	.+168    	; 0x954 <__stack+0x55>
 8ac:	69 2f       	mov	r22, r25
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	60 95       	com	r22
 8b2:	70 95       	com	r23
 8b4:	63 fd       	sbrc	r22, 3
 8b6:	4e c0       	rjmp	.+156    	; 0x954 <__stack+0x55>
 8b8:	83 81       	ldd	r24, Z+3	; 0x03
 8ba:	86 fb       	bst	r24, 6
 8bc:	88 27       	eor	r24, r24
 8be:	80 f9       	bld	r24, 0
 8c0:	32 fd       	sbrc	r19, 2
 8c2:	37 c0       	rjmp	.+110    	; 0x932 <__stack+0x33>
 8c4:	62 2f       	mov	r22, r18
 8c6:	61 72       	andi	r22, 0x21	; 33
 8c8:	a1 f5       	brne	.+104    	; 0x932 <__stack+0x33>
 8ca:	93 fd       	sbrc	r25, 3
 8cc:	32 c0       	rjmp	.+100    	; 0x932 <__stack+0x33>
 8ce:	63 81       	ldd	r22, Z+3	; 0x03
 8d0:	66 fd       	sbrc	r22, 6
 8d2:	2f c0       	rjmp	.+94     	; 0x932 <__stack+0x33>
 8d4:	81 11       	cpse	r24, r1
 8d6:	1f c0       	rjmp	.+62     	; 0x916 <__stack+0x17>
 8d8:	a3 fd       	sbrc	r26, 3
 8da:	40 c0       	rjmp	.+128    	; 0x95c <__stack+0x5d>
 8dc:	42 74       	andi	r20, 0x42	; 66
 8de:	55 27       	eor	r21, r21
 8e0:	45 2b       	or	r20, r21
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <CfgBytesAreValid+0x140>
 8e4:	3b c0       	rjmp	.+118    	; 0x95c <__stack+0x5d>
 8e6:	49 2f       	mov	r20, r25
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	40 95       	com	r20
 8ec:	50 95       	com	r21
 8ee:	44 fd       	sbrc	r20, 4
 8f0:	35 c0       	rjmp	.+106    	; 0x95c <__stack+0x5d>
 8f2:	83 81       	ldd	r24, Z+3	; 0x03
 8f4:	88 1f       	adc	r24, r24
 8f6:	88 27       	eor	r24, r24
 8f8:	88 1f       	adc	r24, r24
 8fa:	33 fd       	sbrc	r19, 3
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
 8fe:	22 74       	andi	r18, 0x42	; 66
 900:	59 f4       	brne	.+22     	; 0x918 <__stack+0x19>
 902:	94 fd       	sbrc	r25, 4
 904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0x19>
 906:	93 81       	ldd	r25, Z+3	; 0x03
 908:	97 fd       	sbrc	r25, 7
 90a:	06 c0       	rjmp	.+12     	; 0x918 <__stack+0x19>
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	89 27       	eor	r24, r25
 910:	03 c0       	rjmp	.+6      	; 0x918 <__stack+0x19>
 912:	81 11       	cpse	r24, r1
 914:	83 cf       	rjmp	.-250    	; 0x81c <CfgBytesAreValid+0x76>
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	08 95       	ret
 926:	81 11       	cpse	r24, r1
 928:	9b cf       	rjmp	.-202    	; 0x860 <CfgBytesAreValid+0xba>
 92a:	f5 cf       	rjmp	.-22     	; 0x916 <__stack+0x17>
 92c:	81 11       	cpse	r24, r1
 92e:	b6 cf       	rjmp	.-148    	; 0x89c <CfgBytesAreValid+0xf6>
 930:	f2 cf       	rjmp	.-28     	; 0x916 <__stack+0x17>
 932:	81 11       	cpse	r24, r1
 934:	d1 cf       	rjmp	.-94     	; 0x8d8 <CfgBytesAreValid+0x132>
 936:	ef cf       	rjmp	.-34     	; 0x916 <__stack+0x17>
 938:	82 2f       	mov	r24, r18
 93a:	84 78       	andi	r24, 0x84	; 132
 93c:	61 f7       	brne	.-40     	; 0x916 <__stack+0x17>
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	92 81       	ldd	r25, Z+2	; 0x02
 942:	63 cf       	rjmp	.-314    	; 0x80a <CfgBytesAreValid+0x64>
 944:	30 fd       	sbrc	r19, 0
 946:	e7 cf       	rjmp	.-50     	; 0x916 <__stack+0x17>
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	7f cf       	rjmp	.-258    	; 0x84a <CfgBytesAreValid+0xa4>
 94c:	31 fd       	sbrc	r19, 1
 94e:	e3 cf       	rjmp	.-58     	; 0x916 <__stack+0x17>
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	99 cf       	rjmp	.-206    	; 0x886 <CfgBytesAreValid+0xe0>
 954:	32 fd       	sbrc	r19, 2
 956:	df cf       	rjmp	.-66     	; 0x916 <__stack+0x17>
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	b4 cf       	rjmp	.-152    	; 0x8c4 <CfgBytesAreValid+0x11e>
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	cd cf       	rjmp	.-102    	; 0x8fa <CfgBytesAreValid+0x154>

00000960 <BridgeCfgLis>:
 960:	ef 92       	push	r14
 962:	ff 92       	push	r15
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	00 d0       	rcall	.+0      	; 0x96e <BridgeCfgLis+0xe>
 96e:	00 d0       	rcall	.+0      	; 0x970 <BridgeCfgLis+0x10>
 970:	00 d0       	rcall	.+0      	; 0x972 <BridgeCfgLis+0x12>
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 97a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 97e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 982:	09 95       	icall
 984:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 988:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 98c:	09 95       	icall
 98e:	88 23       	and	r24, r24
 990:	09 f4       	brne	.+2      	; 0x994 <BridgeCfgLis+0x34>
 992:	c5 c0       	rjmp	.+394    	; 0xb1e <BridgeCfgLis+0x1be>
 994:	00 e0       	ldi	r16, 0x00	; 0
 996:	10 e0       	ldi	r17, 0x00	; 0
 998:	ce 01       	movw	r24, r28
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	7c 01       	movw	r14, r24
 99e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 9a2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 9a6:	c7 01       	movw	r24, r14
 9a8:	80 0f       	add	r24, r16
 9aa:	91 1f       	adc	r25, r17
 9ac:	09 95       	icall
 9ae:	81 11       	cpse	r24, r1
 9b0:	8c c0       	rjmp	.+280    	; 0xaca <BridgeCfgLis+0x16a>
 9b2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 9b6:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 9ba:	09 95       	icall
 9bc:	8d ef       	ldi	r24, 0xFD	; 253
 9be:	8d 83       	std	Y+5, r24	; 0x05
 9c0:	82 e0       	ldi	r24, 0x02	; 2
 9c2:	8e 83       	std	Y+6, r24	; 0x06
 9c4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 9c8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 9cc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 9d0:	09 95       	icall
 9d2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 9d6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 9da:	09 95       	icall
 9dc:	88 23       	and	r24, r24
 9de:	81 f0       	breq	.+32     	; 0xa00 <BridgeCfgLis+0xa0>
 9e0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 9e4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 9e8:	ce 01       	movw	r24, r28
 9ea:	05 96       	adiw	r24, 0x05	; 5
 9ec:	09 95       	icall
 9ee:	88 23       	and	r24, r24
 9f0:	39 f0       	breq	.+14     	; 0xa00 <BridgeCfgLis+0xa0>
 9f2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 9f6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 9fa:	ce 01       	movw	r24, r28
 9fc:	06 96       	adiw	r24, 0x06	; 6
 9fe:	09 95       	icall
 a00:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a04:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 a08:	09 95       	icall
 a0a:	c7 01       	movw	r24, r14
 a0c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <CfgBytesAreValid>
 a10:	88 23       	and	r24, r24
 a12:	09 f4       	brne	.+2      	; 0xa16 <BridgeCfgLis+0xb6>
 a14:	61 c0       	rjmp	.+194    	; 0xad8 <BridgeCfgLis+0x178>
 a16:	1d 82       	std	Y+5, r1	; 0x05
 a18:	82 e0       	ldi	r24, 0x02	; 2
 a1a:	8e 83       	std	Y+6, r24	; 0x06
 a1c:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <FtCmd_Write>
 a20:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 a24:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 a28:	81 2f       	mov	r24, r17
 a2a:	09 95       	icall
 a2c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 a30:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 a34:	09 95       	icall
 a36:	88 23       	and	r24, r24
 a38:	81 f0       	breq	.+32     	; 0xa5a <BridgeCfgLis+0xfa>
 a3a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a3e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a42:	ce 01       	movw	r24, r28
 a44:	05 96       	adiw	r24, 0x05	; 5
 a46:	09 95       	icall
 a48:	88 23       	and	r24, r24
 a4a:	39 f0       	breq	.+14     	; 0xa5a <BridgeCfgLis+0xfa>
 a4c:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a50:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 a54:	ce 01       	movw	r24, r28
 a56:	06 96       	adiw	r24, 0x06	; 6
 a58:	09 95       	icall
 a5a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 a5e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 a62:	09 95       	icall
 a64:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 a68:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 a6c:	81 2f       	mov	r24, r17
 a6e:	09 95       	icall
 a70:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 a74:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 a78:	09 95       	icall
 a7a:	88 23       	and	r24, r24
 a7c:	a1 f0       	breq	.+40     	; 0xaa6 <BridgeCfgLis+0x146>
 a7e:	c7 01       	movw	r24, r14
 a80:	7e 01       	movw	r14, r28
 a82:	25 e0       	ldi	r18, 0x05	; 5
 a84:	e2 0e       	add	r14, r18
 a86:	f1 1c       	adc	r15, r1
 a88:	04 c0       	rjmp	.+8      	; 0xa92 <BridgeCfgLis+0x132>
 a8a:	c8 01       	movw	r24, r16
 a8c:	0e 15       	cp	r16, r14
 a8e:	1f 05       	cpc	r17, r15
 a90:	51 f0       	breq	.+20     	; 0xaa6 <BridgeCfgLis+0x146>
 a92:	8c 01       	movw	r16, r24
 a94:	0f 5f       	subi	r16, 0xFF	; 255
 a96:	1f 4f       	sbci	r17, 0xFF	; 255
 a98:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 a9c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 aa0:	09 95       	icall
 aa2:	81 11       	cpse	r24, r1
 aa4:	f2 cf       	rjmp	.-28     	; 0xa8a <BridgeCfgLis+0x12a>
 aa6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 aaa:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 aae:	09 95       	icall
 ab0:	26 96       	adiw	r28, 0x06	; 6
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	f8 94       	cli
 ab6:	de bf       	out	0x3e, r29	; 62
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	cd bf       	out	0x3d, r28	; 61
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	ff 90       	pop	r15
 ac6:	ef 90       	pop	r14
 ac8:	08 95       	ret
 aca:	0f 5f       	subi	r16, 0xFF	; 255
 acc:	1f 4f       	sbci	r17, 0xFF	; 255
 ace:	04 30       	cpi	r16, 0x04	; 4
 ad0:	11 05       	cpc	r17, r1
 ad2:	09 f0       	breq	.+2      	; 0xad6 <BridgeCfgLis+0x176>
 ad4:	64 cf       	rjmp	.-312    	; 0x99e <BridgeCfgLis+0x3e>
 ad6:	94 cf       	rjmp	.-216    	; 0xa00 <BridgeCfgLis+0xa0>
 ad8:	8e ef       	ldi	r24, 0xFE	; 254
 ada:	8d 83       	std	Y+5, r24	; 0x05
 adc:	82 e0       	ldi	r24, 0x02	; 2
 ade:	8e 83       	std	Y+6, r24	; 0x06
 ae0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 ae4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 ae8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 aec:	09 95       	icall
 aee:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 af2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 af6:	09 95       	icall
 af8:	88 23       	and	r24, r24
 afa:	a9 f2       	breq	.-86     	; 0xaa6 <BridgeCfgLis+0x146>
 afc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 b00:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 b04:	ce 01       	movw	r24, r28
 b06:	05 96       	adiw	r24, 0x05	; 5
 b08:	09 95       	icall
 b0a:	88 23       	and	r24, r24
 b0c:	61 f2       	breq	.-104    	; 0xaa6 <BridgeCfgLis+0x146>
 b0e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 b12:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 b16:	ce 01       	movw	r24, r28
 b18:	06 96       	adiw	r24, 0x06	; 6
 b1a:	09 95       	icall
 b1c:	c4 cf       	rjmp	.-120    	; 0xaa6 <BridgeCfgLis+0x146>
 b1e:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <BiColorLed_port>
 b22:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <BiColorLed_port+0x1>
 b26:	20 81       	ld	r18, Z
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	00 90 6a 01 	lds	r0, 0x016A	; 0x80016a <status_led>
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <BridgeCfgLis+0x1d6>
 b32:	88 0f       	add	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	0a 94       	dec	r0
 b38:	e2 f7       	brpl	.-8      	; 0xb32 <BridgeCfgLis+0x1d2>
 b3a:	82 2b       	or	r24, r18
 b3c:	80 83       	st	Z, r24
 b3e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b42:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b46:	09 95       	icall
 b48:	ce 01       	movw	r24, r28
 b4a:	01 96       	adiw	r24, 0x01	; 1
 b4c:	7c 01       	movw	r14, r24
 b4e:	36 cf       	rjmp	.-404    	; 0x9bc <BridgeCfgLis+0x5c>

00000b50 <UsbReadOneByte>:
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	ec 01       	movw	r28, r24
 b56:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 b5a:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 b5e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FtCmd_Read>
 b62:	09 95       	icall
 b64:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 b68:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 b6c:	09 95       	icall
 b6e:	88 23       	and	r24, r24
 b70:	79 f0       	breq	.+30     	; 0xb90 <UsbReadOneByte+0x40>
 b72:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 b76:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 b7a:	ce 01       	movw	r24, r28
 b7c:	09 95       	icall
 b7e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b82:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b86:	09 95       	icall
 b88:	81 e0       	ldi	r24, 0x01	; 1
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	08 95       	ret
 b90:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 b94:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 b98:	09 95       	icall
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	df 91       	pop	r29
 b9e:	cf 91       	pop	r28
 ba0:	08 95       	ret

00000ba2 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
 ba2:	1f 93       	push	r17
 ba4:	cf 93       	push	r28
 ba6:	df 93       	push	r29
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <UsbWriteStatusInvalid+0x8>
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
 bae:	9f ef       	ldi	r25, 0xFF	; 255
 bb0:	99 83       	std	Y+1, r25	; 0x01
 bb2:	8a 83       	std	Y+2, r24	; 0x02
}

uint16_t UsbWrite(uint8_t const *write_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 bb4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 bb8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 bbc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <FtCmd_Write>
 bc0:	09 95       	icall
    if (!FtBusTurnaround())
 bc2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 bc6:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 bca:	09 95       	icall
 bcc:	88 23       	and	r24, r24
 bce:	19 f1       	breq	.+70     	; 0xc16 <UsbWriteStatusInvalid+0x74>
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 bd0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 bd4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 bd8:	ce 01       	movw	r24, r28
 bda:	01 96       	adiw	r24, 0x01	; 1
 bdc:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 bde:	81 11       	cpse	r24, r1
 be0:	0d c0       	rjmp	.+26     	; 0xbfc <UsbWriteStatusInvalid+0x5a>
 be2:	10 e0       	ldi	r17, 0x00	; 0
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 be4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 be8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 bec:	09 95       	icall
 bee:	81 2f       	mov	r24, r17
}
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 bf0:	0f 90       	pop	r0
 bf2:	0f 90       	pop	r0
 bf4:	df 91       	pop	r29
 bf6:	cf 91       	pop	r28
 bf8:	1f 91       	pop	r17
 bfa:	08 95       	ret
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 bfc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 c00:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 c04:	ce 01       	movw	r24, r28
 c06:	02 96       	adiw	r24, 0x02	; 2
 c08:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 c0a:	88 23       	and	r24, r24
 c0c:	11 f0       	breq	.+4      	; 0xc12 <UsbWriteStatusInvalid+0x70>
 c0e:	12 e0       	ldi	r17, 0x02	; 2
 c10:	e9 cf       	rjmp	.-46     	; 0xbe4 <UsbWriteStatusInvalid+0x42>
 c12:	11 e0       	ldi	r17, 0x01	; 1
 c14:	e7 cf       	rjmp	.-50     	; 0xbe4 <UsbWriteStatusInvalid+0x42>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 c16:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 c1a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 c1e:	09 95       	icall
 c20:	80 e0       	ldi	r24, 0x00	; 0
}
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
    return UsbWrite(StatusInvalid,2);
}
 c22:	0f 90       	pop	r0
 c24:	0f 90       	pop	r0
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	1f 91       	pop	r17
 c2c:	08 95       	ret

00000c2e <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 c2e:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiStatusRegister>
 c32:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiStatusRegister+0x1>
 c36:	09 95       	icall
 c38:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ReadSpiDataRegister>
 c3c:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ReadSpiDataRegister+0x1>
 c40:	09 94       	ijmp

00000c42 <ReadSpiStatusRegister_Implementation>:
 c42:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <Spi_spsr>
 c46:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <Spi_spsr+0x1>
 c4a:	80 81       	ld	r24, Z
 c4c:	08 95       	ret

00000c4e <EnableSpi_Implementation>:
 c4e:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Spi_spcr>
 c52:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <Spi_spcr+0x1>
 c56:	20 81       	ld	r18, Z
 c58:	81 e0       	ldi	r24, 0x01	; 1
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	00 90 47 01 	lds	r0, 0x0147	; 0x800147 <Spi_Enable>
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <EnableSpi_Implementation+0x18>
 c62:	88 0f       	add	r24, r24
 c64:	99 1f       	adc	r25, r25
 c66:	0a 94       	dec	r0
 c68:	e2 f7       	brpl	.-8      	; 0xc62 <EnableSpi_Implementation+0x14>
 c6a:	82 2b       	or	r24, r18
 c6c:	80 83       	st	Z, r24
 c6e:	08 95       	ret

00000c70 <SpiMasterCloseSpi_Implementation>:
 c70:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <Spi_port>
 c74:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <Spi_port+0x1>
 c78:	20 81       	ld	r18, Z
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <Spi_Ss>
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <SpiMasterCloseSpi_Implementation+0x18>
 c84:	88 0f       	add	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	0a 94       	dec	r0
 c8a:	e2 f7       	brpl	.-8      	; 0xc84 <SpiMasterCloseSpi_Implementation+0x14>
 c8c:	82 2b       	or	r24, r18
 c8e:	80 83       	st	Z, r24
 c90:	08 95       	ret

00000c92 <ReadSpiDataRegister_Implementation>:
 c92:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <Spi_spdr>
 c96:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <Spi_spdr+0x1>
 c9a:	80 81       	ld	r24, Z
 c9c:	08 95       	ret

00000c9e <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 c9e:	0e 94 38 06 	call	0xc70	; 0xc70 <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 ca2:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <Spi_ddr>
 ca6:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 caa:	40 81       	ld	r20, Z
 cac:	81 e0       	ldi	r24, 0x01	; 1
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	9c 01       	movw	r18, r24
 cb2:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <Spi_Miso>
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <SpiMasterInit+0x1e>
 cb8:	22 0f       	add	r18, r18
 cba:	33 1f       	adc	r19, r19
 cbc:	0a 94       	dec	r0
 cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <SpiMasterInit+0x1a>
 cc0:	32 2f       	mov	r19, r18
 cc2:	30 95       	com	r19
 cc4:	34 23       	and	r19, r20
 cc6:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 cc8:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <Spi_port>
 ccc:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 cd0:	3c 91       	ld	r19, X
 cd2:	23 2b       	or	r18, r19
 cd4:	2c 93       	st	X, r18
 cd6:	40 81       	ld	r20, Z
 cd8:	9c 01       	movw	r18, r24
 cda:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <Spi_Ss>
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <SpiMasterInit+0x46>
 ce0:	22 0f       	add	r18, r18
 ce2:	33 1f       	adc	r19, r19
 ce4:	0a 94       	dec	r0
 ce6:	e2 f7       	brpl	.-8      	; 0xce0 <SpiMasterInit+0x42>
 ce8:	24 2b       	or	r18, r20
 cea:	20 83       	st	Z, r18
 cec:	40 81       	ld	r20, Z
 cee:	9c 01       	movw	r18, r24
 cf0:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <Spi_Mosi>
 cf4:	02 c0       	rjmp	.+4      	; 0xcfa <SpiMasterInit+0x5c>
 cf6:	22 0f       	add	r18, r18
 cf8:	33 1f       	adc	r19, r19
 cfa:	0a 94       	dec	r0
 cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <SpiMasterInit+0x58>
 cfe:	24 2b       	or	r18, r20
 d00:	20 83       	st	Z, r18
 d02:	40 81       	ld	r20, Z
 d04:	9c 01       	movw	r18, r24
 d06:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Spi_Sck>
 d0a:	02 c0       	rjmp	.+4      	; 0xd10 <SpiMasterInit+0x72>
 d0c:	22 0f       	add	r18, r18
 d0e:	33 1f       	adc	r19, r19
 d10:	0a 94       	dec	r0
 d12:	e2 f7       	brpl	.-8      	; 0xd0c <SpiMasterInit+0x6e>
 d14:	24 2b       	or	r18, r20
 d16:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 d18:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <Spi_spcr>
 d1c:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <Spi_spcr+0x1>
 d20:	40 81       	ld	r20, Z
 d22:	9c 01       	movw	r18, r24
 d24:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Spi_MasterSlaveSelect>
 d28:	02 c0       	rjmp	.+4      	; 0xd2e <SpiMasterInit+0x90>
 d2a:	22 0f       	add	r18, r18
 d2c:	33 1f       	adc	r19, r19
 d2e:	0a 94       	dec	r0
 d30:	e2 f7       	brpl	.-8      	; 0xd2a <SpiMasterInit+0x8c>
 d32:	24 2b       	or	r18, r20
 d34:	20 83       	st	Z, r18
 d36:	40 81       	ld	r20, Z
 d38:	9c 01       	movw	r18, r24
 d3a:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Spi_ClockRateBit0>
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <SpiMasterInit+0xa6>
 d40:	22 0f       	add	r18, r18
 d42:	33 1f       	adc	r19, r19
 d44:	0a 94       	dec	r0
 d46:	e2 f7       	brpl	.-8      	; 0xd40 <SpiMasterInit+0xa2>
 d48:	24 2b       	or	r18, r20
 d4a:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 d4c:	30 81       	ld	r19, Z
 d4e:	ac 01       	movw	r20, r24
 d50:	00 90 48 01 	lds	r0, 0x0148	; 0x800148 <Spi_ClockRateBit1>
 d54:	02 c0       	rjmp	.+4      	; 0xd5a <SpiMasterInit+0xbc>
 d56:	44 0f       	add	r20, r20
 d58:	55 1f       	adc	r21, r21
 d5a:	0a 94       	dec	r0
 d5c:	e2 f7       	brpl	.-8      	; 0xd56 <SpiMasterInit+0xb8>
 d5e:	24 2f       	mov	r18, r20
 d60:	20 95       	com	r18
 d62:	23 23       	and	r18, r19
 d64:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 d66:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <Spi_spsr>
 d6a:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 d6e:	20 81       	ld	r18, Z
 d70:	00 90 46 01 	lds	r0, 0x0146	; 0x800146 <Spi_DoubleClockRate>
 d74:	02 c0       	rjmp	.+4      	; 0xd7a <SpiMasterInit+0xdc>
 d76:	88 0f       	add	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	0a 94       	dec	r0
 d7c:	e2 f7       	brpl	.-8      	; 0xd76 <SpiMasterInit+0xd8>
 d7e:	82 2b       	or	r24, r18
 d80:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 d82:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <EnableSpi>
 d86:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <EnableSpi+0x1>
 d8a:	09 95       	icall
    ClearPendingSpiInterrupt();
 d8c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <ClearPendingSpiInterrupt>
 d90:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <ClearPendingSpiInterrupt+0x1>
 d94:	09 94       	ijmp

00000d96 <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 d96:	cf 93       	push	r28
 d98:	df 93       	push	r29
 d9a:	1f 92       	push	r1
 d9c:	cd b7       	in	r28, 0x3d	; 61
 d9e:	de b7       	in	r29, 0x3e	; 62
 da0:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 da2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SpiMasterInit>
    UsbInit();
 da6:	0e 94 05 02 	call	0x40a	; 0x40a <UsbInit>
 daa:	3d 9a       	sbi	0x07, 5	; 7
 dac:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 dae:	80 e2       	ldi	r24, 0x20	; 32
 db0:	96 e0       	ldi	r25, 0x06	; 6
 db2:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <nbytes_in_frame+0x1>
 db6:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 dba:	ce 01       	movw	r24, r28
 dbc:	01 96       	adiw	r24, 0x01	; 1
 dbe:	0e 94 a8 05 	call	0xb50	; 0xb50 <UsbReadOneByte>
 dc2:	88 23       	and	r24, r24
 dc4:	d1 f3       	breq	.-12     	; 0xdba <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 dc6:	89 81       	ldd	r24, Y+1	; 0x01
 dc8:	0e 94 c5 03 	call	0x78a	; 0x78a <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 dcc:	00 97       	sbiw	r24, 0x00	; 0
 dce:	19 f0       	breq	.+6      	; 0xdd6 <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 dd0:	fc 01       	movw	r30, r24
 dd2:	09 95       	icall
 dd4:	f2 cf       	rjmp	.-28     	; 0xdba <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 dd6:	89 81       	ldd	r24, Y+1	; 0x01
 dd8:	0e 94 d1 05 	call	0xba2	; 0xba2 <UsbWriteStatusInvalid>
 ddc:	ee cf       	rjmp	.-36     	; 0xdba <main+0x24>

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
