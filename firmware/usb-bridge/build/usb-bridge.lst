
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000fbe  00001052  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000620  00800174  00800174  000010c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033aa  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ce  00000000  00000000  000047f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000137f  00000000  00000000  00005ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f4  00000000  00000000  00006e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001245  00000000  00000000  00007734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a41  00000000  00000000  00008979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000a3ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 37       	cpi	r26, 0x74	; 116
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a4 e7       	ldi	r26, 0x74	; 116
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 39       	cpi	r26, 0x94	; 148
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 07 	call	0xf76	; 0xf76 <main>
  9e:	0c 94 dd 07 	jmp	0xfba	; 0xfba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 14a:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 16e:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 190:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Ft1248_port>
 1b2:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <FtMiosio_ddr>
 1d6:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <FtMiosio_ddr>
 1e4:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <Ft1248_pin>
 1f0:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <Ft1248_Miso>
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <FtIsBusOk_Implementation+0x18>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <FtIsBusOk_Implementation+0x14>
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	28 23       	and	r18, r24
 20c:	39 23       	and	r19, r25
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	23 2b       	or	r18, r19
 212:	09 f0       	breq	.+2      	; 0x216 <FtIsBusOk_Implementation+0x2a>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret

00000218 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 218:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <FtMiosio_pin>
 21c:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <FtMiosio_pin+0x1>
 220:	80 81       	ld	r24, Z
}
 222:	08 95       	ret

00000224 <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 224:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <FtMiosio_port>
 228:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <FtMiosio_port+0x1>
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 238:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 23c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 240:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 242:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 246:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 24a:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 24c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 250:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 254:	09 95       	icall
 256:	c8 2f       	mov	r28, r24
 258:	88 23       	and	r24, r24
 25a:	39 f0       	breq	.+14     	; 0x26a <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 25c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 260:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 264:	09 95       	icall
 266:	f8 01       	movw	r30, r16
 268:	80 83       	st	Z, r24
    return true;
}
 26a:	8c 2f       	mov	r24, r28
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <FtOutputByte_Implementation>:
 274:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <FtMiosio_port>
 278:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <FtMiosio_port+0x1>
 27c:	80 83       	st	Z, r24
 27e:	08 95       	ret

00000280 <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 284:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <Ft1248_ddr>
 288:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <Ft1248_ddr+0x1>
 28c:	40 81       	ld	r20, Z
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 01       	movw	r18, r24
 294:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <Ft1248_Miso>
 298:	02 c0       	rjmp	.+4      	; 0x29e <FtInit+0x1e>
 29a:	22 0f       	add	r18, r18
 29c:	33 1f       	adc	r19, r19
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <FtInit+0x1a>
 2a2:	32 2f       	mov	r19, r18
 2a4:	30 95       	com	r19
 2a6:	34 23       	and	r19, r20
 2a8:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2aa:	a0 91 6b 01 	lds	r26, 0x016B	; 0x80016b <Ft1248_port>
 2ae:	b0 91 6c 01 	lds	r27, 0x016C	; 0x80016c <Ft1248_port+0x1>
 2b2:	3c 91       	ld	r19, X
 2b4:	23 2b       	or	r18, r19
 2b6:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b8:	c0 91 67 01 	lds	r28, 0x0167	; 0x800167 <FtMiosio_ddr>
 2bc:	d0 91 68 01 	lds	r29, 0x0168	; 0x800168 <FtMiosio_ddr+0x1>
 2c0:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2c2:	c0 91 65 01 	lds	r28, 0x0165	; 0x800165 <FtMiosio_port>
 2c6:	d0 91 66 01 	lds	r29, 0x0166	; 0x800166 <FtMiosio_port+0x1>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	28 83       	st	Y, r18
}
void FtSckLow(void)
{
    ClearBit(Ft1248_port, Ft1248_Sck);  // drive low
 2ce:	4c 91       	ld	r20, X
 2d0:	9c 01       	movw	r18, r24
 2d2:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <Ft1248_Sck>
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <FtInit+0x5c>
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <FtInit+0x58>
 2e0:	32 2f       	mov	r19, r18
 2e2:	30 95       	com	r19
 2e4:	34 23       	and	r19, r20
 2e6:	3c 93       	st	X, r19
    SetBit(Ft1248_ddr, Ft1248_Sck);     // cfg as output
 2e8:	30 81       	ld	r19, Z
 2ea:	23 2b       	or	r18, r19
 2ec:	20 83       	st	Z, r18
}
void FtSsHigh(void)
{
    SetBit(Ft1248_port, Ft1248_Ss);     // drive high
 2ee:	2c 91       	ld	r18, X
 2f0:	00 90 62 01 	lds	r0, 0x0162	; 0x800162 <Ft1248_Ss>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <FtInit+0x7a>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <FtInit+0x76>
 2fe:	92 2f       	mov	r25, r18
 300:	98 2b       	or	r25, r24
 302:	9c 93       	st	X, r25
    SetBit(Ft1248_ddr, Ft1248_Ss);      // cfg as output
 304:	90 81       	ld	r25, Z
 306:	89 2b       	or	r24, r25
 308:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <UsbWrite_Implementation>:
    FtDeactivateInterface();
    return num_bytes_read;
}

static uint16_t UsbWrite_Implementation(uint8_t const *write_buffer, uint16_t nbytes)
{
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	8c 01       	movw	r16, r24
 31e:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 320:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 324:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 328:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <FtCmd_Write>
 32c:	09 95       	icall
    if (!FtBusTurnaround())
 32e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 332:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 336:	09 95       	icall
 338:	88 23       	and	r24, r24
 33a:	f1 f0       	breq	.+60     	; 0x378 <UsbWrite_Implementation+0x68>
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 340:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 344:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 348:	c8 01       	movw	r24, r16
 34a:	8c 0f       	add	r24, r28
 34c:	9d 1f       	adc	r25, r29
 34e:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 350:	81 11       	cpse	r24, r1
 352:	0d c0       	rjmp	.+26     	; 0x36e <UsbWrite_Implementation+0x5e>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 354:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 358:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 35c:	09 95       	icall
    return num_bytes_sent;
}
 35e:	ce 01       	movw	r24, r28
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 36e:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 370:	ce 15       	cp	r28, r14
 372:	df 05       	cpc	r29, r15
 374:	28 f3       	brcs	.-54     	; 0x340 <UsbWrite_Implementation+0x30>
 376:	ee cf       	rjmp	.-36     	; 0x354 <UsbWrite_Implementation+0x44>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 378:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 37c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 380:	09 95       	icall
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 386:	ce 01       	movw	r24, r28
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	08 95       	ret

00000396 <UsbReadBytes_Implementation>:
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
static uint16_t UsbReadBytes_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	ec 01       	movw	r28, r24
 3a6:	7b 01       	movw	r14, r22
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
 3a8:	61 15       	cp	r22, r1
 3aa:	71 05       	cpc	r23, r1
 3ac:	09 f1       	breq	.+66     	; 0x3f0 <UsbReadBytes_Implementation+0x5a>
 3ae:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <FtCmd_Read>
 3b2:	8c 01       	movw	r16, r24
 3b4:	06 0f       	add	r16, r22
 3b6:	17 1f       	adc	r17, r23
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3b8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3bc:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3c0:	8d 2d       	mov	r24, r13
 3c2:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3c4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3c8:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3cc:	09 95       	icall
    if (!has_data_to_read)
 3ce:	88 23       	and	r24, r24
 3d0:	c1 f0       	breq	.+48     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 3d2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 3d6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 3da:	ce 01       	movw	r24, r28
 3dc:	09 95       	icall
    FtDeactivateInterface();
 3de:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3e2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3e6:	09 95       	icall
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
    {
        while (!UsbReadOneByte(read_buffer)); // Loops until FtBus has data.
        num_bytes_read++;
        read_buffer++;
 3e8:	21 96       	adiw	r28, 0x01	; 1
    return num_bytes_read;
}
static uint16_t UsbReadBytes_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
 3ea:	0c 17       	cp	r16, r28
 3ec:	1d 07       	cpc	r17, r29
 3ee:	21 f7       	brne	.-56     	; 0x3b8 <UsbReadBytes_Implementation+0x22>
        while (!UsbReadOneByte(read_buffer)); // Loops until FtBus has data.
        num_bytes_read++;
        read_buffer++;
    }
    return num_bytes_read;
}
 3f0:	c7 01       	movw	r24, r14
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	08 95       	ret
    {
        // This path lets `UsbReadOneByte` work as a looping check to
        // see when a first byte is ready.
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
 402:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 406:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 40a:	09 95       	icall
 40c:	d5 cf       	rjmp	.-86     	; 0x3b8 <UsbReadBytes_Implementation+0x22>

0000040e <UsbInit>:
// =====[status_led defined in BiColorLed-Hardware header]=====
extern uint8_t const status_led;

void UsbInit(void)
{
    FtInit();
 40e:	0c 94 40 01 	jmp	0x280	; 0x280 <FtInit>

00000412 <UsbReadOneByte>:
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 418:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 41c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 420:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <FtCmd_Read>
 424:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 426:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 42a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 42e:	09 95       	icall
    if (!has_data_to_read)
 430:	88 23       	and	r24, r24
 432:	79 f0       	breq	.+30     	; 0x452 <UsbReadOneByte+0x40>
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 434:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 438:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 43c:	ce 01       	movw	r24, r28
 43e:	09 95       	icall
    FtDeactivateInterface();
 440:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 444:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 448:	09 95       	icall
    return num_bytes_read;
 44a:	81 e0       	ldi	r24, 0x01	; 1
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret
    {
        // This path lets `UsbReadOneByte` work as a looping check to
        // see when a first byte is ready.
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
 452:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 456:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 45a:	09 95       	icall
 45c:	80 e0       	ldi	r24, 0x00	; 0
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <ClearPendingSpiInterrupt_Implementation>:
    SetBit(Spi_port, Spi_DataReady); // enable pull-up
}
void SetDataReadyAsOutputIdlesHigh(void) // For SpiSlave only!
{
    SetBit(Spi_port, Spi_DataReady); // idle HIGH
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
 464:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <ReadSpiStatusRegister>
 468:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <ReadSpiStatusRegister+0x1>
 46c:	09 95       	icall
 46e:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 472:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 476:	09 94       	ijmp

00000478 <ReadSpiStatusRegister_Implementation>:
 478:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spsr>
 47c:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spsr+0x1>
 480:	80 81       	ld	r24, Z
 482:	08 95       	ret

00000484 <EnableSpi_Implementation>:
 484:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_spcr>
 488:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_spcr+0x1>
 48c:	20 81       	ld	r18, Z
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <Spi_Enable>
 496:	02 c0       	rjmp	.+4      	; 0x49c <EnableSpi_Implementation+0x18>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <EnableSpi_Implementation+0x14>
 4a0:	82 2b       	or	r24, r18
 4a2:	80 83       	st	Z, r24
 4a4:	08 95       	ret

000004a6 <SpiMasterCloseSpi_Implementation>:
 4a6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <Spi_port>
 4aa:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <Spi_port+0x1>
 4ae:	20 81       	ld	r18, Z
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <SpiMasterCloseSpi_Implementation+0x18>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <SpiMasterCloseSpi_Implementation+0x14>
 4c2:	82 2b       	or	r24, r18
 4c4:	80 83       	st	Z, r24
 4c6:	08 95       	ret

000004c8 <ReadSpiDataRegister_Implementation>:
 4c8:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Spi_spdr>
 4cc:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Spi_spdr+0x1>
 4d0:	80 81       	ld	r24, Z
 4d2:	08 95       	ret

000004d4 <SpiMasterInit>:
}

void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 4d4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 4d8:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <Spi_ddr>
 4dc:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <Spi_ddr+0x1>
 4e0:	40 81       	ld	r20, Z
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	9c 01       	movw	r18, r24
 4e8:	00 90 51 01 	lds	r0, 0x0151	; 0x800151 <Spi_Miso>
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <SpiMasterInit+0x1e>
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <SpiMasterInit+0x1a>
 4f6:	32 2f       	mov	r19, r18
 4f8:	30 95       	com	r19
 4fa:	34 23       	and	r19, r20
 4fc:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 4fe:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Spi_port>
 502:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Spi_port+0x1>
 506:	3c 91       	ld	r19, X
 508:	23 2b       	or	r18, r19
 50a:	2c 93       	st	X, r18
}
void SetDataReadyAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_DataReady); // make it an input
 50c:	40 81       	ld	r20, Z
 50e:	9c 01       	movw	r18, r24
 510:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 514:	02 c0       	rjmp	.+4      	; 0x51a <SpiMasterInit+0x46>
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <SpiMasterInit+0x42>
 51e:	32 2f       	mov	r19, r18
 520:	30 95       	com	r19
 522:	34 23       	and	r19, r20
 524:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_DataReady); // enable pull-up
 526:	3c 91       	ld	r19, X
 528:	23 2b       	or	r18, r19
 52a:	2c 93       	st	X, r18
}

static void (*SlaveSelectIdleHigh)(void) = SpiMasterCloseSpi_Implementation;
static void SetSlaveSelectAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Ss);
 52c:	40 81       	ld	r20, Z
 52e:	9c 01       	movw	r18, r24
 530:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 534:	02 c0       	rjmp	.+4      	; 0x53a <SpiMasterInit+0x66>
 536:	22 0f       	add	r18, r18
 538:	33 1f       	adc	r19, r19
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <SpiMasterInit+0x62>
 53e:	24 2b       	or	r18, r20
 540:	20 83       	st	Z, r18
}
static void SetMosiAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Mosi);
 542:	40 81       	ld	r20, Z
 544:	9c 01       	movw	r18, r24
 546:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <Spi_Mosi>
 54a:	02 c0       	rjmp	.+4      	; 0x550 <SpiMasterInit+0x7c>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <SpiMasterInit+0x78>
 554:	24 2b       	or	r18, r20
 556:	20 83       	st	Z, r18
}
static void SetSckAsOutput(void)
{
    SetBit(Spi_ddr, Spi_Sck);
 558:	40 81       	ld	r20, Z
 55a:	9c 01       	movw	r18, r24
 55c:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <Spi_Sck>
 560:	02 c0       	rjmp	.+4      	; 0x566 <SpiMasterInit+0x92>
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <SpiMasterInit+0x8e>
 56a:	24 2b       	or	r18, r20
 56c:	20 83       	st	Z, r18
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 56e:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Spi_spcr>
 572:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Spi_spcr+0x1>
 576:	40 81       	ld	r20, Z
 578:	9c 01       	movw	r18, r24
 57a:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <Spi_MasterSlaveSelect>
 57e:	02 c0       	rjmp	.+4      	; 0x584 <SpiMasterInit+0xb0>
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	0a 94       	dec	r0
 586:	e2 f7       	brpl	.-8      	; 0x580 <SpiMasterInit+0xac>
 588:	24 2b       	or	r18, r20
 58a:	20 83       	st	Z, r18
}
static void SetClockRateToFoscDividedBy8(void)
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
 58c:	40 81       	ld	r20, Z
 58e:	9c 01       	movw	r18, r24
 590:	00 90 4d 01 	lds	r0, 0x014D	; 0x80014d <Spi_ClockRateBit0>
 594:	02 c0       	rjmp	.+4      	; 0x59a <SpiMasterInit+0xc6>
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	0a 94       	dec	r0
 59c:	e2 f7       	brpl	.-8      	; 0x596 <SpiMasterInit+0xc2>
 59e:	24 2b       	or	r18, r20
 5a0:	20 83       	st	Z, r18
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
 5a2:	30 81       	ld	r19, Z
 5a4:	ac 01       	movw	r20, r24
 5a6:	00 90 4c 01 	lds	r0, 0x014C	; 0x80014c <Spi_ClockRateBit1>
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <SpiMasterInit+0xdc>
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	0a 94       	dec	r0
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <SpiMasterInit+0xd8>
 5b4:	24 2f       	mov	r18, r20
 5b6:	20 95       	com	r18
 5b8:	23 23       	and	r18, r19
 5ba:	20 83       	st	Z, r18
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5bc:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spsr>
 5c0:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spsr+0x1>
 5c4:	20 81       	ld	r18, Z
 5c6:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <Spi_DoubleClockRate>
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <SpiMasterInit+0xfc>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	0a 94       	dec	r0
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <SpiMasterInit+0xf8>
 5d4:	82 2b       	or	r24, r18
 5d6:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5d8:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EnableSpi>
 5dc:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EnableSpi+0x1>
 5e0:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
 5e2:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ClearPendingSpiInterrupt>
 5e6:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ClearPendingSpiInterrupt+0x1>
 5ea:	09 94       	ijmp

000005ec <SerialWriteByte_Implementation>:

// ---Helper functions for SPI read/write---
bool SensorHasResponse(void)
{
    return BitIsClear(Spi_pin, Spi_DataReady); // DataReady LOW signals ready
}
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	1f 92       	push	r1
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	89 83       	std	Y+1, r24	; 0x01
 5f8:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 5fc:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	ce 01       	movw	r24, r28
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	09 95       	icall
 60a:	0f 90       	pop	r0
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <SpiWriteByte_Implementation>:
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <Spi_port>
 61a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <Spi_port+0x1>
 61e:	9c 91       	ld	r25, X
 620:	21 e0       	ldi	r18, 0x01	; 1
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	a9 01       	movw	r20, r18
 626:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 62a:	02 c0       	rjmp	.+4      	; 0x630 <SpiWriteByte_Implementation+0x1e>
 62c:	44 0f       	add	r20, r20
 62e:	55 1f       	adc	r21, r21
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <SpiWriteByte_Implementation+0x1a>
 634:	64 2f       	mov	r22, r20
 636:	60 95       	com	r22
 638:	96 23       	and	r25, r22
 63a:	9c 93       	st	X, r25
 63c:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <Spi_spdr>
 640:	d0 91 55 01 	lds	r29, 0x0155	; 0x800155 <Spi_spdr+0x1>
 644:	88 83       	st	Y, r24
 646:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Spi_spsr>
 64a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Spi_spsr+0x1>
 64e:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Spi_InterruptFlag>
 652:	02 c0       	rjmp	.+4      	; 0x658 <SpiWriteByte_Implementation+0x46>
 654:	22 0f       	add	r18, r18
 656:	33 1f       	adc	r19, r19
 658:	0a 94       	dec	r0
 65a:	e2 f7       	brpl	.-8      	; 0x654 <SpiWriteByte_Implementation+0x42>
 65c:	80 81       	ld	r24, Z
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	82 23       	and	r24, r18
 662:	93 23       	and	r25, r19
 664:	89 2b       	or	r24, r25
 666:	d1 f3       	breq	.-12     	; 0x65c <SpiWriteByte_Implementation+0x4a>
 668:	88 81       	ld	r24, Y
 66a:	8c 91       	ld	r24, X
 66c:	48 2b       	or	r20, r24
 66e:	4c 93       	st	X, r20
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <ReadSensor_Implementation>:
 676:	6f 92       	push	r6
 678:	7f 92       	push	r7
 67a:	8f 92       	push	r8
 67c:	9f 92       	push	r9
 67e:	bf 92       	push	r11
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	4b 01       	movw	r8, r22
 692:	67 2b       	or	r22, r23
 694:	09 f4       	brne	.+2      	; 0x698 <ReadSensor_Implementation+0x22>
 696:	59 c0       	rjmp	.+178    	; 0x74a <ReadSensor_Implementation+0xd4>
 698:	60 90 5c 01 	lds	r6, 0x015C	; 0x80015c <Spi_port>
 69c:	70 90 5d 01 	lds	r7, 0x015D	; 0x80015d <Spi_port+0x1>
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	b9 01       	movw	r22, r18
 6a6:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Spi_Ss>
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <ReadSensor_Implementation+0x3a>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <ReadSensor_Implementation+0x36>
 6b4:	c6 2e       	mov	r12, r22
 6b6:	c0 94       	com	r12
 6b8:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <Spi_spdr>
 6bc:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <Spi_spdr+0x1>
 6c0:	d0 90 30 01 	lds	r13, 0x0130	; 0x800130 <slave_ignore>
 6c4:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <Spi_spsr>
 6c8:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <Spi_spsr+0x1>
 6cc:	a9 01       	movw	r20, r18
 6ce:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <Spi_InterruptFlag>
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <ReadSensor_Implementation+0x62>
 6d4:	44 0f       	add	r20, r20
 6d6:	55 1f       	adc	r21, r21
 6d8:	0a 94       	dec	r0
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <ReadSensor_Implementation+0x5e>
 6dc:	b6 2e       	mov	r11, r22
 6de:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 6e2:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 6e6:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <ReadSensor_Implementation+0x7a>
 6ec:	22 0f       	add	r18, r18
 6ee:	33 1f       	adc	r19, r19
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <ReadSensor_Implementation+0x76>
 6f4:	33 27       	eor	r19, r19
 6f6:	bc 01       	movw	r22, r24
 6f8:	7c 01       	movw	r14, r24
 6fa:	e8 0c       	add	r14, r8
 6fc:	f9 1c       	adc	r15, r9
 6fe:	80 81       	ld	r24, Z
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	82 23       	and	r24, r18
 704:	93 23       	and	r25, r19
 706:	89 2b       	or	r24, r25
 708:	d1 f7       	brne	.-12     	; 0x6fe <ReadSensor_Implementation+0x88>
 70a:	e3 01       	movw	r28, r6
 70c:	88 81       	ld	r24, Y
 70e:	8c 21       	and	r24, r12
 710:	88 83       	st	Y, r24
 712:	e8 01       	movw	r28, r16
 714:	d8 82       	st	Y, r13
 716:	8c 91       	ld	r24, X
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	84 23       	and	r24, r20
 71c:	95 23       	and	r25, r21
 71e:	89 2b       	or	r24, r25
 720:	d1 f3       	breq	.-12     	; 0x716 <ReadSensor_Implementation+0xa0>
 722:	e8 01       	movw	r28, r16
 724:	88 81       	ld	r24, Y
 726:	e3 01       	movw	r28, r6
 728:	88 81       	ld	r24, Y
 72a:	8b 29       	or	r24, r11
 72c:	88 83       	st	Y, r24
 72e:	e8 01       	movw	r28, r16
 730:	88 81       	ld	r24, Y
 732:	eb 01       	movw	r28, r22
 734:	89 93       	st	Y+, r24
 736:	be 01       	movw	r22, r28
 738:	80 81       	ld	r24, Z
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	82 23       	and	r24, r18
 73e:	93 23       	and	r25, r19
 740:	89 2b       	or	r24, r25
 742:	d1 f3       	breq	.-12     	; 0x738 <ReadSensor_Implementation+0xc2>
 744:	e6 16       	cp	r14, r22
 746:	f7 06       	cpc	r15, r23
 748:	d1 f6       	brne	.-76     	; 0x6fe <ReadSensor_Implementation+0x88>
 74a:	c4 01       	movw	r24, r8
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	ff 90       	pop	r15
 756:	ef 90       	pop	r14
 758:	df 90       	pop	r13
 75a:	cf 90       	pop	r12
 75c:	bf 90       	pop	r11
 75e:	9f 90       	pop	r9
 760:	8f 90       	pop	r8
 762:	7f 90       	pop	r7
 764:	6f 90       	pop	r6
 766:	08 95       	ret

00000768 <NullCommand>:
 768:	08 95       	ret

0000076a <TestInvalidSensorCmd>:
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
 76e:	1f 92       	push	r1
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
 774:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 778:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	09 95       	icall
 780:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 784:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	ce 01       	movw	r24, r28
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	09 95       	icall
 792:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 796:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	09 95       	icall
 79e:	0f 90       	pop	r0
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <GetBridgeLED>:
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <GetBridgeLED+0xa>
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 7b8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	ce 01       	movw	r24, r28
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	09 95       	icall
 7c6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 7ca:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	ce 01       	movw	r24, r28
 7d4:	02 96       	adiw	r24, 0x02	; 2
 7d6:	09 95       	icall
 7d8:	89 81       	ldd	r24, Y+1	; 0x01
 7da:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 7de:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 7e2:	81 11       	cpse	r24, r1
 7e4:	46 c0       	rjmp	.+140    	; 0x872 <GetBridgeLED+0xcc>
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	09 95       	icall
 7ea:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_ddr>
 7ee:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_ddr+0x1>
 7f2:	20 81       	ld	r18, Z
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <GetBridgeLED+0x5c>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	0a 94       	dec	r0
 804:	e2 f7       	brpl	.-8      	; 0x7fe <GetBridgeLED+0x58>
 806:	99 27       	eor	r25, r25
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	28 23       	and	r18, r24
 80c:	39 23       	and	r19, r25
 80e:	23 2b       	or	r18, r19
 810:	91 f4       	brne	.+36     	; 0x836 <GetBridgeLED+0x90>
 812:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 816:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	09 95       	icall
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	08 95       	ret
 836:	20 81       	ld	r18, Z
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	28 23       	and	r18, r24
 83c:	39 23       	and	r19, r25
 83e:	23 2b       	or	r18, r19
 840:	51 f0       	breq	.+20     	; 0x856 <GetBridgeLED+0xb0>
 842:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 846:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 84a:	20 81       	ld	r18, Z
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	82 23       	and	r24, r18
 850:	93 23       	and	r25, r19
 852:	89 2b       	or	r24, r25
 854:	39 f4       	brne	.+14     	; 0x864 <GetBridgeLED+0xbe>
 856:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 85a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	09 95       	icall
 862:	dd cf       	rjmp	.-70     	; 0x81e <GetBridgeLED+0x78>
 864:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 868:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 86c:	82 e0       	ldi	r24, 0x02	; 2
 86e:	09 95       	icall
 870:	d6 cf       	rjmp	.-84     	; 0x81e <GetBridgeLED+0x78>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	09 95       	icall
 876:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 87a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 87e:	8b ea       	ldi	r24, 0xAB	; 171
 880:	09 95       	icall
 882:	0f 90       	pop	r0
 884:	0f 90       	pop	r0
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	1f 91       	pop	r17
 88c:	0f 91       	pop	r16
 88e:	08 95       	ret

00000890 <SetBridgeLED>:
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <SetBridgeLED+0xa>
 89a:	1f 92       	push	r1
 89c:	cd b7       	in	r28, 0x3d	; 61
 89e:	de b7       	in	r29, 0x3e	; 62
 8a0:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 8a4:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 8a8:	62 e0       	ldi	r22, 0x02	; 2
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	ce 01       	movw	r24, r28
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	09 95       	icall
 8b2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 8b6:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	70 e0       	ldi	r23, 0x00	; 0
 8be:	ce 01       	movw	r24, r28
 8c0:	03 96       	adiw	r24, 0x03	; 3
 8c2:	09 95       	icall
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	81 11       	cpse	r24, r1
 8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <SetBridgeLED+0x68>
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	88 23       	and	r24, r24
 8ce:	39 f1       	breq	.+78     	; 0x91e <__stack+0x1f>
 8d0:	81 30       	cpi	r24, 0x01	; 1
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <SetBridgeLED+0x46>
 8d4:	44 c0       	rjmp	.+136    	; 0x95e <__stack+0x5f>
 8d6:	82 30       	cpi	r24, 0x02	; 2
 8d8:	09 f4       	brne	.+2      	; 0x8dc <SetBridgeLED+0x4c>
 8da:	61 c0       	rjmp	.+194    	; 0x99e <__stack+0x9f>
 8dc:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8e0:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	09 95       	icall
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	df 91       	pop	r29
 8f0:	cf 91       	pop	r28
 8f2:	1f 91       	pop	r17
 8f4:	0f 91       	pop	r16
 8f6:	08 95       	ret
 8f8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8fc:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	09 95       	icall
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret
 91e:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_ddr>
 922:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_ddr+0x1>
 926:	20 81       	ld	r18, Z
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	0a 94       	dec	r0
 938:	e2 f7       	brpl	.-8      	; 0x932 <__stack+0x33>
 93a:	80 95       	com	r24
 93c:	92 2f       	mov	r25, r18
 93e:	98 23       	and	r25, r24
 940:	90 83       	st	Z, r25
 942:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 946:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 94a:	90 81       	ld	r25, Z
 94c:	89 23       	and	r24, r25
 94e:	80 83       	st	Z, r24
 950:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 954:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 958:	80 e0       	ldi	r24, 0x00	; 0
 95a:	09 95       	icall
 95c:	d3 cf       	rjmp	.-90     	; 0x904 <__stack+0x5>
 95e:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 962:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 966:	20 81       	ld	r18, Z
 968:	81 e0       	ldi	r24, 0x01	; 1
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	88 0f       	add	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	0a 94       	dec	r0
 978:	e2 f7       	brpl	.-8      	; 0x972 <__stack+0x73>
 97a:	98 2f       	mov	r25, r24
 97c:	90 95       	com	r25
 97e:	92 23       	and	r25, r18
 980:	90 83       	st	Z, r25
 982:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <BiColorLed_ddr>
 986:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <BiColorLed_ddr+0x1>
 98a:	90 81       	ld	r25, Z
 98c:	89 2b       	or	r24, r25
 98e:	80 83       	st	Z, r24
 990:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 994:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	09 95       	icall
 99c:	b3 cf       	rjmp	.-154    	; 0x904 <__stack+0x5>
 99e:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <BiColorLed_port>
 9a2:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <BiColorLed_port+0x1>
 9a6:	20 81       	ld	r18, Z
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <status_led>
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	0a 94       	dec	r0
 9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <__stack+0xb3>
 9ba:	92 2f       	mov	r25, r18
 9bc:	98 2b       	or	r25, r24
 9be:	e0 cf       	rjmp	.-64     	; 0x980 <__stack+0x81>

000009c0 <BridgeGetSensorLED>:
 9c0:	1f 93       	push	r17
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	00 d0       	rcall	.+0      	; 0x9c8 <BridgeGetSensorLED+0x8>
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 9d0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	ce 01       	movw	r24, r28
 9da:	01 96       	adiw	r24, 0x01	; 1
 9dc:	09 95       	icall
 9de:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 9e2:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 9e6:	20 81       	ld	r18, Z
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <BridgeGetSensorLED+0x36>
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	0a 94       	dec	r0
 9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <BridgeGetSensorLED+0x32>
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	82 23       	and	r24, r18
 9fe:	93 23       	and	r25, r19
 a00:	89 2b       	or	r24, r25
 a02:	e1 f0       	breq	.+56     	; 0xa3c <BridgeGetSensorLED+0x7c>
 a04:	19 81       	ldd	r17, Y+1	; 0x01
 a06:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a0a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	09 95       	icall
 a12:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 a16:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 a1a:	81 2f       	mov	r24, r17
 a1c:	09 95       	icall
 a1e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 a22:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 a26:	61 e0       	ldi	r22, 0x01	; 1
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	ce 01       	movw	r24, r28
 a2c:	02 96       	adiw	r24, 0x02	; 2
 a2e:	09 95       	icall
 a30:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a34:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a38:	8a 81       	ldd	r24, Y+2	; 0x02
 a3a:	09 95       	icall
 a3c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 a40:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 a44:	61 e0       	ldi	r22, 0x01	; 1
 a46:	70 e0       	ldi	r23, 0x00	; 0
 a48:	ce 01       	movw	r24, r28
 a4a:	02 96       	adiw	r24, 0x02	; 2
 a4c:	09 95       	icall
 a4e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a52:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	09 95       	icall
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	1f 91       	pop	r17
 a64:	08 95       	ret

00000a66 <BridgeSetSensorLED>:
 a66:	0f 93       	push	r16
 a68:	1f 93       	push	r17
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	00 d0       	rcall	.+0      	; 0xa70 <BridgeSetSensorLED+0xa>
 a70:	1f 92       	push	r1
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 a7a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 a7e:	62 e0       	ldi	r22, 0x02	; 2
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	ce 01       	movw	r24, r28
 a84:	01 96       	adiw	r24, 0x01	; 1
 a86:	09 95       	icall
 a88:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 a8c:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 a90:	20 81       	ld	r18, Z
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <BridgeSetSensorLED+0x3a>
 a9c:	88 0f       	add	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	0a 94       	dec	r0
 aa2:	e2 f7       	brpl	.-8      	; 0xa9c <BridgeSetSensorLED+0x36>
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	82 23       	and	r24, r18
 aa8:	93 23       	and	r25, r19
 aaa:	89 2b       	or	r24, r25
 aac:	a1 f0       	breq	.+40     	; 0xad6 <BridgeSetSensorLED+0x70>
 aae:	09 81       	ldd	r16, Y+1	; 0x01
 ab0:	1a 81       	ldd	r17, Y+2	; 0x02
 ab2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 ab6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	09 95       	icall
 abe:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 ac2:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 ac6:	80 2f       	mov	r24, r16
 ac8:	09 95       	icall
 aca:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 ace:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 ad2:	81 2f       	mov	r24, r17
 ad4:	09 95       	icall
 ad6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 ada:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 ade:	61 e0       	ldi	r22, 0x01	; 1
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	ce 01       	movw	r24, r28
 ae4:	03 96       	adiw	r24, 0x03	; 3
 ae6:	09 95       	icall
 ae8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 aec:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 af0:	8b 81       	ldd	r24, Y+3	; 0x03
 af2:	09 95       	icall
 af4:	0f 90       	pop	r0
 af6:	0f 90       	pop	r0
 af8:	0f 90       	pop	r0
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	1f 91       	pop	r17
 b00:	0f 91       	pop	r16
 b02:	08 95       	ret

00000b04 <TestInvalidSensorCmdPlusPayload>:
 b04:	ff 92       	push	r15
 b06:	0f 93       	push	r16
 b08:	1f 93       	push	r17
 b0a:	cf 93       	push	r28
 b0c:	df 93       	push	r29
 b0e:	00 d0       	rcall	.+0      	; 0xb10 <TestInvalidSensorCmdPlusPayload+0xc>
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 b18:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 b1c:	61 e0       	ldi	r22, 0x01	; 1
 b1e:	70 e0       	ldi	r23, 0x00	; 0
 b20:	ce 01       	movw	r24, r28
 b22:	01 96       	adiw	r24, 0x01	; 1
 b24:	09 95       	icall
 b26:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 b2a:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 b2e:	20 81       	ld	r18, Z
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <TestInvalidSensorCmdPlusPayload+0x3a>
 b3a:	88 0f       	add	r24, r24
 b3c:	99 1f       	adc	r25, r25
 b3e:	0a 94       	dec	r0
 b40:	e2 f7       	brpl	.-8      	; 0xb3a <TestInvalidSensorCmdPlusPayload+0x36>
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	82 23       	and	r24, r18
 b46:	93 23       	and	r25, r19
 b48:	89 2b       	or	r24, r25
 b4a:	61 f1       	breq	.+88     	; 0xba4 <TestInvalidSensorCmdPlusPayload+0xa0>
 b4c:	f9 80       	ldd	r15, Y+1	; 0x01
 b4e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 b52:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	09 95       	icall
 b5a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 b5e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 b62:	8f 2d       	mov	r24, r15
 b64:	09 95       	icall
 b66:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 b6a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 b6e:	61 e0       	ldi	r22, 0x01	; 1
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	ce 01       	movw	r24, r28
 b74:	02 96       	adiw	r24, 0x02	; 2
 b76:	09 95       	icall
 b78:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 b7c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 b80:	8a 81       	ldd	r24, Y+2	; 0x02
 b82:	09 95       	icall
 b84:	8a 81       	ldd	r24, Y+2	; 0x02
 b86:	88 23       	and	r24, r24
 b88:	21 f1       	breq	.+72     	; 0xbd2 <TestInvalidSensorCmdPlusPayload+0xce>
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
 b94:	0f 90       	pop	r0
 b96:	0f 90       	pop	r0
 b98:	df 91       	pop	r29
 b9a:	cf 91       	pop	r28
 b9c:	1f 91       	pop	r17
 b9e:	0f 91       	pop	r16
 ba0:	ff 90       	pop	r15
 ba2:	08 95       	ret
 ba4:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 ba8:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 bac:	61 e0       	ldi	r22, 0x01	; 1
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	ce 01       	movw	r24, r28
 bb2:	02 96       	adiw	r24, 0x02	; 2
 bb4:	09 95       	icall
 bb6:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 bba:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 bbe:	8a 81       	ldd	r24, Y+2	; 0x02
 bc0:	09 95       	icall
 bc2:	0f 90       	pop	r0
 bc4:	0f 90       	pop	r0
 bc6:	df 91       	pop	r29
 bc8:	cf 91       	pop	r28
 bca:	1f 91       	pop	r17
 bcc:	0f 91       	pop	r16
 bce:	ff 90       	pop	r15
 bd0:	08 95       	ret
 bd2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 bd6:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 bda:	61 e0       	ldi	r22, 0x01	; 1
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	ce 01       	movw	r24, r28
 be0:	02 96       	adiw	r24, 0x02	; 2
 be2:	09 95       	icall
 be4:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 be8:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 bec:	8a 81       	ldd	r24, Y+2	; 0x02
 bee:	09 95       	icall
 bf0:	cc cf       	rjmp	.-104    	; 0xb8a <TestInvalidSensorCmdPlusPayload+0x86>

00000bf2 <BridgeSetSensorConfig>:
 bf2:	0f 93       	push	r16
 bf4:	1f 93       	push	r17
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	00 d0       	rcall	.+0      	; 0xbfc <BridgeSetSensorConfig+0xa>
 bfc:	00 d0       	rcall	.+0      	; 0xbfe <BridgeSetSensorConfig+0xc>
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
 c02:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 c06:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 c0a:	63 e0       	ldi	r22, 0x03	; 3
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	ce 01       	movw	r24, r28
 c10:	01 96       	adiw	r24, 0x01	; 1
 c12:	09 95       	icall
 c14:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 c18:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	09 95       	icall
 c20:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 c24:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 c28:	20 81       	ld	r18, Z
 c2a:	81 e0       	ldi	r24, 0x01	; 1
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <BridgeSetSensorConfig+0x46>
 c34:	88 0f       	add	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	0a 94       	dec	r0
 c3a:	e2 f7       	brpl	.-8      	; 0xc34 <BridgeSetSensorConfig+0x42>
 c3c:	30 e0       	ldi	r19, 0x00	; 0
 c3e:	82 23       	and	r24, r18
 c40:	93 23       	and	r25, r19
 c42:	89 2b       	or	r24, r25
 c44:	a1 f0       	breq	.+40     	; 0xc6e <BridgeSetSensorConfig+0x7c>
 c46:	0a 81       	ldd	r16, Y+2	; 0x02
 c48:	1b 81       	ldd	r17, Y+3	; 0x03
 c4a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 c4e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 c52:	89 81       	ldd	r24, Y+1	; 0x01
 c54:	09 95       	icall
 c56:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 c5a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 c5e:	80 2f       	mov	r24, r16
 c60:	09 95       	icall
 c62:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 c66:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 c6a:	81 2f       	mov	r24, r17
 c6c:	09 95       	icall
 c6e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 c72:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 c76:	61 e0       	ldi	r22, 0x01	; 1
 c78:	70 e0       	ldi	r23, 0x00	; 0
 c7a:	ce 01       	movw	r24, r28
 c7c:	04 96       	adiw	r24, 0x04	; 4
 c7e:	09 95       	icall
 c80:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 c84:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 c88:	8c 81       	ldd	r24, Y+4	; 0x04
 c8a:	09 95       	icall
 c8c:	0f 90       	pop	r0
 c8e:	0f 90       	pop	r0
 c90:	0f 90       	pop	r0
 c92:	0f 90       	pop	r0
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	1f 91       	pop	r17
 c9a:	0f 91       	pop	r16
 c9c:	08 95       	ret

00000c9e <BridgeSetExposure>:
 c9e:	1f 93       	push	r17
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	00 d0       	rcall	.+0      	; 0xca6 <BridgeSetExposure+0x8>
 ca6:	1f 92       	push	r1
 ca8:	cd b7       	in	r28, 0x3d	; 61
 caa:	de b7       	in	r29, 0x3e	; 62
 cac:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 cb0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 cb4:	62 e0       	ldi	r22, 0x02	; 2
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	ce 01       	movw	r24, r28
 cba:	01 96       	adiw	r24, 0x01	; 1
 cbc:	09 95       	icall
 cbe:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 cc2:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 cc6:	80 e0       	ldi	r24, 0x00	; 0
 cc8:	09 95       	icall
 cca:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <Spi_pin>
 cce:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <Spi_pin+0x1>
 cd2:	20 81       	ld	r18, Z
 cd4:	81 e0       	ldi	r24, 0x01	; 1
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <Spi_DataReady>
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <BridgeSetExposure+0x44>
 cde:	88 0f       	add	r24, r24
 ce0:	99 1f       	adc	r25, r25
 ce2:	0a 94       	dec	r0
 ce4:	e2 f7       	brpl	.-8      	; 0xcde <BridgeSetExposure+0x40>
 ce6:	30 e0       	ldi	r19, 0x00	; 0
 ce8:	82 23       	and	r24, r18
 cea:	93 23       	and	r25, r19
 cec:	89 2b       	or	r24, r25
 cee:	69 f0       	breq	.+26     	; 0xd0a <BridgeSetExposure+0x6c>
 cf0:	1a 81       	ldd	r17, Y+2	; 0x02
 cf2:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 cf6:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 cfa:	89 81       	ldd	r24, Y+1	; 0x01
 cfc:	09 95       	icall
 cfe:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 d02:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 d06:	81 2f       	mov	r24, r17
 d08:	09 95       	icall
 d0a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 d0e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 d12:	61 e0       	ldi	r22, 0x01	; 1
 d14:	70 e0       	ldi	r23, 0x00	; 0
 d16:	ce 01       	movw	r24, r28
 d18:	03 96       	adiw	r24, 0x03	; 3
 d1a:	09 95       	icall
 d1c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 d20:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 d24:	8b 81       	ldd	r24, Y+3	; 0x03
 d26:	09 95       	icall
 d28:	0f 90       	pop	r0
 d2a:	0f 90       	pop	r0
 d2c:	0f 90       	pop	r0
 d2e:	df 91       	pop	r29
 d30:	cf 91       	pop	r28
 d32:	1f 91       	pop	r17
 d34:	08 95       	ret

00000d36 <BridgeCaptureFrame>:
 d36:	ef 92       	push	r14
 d38:	ff 92       	push	r15
 d3a:	0f 93       	push	r16
 d3c:	1f 93       	push	r17
 d3e:	cf 93       	push	r28
 d40:	df 93       	push	r29
 d42:	00 d0       	rcall	.+0      	; 0xd44 <BridgeCaptureFrame+0xe>
 d44:	1f 92       	push	r1
 d46:	cd b7       	in	r28, 0x3d	; 61
 d48:	de b7       	in	r29, 0x3e	; 62
 d4a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 d4e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 d52:	80 e0       	ldi	r24, 0x00	; 0
 d54:	09 95       	icall
 d56:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 d5a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 d5e:	61 e0       	ldi	r22, 0x01	; 1
 d60:	70 e0       	ldi	r23, 0x00	; 0
 d62:	ce 01       	movw	r24, r28
 d64:	03 96       	adiw	r24, 0x03	; 3
 d66:	09 95       	icall
 d68:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 d6c:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 d70:	8b 81       	ldd	r24, Y+3	; 0x03
 d72:	09 95       	icall
 d74:	8b 81       	ldd	r24, Y+3	; 0x03
 d76:	88 23       	and	r24, r24
 d78:	51 f0       	breq	.+20     	; 0xd8e <BridgeCaptureFrame+0x58>
 d7a:	0f 90       	pop	r0
 d7c:	0f 90       	pop	r0
 d7e:	0f 90       	pop	r0
 d80:	df 91       	pop	r29
 d82:	cf 91       	pop	r28
 d84:	1f 91       	pop	r17
 d86:	0f 91       	pop	r16
 d88:	ff 90       	pop	r15
 d8a:	ef 90       	pop	r14
 d8c:	08 95       	ret
 d8e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 d92:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 d96:	62 e0       	ldi	r22, 0x02	; 2
 d98:	70 e0       	ldi	r23, 0x00	; 0
 d9a:	ce 01       	movw	r24, r28
 d9c:	01 96       	adiw	r24, 0x01	; 1
 d9e:	09 95       	icall
 da0:	e9 80       	ldd	r14, Y+1	; 0x01
 da2:	fa 80       	ldd	r15, Y+2	; 0x02
 da4:	fe 24       	eor	r15, r14
 da6:	ef 24       	eor	r14, r15
 da8:	fe 24       	eor	r15, r14
 daa:	1a 81       	ldd	r17, Y+2	; 0x02
 dac:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 db0:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 db4:	89 81       	ldd	r24, Y+1	; 0x01
 db6:	09 95       	icall
 db8:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 dbc:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 dc0:	81 2f       	mov	r24, r17
 dc2:	09 95       	icall
 dc4:	ee 0c       	add	r14, r14
 dc6:	ff 1c       	adc	r15, r15
 dc8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 dcc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 dd0:	b7 01       	movw	r22, r14
 dd2:	84 e7       	ldi	r24, 0x74	; 116
 dd4:	91 e0       	ldi	r25, 0x01	; 1
 dd6:	09 95       	icall
 dd8:	e1 14       	cp	r14, r1
 dda:	f1 04       	cpc	r15, r1
 ddc:	71 f2       	breq	.-100    	; 0xd7a <BridgeCaptureFrame+0x44>
 dde:	04 e7       	ldi	r16, 0x74	; 116
 de0:	11 e0       	ldi	r17, 0x01	; 1
 de2:	c7 01       	movw	r24, r14
 de4:	8c 58       	subi	r24, 0x8C	; 140
 de6:	9e 4f       	sbci	r25, 0xFE	; 254
 de8:	7c 01       	movw	r14, r24
 dea:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 dee:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 df2:	d8 01       	movw	r26, r16
 df4:	8d 91       	ld	r24, X+
 df6:	8d 01       	movw	r16, r26
 df8:	09 95       	icall
 dfa:	e0 16       	cp	r14, r16
 dfc:	f1 06       	cpc	r15, r17
 dfe:	a9 f7       	brne	.-22     	; 0xdea <BridgeCaptureFrame+0xb4>
 e00:	bc cf       	rjmp	.-136    	; 0xd7a <BridgeCaptureFrame+0x44>

00000e02 <BridgeGetSensorConfig>:
 e02:	cf 92       	push	r12
 e04:	df 92       	push	r13
 e06:	ef 92       	push	r14
 e08:	ff 92       	push	r15
 e0a:	0f 93       	push	r16
 e0c:	1f 93       	push	r17
 e0e:	cf 93       	push	r28
 e10:	df 93       	push	r29
 e12:	00 d0       	rcall	.+0      	; 0xe14 <BridgeGetSensorConfig+0x12>
 e14:	00 d0       	rcall	.+0      	; 0xe16 <BridgeGetSensorConfig+0x14>
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
 e1a:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e1e:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e22:	80 e0       	ldi	r24, 0x00	; 0
 e24:	09 95       	icall
 e26:	7e 01       	movw	r14, r28
 e28:	84 e0       	ldi	r24, 0x04	; 4
 e2a:	e8 0e       	add	r14, r24
 e2c:	f1 1c       	adc	r15, r1
 e2e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 e32:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 e36:	61 e0       	ldi	r22, 0x01	; 1
 e38:	70 e0       	ldi	r23, 0x00	; 0
 e3a:	c7 01       	movw	r24, r14
 e3c:	09 95       	icall
 e3e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e42:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e46:	8c 81       	ldd	r24, Y+4	; 0x04
 e48:	09 95       	icall
 e4a:	8c 81       	ldd	r24, Y+4	; 0x04
 e4c:	88 23       	and	r24, r24
 e4e:	69 f0       	breq	.+26     	; 0xe6a <BridgeGetSensorConfig+0x68>
 e50:	0f 90       	pop	r0
 e52:	0f 90       	pop	r0
 e54:	0f 90       	pop	r0
 e56:	0f 90       	pop	r0
 e58:	df 91       	pop	r29
 e5a:	cf 91       	pop	r28
 e5c:	1f 91       	pop	r17
 e5e:	0f 91       	pop	r16
 e60:	ff 90       	pop	r15
 e62:	ef 90       	pop	r14
 e64:	df 90       	pop	r13
 e66:	cf 90       	pop	r12
 e68:	08 95       	ret
 e6a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 e6e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 e72:	63 e0       	ldi	r22, 0x03	; 3
 e74:	70 e0       	ldi	r23, 0x00	; 0
 e76:	ce 01       	movw	r24, r28
 e78:	01 96       	adiw	r24, 0x01	; 1
 e7a:	09 95       	icall
 e7c:	8e 01       	movw	r16, r28
 e7e:	0f 5f       	subi	r16, 0xFF	; 255
 e80:	1f 4f       	sbci	r17, 0xFF	; 255
 e82:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 e86:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 e8a:	d8 01       	movw	r26, r16
 e8c:	8d 91       	ld	r24, X+
 e8e:	8d 01       	movw	r16, r26
 e90:	09 95       	icall
 e92:	0e 15       	cp	r16, r14
 e94:	1f 05       	cpc	r17, r15
 e96:	a9 f7       	brne	.-22     	; 0xe82 <BridgeGetSensorConfig+0x80>
 e98:	0f b6       	in	r0, 0x3f	; 63
 e9a:	f8 94       	cli
 e9c:	de bf       	out	0x3e, r29	; 62
 e9e:	0f be       	out	0x3f, r0	; 63
 ea0:	cd bf       	out	0x3d, r28	; 61
 ea2:	d6 cf       	rjmp	.-84     	; 0xe50 <BridgeGetSensorConfig+0x4e>

00000ea4 <BridgeGetExposure>:
 ea4:	cf 93       	push	r28
 ea6:	df 93       	push	r29
 ea8:	00 d0       	rcall	.+0      	; 0xeaa <BridgeGetExposure+0x6>
 eaa:	1f 92       	push	r1
 eac:	cd b7       	in	r28, 0x3d	; 61
 eae:	de b7       	in	r29, 0x3e	; 62
 eb0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 eb4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 eb8:	80 e0       	ldi	r24, 0x00	; 0
 eba:	09 95       	icall
 ebc:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 ec0:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 ec4:	61 e0       	ldi	r22, 0x01	; 1
 ec6:	70 e0       	ldi	r23, 0x00	; 0
 ec8:	ce 01       	movw	r24, r28
 eca:	03 96       	adiw	r24, 0x03	; 3
 ecc:	09 95       	icall
 ece:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 ed2:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 ed6:	8b 81       	ldd	r24, Y+3	; 0x03
 ed8:	09 95       	icall
 eda:	8b 81       	ldd	r24, Y+3	; 0x03
 edc:	81 11       	cpse	r24, r1
 ede:	15 c0       	rjmp	.+42     	; 0xf0a <BridgeGetExposure+0x66>
 ee0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 ee4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 ee8:	62 e0       	ldi	r22, 0x02	; 2
 eea:	70 e0       	ldi	r23, 0x00	; 0
 eec:	ce 01       	movw	r24, r28
 eee:	01 96       	adiw	r24, 0x01	; 1
 ef0:	09 95       	icall
 ef2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 ef6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 efa:	89 81       	ldd	r24, Y+1	; 0x01
 efc:	09 95       	icall
 efe:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 f02:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 f06:	8a 81       	ldd	r24, Y+2	; 0x02
 f08:	09 95       	icall
 f0a:	0f 90       	pop	r0
 f0c:	0f 90       	pop	r0
 f0e:	0f 90       	pop	r0
 f10:	df 91       	pop	r29
 f12:	cf 91       	pop	r28
 f14:	08 95       	ret

00000f16 <FlushInvalidCommand>:
    while (byte_count++ < nbytes) SerialWriteByte(*pframe++);
}

// ---Used in application to handle invalid Bridge commands---
uint8_t FlushInvalidCommand(void)
{
 f16:	cf 93       	push	r28
 f18:	df 93       	push	r29
 f1a:	00 d0       	rcall	.+0      	; 0xf1c <FlushInvalidCommand+0x6>
 f1c:	1f 92       	push	r1
 f1e:	cd b7       	in	r28, 0x3d	; 61
 f20:	de b7       	in	r29, 0x3e	; 62
    // Get reply from Sensor.
    uint8_t sensor_reply; ReadSensor(&sensor_reply, 1);
 f22:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 f26:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 f2a:	61 e0       	ldi	r22, 0x01	; 1
 f2c:	70 e0       	ldi	r23, 0x00	; 0
 f2e:	ce 01       	movw	r24, r28
 f30:	03 96       	adiw	r24, 0x03	; 3
 f32:	09 95       	icall
    // Send invalid-command-error for Bridge and send reply from Sensor.
    uint8_t const StatusInvalid[] = { invalid_cmd, sensor_reply };
 f34:	82 e0       	ldi	r24, 0x02	; 2
 f36:	89 83       	std	Y+1, r24	; 0x01
 f38:	8b 81       	ldd	r24, Y+3	; 0x03
 f3a:	8a 83       	std	Y+2, r24	; 0x02
    return UsbWrite(StatusInvalid,2);
 f3c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 f40:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 f44:	62 e0       	ldi	r22, 0x02	; 2
 f46:	70 e0       	ldi	r23, 0x00	; 0
 f48:	ce 01       	movw	r24, r28
 f4a:	01 96       	adiw	r24, 0x01	; 1
 f4c:	09 95       	icall
}
 f4e:	0f 90       	pop	r0
 f50:	0f 90       	pop	r0
 f52:	0f 90       	pop	r0
 f54:	df 91       	pop	r29
 f56:	cf 91       	pop	r28
 f58:	08 95       	ret

00000f5a <LookupBridgeCmd>:
        BridgeSetExposure, // 10
        BridgeCaptureFrame, // 11
    };
    //
    // Return func ptr. Prevent attempts at out-of-bounds access.
    if (key < sizeof(pf)/sizeof(*pf))   return pf[key];
 f5a:	8c 30       	cpi	r24, 0x0C	; 12
 f5c:	48 f4       	brcc	.+18     	; 0xf70 <LookupBridgeCmd+0x16>
 f5e:	e8 2f       	mov	r30, r24
 f60:	f0 e0       	ldi	r31, 0x00	; 0
 f62:	ee 0f       	add	r30, r30
 f64:	ff 1f       	adc	r31, r31
 f66:	ef 5c       	subi	r30, 0xCF	; 207
 f68:	fe 4f       	sbci	r31, 0xFE	; 254
 f6a:	80 81       	ld	r24, Z
 f6c:	91 81       	ldd	r25, Z+1	; 0x01
 f6e:	08 95       	ret
    // Out of bounds keys return a NULL pointer.
    else return NULL;
 f70:	80 e0       	ldi	r24, 0x00	; 0
 f72:	90 e0       	ldi	r25, 0x00	; 0
    // Up to caller to check for NULL and take appropriate action.
    // Recommended action: call FlushInvalidCommand().
}
 f74:	08 95       	ret

00000f76 <main>:
        /* It is up to CmdFn to let the UsbHost know */
        /* command was successfully carried out. */
    }
}
int main()
{
 f76:	cf 93       	push	r28
 f78:	df 93       	push	r29
 f7a:	1f 92       	push	r1
 f7c:	cd b7       	in	r28, 0x3d	; 61
 f7e:	de b7       	in	r29, 0x3e	; 62
inline void BiColorLedOn(uint8_t led_name)
{
    /** LED defaults to green when turned on.
     * To blink red, remember to turn the LED
     * red *each time* it is turned on. */
    SetBit(BiColorLed_ddr, led_name);
 f80:	3b 9a       	sbi	0x07, 3	; 7
/* =====[ API ]===== */
/** These are all commands. Read them as actions, not queries.
 * */
inline void BiColorLedGreen(uint8_t led_name)
{
    ClearBit(BiColorLed_port, led_name);
 f82:	43 98       	cbi	0x08, 3	; 8
    /* =====[ Setup ]===== */
    BiColorLedOn(status_led);
    BiColorLedGreen(status_led);
    SpiMasterInit();
 f84:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SpiMasterInit>
    UsbInit();
 f88:	0e 94 07 02 	call	0x40e	; 0x40e <UsbInit>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 f8c:	ce 01       	movw	r24, r28
 f8e:	01 96       	adiw	r24, 0x01	; 1
 f90:	0e 94 09 02 	call	0x412	; 0x412 <UsbReadOneByte>
 f94:	88 23       	and	r24, r24
 f96:	d1 f3       	breq	.-12     	; 0xf8c <main+0x16>
    {
        // Pass byte to Sensor
        SpiWriteByte(cmd);
 f98:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 f9c:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 fa0:	89 81       	ldd	r24, Y+1	; 0x01
 fa2:	09 95       	icall
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 fa4:	89 81       	ldd	r24, Y+1	; 0x01
 fa6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(cmd); */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(); */
        if (CmdFn == NULL) FlushInvalidCommand();
 faa:	00 97       	sbiw	r24, 0x00	; 0
 fac:	19 f0       	breq	.+6      	; 0xfb4 <main+0x3e>
        /* Do command if it is valid. */
        else CmdFn();
 fae:	fc 01       	movw	r30, r24
 fb0:	09 95       	icall
 fb2:	ec cf       	rjmp	.-40     	; 0xf8c <main+0x16>
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(cmd); */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(); */
        if (CmdFn == NULL) FlushInvalidCommand();
 fb4:	0e 94 8b 07 	call	0xf16	; 0xf16 <FlushInvalidCommand>
 fb8:	e9 cf       	rjmp	.-46     	; 0xf8c <main+0x16>

00000fba <_exit>:
 fba:	f8 94       	cli

00000fbc <__stop_program>:
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <__stop_program>
