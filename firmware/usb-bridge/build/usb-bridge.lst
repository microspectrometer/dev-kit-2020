
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000622  00800166  00800166  00000bc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005aff  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001586  00000000  00000000  00006a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002333  00000000  00000000  00008021  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  0000a354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001720  00000000  00000000  0000ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c62  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  000100b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 40 05 	call	0xa80	; 0xa80 <main>
  9e:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <Ft1248_port>
 14a:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <Ft1248_port>
 16e:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <Ft1248_port>
 190:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <Ft1248_port>
 1b2:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <FtMiosio_ddr>
 1d6:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <FtMiosio_ddr>
 1e4:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <Ft1248_pin>
 1f0:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <FtMiosio_pin>
 216:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <FtMiosio_port>
 222:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <FtMiosio_port>
 272:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <Ft1248_ddr>
 282:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <Ft1248_port>
 2a8:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 59 01 	lds	r28, 0x0159	; 0x800159 <FtMiosio_ddr>
 2b6:	d0 91 5a 01 	lds	r29, 0x015A	; 0x80015a <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 57 01 	lds	r28, 0x0157	; 0x800157 <FtMiosio_port>
 2c0:	d0 91 58 01 	lds	r29, 0x0158	; 0x800158 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 53 01 	lds	r0, 0x0153	; 0x800153 <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 54 01 	lds	r0, 0x0154	; 0x800154 <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <UsbWrite_Implementation>:
    FtDeactivateInterface();
    return num_bytes_read;
}

static uint16_t UsbWrite_Implementation(uint8_t const *write_buffer, uint16_t nbytes)
{
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	8c 01       	movw	r16, r24
 318:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 31a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 31e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 322:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <FtCmd_Write>
 326:	09 95       	icall
    if (!FtBusTurnaround())
 328:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 32c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 330:	09 95       	icall
 332:	88 23       	and	r24, r24
 334:	f1 f0       	breq	.+60     	; 0x372 <UsbWrite_Implementation+0x68>
 336:	c0 e0       	ldi	r28, 0x00	; 0
 338:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 33a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 33e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 342:	c8 01       	movw	r24, r16
 344:	8c 0f       	add	r24, r28
 346:	9d 1f       	adc	r25, r29
 348:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 34a:	81 11       	cpse	r24, r1
 34c:	0d c0       	rjmp	.+26     	; 0x368 <UsbWrite_Implementation+0x5e>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 34e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 352:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 356:	09 95       	icall
    return num_bytes_sent;
}
 358:	ce 01       	movw	r24, r28
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 368:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 36a:	ce 15       	cp	r28, r14
 36c:	df 05       	cpc	r29, r15
 36e:	28 f3       	brcs	.-54     	; 0x33a <UsbWrite_Implementation+0x30>
 370:	ee cf       	rjmp	.-36     	; 0x34e <UsbWrite_Implementation+0x44>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 372:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 376:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 37a:	09 95       	icall
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 380:	ce 01       	movw	r24, r28
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <UsbReadBytes_Implementation>:
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
static uint16_t UsbReadBytes_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	ec 01       	movw	r28, r24
 3a0:	7b 01       	movw	r14, r22
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
 3a2:	61 15       	cp	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	09 f1       	breq	.+66     	; 0x3ea <UsbReadBytes_Implementation+0x5a>
 3a8:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <FtCmd_Read>
 3ac:	8c 01       	movw	r16, r24
 3ae:	06 0f       	add	r16, r22
 3b0:	17 1f       	adc	r17, r23
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3b2:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3b6:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3ba:	8d 2d       	mov	r24, r13
 3bc:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3be:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3c2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3c6:	09 95       	icall
    if (!has_data_to_read)
 3c8:	88 23       	and	r24, r24
 3ca:	c1 f0       	breq	.+48     	; 0x3fc <UsbReadBytes_Implementation+0x6c>
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 3cc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 3d0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 3d4:	ce 01       	movw	r24, r28
 3d6:	09 95       	icall
    FtDeactivateInterface();
 3d8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3dc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3e0:	09 95       	icall
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
    {
        while (!UsbReadOneByte(read_buffer)); // Loops until FtBus has data.
        num_bytes_read++;
        read_buffer++;
 3e2:	21 96       	adiw	r28, 0x01	; 1
    return num_bytes_read;
}
static uint16_t UsbReadBytes_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_read = 0;
    while (num_bytes_read < nbytes)
 3e4:	0c 17       	cp	r16, r28
 3e6:	1d 07       	cpc	r17, r29
 3e8:	21 f7       	brne	.-56     	; 0x3b2 <UsbReadBytes_Implementation+0x22>
        while (!UsbReadOneByte(read_buffer)); // Loops until FtBus has data.
        num_bytes_read++;
        read_buffer++;
    }
    return num_bytes_read;
}
 3ea:	c7 01       	movw	r24, r14
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	08 95       	ret
    {
        // This path lets `UsbReadOneByte` work as a looping check to
        // see when a first byte is ready.
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
 3fc:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 400:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 404:	09 95       	icall
 406:	d5 cf       	rjmp	.-86     	; 0x3b2 <UsbReadBytes_Implementation+0x22>

00000408 <UsbInit>:
// =====[status_led defined in BiColorLed-Hardware header]=====
extern uint8_t const status_led;

void UsbInit(void)
{
    FtInit();
 408:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000040c <UsbReadOneByte>:
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	ec 01       	movw	r28, r24
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 412:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 416:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 41a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <FtCmd_Read>
 41e:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 420:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 424:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 428:	09 95       	icall
    if (!has_data_to_read)
 42a:	88 23       	and	r24, r24
 42c:	79 f0       	breq	.+30     	; 0x44c <UsbReadOneByte+0x40>
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 42e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 432:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 436:	ce 01       	movw	r24, r28
 438:	09 95       	icall
    FtDeactivateInterface();
 43a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 43e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 442:	09 95       	icall
    return num_bytes_read;
 444:	81 e0       	ldi	r24, 0x01	; 1
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret
    {
        // This path lets `UsbReadOneByte` work as a looping check to
        // see when a first byte is ready.
        // This is preferable to using a low-level Ft1248 call to
        // check Ft_Miso LOW in the application.
        FtDeactivateInterface();
 44c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 450:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 454:	09 95       	icall
 456:	80 e0       	ldi	r24, 0x00	; 0
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <ClearPendingSpiInterrupt_Implementation>:
 45e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <ReadSpiStatusRegister>
 462:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <ReadSpiStatusRegister+0x1>
 466:	09 95       	icall
 468:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 46c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 470:	09 94       	ijmp

00000472 <ReadSpiStatusRegister_Implementation>:
 472:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Spi_spsr>
 476:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Spi_spsr+0x1>
 47a:	80 81       	ld	r24, Z
 47c:	08 95       	ret

0000047e <EnableSpi_Implementation>:
 47e:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Spi_spcr>
 482:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Spi_spcr+0x1>
 486:	20 81       	ld	r18, Z
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	00 90 3d 01 	lds	r0, 0x013D	; 0x80013d <Spi_Enable>
 490:	02 c0       	rjmp	.+4      	; 0x496 <EnableSpi_Implementation+0x18>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <EnableSpi_Implementation+0x14>
 49a:	82 2b       	or	r24, r18
 49c:	80 83       	st	Z, r24
 49e:	08 95       	ret

000004a0 <SpiMasterCloseSpi_Implementation>:
 4a0:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Spi_port>
 4a4:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Spi_port+0x1>
 4a8:	20 81       	ld	r18, Z
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Spi_Ss>
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <SpiMasterCloseSpi_Implementation+0x18>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <SpiMasterCloseSpi_Implementation+0x14>
 4bc:	82 2b       	or	r24, r18
 4be:	80 83       	st	Z, r24
 4c0:	08 95       	ret

000004c2 <ReadSpiDataRegister_Implementation>:
 4c2:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <Spi_spdr>
 4c6:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <Spi_spdr+0x1>
 4ca:	80 81       	ld	r24, Z
 4cc:	08 95       	ret

000004ce <SpiMasterInit>:
    SetBit(Spi_ddr, Spi_DataReady); // make it an output pin
}

void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 4ce:	0e 94 50 02 	call	0x4a0	; 0x4a0 <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 4d2:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Spi_ddr>
 4d6:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 4da:	40 81       	ld	r20, Z
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9c 01       	movw	r18, r24
 4e2:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <Spi_Miso>
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <SpiMasterInit+0x1e>
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <SpiMasterInit+0x1a>
 4f0:	32 2f       	mov	r19, r18
 4f2:	30 95       	com	r19
 4f4:	34 23       	and	r19, r20
 4f6:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 4f8:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Spi_port>
 4fc:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 500:	3c 91       	ld	r19, X
 502:	23 2b       	or	r18, r19
 504:	2c 93       	st	X, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 506:	40 81       	ld	r20, Z
 508:	9c 01       	movw	r18, r24
 50a:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Spi_DataReady>
 50e:	02 c0       	rjmp	.+4      	; 0x514 <SpiMasterInit+0x46>
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <SpiMasterInit+0x42>
 518:	32 2f       	mov	r19, r18
 51a:	30 95       	com	r19
 51c:	34 23       	and	r19, r20
 51e:	30 83       	st	Z, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 520:	3c 91       	ld	r19, X
 522:	23 2b       	or	r18, r19
 524:	2c 93       	st	X, r18
 526:	40 81       	ld	r20, Z
 528:	9c 01       	movw	r18, r24
 52a:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Spi_Ss>
 52e:	02 c0       	rjmp	.+4      	; 0x534 <SpiMasterInit+0x66>
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <SpiMasterInit+0x62>
 538:	24 2b       	or	r18, r20
 53a:	20 83       	st	Z, r18
 53c:	40 81       	ld	r20, Z
 53e:	9c 01       	movw	r18, r24
 540:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Spi_Mosi>
 544:	02 c0       	rjmp	.+4      	; 0x54a <SpiMasterInit+0x7c>
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <SpiMasterInit+0x78>
 54e:	24 2b       	or	r18, r20
 550:	20 83       	st	Z, r18
 552:	40 81       	ld	r20, Z
 554:	9c 01       	movw	r18, r24
 556:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <Spi_Sck>
 55a:	02 c0       	rjmp	.+4      	; 0x560 <SpiMasterInit+0x92>
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <SpiMasterInit+0x8e>
 564:	24 2b       	or	r18, r20
 566:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 568:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <Spi_spcr>
 56c:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <Spi_spcr+0x1>
 570:	40 81       	ld	r20, Z
 572:	9c 01       	movw	r18, r24
 574:	00 90 40 01 	lds	r0, 0x0140	; 0x800140 <Spi_MasterSlaveSelect>
 578:	02 c0       	rjmp	.+4      	; 0x57e <SpiMasterInit+0xb0>
 57a:	22 0f       	add	r18, r18
 57c:	33 1f       	adc	r19, r19
 57e:	0a 94       	dec	r0
 580:	e2 f7       	brpl	.-8      	; 0x57a <SpiMasterInit+0xac>
 582:	24 2b       	or	r18, r20
 584:	20 83       	st	Z, r18
 586:	40 81       	ld	r20, Z
 588:	9c 01       	movw	r18, r24
 58a:	00 90 3f 01 	lds	r0, 0x013F	; 0x80013f <Spi_ClockRateBit0>
 58e:	02 c0       	rjmp	.+4      	; 0x594 <SpiMasterInit+0xc6>
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <SpiMasterInit+0xc2>
 598:	24 2b       	or	r18, r20
 59a:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 59c:	30 81       	ld	r19, Z
 59e:	ac 01       	movw	r20, r24
 5a0:	00 90 3e 01 	lds	r0, 0x013E	; 0x80013e <Spi_ClockRateBit1>
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <SpiMasterInit+0xdc>
 5a6:	44 0f       	add	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <SpiMasterInit+0xd8>
 5ae:	24 2f       	mov	r18, r20
 5b0:	20 95       	com	r18
 5b2:	23 23       	and	r18, r19
 5b4:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 5b6:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Spi_spsr>
 5ba:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 5be:	20 81       	ld	r18, Z
 5c0:	00 90 3c 01 	lds	r0, 0x013C	; 0x80013c <Spi_DoubleClockRate>
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <SpiMasterInit+0xfc>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <SpiMasterInit+0xf8>
 5ce:	82 2b       	or	r24, r18
 5d0:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 5d2:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EnableSpi>
 5d6:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EnableSpi+0x1>
 5da:	09 95       	icall
    ClearPendingSpiInterrupt(); // access SPI status reg and SPI data reg
 5dc:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ClearPendingSpiInterrupt>
 5e0:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ClearPendingSpiInterrupt+0x1>
 5e4:	09 94       	ijmp

000005e6 <NullCommand>:

uint8_t UsbWriteStatusOk(bridge_cmd_key   cmd_done_by_bridge)
{
    uint8_t const StatusOk[] = { 0x00, cmd_done_by_bridge};
    return UsbWrite(StatusOk,2);
}
 5e6:	08 95       	ret

000005e8 <SerialWriteByte_Implementation>:
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	1f 92       	push	r1
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 5f8:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 5fc:	61 e0       	ldi	r22, 0x01	; 1
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	ce 01       	movw	r24, r28
 602:	01 96       	adiw	r24, 0x01	; 1
 604:	09 95       	icall
 606:	0f 90       	pop	r0
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <SpiWriteByte_Implementation>:
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Spi_port>
 616:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Spi_port+0x1>
 61a:	9c 91       	ld	r25, X
 61c:	21 e0       	ldi	r18, 0x01	; 1
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	a9 01       	movw	r20, r18
 622:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Spi_Ss>
 626:	02 c0       	rjmp	.+4      	; 0x62c <SpiWriteByte_Implementation+0x1e>
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <SpiWriteByte_Implementation+0x1a>
 630:	64 2f       	mov	r22, r20
 632:	60 95       	com	r22
 634:	96 23       	and	r25, r22
 636:	9c 93       	st	X, r25
 638:	c0 91 46 01 	lds	r28, 0x0146	; 0x800146 <Spi_spdr>
 63c:	d0 91 47 01 	lds	r29, 0x0147	; 0x800147 <Spi_spdr+0x1>
 640:	88 83       	st	Y, r24
 642:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Spi_spsr>
 646:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Spi_spsr+0x1>
 64a:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <Spi_InterruptFlag>
 64e:	02 c0       	rjmp	.+4      	; 0x654 <SpiWriteByte_Implementation+0x46>
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <SpiWriteByte_Implementation+0x42>
 658:	80 81       	ld	r24, Z
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	82 23       	and	r24, r18
 65e:	93 23       	and	r25, r19
 660:	89 2b       	or	r24, r25
 662:	d1 f3       	breq	.-12     	; 0x658 <SpiWriteByte_Implementation+0x4a>
 664:	88 81       	ld	r24, Y
 666:	8c 91       	ld	r24, X
 668:	48 2b       	or	r20, r24
 66a:	4c 93       	st	X, r20
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <ReadSensor_Implementation>:
 672:	6f 92       	push	r6
 674:	7f 92       	push	r7
 676:	8f 92       	push	r8
 678:	9f 92       	push	r9
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	4b 01       	movw	r8, r22
 68e:	67 2b       	or	r22, r23
 690:	09 f4       	brne	.+2      	; 0x694 <ReadSensor_Implementation+0x22>
 692:	58 c0       	rjmp	.+176    	; 0x744 <ReadSensor_Implementation+0xd2>
 694:	60 90 4e 01 	lds	r6, 0x014E	; 0x80014e <Spi_port>
 698:	70 90 4f 01 	lds	r7, 0x014F	; 0x80014f <Spi_port+0x1>
 69c:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <Spi_spdr>
 6a0:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <Spi_spdr+0x1>
 6a4:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <slave_ignore>
 6a8:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <Spi_spsr>
 6ac:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <Spi_spsr+0x1>
 6b0:	41 e0       	ldi	r20, 0x01	; 1
 6b2:	50 e0       	ldi	r21, 0x00	; 0
 6b4:	9a 01       	movw	r18, r20
 6b6:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Spi_Ss>
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <ReadSensor_Implementation+0x4e>
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	0a 94       	dec	r0
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <ReadSensor_Implementation+0x4a>
 6c4:	d2 2e       	mov	r13, r18
 6c6:	b2 2e       	mov	r11, r18
 6c8:	b0 94       	com	r11
 6ca:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Spi_pin>
 6ce:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Spi_pin+0x1>
 6d2:	9a 01       	movw	r18, r20
 6d4:	00 90 41 01 	lds	r0, 0x0141	; 0x800141 <Spi_DataReady>
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <ReadSensor_Implementation+0x6c>
 6da:	22 0f       	add	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <ReadSensor_Implementation+0x68>
 6e2:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <Spi_InterruptFlag>
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <ReadSensor_Implementation+0x7a>
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	0a 94       	dec	r0
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <ReadSensor_Implementation+0x76>
 6f0:	bc 01       	movw	r22, r24
 6f2:	7c 01       	movw	r14, r24
 6f4:	e8 0c       	add	r14, r8
 6f6:	f9 1c       	adc	r15, r9
 6f8:	80 81       	ld	r24, Z
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	82 23       	and	r24, r18
 6fe:	93 23       	and	r25, r19
 700:	89 2b       	or	r24, r25
 702:	d1 f7       	brne	.-12     	; 0x6f8 <ReadSensor_Implementation+0x86>
 704:	e3 01       	movw	r28, r6
 706:	88 81       	ld	r24, Y
 708:	8b 21       	and	r24, r11
 70a:	88 83       	st	Y, r24
 70c:	e8 01       	movw	r28, r16
 70e:	c8 82       	st	Y, r12
 710:	8c 91       	ld	r24, X
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	84 23       	and	r24, r20
 716:	95 23       	and	r25, r21
 718:	89 2b       	or	r24, r25
 71a:	d1 f3       	breq	.-12     	; 0x710 <ReadSensor_Implementation+0x9e>
 71c:	e8 01       	movw	r28, r16
 71e:	88 81       	ld	r24, Y
 720:	e3 01       	movw	r28, r6
 722:	88 81       	ld	r24, Y
 724:	8d 29       	or	r24, r13
 726:	88 83       	st	Y, r24
 728:	e8 01       	movw	r28, r16
 72a:	88 81       	ld	r24, Y
 72c:	eb 01       	movw	r28, r22
 72e:	89 93       	st	Y+, r24
 730:	be 01       	movw	r22, r28
 732:	80 81       	ld	r24, Z
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	82 23       	and	r24, r18
 738:	93 23       	and	r25, r19
 73a:	89 2b       	or	r24, r25
 73c:	d1 f3       	breq	.-12     	; 0x732 <ReadSensor_Implementation+0xc0>
 73e:	6e 15       	cp	r22, r14
 740:	7f 05       	cpc	r23, r15
 742:	d1 f6       	brne	.-76     	; 0x6f8 <ReadSensor_Implementation+0x86>
 744:	c4 01       	movw	r24, r8
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	df 90       	pop	r13
 754:	cf 90       	pop	r12
 756:	bf 90       	pop	r11
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	7f 90       	pop	r7
 75e:	6f 90       	pop	r6
 760:	08 95       	ret

00000762 <TestInvalidSensorCmd>:
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	1f 92       	push	r1
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 770:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	09 95       	icall
 778:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Spi_port>
 77c:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Spi_port+0x1>
 780:	8c 91       	ld	r24, X
 782:	21 e0       	ldi	r18, 0x01	; 1
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	a9 01       	movw	r20, r18
 788:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Spi_Ss>
 78c:	02 c0       	rjmp	.+4      	; 0x792 <TestInvalidSensorCmd+0x30>
 78e:	44 0f       	add	r20, r20
 790:	55 1f       	adc	r21, r21
 792:	0a 94       	dec	r0
 794:	e2 f7       	brpl	.-8      	; 0x78e <TestInvalidSensorCmd+0x2c>
 796:	94 2f       	mov	r25, r20
 798:	90 95       	com	r25
 79a:	89 23       	and	r24, r25
 79c:	8c 93       	st	X, r24
 79e:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <Spi_spdr>
 7a2:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <Spi_spdr+0x1>
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	fb 01       	movw	r30, r22
 7aa:	80 83       	st	Z, r24
 7ac:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <Spi_spsr>
 7b0:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <Spi_spsr+0x1>
 7b4:	00 90 3b 01 	lds	r0, 0x013B	; 0x80013b <Spi_InterruptFlag>
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <TestInvalidSensorCmd+0x5c>
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	0a 94       	dec	r0
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <TestInvalidSensorCmd+0x58>
 7c2:	80 81       	ld	r24, Z
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	82 23       	and	r24, r18
 7c8:	93 23       	and	r25, r19
 7ca:	89 2b       	or	r24, r25
 7cc:	d1 f3       	breq	.-12     	; 0x7c2 <TestInvalidSensorCmd+0x60>
 7ce:	fb 01       	movw	r30, r22
 7d0:	80 81       	ld	r24, Z
 7d2:	8c 91       	ld	r24, X
 7d4:	48 2b       	or	r20, r24
 7d6:	4c 93       	st	X, r20
 7d8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 7dc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	09 95       	icall
 7ea:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 7ee:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	09 95       	icall
 7f6:	0f 90       	pop	r0
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <GetBridgeLED>:
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	1f 92       	push	r1
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 810:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 814:	61 e0       	ldi	r22, 0x01	; 1
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	ce 01       	movw	r24, r28
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	09 95       	icall
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 824:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 828:	81 11       	cpse	r24, r1
 82a:	48 c0       	rjmp	.+144    	; 0x8bc <GetBridgeLED+0xbe>
 82c:	80 e0       	ldi	r24, 0x00	; 0
 82e:	09 95       	icall
 830:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <BiColorLed_ddr>
 834:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <BiColorLed_ddr+0x1>
 838:	80 81       	ld	r24, Z
 83a:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <status_led>
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 2e       	mov	r0, r18
 842:	02 c0       	rjmp	.+4      	; 0x848 <GetBridgeLED+0x4a>
 844:	95 95       	asr	r25
 846:	87 95       	ror	r24
 848:	0a 94       	dec	r0
 84a:	e2 f7       	brpl	.-8      	; 0x844 <GetBridgeLED+0x46>
 84c:	80 fd       	sbrc	r24, 0
 84e:	11 c0       	rjmp	.+34     	; 0x872 <GetBridgeLED+0x74>
 850:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 854:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	09 95       	icall
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	0f 90       	pop	r0
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	1f 91       	pop	r17
 86e:	0f 91       	pop	r16
 870:	08 95       	ret
 872:	80 81       	ld	r24, Z
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 2e       	mov	r0, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <GetBridgeLED+0x80>
 87a:	95 95       	asr	r25
 87c:	87 95       	ror	r24
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <GetBridgeLED+0x7c>
 882:	80 ff       	sbrs	r24, 0
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <GetBridgeLED+0xa2>
 886:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <BiColorLed_port>
 88a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <BiColorLed_port+0x1>
 88e:	80 81       	ld	r24, Z
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <GetBridgeLED+0x9a>
 894:	95 95       	asr	r25
 896:	87 95       	ror	r24
 898:	2a 95       	dec	r18
 89a:	e2 f7       	brpl	.-8      	; 0x894 <GetBridgeLED+0x96>
 89c:	80 fd       	sbrc	r24, 0
 89e:	07 c0       	rjmp	.+14     	; 0x8ae <GetBridgeLED+0xb0>
 8a0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8a4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	09 95       	icall
 8ac:	d7 cf       	rjmp	.-82     	; 0x85c <GetBridgeLED+0x5e>
 8ae:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8b2:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 8b6:	82 e0       	ldi	r24, 0x02	; 2
 8b8:	09 95       	icall
 8ba:	d0 cf       	rjmp	.-96     	; 0x85c <GetBridgeLED+0x5e>
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	09 95       	icall
 8c0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8c4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	09 95       	icall
 8cc:	0f 90       	pop	r0
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	1f 91       	pop	r17
 8d4:	0f 91       	pop	r16
 8d6:	08 95       	ret

000008d8 <SetBridgeLED>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	00 d0       	rcall	.+0      	; 0x8e2 <SetBridgeLED+0xa>
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
 8e6:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 8ea:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 8ee:	62 e0       	ldi	r22, 0x02	; 2
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	ce 01       	movw	r24, r28
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	09 95       	icall
 8f8:	89 81       	ldd	r24, Y+1	; 0x01
 8fa:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 8fe:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 902:	88 23       	and	r24, r24
 904:	71 f0       	breq	.+28     	; 0x922 <__stack+0x23>
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	09 95       	icall
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
 914:	0f 90       	pop	r0
 916:	0f 90       	pop	r0
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	1f 91       	pop	r17
 91e:	0f 91       	pop	r16
 920:	08 95       	ret
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	09 95       	icall
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	81 11       	cpse	r24, r1
 92a:	1a c0       	rjmp	.+52     	; 0x960 <__stack+0x61>
 92c:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <BiColorLed_ddr>
 930:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <BiColorLed_ddr+0x1>
 934:	20 81       	ld	r18, Z
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <status_led>
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0x45>
 940:	88 0f       	add	r24, r24
 942:	99 1f       	adc	r25, r25
 944:	0a 94       	dec	r0
 946:	e2 f7       	brpl	.-8      	; 0x940 <__stack+0x41>
 948:	80 95       	com	r24
 94a:	92 2f       	mov	r25, r18
 94c:	98 23       	and	r25, r24
 94e:	90 83       	st	Z, r25
 950:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <BiColorLed_port>
 954:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <BiColorLed_port+0x1>
 958:	90 81       	ld	r25, Z
 95a:	89 23       	and	r24, r25
 95c:	80 83       	st	Z, r24
 95e:	d5 cf       	rjmp	.-86     	; 0x90a <__stack+0xb>
 960:	81 30       	cpi	r24, 0x01	; 1
 962:	d9 f0       	breq	.+54     	; 0x99a <__stack+0x9b>
 964:	82 30       	cpi	r24, 0x02	; 2
 966:	b1 f6       	brne	.-84     	; 0x914 <__stack+0x15>
 968:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <BiColorLed_port>
 96c:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <BiColorLed_port+0x1>
 970:	20 81       	ld	r18, Z
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <status_led>
 97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	0a 94       	dec	r0
 982:	e2 f7       	brpl	.-8      	; 0x97c <__stack+0x7d>
 984:	92 2f       	mov	r25, r18
 986:	98 2b       	or	r25, r24
 988:	90 83       	st	Z, r25
 98a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <BiColorLed_ddr>
 98e:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <BiColorLed_ddr+0x1>
 992:	90 81       	ld	r25, Z
 994:	89 2b       	or	r24, r25
 996:	80 83       	st	Z, r24
 998:	b8 cf       	rjmp	.-144    	; 0x90a <__stack+0xb>
 99a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <BiColorLed_port>
 99e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <BiColorLed_port+0x1>
 9a2:	20 81       	ld	r18, Z
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	00 90 61 01 	lds	r0, 0x0161	; 0x800161 <status_led>
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0xb3>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	0a 94       	dec	r0
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <__stack+0xaf>
 9b6:	98 2f       	mov	r25, r24
 9b8:	90 95       	com	r25
 9ba:	92 23       	and	r25, r18
 9bc:	e5 cf       	rjmp	.-54     	; 0x988 <__stack+0x89>

000009be <BridgeGetSensorLED>:
 9be:	1f 93       	push	r17
 9c0:	cf 93       	push	r28
 9c2:	df 93       	push	r29
 9c4:	00 d0       	rcall	.+0      	; 0x9c6 <BridgeGetSensorLED+0x8>
 9c6:	1f 92       	push	r1
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 9d0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	ce 01       	movw	r24, r28
 9da:	03 96       	adiw	r24, 0x03	; 3
 9dc:	09 95       	icall
 9de:	1b 81       	ldd	r17, Y+3	; 0x03
 9e0:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 9e4:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	09 95       	icall
 9ec:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 9f0:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 9f4:	83 e0       	ldi	r24, 0x03	; 3
 9f6:	09 95       	icall
 9f8:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <SpiWriteByte>
 9fc:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <SpiWriteByte+0x1>
 a00:	81 2f       	mov	r24, r17
 a02:	09 95       	icall
 a04:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <ReadSensor>
 a08:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <ReadSensor+0x1>
 a0c:	62 e0       	ldi	r22, 0x02	; 2
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	ce 01       	movw	r24, r28
 a12:	01 96       	adiw	r24, 0x01	; 1
 a14:	09 95       	icall
 a16:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a1a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a1e:	89 81       	ldd	r24, Y+1	; 0x01
 a20:	09 95       	icall
 a22:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <SerialWriteByte>
 a26:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <SerialWriteByte+0x1>
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	09 95       	icall
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	08 95       	ret

00000a3c <LookupBridgeCmd>:
 a3c:	85 30       	cpi	r24, 0x05	; 5
 a3e:	48 f4       	brcc	.+18     	; 0xa52 <LookupBridgeCmd+0x16>
 a40:	e8 2f       	mov	r30, r24
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	ee 0f       	add	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	ef 5c       	subi	r30, 0xCF	; 207
 a4a:	fe 4f       	sbci	r31, 0xFE	; 254
 a4c:	80 81       	ld	r24, Z
 a4e:	91 81       	ldd	r25, Z+1	; 0x01
 a50:	08 95       	ret
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	08 95       	ret

00000a58 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(void)
{
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	1f 92       	push	r1
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { invalid_cmd };
 a62:	82 e0       	ldi	r24, 0x02	; 2
 a64:	89 83       	std	Y+1, r24	; 0x01
    return UsbWrite(StatusInvalid,1);
 a66:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 a6a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 a6e:	61 e0       	ldi	r22, 0x01	; 1
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	ce 01       	movw	r24, r28
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	09 95       	icall
}
 a78:	0f 90       	pop	r0
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	08 95       	ret

00000a80 <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
 a84:	1f 92       	push	r1
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
 a8a:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 a8c:	0e 94 67 02 	call	0x4ce	; 0x4ce <SpiMasterInit>
    UsbInit();
 a90:	0e 94 04 02 	call	0x408	; 0x408 <UsbInit>
 a94:	3d 9a       	sbi	0x07, 5	; 7
 a96:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 a98:	80 e2       	ldi	r24, 0x20	; 32
 a9a:	96 e0       	ldi	r25, 0x06	; 6
 a9c:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <nbytes_in_frame+0x1>
 aa0:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 aa4:	ce 01       	movw	r24, r28
 aa6:	01 96       	adiw	r24, 0x01	; 1
 aa8:	0e 94 06 02 	call	0x40c	; 0x40c <UsbReadOneByte>
 aac:	88 23       	and	r24, r24
 aae:	d1 f3       	breq	.-12     	; 0xaa4 <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 ab0:	89 81       	ldd	r24, Y+1	; 0x01
 ab2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(cmd); */
        if (CmdFn == NULL) UsbWriteStatusInvalid();
 ab6:	00 97       	sbiw	r24, 0x00	; 0
 ab8:	19 f0       	breq	.+6      	; 0xac0 <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 aba:	fc 01       	movw	r30, r24
 abc:	09 95       	icall
 abe:	f2 cf       	rjmp	.-28     	; 0xaa4 <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        /* if (CmdFn == NULL) UsbWriteStatusInvalid(cmd); */
        if (CmdFn == NULL) UsbWriteStatusInvalid();
 ac0:	0e 94 2c 05 	call	0xa58	; 0xa58 <UsbWriteStatusInvalid>
 ac4:	ef cf       	rjmp	.-34     	; 0xaa4 <main+0x24>

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
