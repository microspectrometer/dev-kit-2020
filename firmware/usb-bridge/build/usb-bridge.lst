
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000008c4  00000958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000623  00800158  00800158  000009b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000619a  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001585  00000000  00000000  00006f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000245c  00000000  00000000  000084cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  0000a92c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001755  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ecf  00000000  00000000  0000cadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  000109ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 37       	cpi	r26, 0x7B	; 123
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3c 04 	call	0x878	; 0x878 <main>
  9e:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 14a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 16e:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 190:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 1b2:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_ddr>
 1d6:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_ddr>
 1e4:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Ft1248_pin>
 1f0:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <FtMiosio_pin>
 216:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_port>
 222:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_port>
 272:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Ft1248_ddr>
 282:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Ft1248_port>
 2a8:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <FtMiosio_ddr>
 2b6:	d0 91 4b 01 	lds	r29, 0x014B	; 0x80014b <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 48 01 	lds	r28, 0x0148	; 0x800148 <FtMiosio_port>
 2c0:	d0 91 49 01 	lds	r29, 0x0149	; 0x800149 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <UsbReadN_Implementation>:
    }
    return num_bytes_read;
}
// TODO: unit test UsbReadN
static uint16_t UsbReadN_Implementation(uint8_t *read_buffer, uint16_t nbytes)
{
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	8c 01       	movw	r16, r24
 318:	7b 01       	movw	r14, r22
    uint16_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 31a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 31e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 322:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 326:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 328:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 32c:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 330:	09 95       	icall
    if (!has_data_to_read)
 332:	88 23       	and	r24, r24
 334:	f1 f0       	breq	.+60     	; 0x372 <UsbReadN_Implementation+0x68>
 336:	c0 e0       	ldi	r28, 0x00	; 0
 338:	d0 e0       	ldi	r29, 0x00	; 0
    bool read_ok = true; bool finished = false;
    /* TODO: add a timer to prevent this while loop from hanging */
    /* // This will be next error (254). Timeout on expected nbytes. */
    while (read_ok && !finished)
    {
        read_ok = FtRead(read_buffer++);
 33a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 33e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 342:	c8 01       	movw	r24, r16
 344:	8c 0f       	add	r24, r28
 346:	9d 1f       	adc	r25, r29
 348:	09 95       	icall
        if (read_ok) num_bytes_read++;
 34a:	81 11       	cpse	r24, r1
 34c:	0d c0       	rjmp	.+26     	; 0x368 <UsbReadN_Implementation+0x5e>
        finished = (num_bytes_read >= nbytes);
    }
    FtDeactivateInterface();
 34e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 352:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 356:	09 95       	icall
    return num_bytes_read;
}
 358:	ce 01       	movw	r24, r28
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret
    /* TODO: add a timer to prevent this while loop from hanging */
    /* // This will be next error (254). Timeout on expected nbytes. */
    while (read_ok && !finished)
    {
        read_ok = FtRead(read_buffer++);
        if (read_ok) num_bytes_read++;
 368:	21 96       	adiw	r28, 0x01	; 1
        return num_bytes_read;
    }
    bool read_ok = true; bool finished = false;
    /* TODO: add a timer to prevent this while loop from hanging */
    /* // This will be next error (254). Timeout on expected nbytes. */
    while (read_ok && !finished)
 36a:	ce 15       	cp	r28, r14
 36c:	df 05       	cpc	r29, r15
 36e:	28 f3       	brcs	.-54     	; 0x33a <UsbReadN_Implementation+0x30>
 370:	ee cf       	rjmp	.-36     	; 0x34e <UsbReadN_Implementation+0x44>
{
    ClearBit(BiColorLed_port, led_name);
}
inline void BiColorLedRed(uint8_t led_name)
{
    SetBit(BiColorLed_port, led_name);
 372:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 376:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 37a:	20 81       	ld	r18, Z
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 384:	02 c0       	rjmp	.+4      	; 0x38a <UsbReadN_Implementation+0x80>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <UsbReadN_Implementation+0x7c>
 38e:	82 2b       	or	r24, r18
 390:	80 83       	st	Z, r24
    bool has_data_to_read = FtBusTurnaround();
    if (!has_data_to_read)
    {
        // sad path
        BiColorLedRed(status_led);
        FtDeactivateInterface();
 392:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 396:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 39a:	09 95       	icall
 39c:	c0 e0       	ldi	r28, 0x00	; 0
 39e:	d0 e0       	ldi	r29, 0x00	; 0
        if (read_ok) num_bytes_read++;
        finished = (num_bytes_read >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_read;
}
 3a0:	ce 01       	movw	r24, r28
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	08 95       	ret

000003b0 <UsbWrite_Implementation>:
    FtDeactivateInterface();
    return num_bytes_read;
}

static uint16_t UsbWrite_Implementation(uint8_t const *write_buffer, uint16_t nbytes)
{
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	8c 01       	movw	r16, r24
 3be:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 3c0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3c4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3c8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 3cc:	09 95       	icall
    if (!FtBusTurnaround())
 3ce:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3d2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3d6:	09 95       	icall
 3d8:	88 23       	and	r24, r24
 3da:	f1 f0       	breq	.+60     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 3e0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 3e4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 3e8:	c8 01       	movw	r24, r16
 3ea:	8c 0f       	add	r24, r28
 3ec:	9d 1f       	adc	r25, r29
 3ee:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 3f0:	81 11       	cpse	r24, r1
 3f2:	0d c0       	rjmp	.+26     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 3f4:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3f8:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3fc:	09 95       	icall
    return num_bytes_sent;
}
 3fe:	ce 01       	movw	r24, r28
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 40e:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 410:	ce 15       	cp	r28, r14
 412:	df 05       	cpc	r29, r15
 414:	28 f3       	brcs	.-54     	; 0x3e0 <UsbWrite_Implementation+0x30>
 416:	ee cf       	rjmp	.-36     	; 0x3f4 <UsbWrite_Implementation+0x44>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 418:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 41c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 420:	09 95       	icall
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 426:	ce 01       	movw	r24, r28
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	08 95       	ret

00000436 <UsbInit>:
// =====[status_led defined in BiColorLed-Hardware header]=====
extern uint8_t const status_led;

void UsbInit(void)
{
    FtInit();
 436:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

0000043a <UsbReadOneByte>:
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 440:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 444:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 448:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 44c:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 44e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 452:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 456:	09 95       	icall
    if (!has_data_to_read)
 458:	88 23       	and	r24, r24
 45a:	79 f0       	breq	.+30     	; 0x47a <UsbReadOneByte+0x40>
        // Use this in place of checking if Ft_Miso is low in app.
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 45c:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 460:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 464:	ce 01       	movw	r24, r28
 466:	09 95       	icall
    FtDeactivateInterface();
 468:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 46c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 470:	09 95       	icall
    return num_bytes_read;
 472:	81 e0       	ldi	r24, 0x01	; 1
}
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret
    {
        // sad path
        // No, not an error. Not a sad path.
        // Use this in place of checking if Ft_Miso is low in app.
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 47a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 47e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 482:	09 95       	icall
        return num_bytes_read;
 484:	80 e0       	ldi	r24, 0x00	; 0
    }
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <UsbReadBytes>:
uint16_t UsbReadBytes(uint8_t *read_buffer, uint16_t nbytes)
{
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	ec 01       	movw	r28, r24
 49a:	7b 01       	movw	r14, r22
    uint16_t num_bytes_read = 0;
    while (num_bytes_read++ < nbytes)
 49c:	67 2b       	or	r22, r23
 49e:	e1 f0       	breq	.+56     	; 0x4d8 <UsbReadBytes+0x4c>
 4a0:	00 e0       	ldi	r16, 0x00	; 0
 4a2:	10 e0       	ldi	r17, 0x00	; 0
    {
        while (!FtRead(read_buffer)); // wait for a byte to read
 4a4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 4a8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 4ac:	ce 01       	movw	r24, r28
 4ae:	09 95       	icall
 4b0:	88 23       	and	r24, r24
 4b2:	c1 f3       	breq	.-16     	; 0x4a4 <UsbReadBytes+0x18>
        // One byte was finally available and was store in buffer.
        // Increment byte counter.
        num_bytes_read++;
 4b4:	98 01       	movw	r18, r16
 4b6:	2e 5f       	subi	r18, 0xFE	; 254
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
        // Point to next mem slot in read buffer.
        read_buffer++;
 4ba:	21 96       	adiw	r28, 0x01	; 1
    return num_bytes_read;
}
uint16_t UsbReadBytes(uint8_t *read_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_read = 0;
    while (num_bytes_read++ < nbytes)
 4bc:	2e 15       	cp	r18, r14
 4be:	3f 05       	cpc	r19, r15
 4c0:	10 f4       	brcc	.+4      	; 0x4c6 <UsbReadBytes+0x3a>
 4c2:	89 01       	movw	r16, r18
 4c4:	ef cf       	rjmp	.-34     	; 0x4a4 <UsbReadBytes+0x18>
 4c6:	c8 01       	movw	r24, r16
 4c8:	03 96       	adiw	r24, 0x03	; 3
        num_bytes_read++;
        // Point to next mem slot in read buffer.
        read_buffer++;
    }
    return num_bytes_read;
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	08 95       	ret
    return num_bytes_read;
}
uint16_t UsbReadBytes(uint8_t *read_buffer, uint16_t nbytes)
{
    uint16_t num_bytes_read = 0;
    while (num_bytes_read++ < nbytes)
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
        num_bytes_read++;
        // Point to next mem slot in read buffer.
        read_buffer++;
    }
    return num_bytes_read;
}
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	ff 90       	pop	r15
 4e6:	ef 90       	pop	r14
 4e8:	08 95       	ret

000004ea <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 4ea:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <ReadSpiStatusRegister>
 4ee:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <ReadSpiStatusRegister+0x1>
 4f2:	09 95       	icall
 4f4:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 4f8:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 4fc:	09 94       	ijmp

000004fe <ReadSpiStatusRegister_Implementation>:
 4fe:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spsr>
 502:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spsr+0x1>
 506:	80 81       	ld	r24, Z
 508:	08 95       	ret

0000050a <EnableSpi_Implementation>:
 50a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spcr>
 50e:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spcr+0x1>
 512:	20 81       	ld	r18, Z
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	00 90 31 01 	lds	r0, 0x0131	; 0x800131 <Spi_Enable>
 51c:	02 c0       	rjmp	.+4      	; 0x522 <EnableSpi_Implementation+0x18>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <EnableSpi_Implementation+0x14>
 526:	82 2b       	or	r24, r18
 528:	80 83       	st	Z, r24
 52a:	08 95       	ret

0000052c <SpiMasterCloseSpi_Implementation>:
 52c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_port>
 530:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_port+0x1>
 534:	20 81       	ld	r18, Z
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_Ss>
 53e:	02 c0       	rjmp	.+4      	; 0x544 <SpiMasterCloseSpi_Implementation+0x18>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <SpiMasterCloseSpi_Implementation+0x14>
 548:	82 2b       	or	r24, r18
 54a:	80 83       	st	Z, r24
 54c:	08 95       	ret

0000054e <ReadSpiDataRegister_Implementation>:
 54e:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Spi_spdr>
 552:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Spi_spdr+0x1>
 556:	80 81       	ld	r24, Z
 558:	08 95       	ret

0000055a <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 55a:	0e 94 96 02 	call	0x52c	; 0x52c <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 55e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_ddr>
 562:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 566:	40 81       	ld	r20, Z
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9c 01       	movw	r18, r24
 56e:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_Miso>
 572:	02 c0       	rjmp	.+4      	; 0x578 <SpiMasterInit+0x1e>
 574:	22 0f       	add	r18, r18
 576:	33 1f       	adc	r19, r19
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <SpiMasterInit+0x1a>
 57c:	32 2f       	mov	r19, r18
 57e:	30 95       	com	r19
 580:	34 23       	and	r19, r20
 582:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 584:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Spi_port>
 588:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 58c:	3c 91       	ld	r19, X
 58e:	23 2b       	or	r18, r19
 590:	2c 93       	st	X, r18
 592:	40 81       	ld	r20, Z
 594:	9c 01       	movw	r18, r24
 596:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_Ss>
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <SpiMasterInit+0x46>
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <SpiMasterInit+0x42>
 5a4:	24 2b       	or	r18, r20
 5a6:	20 83       	st	Z, r18
 5a8:	40 81       	ld	r20, Z
 5aa:	9c 01       	movw	r18, r24
 5ac:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_Mosi>
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <SpiMasterInit+0x5c>
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	0a 94       	dec	r0
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <SpiMasterInit+0x58>
 5ba:	24 2b       	or	r18, r20
 5bc:	20 83       	st	Z, r18
 5be:	40 81       	ld	r20, Z
 5c0:	9c 01       	movw	r18, r24
 5c2:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Spi_Sck>
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <SpiMasterInit+0x72>
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	0a 94       	dec	r0
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <SpiMasterInit+0x6e>
 5d0:	24 2b       	or	r18, r20
 5d2:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 5d4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spcr>
 5d8:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spcr+0x1>
 5dc:	40 81       	ld	r20, Z
 5de:	9c 01       	movw	r18, r24
 5e0:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_MasterSlaveSelect>
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <SpiMasterInit+0x90>
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <SpiMasterInit+0x8c>
 5ee:	24 2b       	or	r18, r20
 5f0:	20 83       	st	Z, r18
 5f2:	40 81       	ld	r20, Z
 5f4:	9c 01       	movw	r18, r24
 5f6:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Spi_ClockRateBit0>
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <SpiMasterInit+0xa6>
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <SpiMasterInit+0xa2>
 604:	24 2b       	or	r18, r20
 606:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 608:	30 81       	ld	r19, Z
 60a:	ac 01       	movw	r20, r24
 60c:	00 90 32 01 	lds	r0, 0x0132	; 0x800132 <Spi_ClockRateBit1>
 610:	02 c0       	rjmp	.+4      	; 0x616 <SpiMasterInit+0xbc>
 612:	44 0f       	add	r20, r20
 614:	55 1f       	adc	r21, r21
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <SpiMasterInit+0xb8>
 61a:	24 2f       	mov	r18, r20
 61c:	20 95       	com	r18
 61e:	23 23       	and	r18, r19
 620:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 622:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spsr>
 626:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 62a:	20 81       	ld	r18, Z
 62c:	00 90 30 01 	lds	r0, 0x0130	; 0x800130 <Spi_DoubleClockRate>
 630:	02 c0       	rjmp	.+4      	; 0x636 <SpiMasterInit+0xdc>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	0a 94       	dec	r0
 638:	e2 f7       	brpl	.-8      	; 0x632 <SpiMasterInit+0xd8>
 63a:	82 2b       	or	r24, r18
 63c:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 63e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EnableSpi>
 642:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EnableSpi+0x1>
 646:	09 95       	icall
    ClearPendingSpiInterrupt();
 648:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ClearPendingSpiInterrupt>
 64c:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ClearPendingSpiInterrupt+0x1>
 650:	09 94       	ijmp

00000652 <SendStatus_Implementation>:

uint8_t UsbWriteStatusOk(bridge_cmd_key   cmd_done_by_bridge)
{
    uint8_t const StatusOk[] = { 0x00, cmd_done_by_bridge};
    return UsbWrite(StatusOk,2);
}
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	1f 92       	push	r1
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 662:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	09 95       	icall
 670:	0f 90       	pop	r0
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret

00000678 <SetBridgeLED>:
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	00 d0       	rcall	.+0      	; 0x682 <SetBridgeLED+0xa>
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadN>
 68a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadN+0x1>
 68e:	62 e0       	ldi	r22, 0x02	; 2
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	ce 01       	movw	r24, r28
 694:	01 96       	adiw	r24, 0x01	; 1
 696:	09 95       	icall
 698:	99 81       	ldd	r25, Y+1	; 0x01
 69a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 69e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 6a2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 6a6:	98 17       	cp	r25, r24
 6a8:	71 f0       	breq	.+28     	; 0x6c6 <SetBridgeLED+0x4e>
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	09 95       	icall
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	08 95       	ret
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	09 95       	icall
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	88 23       	and	r24, r24
 6ce:	e9 f0       	breq	.+58     	; 0x70a <SetBridgeLED+0x92>
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	a9 f1       	breq	.+106    	; 0x73e <SetBridgeLED+0xc6>
 6d4:	82 30       	cpi	r24, 0x02	; 2
 6d6:	81 f7       	brne	.-32     	; 0x6b8 <SetBridgeLED+0x40>
 6d8:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 6dc:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 6e0:	20 81       	ld	r18, Z
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <SetBridgeLED+0x78>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <SetBridgeLED+0x74>
 6f4:	92 2f       	mov	r25, r18
 6f6:	98 2b       	or	r25, r24
 6f8:	90 83       	st	Z, r25
 6fa:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <BiColorLed_ddr>
 6fe:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <BiColorLed_ddr+0x1>
 702:	90 81       	ld	r25, Z
 704:	89 2b       	or	r24, r25
 706:	80 83       	st	Z, r24
 708:	d2 cf       	rjmp	.-92     	; 0x6ae <SetBridgeLED+0x36>
 70a:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <BiColorLed_ddr>
 70e:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <BiColorLed_ddr+0x1>
 712:	20 81       	ld	r18, Z
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 71c:	02 c0       	rjmp	.+4      	; 0x722 <SetBridgeLED+0xaa>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <SetBridgeLED+0xa6>
 726:	80 95       	com	r24
 728:	92 2f       	mov	r25, r18
 72a:	98 23       	and	r25, r24
 72c:	90 83       	st	Z, r25
 72e:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 732:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 736:	90 81       	ld	r25, Z
 738:	89 23       	and	r24, r25
 73a:	80 83       	st	Z, r24
 73c:	b8 cf       	rjmp	.-144    	; 0x6ae <SetBridgeLED+0x36>
 73e:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 742:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 746:	20 81       	ld	r18, Z
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 750:	02 c0       	rjmp	.+4      	; 0x756 <SetBridgeLED+0xde>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	0a 94       	dec	r0
 758:	e2 f7       	brpl	.-8      	; 0x752 <SetBridgeLED+0xda>
 75a:	98 2f       	mov	r25, r24
 75c:	90 95       	com	r25
 75e:	92 23       	and	r25, r18
 760:	cb cf       	rjmp	.-106    	; 0x6f8 <SetBridgeLED+0x80>

00000762 <GetBridgeLED>:
 762:	0f 93       	push	r16
 764:	1f 93       	push	r17
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	1f 92       	push	r1
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	ce 01       	movw	r24, r28
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	0e 94 46 02 	call	0x48c	; 0x48c <UsbReadBytes>
 77c:	99 81       	ldd	r25, Y+1	; 0x01
 77e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 782:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 786:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 78a:	98 17       	cp	r25, r24
 78c:	09 f4       	brne	.+2      	; 0x790 <GetBridgeLED+0x2e>
 78e:	48 c0       	rjmp	.+144    	; 0x820 <GetBridgeLED+0xbe>
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	09 95       	icall
 794:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <BiColorLed_ddr>
 798:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <BiColorLed_ddr+0x1>
 79c:	80 81       	ld	r24, Z
 79e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <status_led>
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 2e       	mov	r0, r18
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <GetBridgeLED+0x4a>
 7a8:	95 95       	asr	r25
 7aa:	87 95       	ror	r24
 7ac:	0a 94       	dec	r0
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <GetBridgeLED+0x46>
 7b0:	80 fd       	sbrc	r24, 0
 7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <GetBridgeLED+0x74>
 7b4:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 7b8:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	09 95       	icall
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	0f 90       	pop	r0
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret
 7d6:	80 81       	ld	r24, Z
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 2e       	mov	r0, r18
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <GetBridgeLED+0x80>
 7de:	95 95       	asr	r25
 7e0:	87 95       	ror	r24
 7e2:	0a 94       	dec	r0
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <GetBridgeLED+0x7c>
 7e6:	80 fd       	sbrc	r24, 0
 7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <GetBridgeLED+0x96>
 7ea:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 7ee:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	09 95       	icall
 7f6:	e4 cf       	rjmp	.-56     	; 0x7c0 <GetBridgeLED+0x5e>
 7f8:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 7fc:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 800:	80 81       	ld	r24, Z
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <GetBridgeLED+0xa8>
 806:	95 95       	asr	r25
 808:	87 95       	ror	r24
 80a:	2a 95       	dec	r18
 80c:	e2 f7       	brpl	.-8      	; 0x806 <GetBridgeLED+0xa4>
 80e:	80 ff       	sbrs	r24, 0
 810:	ec cf       	rjmp	.-40     	; 0x7ea <GetBridgeLED+0x88>
 812:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 816:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 81a:	82 e0       	ldi	r24, 0x02	; 2
 81c:	09 95       	icall
 81e:	d0 cf       	rjmp	.-96     	; 0x7c0 <GetBridgeLED+0x5e>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	09 95       	icall
 824:	0f 90       	pop	r0
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	1f 91       	pop	r17
 82c:	0f 91       	pop	r16
 82e:	08 95       	ret

00000830 <LookupBridgeCmd>:
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	48 f4       	brcc	.+18     	; 0x846 <LookupBridgeCmd+0x16>
 834:	e8 2f       	mov	r30, r24
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	ee 0f       	add	r30, r30
 83a:	ff 1f       	adc	r31, r31
 83c:	e4 5d       	subi	r30, 0xD4	; 212
 83e:	fe 4f       	sbci	r31, 0xFE	; 254
 840:	80 81       	ld	r24, Z
 842:	91 81       	ldd	r25, Z+1	; 0x01
 844:	08 95       	ret
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	08 95       	ret

0000084c <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	00 d0       	rcall	.+0      	; 0x852 <UsbWriteStatusInvalid+0x6>
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
 856:	9f ef       	ldi	r25, 0xFF	; 255
 858:	99 83       	std	Y+1, r25	; 0x01
 85a:	8a 83       	std	Y+2, r24	; 0x02
    return UsbWrite(StatusInvalid,2);
 85c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 860:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 864:	62 e0       	ldi	r22, 0x02	; 2
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	ce 01       	movw	r24, r28
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	09 95       	icall
}
 86e:	0f 90       	pop	r0
 870:	0f 90       	pop	r0
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	08 95       	ret

00000878 <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	1f 92       	push	r1
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
 882:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 884:	0e 94 ad 02 	call	0x55a	; 0x55a <SpiMasterInit>
    UsbInit();
 888:	0e 94 1b 02 	call	0x436	; 0x436 <UsbInit>
 88c:	3d 9a       	sbi	0x07, 5	; 7
 88e:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	96 e0       	ldi	r25, 0x06	; 6
 894:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <nbytes_in_frame+0x1>
 898:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 89c:	ce 01       	movw	r24, r28
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	0e 94 1d 02 	call	0x43a	; 0x43a <UsbReadOneByte>
 8a4:	88 23       	and	r24, r24
 8a6:	d1 f3       	breq	.-12     	; 0x89c <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	0e 94 18 04 	call	0x830	; 0x830 <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 8ae:	00 97       	sbiw	r24, 0x00	; 0
 8b0:	19 f0       	breq	.+6      	; 0x8b8 <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 8b2:	fc 01       	movw	r30, r24
 8b4:	09 95       	icall
 8b6:	f2 cf       	rjmp	.-28     	; 0x89c <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 8b8:	89 81       	ldd	r24, Y+1	; 0x01
 8ba:	0e 94 26 04 	call	0x84c	; 0x84c <UsbWriteStatusInvalid>
 8be:	ee cf       	rjmp	.-36     	; 0x89c <main+0x24>

000008c0 <_exit>:
 8c0:	f8 94       	cli

000008c2 <__stop_program>:
 8c2:	ff cf       	rjmp	.-2      	; 0x8c2 <__stop_program>
