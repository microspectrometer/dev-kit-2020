
build/usb-bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00000808  0000089c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000623  00800158  00800158  000008f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061a7  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001572  00000000  00000000  00006e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002438  00000000  00000000  0000840d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a5c  00000000  00000000  0000a848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001771  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e65  00000000  00000000  0000ca15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  0001087a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 35       	cpi	r26, 0x58	; 88
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a8 e5       	ldi	r26, 0x58	; 88
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 37       	cpi	r26, 0x7B	; 123
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
  9e:	0c 94 02 04 	jmp	0x804	; 0x804 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FtSendCommand_Implementation>:
bool (*FtHasDataToRead)(void) = FtIsBusOk_Implementation;

static bool FtHasRoomToWrite_Implementation(void)
{
    return BitIsClear(FtMiosio_pin, FtMiosio0);
}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <FtActivateInterface>
  ae:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <FtActivateInterface+0x1>
  b2:	09 95       	icall
  b4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  b8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  bc:	09 95       	icall
  be:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
  c2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
  c6:	09 95       	icall
  c8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <FtOutputByte>
  cc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <FtOutputByte+0x1>
  d0:	8c 2f       	mov	r24, r28
  d2:	09 95       	icall
  d4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  d8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  dc:	cf 91       	pop	r28
  de:	09 94       	ijmp

000000e0 <FtBusTurnaround_Implementation>:
  e0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <FtLetSlaveDriveBus>
  e4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <FtLetSlaveDriveBus+0x1>
  e8:	09 95       	icall
  ea:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
  ee:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
  f2:	09 95       	icall
  f4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
  f8:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
  fc:	09 95       	icall
  fe:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 102:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 106:	09 94       	ijmp

00000108 <FtWrite_Implementation>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <FtLetMasterDriveBus>
 112:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <FtLetMasterDriveBus+0x1>
 116:	09 95       	icall
 118:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 11c:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 120:	09 95       	icall
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <FtWriteData>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <FtWriteData+0x1>
 12a:	88 81       	ld	r24, Y
 12c:	09 95       	icall
 12e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 132:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 136:	09 95       	icall
 138:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 13c:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	09 94       	ijmp

00000146 <FtActivateInterface_Implementation>:
 146:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 14a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Ss>
 158:	02 c0       	rjmp	.+4      	; 0x15e <FtActivateInterface_Implementation+0x18>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <FtActivateInterface_Implementation+0x14>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <FtDeactivateInterface_Implementation>:
 16a:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 16e:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 172:	20 81       	ld	r18, Z
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Ss>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <FtDeactivateInterface_Implementation+0x18>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <FtDeactivateInterface_Implementation+0x14>
 186:	82 2b       	or	r24, r18
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <FtPushData_Implementation>:
 18c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 190:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 194:	20 81       	ld	r18, Z
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Ft1248_Sck>
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <FtPushData_Implementation+0x18>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <FtPushData_Implementation+0x14>
 1a8:	82 2b       	or	r24, r18
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <FtPullData_Implementation>:
 1ae:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Ft1248_port>
 1b2:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Ft1248_port+0x1>
 1b6:	20 81       	ld	r18, Z
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Ft1248_Sck>
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <FtPullData_Implementation+0x18>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <FtPullData_Implementation+0x14>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <FtLetMasterDriveBus_Implementation>:
 1d2:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_ddr>
 1d6:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_ddr+0x1>
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret

000001e0 <FtLetSlaveDriveBus_Implementation>:
 1e0:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <FtMiosio_ddr>
 1e4:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <FtMiosio_ddr+0x1>
 1e8:	10 82       	st	Z, r1
 1ea:	08 95       	ret

000001ec <FtIsBusOk_Implementation>:
 1ec:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Ft1248_pin>
 1f0:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Ft1248_pin+0x1>
 1f4:	80 81       	ld	r24, Z
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <Ft1248_Miso>
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <FtIsBusOk_Implementation+0x16>
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <FtIsBusOk_Implementation+0x12>
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	82 27       	eor	r24, r18
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	08 95       	ret

00000212 <FtReadData_Implementation>:
bool (*FtHasRoomToWrite)(void) = FtHasRoomToWrite_Implementation;

static uint8_t FtReadData_Implementation(void)
{
    return *FtMiosio_pin;
 212:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <FtMiosio_pin>
 216:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <FtMiosio_pin+0x1>
 21a:	80 81       	ld	r24, Z
}
 21c:	08 95       	ret

0000021e <FtWriteData_Implementation>:
uint8_t (*FtReadData)(void) = FtReadData_Implementation;

static void FtWriteData_Implementation(uint8_t byte_to_write)
{
    *FtMiosio_port = byte_to_write;
 21e:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_port>
 222:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_port+0x1>
 226:	80 83       	st	Z, r24
 228:	08 95       	ret

0000022a <FtRead_Implementation>:
    return FtIsBusOk();
}
bool (*FtBusTurnaround)(void) = FtBusTurnaround_Implementation;

static bool FtRead_Implementation(uint8_t *read_buffer)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	8c 01       	movw	r16, r24
    FtPushData();                   // tells everyone to output to bus
 232:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <FtPushData>
 236:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <FtPushData+0x1>
 23a:	09 95       	icall
    FtPullData();                   // tells everyone to input from bus
 23c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <FtPullData>
 240:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <FtPullData+0x1>
 244:	09 95       	icall
    if (!FtIsBusOk()) return false; // buffer is empty
 246:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <FtIsBusOk>
 24a:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <FtIsBusOk+0x1>
 24e:	09 95       	icall
 250:	c8 2f       	mov	r28, r24
 252:	88 23       	and	r24, r24
 254:	39 f0       	breq	.+14     	; 0x264 <FtRead_Implementation+0x3a>
    *read_buffer = FtReadData();   // buffer is not empty, write to mem
 256:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <FtReadData>
 25a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <FtReadData+0x1>
 25e:	09 95       	icall
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
    return true;
}
 264:	8c 2f       	mov	r24, r28
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	08 95       	ret

0000026e <FtOutputByte_Implementation>:
 26e:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <FtMiosio_port>
 272:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <FtMiosio_port+0x1>
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <FtInit>:
//static uint8_t const FT1248Cmd_8BitWide_Write = 0x86;

//=====[ High-level API ]=====
#include "BiColorLed.h"
void FtInit(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
    FtSckLow();
    FtSsHigh();
}
void FtSetMisoAsInput(void)
{
    ClearBit(Ft1248_ddr, Ft1248_Miso);
 27e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Ft1248_ddr>
 282:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Ft1248_ddr+0x1>
{
    *port |= 1<<bit;
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 286:	40 81       	ld	r20, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c 01       	movw	r18, r24
 28e:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <Ft1248_Miso>
 292:	02 c0       	rjmp	.+4      	; 0x298 <FtInit+0x1e>
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <FtInit+0x1a>
 29c:	32 2f       	mov	r19, r18
 29e:	30 95       	com	r19
 2a0:	34 23       	and	r19, r20
 2a2:	30 83       	st	Z, r19
}
void FtEnablePullupOnMiso(void)
{
    SetBit(Ft1248_port, Ft1248_Miso);
 2a4:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <Ft1248_port>
 2a8:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <Ft1248_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2ac:	3c 91       	ld	r19, X
 2ae:	23 2b       	or	r18, r19
 2b0:	2c 93       	st	X, r18
}
void FtSetMiosioAsInputs(void)
{
    *FtMiosio_ddr = 0x00;
 2b2:	c0 91 4a 01 	lds	r28, 0x014A	; 0x80014a <FtMiosio_ddr>
 2b6:	d0 91 4b 01 	lds	r29, 0x014B	; 0x80014b <FtMiosio_ddr+0x1>
 2ba:	18 82       	st	Y, r1
}
void FtEnablePullupsOnMiosio(void)
{
    *FtMiosio_port = 0xFF;
 2bc:	c0 91 48 01 	lds	r28, 0x0148	; 0x800148 <FtMiosio_port>
 2c0:	d0 91 49 01 	lds	r29, 0x0149	; 0x800149 <FtMiosio_port+0x1>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	28 83       	st	Y, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 2c8:	4c 91       	ld	r20, X
 2ca:	9c 01       	movw	r18, r24
 2cc:	00 90 44 01 	lds	r0, 0x0144	; 0x800144 <Ft1248_Sck>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <FtInit+0x5c>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <FtInit+0x58>
 2da:	32 2f       	mov	r19, r18
 2dc:	30 95       	com	r19
 2de:	34 23       	and	r19, r20
 2e0:	3c 93       	st	X, r19
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 2e2:	30 81       	ld	r19, Z
 2e4:	23 2b       	or	r18, r19
 2e6:	20 83       	st	Z, r18
 2e8:	2c 91       	ld	r18, X
 2ea:	00 90 45 01 	lds	r0, 0x0145	; 0x800145 <Ft1248_Ss>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <FtInit+0x7a>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <FtInit+0x76>
 2f8:	92 2f       	mov	r25, r18
 2fa:	98 2b       	or	r25, r24
 2fc:	9c 93       	st	X, r25
 2fe:	90 81       	ld	r25, Z
 300:	89 2b       	or	r24, r25
 302:	80 83       	st	Z, r24
    FtEnablePullupOnMiso();
    FtSetMiosioAsInputs();
    FtEnablePullupsOnMiosio();
    FtSckLow();
    FtSsHigh();
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <UsbReadBytes_Implementation>:
        if (read_ok) num_bytes_read++;
        finished = (num_bytes_read >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_read;
}
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 318:	7b 01       	movw	r14, r22
 31a:	61 15       	cp	r22, r1
 31c:	71 05       	cpc	r23, r1
 31e:	79 f0       	breq	.+30     	; 0x33e <UsbReadBytes_Implementation+0x34>
 320:	8c 01       	movw	r16, r24
 322:	06 0f       	add	r16, r22
 324:	17 1f       	adc	r17, r23
 326:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 32a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 32e:	ce 01       	movw	r24, r28
 330:	09 95       	icall
 332:	88 23       	and	r24, r24
 334:	c1 f3       	breq	.-16     	; 0x326 <UsbReadBytes_Implementation+0x1c>
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	0c 17       	cp	r16, r28
 33a:	1d 07       	cpc	r17, r29
 33c:	a1 f7       	brne	.-24     	; 0x326 <UsbReadBytes_Implementation+0x1c>
 33e:	c7 01       	movw	r24, r14
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	ef 90       	pop	r14
 34c:	08 95       	ret

0000034e <UsbWrite_Implementation>:
    FtDeactivateInterface();
    return num_bytes_read;
}

static uint16_t UsbWrite_Implementation(uint8_t const *write_buffer, uint16_t nbytes)
{
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	8c 01       	movw	r16, r24
 35c:	7b 01       	movw	r14, r22
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
 35e:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 362:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 366:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <FtCmd_Write>
 36a:	09 95       	icall
    if (!FtBusTurnaround())
 36c:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 370:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 374:	09 95       	icall
 376:	88 23       	and	r24, r24
 378:	f1 f0       	breq	.+60     	; 0x3b6 <UsbWrite_Implementation+0x68>
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
 37e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <FtWrite>
 382:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <FtWrite+0x1>
 386:	c8 01       	movw	r24, r16
 388:	8c 0f       	add	r24, r28
 38a:	9d 1f       	adc	r25, r29
 38c:	09 95       	icall
        if (byte_sent) num_bytes_sent++;
 38e:	81 11       	cpse	r24, r1
 390:	0d c0       	rjmp	.+26     	; 0x3ac <UsbWrite_Implementation+0x5e>
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
 392:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 396:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 39a:	09 95       	icall
    return num_bytes_sent;
}
 39c:	ce 01       	movw	r24, r28
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	08 95       	ret
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
    {
        byte_sent = FtWrite(write_buffer++);
        if (byte_sent) num_bytes_sent++;
 3ac:	21 96       	adiw	r28, 0x01	; 1
        FtDeactivateInterface();
        return num_bytes_sent;
    }
    // TODO: rename `byte_sent` as `byte_sent_OK` or `byte_was_sent`
    bool byte_sent = true; bool finished = false;
    while (byte_sent && !finished)
 3ae:	ce 15       	cp	r28, r14
 3b0:	df 05       	cpc	r29, r15
 3b2:	28 f3       	brcs	.-54     	; 0x37e <UsbWrite_Implementation+0x30>
 3b4:	ee cf       	rjmp	.-36     	; 0x392 <UsbWrite_Implementation+0x44>
    uint16_t num_bytes_sent = 0;
    FtSendCommand(FtCmd_Write);
    if (!FtBusTurnaround())
    {
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 3b6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 3ba:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 3be:	09 95       	icall
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
        if (byte_sent) num_bytes_sent++;
        finished = (num_bytes_sent >= nbytes);
    }
    FtDeactivateInterface();
    return num_bytes_sent;
}
 3c4:	ce 01       	movw	r24, r28
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	08 95       	ret

000003d4 <UsbInit>:
// =====[status_led defined in BiColorLed-Hardware header]=====
extern uint8_t const status_led;

void UsbInit(void)
{
    FtInit();
 3d4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <FtInit>

000003d8 <UsbReadOneByte>:
}

uint8_t UsbReadOneByte(uint8_t *read_buffer)
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ec 01       	movw	r28, r24
    uint8_t num_bytes_read = 0;
    FtSendCommand(FtCmd_Read);
 3de:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <FtSendCommand>
 3e2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <FtSendCommand+0x1>
 3e6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <FtCmd_Read>
 3ea:	09 95       	icall
    bool has_data_to_read = FtBusTurnaround();
 3ec:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <FtBusTurnaround>
 3f0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <FtBusTurnaround+0x1>
 3f4:	09 95       	icall
    if (!has_data_to_read)
 3f6:	88 23       	and	r24, r24
 3f8:	79 f0       	breq	.+30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
        // Use this in place of checking if Ft_Miso is low in app.
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
        return num_bytes_read;
    }
    FtRead(read_buffer); num_bytes_read++;
 3fa:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <FtRead>
 3fe:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <FtRead+0x1>
 402:	ce 01       	movw	r24, r28
 404:	09 95       	icall
    FtDeactivateInterface();
 406:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 40a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 40e:	09 95       	icall
    return num_bytes_read;
 410:	81 e0       	ldi	r24, 0x01	; 1
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret
    {
        // sad path
        // No, not an error. Not a sad path.
        // Use this in place of checking if Ft_Miso is low in app.
        /* BiColorLedRed(status_led); */
        FtDeactivateInterface();
 418:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <FtDeactivateInterface>
 41c:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <FtDeactivateInterface+0x1>
 420:	09 95       	icall
        return num_bytes_read;
 422:	80 e0       	ldi	r24, 0x00	; 0
    }
    FtRead(read_buffer); num_bytes_read++;
    FtDeactivateInterface();
    return num_bytes_read;
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <ClearPendingSpiInterrupt_Implementation>:
void SpiClearFlagTransferIsDone(void)
{
    // Clear the Spi_Interrupt flag by
    // reading Spi_InterruptFlag while it is set
    // then reading SPDR
    *Spi_spdr;  // this serves as a throwaway access
 42a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <ReadSpiStatusRegister>
 42e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <ReadSpiStatusRegister+0x1>
 432:	09 95       	icall
 434:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <ReadSpiDataRegister>
 438:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <ReadSpiDataRegister+0x1>
 43c:	09 94       	ijmp

0000043e <ReadSpiStatusRegister_Implementation>:
 43e:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spsr>
 442:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spsr+0x1>
 446:	80 81       	ld	r24, Z
 448:	08 95       	ret

0000044a <EnableSpi_Implementation>:
 44a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spcr>
 44e:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spcr+0x1>
 452:	20 81       	ld	r18, Z
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	00 90 31 01 	lds	r0, 0x0131	; 0x800131 <Spi_Enable>
 45c:	02 c0       	rjmp	.+4      	; 0x462 <EnableSpi_Implementation+0x18>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <EnableSpi_Implementation+0x14>
 466:	82 2b       	or	r24, r18
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret

0000046c <SpiMasterCloseSpi_Implementation>:
 46c:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <Spi_port>
 470:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <Spi_port+0x1>
 474:	20 81       	ld	r18, Z
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_Ss>
 47e:	02 c0       	rjmp	.+4      	; 0x484 <SpiMasterCloseSpi_Implementation+0x18>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <SpiMasterCloseSpi_Implementation+0x14>
 488:	82 2b       	or	r24, r18
 48a:	80 83       	st	Z, r24
 48c:	08 95       	ret

0000048e <ReadSpiDataRegister_Implementation>:
 48e:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <Spi_spdr>
 492:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <Spi_spdr+0x1>
 496:	80 81       	ld	r24, Z
 498:	08 95       	ret

0000049a <SpiMasterInit>:
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
}
void SpiMasterInit(void)
{
    SlaveSelectIdleHigh();
 49a:	0e 94 36 02 	call	0x46c	; 0x46c <SpiMasterCloseSpi_Implementation>
// When the slave disables SPI to drive MISO, it needs this pin to go low.
//
/* TODO: rename this function to make it clear it is *only* for the SpiMaster. */
static void SetMisoAsPullupInput(void) // For SpiMaster only!
{
    ClearBit(Spi_ddr, Spi_Miso);    // make it an input
 49e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <Spi_ddr>
 4a2:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <Spi_ddr+0x1>
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 4a6:	40 81       	ld	r20, Z
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9c 01       	movw	r18, r24
 4ae:	00 90 36 01 	lds	r0, 0x0136	; 0x800136 <Spi_Miso>
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <SpiMasterInit+0x1e>
 4b4:	22 0f       	add	r18, r18
 4b6:	33 1f       	adc	r19, r19
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <SpiMasterInit+0x1a>
 4bc:	32 2f       	mov	r19, r18
 4be:	30 95       	com	r19
 4c0:	34 23       	and	r19, r20
 4c2:	30 83       	st	Z, r19
    SetBit(Spi_port, Spi_Miso);     // enable pull-up
 4c4:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <Spi_port>
 4c8:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <Spi_port+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 4cc:	3c 91       	ld	r19, X
 4ce:	23 2b       	or	r18, r19
 4d0:	2c 93       	st	X, r18
 4d2:	40 81       	ld	r20, Z
 4d4:	9c 01       	movw	r18, r24
 4d6:	00 90 38 01 	lds	r0, 0x0138	; 0x800138 <Spi_Ss>
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <SpiMasterInit+0x46>
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <SpiMasterInit+0x42>
 4e4:	24 2b       	or	r18, r20
 4e6:	20 83       	st	Z, r18
 4e8:	40 81       	ld	r20, Z
 4ea:	9c 01       	movw	r18, r24
 4ec:	00 90 37 01 	lds	r0, 0x0137	; 0x800137 <Spi_Mosi>
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <SpiMasterInit+0x5c>
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <SpiMasterInit+0x58>
 4fa:	24 2b       	or	r18, r20
 4fc:	20 83       	st	Z, r18
 4fe:	40 81       	ld	r20, Z
 500:	9c 01       	movw	r18, r24
 502:	00 90 35 01 	lds	r0, 0x0135	; 0x800135 <Spi_Sck>
 506:	02 c0       	rjmp	.+4      	; 0x50c <SpiMasterInit+0x72>
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <SpiMasterInit+0x6e>
 510:	24 2b       	or	r18, r20
 512:	20 83       	st	Z, r18
{
    SetBit(Spi_ddr, Spi_Sck);
}
static void MakeMeTheMaster(void)
{
    SetBit(Spi_spcr, Spi_MasterSlaveSelect);
 514:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <Spi_spcr>
 518:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <Spi_spcr+0x1>
 51c:	40 81       	ld	r20, Z
 51e:	9c 01       	movw	r18, r24
 520:	00 90 34 01 	lds	r0, 0x0134	; 0x800134 <Spi_MasterSlaveSelect>
 524:	02 c0       	rjmp	.+4      	; 0x52a <SpiMasterInit+0x90>
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	0a 94       	dec	r0
 52c:	e2 f7       	brpl	.-8      	; 0x526 <SpiMasterInit+0x8c>
 52e:	24 2b       	or	r18, r20
 530:	20 83       	st	Z, r18
 532:	40 81       	ld	r20, Z
 534:	9c 01       	movw	r18, r24
 536:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <Spi_ClockRateBit0>
 53a:	02 c0       	rjmp	.+4      	; 0x540 <SpiMasterInit+0xa6>
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	0a 94       	dec	r0
 542:	e2 f7       	brpl	.-8      	; 0x53c <SpiMasterInit+0xa2>
 544:	24 2b       	or	r18, r20
 546:	20 83       	st	Z, r18
}
inline void ClearBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port &= ~(1<<bit);
 548:	30 81       	ld	r19, Z
 54a:	ac 01       	movw	r20, r24
 54c:	00 90 32 01 	lds	r0, 0x0132	; 0x800132 <Spi_ClockRateBit1>
 550:	02 c0       	rjmp	.+4      	; 0x556 <SpiMasterInit+0xbc>
 552:	44 0f       	add	r20, r20
 554:	55 1f       	adc	r21, r21
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <SpiMasterInit+0xb8>
 55a:	24 2f       	mov	r18, r20
 55c:	20 95       	com	r18
 55e:	23 23       	and	r18, r19
 560:	20 83       	st	Z, r18
{
    // SPI master and slave are both an ATmega328P with a 10MHz oscillator.
    // Use SCK = fosc/8 = 1.25MHz.
    SetBit  (Spi_spcr, Spi_ClockRateBit0);
    ClearBit(Spi_spcr, Spi_ClockRateBit1);
    SetBit(Spi_spsr, Spi_DoubleClockRate);
 562:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Spi_spsr>
 566:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <Spi_spsr+0x1>
/* | 2019-03-04 WIP: inline version of ReadWriteBits | */
/* --------------------------------------------------- */

inline void SetBit(uint8_t volatile * const port, uint8_t const bit)
{
    *port |= 1<<bit;
 56a:	20 81       	ld	r18, Z
 56c:	00 90 30 01 	lds	r0, 0x0130	; 0x800130 <Spi_DoubleClockRate>
 570:	02 c0       	rjmp	.+4      	; 0x576 <SpiMasterInit+0xdc>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <SpiMasterInit+0xd8>
 57a:	82 2b       	or	r24, r18
 57c:	80 83       	st	Z, r24
    SetSlaveSelectAsOutput();  // pin-direction is user-defined
    SetMosiAsOutput();         // pin-direction is user-defined
    SetSckAsOutput();          // pin-direction is user-defined
    MakeMeTheMaster();
    SetClockRateToFoscDividedBy8();  // hardcode the SPI clock rate at 1.25MHz
    EnableSpi();
 57e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <EnableSpi>
 582:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <EnableSpi+0x1>
 586:	09 95       	icall
    ClearPendingSpiInterrupt();
 588:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <ClearPendingSpiInterrupt>
 58c:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <ClearPendingSpiInterrupt+0x1>
 590:	09 94       	ijmp

00000592 <SendStatus_Implementation>:

uint8_t UsbWriteStatusOk(bridge_cmd_key   cmd_done_by_bridge)
{
    uint8_t const StatusOk[] = { 0x00, cmd_done_by_bridge};
    return UsbWrite(StatusOk,2);
}
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	1f 92       	push	r1
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	89 83       	std	Y+1, r24	; 0x01
 59e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 5a2:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	ce 01       	movw	r24, r28
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	09 95       	icall
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <GetBridgeLED>:
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	1f 92       	push	r1
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 5ca:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	09 95       	icall
 5d8:	99 81       	ldd	r25, Y+1	; 0x01
 5da:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 5de:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 5e2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 5e6:	98 17       	cp	r25, r24
 5e8:	41 f0       	breq	.+16     	; 0x5fa <GetBridgeLED+0x42>
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	09 95       	icall
 5ee:	0f 90       	pop	r0
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	09 95       	icall
 5fe:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <BiColorLed_ddr>
 602:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <BiColorLed_ddr+0x1>
 606:	80 81       	ld	r24, Z
 608:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <status_led>
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 2e       	mov	r0, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <GetBridgeLED+0x5e>
 612:	95 95       	asr	r25
 614:	87 95       	ror	r24
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <GetBridgeLED+0x5a>
 61a:	80 fd       	sbrc	r24, 0
 61c:	11 c0       	rjmp	.+34     	; 0x640 <GetBridgeLED+0x88>
 61e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 622:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	09 95       	icall
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	0f 90       	pop	r0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	08 95       	ret
 640:	80 81       	ld	r24, Z
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	02 2e       	mov	r0, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <GetBridgeLED+0x94>
 648:	95 95       	asr	r25
 64a:	87 95       	ror	r24
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <GetBridgeLED+0x90>
 650:	80 ff       	sbrs	r24, 0
 652:	0d c0       	rjmp	.+26     	; 0x66e <GetBridgeLED+0xb6>
 654:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 658:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 65c:	80 81       	ld	r24, Z
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <GetBridgeLED+0xae>
 662:	95 95       	asr	r25
 664:	87 95       	ror	r24
 666:	2a 95       	dec	r18
 668:	e2 f7       	brpl	.-8      	; 0x662 <GetBridgeLED+0xaa>
 66a:	80 fd       	sbrc	r24, 0
 66c:	07 c0       	rjmp	.+14     	; 0x67c <GetBridgeLED+0xc4>
 66e:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 672:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	09 95       	icall
 67a:	d7 cf       	rjmp	.-82     	; 0x62a <GetBridgeLED+0x72>
 67c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 680:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	09 95       	icall
 688:	d0 cf       	rjmp	.-96     	; 0x62a <GetBridgeLED+0x72>

0000068a <SetBridgeLED>:
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	00 d0       	rcall	.+0      	; 0x694 <SetBridgeLED+0xa>
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <UsbReadBytes>
 69c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <UsbReadBytes+0x1>
 6a0:	62 e0       	ldi	r22, 0x02	; 2
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	09 95       	icall
 6aa:	99 81       	ldd	r25, Y+1	; 0x01
 6ac:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 6b0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <SendStatus>
 6b4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <SendStatus+0x1>
 6b8:	98 17       	cp	r25, r24
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <SetBridgeLED+0x4e>
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	09 95       	icall
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	09 95       	icall
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	88 23       	and	r24, r24
 6e0:	e9 f0       	breq	.+58     	; 0x71c <SetBridgeLED+0x92>
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	a9 f1       	breq	.+106    	; 0x750 <SetBridgeLED+0xc6>
 6e6:	82 30       	cpi	r24, 0x02	; 2
 6e8:	81 f7       	brne	.-32     	; 0x6ca <SetBridgeLED+0x40>
 6ea:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 6ee:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 6f2:	20 81       	ld	r18, Z
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <SetBridgeLED+0x78>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	0a 94       	dec	r0
 704:	e2 f7       	brpl	.-8      	; 0x6fe <SetBridgeLED+0x74>
 706:	92 2f       	mov	r25, r18
 708:	98 2b       	or	r25, r24
 70a:	90 83       	st	Z, r25
 70c:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <BiColorLed_ddr>
 710:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <BiColorLed_ddr+0x1>
 714:	90 81       	ld	r25, Z
 716:	89 2b       	or	r24, r25
 718:	80 83       	st	Z, r24
 71a:	d2 cf       	rjmp	.-92     	; 0x6c0 <SetBridgeLED+0x36>
 71c:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <BiColorLed_ddr>
 720:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <BiColorLed_ddr+0x1>
 724:	20 81       	ld	r18, Z
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 72e:	02 c0       	rjmp	.+4      	; 0x734 <SetBridgeLED+0xaa>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	0a 94       	dec	r0
 736:	e2 f7       	brpl	.-8      	; 0x730 <SetBridgeLED+0xa6>
 738:	80 95       	com	r24
 73a:	92 2f       	mov	r25, r18
 73c:	98 23       	and	r25, r24
 73e:	90 83       	st	Z, r25
 740:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 744:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 748:	90 81       	ld	r25, Z
 74a:	89 23       	and	r24, r25
 74c:	80 83       	st	Z, r24
 74e:	b8 cf       	rjmp	.-144    	; 0x6c0 <SetBridgeLED+0x36>
 750:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <BiColorLed_port>
 754:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <BiColorLed_port+0x1>
 758:	20 81       	ld	r18, Z
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	00 90 52 01 	lds	r0, 0x0152	; 0x800152 <status_led>
 762:	02 c0       	rjmp	.+4      	; 0x768 <SetBridgeLED+0xde>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <SetBridgeLED+0xda>
 76c:	98 2f       	mov	r25, r24
 76e:	90 95       	com	r25
 770:	92 23       	and	r25, r18
 772:	cb cf       	rjmp	.-106    	; 0x70a <SetBridgeLED+0x80>

00000774 <LookupBridgeCmd>:
 774:	82 30       	cpi	r24, 0x02	; 2
 776:	48 f4       	brcc	.+18     	; 0x78a <LookupBridgeCmd+0x16>
 778:	e8 2f       	mov	r30, r24
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	e4 5d       	subi	r30, 0xD4	; 212
 782:	fe 4f       	sbci	r31, 0xFE	; 254
 784:	80 81       	ld	r24, Z
 786:	91 81       	ldd	r25, Z+1	; 0x01
 788:	08 95       	ret
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	08 95       	ret

00000790 <UsbWriteStatusInvalid>:
uint8_t UsbWriteStatusInvalid(bridge_cmd_key invalid_cmd)
{
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	00 d0       	rcall	.+0      	; 0x796 <UsbWriteStatusInvalid+0x6>
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
    uint8_t const StatusInvalid[] = { 0xFF, invalid_cmd };
 79a:	9f ef       	ldi	r25, 0xFF	; 255
 79c:	99 83       	std	Y+1, r25	; 0x01
 79e:	8a 83       	std	Y+2, r24	; 0x02
    return UsbWrite(StatusInvalid,2);
 7a0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <UsbWrite>
 7a4:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <UsbWrite+0x1>
 7a8:	62 e0       	ldi	r22, 0x02	; 2
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	ce 01       	movw	r24, r28
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	09 95       	icall
}
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <main>:
} while (0)
#define DebugPinLow()  ClearBit(&PORTC, PC5)
#define DebugPinHigh() SetBit(&PORTC, PC5)

int main()
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	1f 92       	push	r1
 7c2:	cd b7       	in	r28, 0x3d	; 61
 7c4:	de b7       	in	r29, 0x3e	; 62
 7c6:	3b 9a       	sbi	0x07, 3	; 7
    /* =====[ Setup ]===== */
    /* SetupDebugLed(); */
    BiColorLedOn(status_led);
    SpiMasterInit();
 7c8:	0e 94 4d 02 	call	0x49a	; 0x49a <SpiMasterInit>
    UsbInit();
 7cc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <UsbInit>
 7d0:	3d 9a       	sbi	0x07, 5	; 7
 7d2:	45 9a       	sbi	0x08, 5	; 8
    DebugPinInit();
    nbytes_in_frame = sizeof_full_frame;
 7d4:	80 e2       	ldi	r24, 0x20	; 32
 7d6:	96 e0       	ldi	r25, 0x06	; 6
 7d8:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <nbytes_in_frame+0x1>
 7dc:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <nbytes_in_frame>
/* =====[ WIP ]===== */
void Bridge_data_flow_between_USB_Host_and_SpiSlave(void)
{
    bridge_cmd_key cmd;
    // Read USB buffer if there is any data to read.
    if (UsbReadOneByte(&cmd))
 7e0:	ce 01       	movw	r24, r28
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <UsbReadOneByte>
 7e8:	88 23       	and	r24, r24
 7ea:	d1 f3       	breq	.-12     	; 0x7e0 <main+0x24>
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	0e 94 ba 03 	call	0x774	; 0x774 <LookupBridgeCmd>
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 7f2:	00 97       	sbiw	r24, 0x00	; 0
 7f4:	19 f0       	breq	.+6      	; 0x7fc <main+0x40>
        /* Do command if it is valid. */
        else CmdFn();
 7f6:	fc 01       	movw	r30, r24
 7f8:	09 95       	icall
 7fa:	f2 cf       	rjmp	.-28     	; 0x7e0 <main+0x24>
    if (UsbReadOneByte(&cmd))
    {
        /* This first byte is *always* a command from the USB host. */
        BridgeCmd* CmdFn = LookupBridgeCmd(cmd);
        /* Tell UsbHost if the command is invalid. */
        if (CmdFn == NULL) UsbWriteStatusInvalid(cmd);
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	0e 94 c8 03 	call	0x790	; 0x790 <UsbWriteStatusInvalid>
 802:	ee cf       	rjmp	.-36     	; 0x7e0 <main+0x24>

00000804 <_exit>:
 804:	f8 94       	cli

00000806 <__stop_program>:
 806:	ff cf       	rjmp	.-2      	; 0x806 <__stop_program>
